[
    {
        "label": "*",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "InAppNotification",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "OllamaSettings",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "UserPreferences",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "dashboard.models",
        "description": "dashboard.models",
        "isExtraImport": true,
        "detail": "dashboard.models",
        "documentation": {}
    },
    {
        "label": "naturalday",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "naturaltime",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "recon_note.models",
        "description": "recon_note.models",
        "isExtraImport": true,
        "detail": "recon_note.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "recon_note.models",
        "description": "recon_note.models",
        "isExtraImport": true,
        "detail": "recon_note.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "recon_note.models",
        "description": "recon_note.models",
        "isExtraImport": true,
        "detail": "recon_note.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "recon_note.models",
        "description": "recon_note.models",
        "isExtraImport": true,
        "detail": "recon_note.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "create_inappnotification",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_hackerone_key_username",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "fmt_traceback",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_output_file_name",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_task_cache_key",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_traceback_path",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_open_ai_key",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "parse_llm_vulnerability_report",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "dump_custom_scan_engines",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "load_custom_scan_engines",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.common_func",
        "description": "reNgine.common_func",
        "isExtraImport": true,
        "detail": "reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "EngineType",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "EngineType",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "InstalledExternalTool",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "Proxy",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "EngineType",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "EngineType",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanEngine.models",
        "description": "scanEngine.models",
        "isExtraImport": true,
        "detail": "scanEngine.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "EndPoint",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "ScanActivity",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "ScanHistory",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "SubScan",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "EndPoint",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "IpAddress",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "EndPoint",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "Subdomain",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "Vulnerability",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "startScan.models",
        "description": "startScan.models",
        "isExtraImport": true,
        "detail": "startScan.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "Domain",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "Organization",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "Domain",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "Domain",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "Domain",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "targetApp.models",
        "description": "targetApp.models",
        "isExtraImport": true,
        "detail": "targetApp.models",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "PROJECT_LEVEL_NOTIFICATION",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "HACKERONE_ALLOWED_ASSET_TYPES",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ABORTED_TASK",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_SEVERITY_MAP",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "VULNERABILITY_DESCRIPTION_SYSTEM_MESSAGE",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OLLAMA_INSTANCE",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_STATUSES",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_REVERSE_SEVERITY_MAP",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ABORTED_TASK",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "SUCCESS_TASK",
        "importPath": "reNgine.definitions",
        "description": "reNgine.definitions",
        "isExtraImport": true,
        "detail": "reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "reNgine.celery",
        "description": "reNgine.celery",
        "isExtraImport": true,
        "detail": "reNgine.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "reNgine.celery",
        "description": "reNgine.celery",
        "isExtraImport": true,
        "detail": "reNgine.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "reNgine.celery",
        "description": "reNgine.celery",
        "isExtraImport": true,
        "detail": "reNgine.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "reNgine.celery",
        "description": "reNgine.celery",
        "isExtraImport": true,
        "detail": "reNgine.celery",
        "documentation": {}
    },
    {
        "label": "bulk_import_targets",
        "importPath": "reNgine.database_utils",
        "description": "reNgine.database_utils",
        "isExtraImport": true,
        "detail": "reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.database_utils",
        "description": "reNgine.database_utils",
        "isExtraImport": true,
        "detail": "reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "validators",
        "description": "validators",
        "detail": "validators",
        "documentation": {}
    },
    {
        "label": "ipaddress",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipaddress",
        "description": "ipaddress",
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "IPv4Network",
        "importPath": "ipaddress",
        "description": "ipaddress",
        "isExtraImport": true,
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "version",
        "importPath": "packaging",
        "description": "packaging",
        "isExtraImport": true,
        "detail": "packaging",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "HTTP_400_BAD_REQUEST",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_204_NO_CONTENT",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_202_ACCEPTED",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "run_command",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_discord_message",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_slack_message",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_lark_message",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_telegram_message",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "create_scan_activity",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "initiate_scan",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "run_command",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "run_command",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "sanitize_url",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_nmap_results",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_nmap_vuln_output",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_nmap_vulscan_output",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "dir_file_fuzz",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "fetch_url",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "http_crawl",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "initiate_scan",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "osint",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "port_scan",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "subdomain_discovery",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "vulnerability_scan",
        "importPath": "reNgine.tasks",
        "description": "reNgine.tasks",
        "isExtraImport": true,
        "detail": "reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.llm",
        "description": "reNgine.llm",
        "isExtraImport": true,
        "detail": "reNgine.llm",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.llm",
        "description": "reNgine.llm",
        "isExtraImport": true,
        "detail": "reNgine.llm",
        "documentation": {}
    },
    {
        "label": "is_safe_path",
        "importPath": "reNgine.utilities",
        "description": "reNgine.utilities",
        "isExtraImport": true,
        "detail": "reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "is_valid_url",
        "importPath": "reNgine.utilities",
        "description": "reNgine.utilities",
        "isExtraImport": true,
        "detail": "reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "RengineTaskFormatter",
        "importPath": "reNgine.utilities",
        "description": "reNgine.utilities",
        "isExtraImport": true,
        "detail": "reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.utilities",
        "description": "reNgine.utilities",
        "isExtraImport": true,
        "detail": "reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.utilities",
        "description": "reNgine.utilities",
        "isExtraImport": true,
        "detail": "reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "import_hackerone_programs_task",
        "importPath": "api.shared_api_tasks",
        "description": "api.shared_api_tasks",
        "isExtraImport": true,
        "detail": "api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "sync_bookmarked_programs_task",
        "importPath": "api.shared_api_tasks",
        "description": "api.shared_api_tasks",
        "isExtraImport": true,
        "detail": "api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "PasswordChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "user_logged_in",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "user_logged_out",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "TruncDay",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "assign_role",
        "importPath": "rolepermissions.roles",
        "description": "rolepermissions.roles",
        "isExtraImport": true,
        "detail": "rolepermissions.roles",
        "documentation": {}
    },
    {
        "label": "clear_roles",
        "importPath": "rolepermissions.roles",
        "description": "rolepermissions.roles",
        "isExtraImport": true,
        "detail": "rolepermissions.roles",
        "documentation": {}
    },
    {
        "label": "AbstractUserRole",
        "importPath": "rolepermissions.roles",
        "description": "rolepermissions.roles",
        "isExtraImport": true,
        "detail": "rolepermissions.roles",
        "documentation": {}
    },
    {
        "label": "has_permission_decorator",
        "importPath": "rolepermissions.decorators",
        "description": "rolepermissions.decorators",
        "isExtraImport": true,
        "detail": "rolepermissions.decorators",
        "documentation": {}
    },
    {
        "label": "has_permission_decorator",
        "importPath": "rolepermissions.decorators",
        "description": "rolepermissions.decorators",
        "isExtraImport": true,
        "detail": "rolepermissions.decorators",
        "documentation": {}
    },
    {
        "label": "has_permission_decorator",
        "importPath": "rolepermissions.decorators",
        "description": "rolepermissions.decorators",
        "isExtraImport": true,
        "detail": "rolepermissions.decorators",
        "documentation": {}
    },
    {
        "label": "has_permission_decorator",
        "importPath": "rolepermissions.decorators",
        "description": "rolepermissions.decorators",
        "isExtraImport": true,
        "detail": "rolepermissions.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "http",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "http",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "chord",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "group",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "group",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "celery.signals",
        "description": "celery.signals",
        "isExtraImport": true,
        "detail": "celery.signals",
        "documentation": {}
    },
    {
        "label": "get_task_logger",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "get_task_logger",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "get_task_logger",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "ColorFormatter",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "get_task_logger",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "get_task_logger",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "celery.worker.request",
        "description": "celery.worker.request",
        "isExtraImport": true,
        "detail": "celery.worker.request",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.settings",
        "description": "reNgine.settings",
        "isExtraImport": true,
        "detail": "reNgine.settings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.settings",
        "description": "reNgine.settings",
        "isExtraImport": true,
        "detail": "reNgine.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "importPath": "reNgine.settings",
        "description": "reNgine.settings",
        "isExtraImport": true,
        "detail": "reNgine.settings",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.settings",
        "description": "reNgine.settings",
        "isExtraImport": true,
        "detail": "reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "reNgine.settings",
        "description": "reNgine.settings",
        "isExtraImport": true,
        "detail": "reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "reNgine.settings",
        "description": "reNgine.settings",
        "isExtraImport": true,
        "detail": "reNgine.settings",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "colorsys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorsys",
        "description": "colorsys",
        "detail": "colorsys",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objs",
        "description": "plotly.graph_objs",
        "detail": "plotly.graph_objs",
        "documentation": {}
    },
    {
        "label": "to_image",
        "importPath": "plotly.io",
        "description": "plotly.io",
        "isExtraImport": true,
        "detail": "plotly.io",
        "documentation": {}
    },
    {
        "label": "whatportis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "whatportis",
        "description": "whatportis",
        "detail": "whatportis",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "humanize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "humanize",
        "description": "humanize",
        "detail": "humanize",
        "documentation": {}
    },
    {
        "label": "tldextract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tldextract",
        "description": "tldextract",
        "detail": "tldextract",
        "documentation": {}
    },
    {
        "label": "xmltodict",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xmltodict",
        "description": "xmltodict",
        "detail": "xmltodict",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "DiscordEmbed",
        "importPath": "discord_webhook",
        "description": "discord_webhook",
        "isExtraImport": true,
        "detail": "discord_webhook",
        "documentation": {}
    },
    {
        "label": "DiscordWebhook",
        "importPath": "discord_webhook",
        "description": "discord_webhook",
        "isExtraImport": true,
        "detail": "discord_webhook",
        "documentation": {}
    },
    {
        "label": "DottedDict",
        "importPath": "dotted_dict",
        "description": "dotted_dict",
        "isExtraImport": true,
        "detail": "dotted_dict",
        "documentation": {}
    },
    {
        "label": "DottedDict",
        "importPath": "dotted_dict",
        "description": "dotted_dict",
        "isExtraImport": true,
        "detail": "dotted_dict",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.common_serializers",
        "description": "reNgine.common_serializers",
        "isExtraImport": true,
        "detail": "reNgine.common_serializers",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "Ollama",
        "importPath": "langchain_community.llms",
        "description": "langchain_community.llms",
        "isExtraImport": true,
        "detail": "langchain_community.llms",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "first_run",
        "importPath": "reNgine.init",
        "description": "reNgine.init",
        "isExtraImport": true,
        "detail": "reNgine.init",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "SubdomainSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "allow_join_result",
        "importPath": "celery.result",
        "description": "celery.result",
        "isExtraImport": true,
        "detail": "celery.result",
        "documentation": {}
    },
    {
        "label": "CVESearch",
        "importPath": "pycvesearch",
        "description": "pycvesearch",
        "isExtraImport": true,
        "detail": "pycvesearch",
        "documentation": {}
    },
    {
        "label": "extract_metadata_from_google_search",
        "importPath": "metafinder.extractor",
        "description": "metafinder.extractor",
        "isExtraImport": true,
        "detail": "metafinder.extractor",
        "documentation": {}
    },
    {
        "label": "RengineTask",
        "importPath": "reNgine.celery_custom_task",
        "description": "reNgine.celery_custom_task",
        "isExtraImport": true,
        "detail": "reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "serve_protected_media",
        "importPath": "reNgine.views",
        "description": "reNgine.views",
        "isExtraImport": true,
        "detail": "reNgine.views",
        "documentation": {}
    },
    {
        "label": "get_current_task",
        "importPath": "celery._state",
        "description": "celery._state",
        "isExtraImport": true,
        "detail": "celery._state",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "AceWidget",
        "importPath": "django_ace",
        "description": "django_ace",
        "isExtraImport": true,
        "detail": "django_ace",
        "documentation": {}
    },
    {
        "label": "validate_short_name",
        "importPath": "reNgine.validators",
        "description": "reNgine.validators",
        "isExtraImport": true,
        "detail": "reNgine.validators",
        "documentation": {}
    },
    {
        "label": "validate_domain",
        "importPath": "reNgine.validators",
        "description": "reNgine.validators",
        "isExtraImport": true,
        "detail": "reNgine.validators",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanEngine.forms",
        "description": "scanEngine.forms",
        "isExtraImport": true,
        "detail": "scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "ConfigurationForm",
        "importPath": "scanEngine.forms",
        "description": "scanEngine.forms",
        "isExtraImport": true,
        "detail": "scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "django.contrib.postgres.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.postgres.fields",
        "description": "django.contrib.postgres.fields",
        "detail": "django.contrib.postgres.fields",
        "documentation": {}
    },
    {
        "label": "ArrayField",
        "importPath": "django.contrib.postgres.fields",
        "description": "django.contrib.postgres.fields",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.fields",
        "documentation": {}
    },
    {
        "label": "markdown",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "markdown",
        "description": "markdown",
        "detail": "markdown",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "weasyprint",
        "description": "weasyprint",
        "isExtraImport": true,
        "detail": "weasyprint",
        "documentation": {}
    },
    {
        "label": "CSS",
        "importPath": "weasyprint",
        "description": "weasyprint",
        "isExtraImport": true,
        "detail": "weasyprint",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "ClockedSchedule",
        "importPath": "django_celery_beat.models",
        "description": "django_celery_beat.models",
        "isExtraImport": true,
        "detail": "django_celery_beat.models",
        "documentation": {}
    },
    {
        "label": "IntervalSchedule",
        "importPath": "django_celery_beat.models",
        "description": "django_celery_beat.models",
        "isExtraImport": true,
        "detail": "django_celery_beat.models",
        "documentation": {}
    },
    {
        "label": "PeriodicTask",
        "importPath": "django_celery_beat.models",
        "description": "django_celery_beat.models",
        "isExtraImport": true,
        "detail": "django_celery_beat.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reNgine.charts",
        "description": "reNgine.charts",
        "isExtraImport": true,
        "detail": "reNgine.charts",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "targetApp.forms",
        "description": "targetApp.forms",
        "isExtraImport": true,
        "detail": "targetApp.forms",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "HackerOneProgramAttributesSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class HackerOneProgramAttributesSerializer(serializers.Serializer):\n\t\"\"\"\n\t\tSerializer for HackerOne Program\n\t\tIMP: THIS is not a model serializer, programs will not be stored in db\n\t\tdue to ever changing nature of programs, rather cache will be used on these serializers\n\t\"\"\"\n\thandle = serializers.CharField(required=False)\n\tname = serializers.CharField(required=False)\n\tcurrency = serializers.CharField(required=False)\n\tsubmission_state = serializers.CharField(required=False)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "HackerOneProgramSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class HackerOneProgramSerializer(serializers.Serializer):\n\tid = serializers.CharField()\n\ttype = serializers.CharField()\n\tattributes = HackerOneProgramAttributesSerializer()\nclass InAppNotificationSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = InAppNotification\n\t\tfields = [\n\t\t\t'id', \n\t\t\t'title', ",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "InAppNotificationSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class InAppNotificationSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = InAppNotification\n\t\tfields = [\n\t\t\t'id', \n\t\t\t'title', \n\t\t\t'description', \n\t\t\t'icon', \n\t\t\t'is_read', \n\t\t\t'created_at', ",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "SearchHistorySerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class SearchHistorySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = SearchHistory\n\t\tfields = ['query']\nclass DomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField()\n\torganization = serializers.SerializerMethodField()\n\tmost_recent_scan = serializers.SerializerMethodField()\n\tinsert_date = serializers.SerializerMethodField()\n\tinsert_date_humanized = serializers.SerializerMethodField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "DomainSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class DomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField()\n\torganization = serializers.SerializerMethodField()\n\tmost_recent_scan = serializers.SerializerMethodField()\n\tinsert_date = serializers.SerializerMethodField()\n\tinsert_date_humanized = serializers.SerializerMethodField()\n\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:\n\t\tmodel = Domain",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "SubScanResultSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class SubScanResultSerializer(serializers.ModelSerializer):\n\ttask = serializers.SerializerMethodField('get_task_name')\n\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'type',\n\t\t\t'subdomain_name',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "ReconNoteSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class ReconNoteSerializer(serializers.ModelSerializer):\n\tdomain_name = serializers.SerializerMethodField('get_domain_name')\n\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\tscan_started_time = serializers.SerializerMethodField('get_scan_started_time')\n\tclass Meta:\n\t\tmodel = TodoNote\n\t\tfields = '__all__'\n\tdef get_domain_name(self, note):\n\t\tif note.scan_history:\n\t\t\treturn note.scan_history.domain.name",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "OnlySubdomainNameSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class OnlySubdomainNameSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = ['name', 'id']\nclass SubScanSerializer(serializers.ModelSerializer):\n\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\ttime_taken = serializers.SerializerMethodField('get_total_time_taken')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\tengine = serializers.SerializerMethodField('get_engine_name')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "SubScanSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class SubScanSerializer(serializers.ModelSerializer):\n\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\ttime_taken = serializers.SerializerMethodField('get_total_time_taken')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = '__all__'\n\tdef get_subdomain_name(self, subscan):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "CommandSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class CommandSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Command\n\t\tfields = '__all__'\n\t\tdepth = 1\nclass ScanHistorySerializer(serializers.ModelSerializer):\n\tsubdomain_count = serializers.SerializerMethodField('get_subdomain_count')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tvulnerability_count = serializers.SerializerMethodField('get_vulnerability_count')\n\tcurrent_progress = serializers.SerializerMethodField('get_progress')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "ScanHistorySerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class ScanHistorySerializer(serializers.ModelSerializer):\n\tsubdomain_count = serializers.SerializerMethodField('get_subdomain_count')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tvulnerability_count = serializers.SerializerMethodField('get_vulnerability_count')\n\tcurrent_progress = serializers.SerializerMethodField('get_progress')\n\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "OrganizationSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class OrganizationSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Organization\n\t\tfields = '__all__'\nclass EngineSerializer(serializers.ModelSerializer):\n\ttasks = serializers.SerializerMethodField('get_tasks')\n\tdef get_tasks(self, instance):\n\t\treturn instance.tasks\n\tclass Meta:\n\t\tmodel = EngineType",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "EngineSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class EngineSerializer(serializers.ModelSerializer):\n\ttasks = serializers.SerializerMethodField('get_tasks')\n\tdef get_tasks(self, instance):\n\t\treturn instance.tasks\n\tclass Meta:\n\t\tmodel = EngineType\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'default_engine',\n\t\t\t'engine_name',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "OrganizationTargetsSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class OrganizationTargetsSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Domain\n\t\tfields = [\n\t\t\t'name'\n\t\t]\nclass VisualiseVulnerabilitySerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Vulnerability",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseVulnerabilitySerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseVulnerabilitySerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Vulnerability\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_description(self, vulnerability):\n\t\treturn vulnerability.name",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualisePortSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualisePortSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\ttitle = serializers.SerializerMethodField('get_title')\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'is_uncommon',\n\t\t\t'title',\n\t\t]",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseTechnologySerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseTechnologySerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = [\n\t\t\t'description'\n\t\t]\n\tdef get_description(self, tech):\n\t\treturn tech.name\nclass VisualiseIpSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseIpSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseIpSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children'\n\t\t]\n\tdef get_description(self, Ip):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseEndpointSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseEndpointSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_description(self, endpoint):\n\t\treturn endpoint.http_url",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseSubdomainSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseSubdomainSerializer(serializers.ModelSerializer):\n\tchildren = serializers.SerializerMethodField('get_children')\n\tdescription = serializers.SerializerMethodField('get_description')\n\ttitle = serializers.SerializerMethodField('get_title')\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children',\n\t\t\t'http_status',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseEmailSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseEmailSerializer(serializers.ModelSerializer):\n\ttitle = serializers.SerializerMethodField('get_title')\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Email\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'password',\n\t\t\t'title'\n\t\t]",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseDorkSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseDorkSerializer(serializers.ModelSerializer):\n\ttitle = serializers.SerializerMethodField('get_title')\n\tdescription = serializers.SerializerMethodField('get_description')\n\thttp_url = serializers.SerializerMethodField('get_http_url')\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = [\n\t\t\t'title',\n\t\t\t'description',\n\t\t\t'http_url'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseEmployeeSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseEmployeeSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Employee\n\t\tfields = [\n\t\t\t'description'\n\t\t]\n\tdef get_description(self, employee):\n\t\tif employee.designation:\n\t\t\treturn employee.name + '--' + employee.designation",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VisualiseDataSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VisualiseDataSerializer(serializers.ModelSerializer):\n\ttitle = serializers.ReadOnlyField(default='Target')\n\tdescription = serializers.SerializerMethodField('get_description')\n\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'title',\n\t\t\t'children',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "SubdomainChangesSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class SubdomainChangesSerializer(serializers.ModelSerializer):\n\tchange = serializers.SerializerMethodField('get_change')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_change(self, Subdomain):\n\t\treturn Subdomain.change\n\tdef get_is_interesting(self, Subdomain):\n\t\treturn (",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "EndPointChangesSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class EndPointChangesSerializer(serializers.ModelSerializer):\n\tchange = serializers.SerializerMethodField('get_change')\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = '__all__'\n\tdef get_change(self, EndPoint):\n\t\treturn EndPoint.change\nclass InterestingSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "InterestingSubdomainSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class InterestingSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = ['name']\nclass EmailSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Email\n\t\tfields = '__all__'\nclass DorkSerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "EmailSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class EmailSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Email\n\t\tfields = '__all__'\nclass DorkSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = '__all__'\nclass EmployeeSerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "DorkSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class DorkSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = '__all__'\nclass EmployeeSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Employee\n\t\tfields = '__all__'\nclass MetafinderDocumentSerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "EmployeeSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class EmployeeSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Employee\n\t\tfields = '__all__'\nclass MetafinderDocumentSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = '__all__'\n\t\tdepth = 1\nclass MetafinderUserSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "MetafinderDocumentSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class MetafinderDocumentSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = '__all__'\n\t\tdepth = 1\nclass MetafinderUserSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = ['author']\nclass InterestingEndPointSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "MetafinderUserSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class MetafinderUserSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = ['author']\nclass InterestingEndPointSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass TechnologyCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "InterestingEndPointSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class InterestingEndPointSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass TechnologyCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\tname = serializers.CharField()\nclass DorkCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\ttype = serializers.CharField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "TechnologyCountSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class TechnologyCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\tname = serializers.CharField()\nclass DorkCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\ttype = serializers.CharField()\nclass TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "DorkCountSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class DorkCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\ttype = serializers.CharField()\nclass TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = '__all__'\nclass PortSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Port",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "TechnologySerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = '__all__'\nclass PortSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = '__all__'\nclass IpSerializer(serializers.ModelSerializer):\n\tports = PortSerializer(many=True)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "PortSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class PortSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = '__all__'\nclass IpSerializer(serializers.ModelSerializer):\n\tports = PortSerializer(many=True)\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = '__all__'\nclass DirectoryFileSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "IpSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class IpSerializer(serializers.ModelSerializer):\n\tports = PortSerializer(many=True)\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = '__all__'\nclass DirectoryFileSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = DirectoryFile\n\t\tfields = '__all__'\nclass DirectoryScanSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "DirectoryFileSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class DirectoryFileSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = DirectoryFile\n\t\tfields = '__all__'\nclass DirectoryScanSerializer(serializers.ModelSerializer):\n\tscanned_date = serializers.SerializerMethodField()\n\tformatted_date_for_id = serializers.SerializerMethodField()\n\tdirectory_files = DirectoryFileSerializer(many=True)\n\tclass Meta:\n\t\tmodel = DirectoryScan",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "DirectoryScanSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class DirectoryScanSerializer(serializers.ModelSerializer):\n\tscanned_date = serializers.SerializerMethodField()\n\tformatted_date_for_id = serializers.SerializerMethodField()\n\tdirectory_files = DirectoryFileSerializer(many=True)\n\tclass Meta:\n\t\tmodel = DirectoryScan\n\t\tfields = '__all__'\n\tdef get_scanned_date(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_formatted_date_for_id(self, DirectoryScan):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "IpSubdomainSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class IpSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = ['name', 'ip_addresses']\n\t\tdepth = 1\nclass WafSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Waf\n\t\tfields = '__all__'\nclass SubdomainSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "WafSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class WafSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Waf\n\t\tfields = '__all__'\nclass SubdomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField('get_vuln_count')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tinfo_count = serializers.SerializerMethodField('get_info_count')\n\tlow_count = serializers.SerializerMethodField('get_low_count')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "SubdomainSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class SubdomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField('get_vuln_count')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tinfo_count = serializers.SerializerMethodField('get_info_count')\n\tlow_count = serializers.SerializerMethodField('get_low_count')\n\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "EndpointSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class EndpointSerializer(serializers.ModelSerializer):\n\ttechs = TechnologySerializer(many=True)\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = '__all__'\nclass EndpointOnlyURLsSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass VulnerabilitySerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "EndpointOnlyURLsSerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class EndpointOnlyURLsSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass VulnerabilitySerializer(serializers.ModelSerializer):\n\tdiscovered_date = serializers.SerializerMethodField()\n\tseverity = serializers.SerializerMethodField()\n\tdef get_discovered_date(self, Vulnerability):\n\t\treturn Vulnerability.discovered_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_severity(self, Vulnerability):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "VulnerabilitySerializer",
        "kind": 6,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "class VulnerabilitySerializer(serializers.ModelSerializer):\n\tdiscovered_date = serializers.SerializerMethodField()\n\tseverity = serializers.SerializerMethodField()\n\tdef get_discovered_date(self, Vulnerability):\n\t\treturn Vulnerability.discovered_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_severity(self, Vulnerability):\n\t\tif Vulnerability.severity == 0:\n\t\t\treturn \"Info\"\n\t\telif Vulnerability.severity == 1:\n\t\t\treturn \"Low\"",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\thandle",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\thandle = serializers.CharField(required=False)\n\tname = serializers.CharField(required=False)\n\tcurrency = serializers.CharField(required=False)\n\tsubmission_state = serializers.CharField(required=False)\n\ttriage_active = serializers.BooleanField(allow_null=True, required=False)\n\tstate = serializers.CharField(required=False)\n\tstarted_accepting_at = serializers.DateTimeField(required=False)\n\tbookmarked = serializers.BooleanField(required=False)\n\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tname = serializers.CharField(required=False)\n\tcurrency = serializers.CharField(required=False)\n\tsubmission_state = serializers.CharField(required=False)\n\ttriage_active = serializers.BooleanField(allow_null=True, required=False)\n\tstate = serializers.CharField(required=False)\n\tstarted_accepting_at = serializers.DateTimeField(required=False)\n\tbookmarked = serializers.BooleanField(required=False)\n\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tcurrency",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tcurrency = serializers.CharField(required=False)\n\tsubmission_state = serializers.CharField(required=False)\n\ttriage_active = serializers.BooleanField(allow_null=True, required=False)\n\tstate = serializers.CharField(required=False)\n\tstarted_accepting_at = serializers.DateTimeField(required=False)\n\tbookmarked = serializers.BooleanField(required=False)\n\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tsubmission_state",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tsubmission_state = serializers.CharField(required=False)\n\ttriage_active = serializers.BooleanField(allow_null=True, required=False)\n\tstate = serializers.CharField(required=False)\n\tstarted_accepting_at = serializers.DateTimeField(required=False)\n\tbookmarked = serializers.BooleanField(required=False)\n\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttriage_active",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttriage_active = serializers.BooleanField(allow_null=True, required=False)\n\tstate = serializers.CharField(required=False)\n\tstarted_accepting_at = serializers.DateTimeField(required=False)\n\tbookmarked = serializers.BooleanField(required=False)\n\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tstate",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tstate = serializers.CharField(required=False)\n\tstarted_accepting_at = serializers.DateTimeField(required=False)\n\tbookmarked = serializers.BooleanField(required=False)\n\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):\n\t\treturn {key: value for key, value in instance.items()}",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tstarted_accepting_at",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tstarted_accepting_at = serializers.DateTimeField(required=False)\n\tbookmarked = serializers.BooleanField(required=False)\n\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):\n\t\treturn {key: value for key, value in instance.items()}\nclass HackerOneProgramSerializer(serializers.Serializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tbookmarked",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tbookmarked = serializers.BooleanField(required=False)\n\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):\n\t\treturn {key: value for key, value in instance.items()}\nclass HackerOneProgramSerializer(serializers.Serializer):\n\tid = serializers.CharField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tallows_bounty_splitting",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tallows_bounty_splitting = serializers.BooleanField(required=False)\n\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):\n\t\treturn {key: value for key, value in instance.items()}\nclass HackerOneProgramSerializer(serializers.Serializer):\n\tid = serializers.CharField()\n\ttype = serializers.CharField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\toffers_bounties",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\toffers_bounties = serializers.BooleanField(required=False)\n\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):\n\t\treturn {key: value for key, value in instance.items()}\nclass HackerOneProgramSerializer(serializers.Serializer):\n\tid = serializers.CharField()\n\ttype = serializers.CharField()\n\tattributes = HackerOneProgramAttributesSerializer()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\topen_scope",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\topen_scope = serializers.BooleanField(allow_null=True, required=False)\n\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):\n\t\treturn {key: value for key, value in instance.items()}\nclass HackerOneProgramSerializer(serializers.Serializer):\n\tid = serializers.CharField()\n\ttype = serializers.CharField()\n\tattributes = HackerOneProgramAttributesSerializer()\nclass InAppNotificationSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tfast_payments",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tfast_payments = serializers.BooleanField(allow_null=True, required=False)\n\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):\n\t\treturn {key: value for key, value in instance.items()}\nclass HackerOneProgramSerializer(serializers.Serializer):\n\tid = serializers.CharField()\n\ttype = serializers.CharField()\n\tattributes = HackerOneProgramAttributesSerializer()\nclass InAppNotificationSerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tgold_standard_safe_harbor",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tgold_standard_safe_harbor = serializers.BooleanField(allow_null=True, required=False)\n\tdef to_representation(self, instance):\n\t\treturn {key: value for key, value in instance.items()}\nclass HackerOneProgramSerializer(serializers.Serializer):\n\tid = serializers.CharField()\n\ttype = serializers.CharField()\n\tattributes = HackerOneProgramAttributesSerializer()\nclass InAppNotificationSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = InAppNotification",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tid = serializers.CharField()\n\ttype = serializers.CharField()\n\tattributes = HackerOneProgramAttributesSerializer()\nclass InAppNotificationSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = InAppNotification\n\t\tfields = [\n\t\t\t'id', \n\t\t\t'title', \n\t\t\t'description', ",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttype",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttype = serializers.CharField()\n\tattributes = HackerOneProgramAttributesSerializer()\nclass InAppNotificationSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = InAppNotification\n\t\tfields = [\n\t\t\t'id', \n\t\t\t'title', \n\t\t\t'description', \n\t\t\t'icon', ",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tattributes",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tattributes = HackerOneProgramAttributesSerializer()\nclass InAppNotificationSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = InAppNotification\n\t\tfields = [\n\t\t\t'id', \n\t\t\t'title', \n\t\t\t'description', \n\t\t\t'icon', \n\t\t\t'is_read', ",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = InAppNotification\n\t\tfields = [\n\t\t\t'id', \n\t\t\t'title', \n\t\t\t'description', \n\t\t\t'icon', \n\t\t\t'is_read', \n\t\t\t'created_at', \n\t\t\t'notification_type', \n\t\t\t'status',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'id', \n\t\t\t'title', \n\t\t\t'description', \n\t\t\t'icon', \n\t\t\t'is_read', \n\t\t\t'created_at', \n\t\t\t'notification_type', \n\t\t\t'status',\n\t\t\t'redirect_link',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tread_only_fields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tread_only_fields = ['id', 'created_at']\n\tdef get_project_name(self, obj):\n\t\treturn obj.project.name if obj.project else None\nclass SearchHistorySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = SearchHistory\n\t\tfields = ['query']\nclass DomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField()\n\torganization = serializers.SerializerMethodField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = SearchHistory\n\t\tfields = ['query']\nclass DomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField()\n\torganization = serializers.SerializerMethodField()\n\tmost_recent_scan = serializers.SerializerMethodField()\n\tinsert_date = serializers.SerializerMethodField()\n\tinsert_date_humanized = serializers.SerializerMethodField()\n\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = ['query']\nclass DomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField()\n\torganization = serializers.SerializerMethodField()\n\tmost_recent_scan = serializers.SerializerMethodField()\n\tinsert_date = serializers.SerializerMethodField()\n\tinsert_date_humanized = serializers.SerializerMethodField()\n\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tvuln_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tvuln_count = serializers.SerializerMethodField()\n\torganization = serializers.SerializerMethodField()\n\tmost_recent_scan = serializers.SerializerMethodField()\n\tinsert_date = serializers.SerializerMethodField()\n\tinsert_date_humanized = serializers.SerializerMethodField()\n\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:\n\t\tmodel = Domain\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\torganization",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\torganization = serializers.SerializerMethodField()\n\tmost_recent_scan = serializers.SerializerMethodField()\n\tinsert_date = serializers.SerializerMethodField()\n\tinsert_date_humanized = serializers.SerializerMethodField()\n\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:\n\t\tmodel = Domain\n\t\tfields = '__all__'\n\t\tdepth = 2",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tmost_recent_scan",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tmost_recent_scan = serializers.SerializerMethodField()\n\tinsert_date = serializers.SerializerMethodField()\n\tinsert_date_humanized = serializers.SerializerMethodField()\n\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:\n\t\tmodel = Domain\n\t\tfields = '__all__'\n\t\tdepth = 2\n\tdef get_vuln_count(self, obj):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tinsert_date",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tinsert_date = serializers.SerializerMethodField()\n\tinsert_date_humanized = serializers.SerializerMethodField()\n\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:\n\t\tmodel = Domain\n\t\tfields = '__all__'\n\t\tdepth = 2\n\tdef get_vuln_count(self, obj):\n\t\ttry:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tinsert_date_humanized",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tinsert_date_humanized = serializers.SerializerMethodField()\n\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:\n\t\tmodel = Domain\n\t\tfields = '__all__'\n\t\tdepth = 2\n\tdef get_vuln_count(self, obj):\n\t\ttry:\n\t\t\treturn obj.vuln_count",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tstart_scan_date",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tstart_scan_date = serializers.SerializerMethodField()\n\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:\n\t\tmodel = Domain\n\t\tfields = '__all__'\n\t\tdepth = 2\n\tdef get_vuln_count(self, obj):\n\t\ttry:\n\t\t\treturn obj.vuln_count\n\t\texcept:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tstart_scan_date_humanized",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tstart_scan_date_humanized = serializers.SerializerMethodField()\n\tclass Meta:\n\t\tmodel = Domain\n\t\tfields = '__all__'\n\t\tdepth = 2\n\tdef get_vuln_count(self, obj):\n\t\ttry:\n\t\t\treturn obj.vuln_count\n\t\texcept:\n\t\t\treturn None",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Domain\n\t\tfields = '__all__'\n\t\tdepth = 2\n\tdef get_vuln_count(self, obj):\n\t\ttry:\n\t\t\treturn obj.vuln_count\n\t\texcept:\n\t\t\treturn None\n\tdef get_organization(self, obj):\n\t\tif Organization.objects.filter(domains__id=obj.id).exists():",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\t\tdepth = 2\n\tdef get_vuln_count(self, obj):\n\t\ttry:\n\t\t\treturn obj.vuln_count\n\t\texcept:\n\t\t\treturn None\n\tdef get_organization(self, obj):\n\t\tif Organization.objects.filter(domains__id=obj.id).exists():\n\t\t\treturn [org.name for org in Organization.objects.filter(domains__id=obj.id)]",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tdepth",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tdepth = 2\n\tdef get_vuln_count(self, obj):\n\t\ttry:\n\t\t\treturn obj.vuln_count\n\t\texcept:\n\t\t\treturn None\n\tdef get_organization(self, obj):\n\t\tif Organization.objects.filter(domains__id=obj.id).exists():\n\t\t\treturn [org.name for org in Organization.objects.filter(domains__id=obj.id)]\n\tdef get_most_recent_scan(self, obj):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttask",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttask = serializers.SerializerMethodField('get_task_name')\n\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'type',\n\t\t\t'subdomain_name',\n\t\t\t'start_scan_date',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_name",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'type',\n\t\t\t'subdomain_name',\n\t\t\t'start_scan_date',\n\t\t\t'stop_scan_date',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tengine",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'type',\n\t\t\t'subdomain_name',\n\t\t\t'start_scan_date',\n\t\t\t'stop_scan_date',\n\t\t\t'scan_history',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = SubScan\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'type',\n\t\t\t'subdomain_name',\n\t\t\t'start_scan_date',\n\t\t\t'stop_scan_date',\n\t\t\t'scan_history',\n\t\t\t'subdomain',\n\t\t\t'celery_ids',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'id',\n\t\t\t'type',\n\t\t\t'subdomain_name',\n\t\t\t'start_scan_date',\n\t\t\t'stop_scan_date',\n\t\t\t'scan_history',\n\t\t\t'subdomain',\n\t\t\t'celery_ids',\n\t\t\t'status',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdomain_name",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdomain_name = serializers.SerializerMethodField('get_domain_name')\n\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\tscan_started_time = serializers.SerializerMethodField('get_scan_started_time')\n\tclass Meta:\n\t\tmodel = TodoNote\n\t\tfields = '__all__'\n\tdef get_domain_name(self, note):\n\t\tif note.scan_history:\n\t\t\treturn note.scan_history.domain.name\n\tdef get_subdomain_name(self, note):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_name",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\tscan_started_time = serializers.SerializerMethodField('get_scan_started_time')\n\tclass Meta:\n\t\tmodel = TodoNote\n\t\tfields = '__all__'\n\tdef get_domain_name(self, note):\n\t\tif note.scan_history:\n\t\t\treturn note.scan_history.domain.name\n\tdef get_subdomain_name(self, note):\n\t\tif note.subdomain:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tscan_started_time",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tscan_started_time = serializers.SerializerMethodField('get_scan_started_time')\n\tclass Meta:\n\t\tmodel = TodoNote\n\t\tfields = '__all__'\n\tdef get_domain_name(self, note):\n\t\tif note.scan_history:\n\t\t\treturn note.scan_history.domain.name\n\tdef get_subdomain_name(self, note):\n\t\tif note.subdomain:\n\t\t\treturn note.subdomain.name",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = TodoNote\n\t\tfields = '__all__'\n\tdef get_domain_name(self, note):\n\t\tif note.scan_history:\n\t\t\treturn note.scan_history.domain.name\n\tdef get_subdomain_name(self, note):\n\t\tif note.subdomain:\n\t\t\treturn note.subdomain.name\n\tdef get_scan_started_time(self, note):\n\t\tif note.scan_history:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\tdef get_domain_name(self, note):\n\t\tif note.scan_history:\n\t\t\treturn note.scan_history.domain.name\n\tdef get_subdomain_name(self, note):\n\t\tif note.subdomain:\n\t\t\treturn note.subdomain.name\n\tdef get_scan_started_time(self, note):\n\t\tif note.scan_history:\n\t\t\treturn note.scan_history.start_scan_date",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Subdomain\n\t\tfields = ['name', 'id']\nclass SubScanSerializer(serializers.ModelSerializer):\n\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\ttime_taken = serializers.SerializerMethodField('get_total_time_taken')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = ['name', 'id']\nclass SubScanSerializer(serializers.ModelSerializer):\n\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\ttime_taken = serializers.SerializerMethodField('get_total_time_taken')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_name",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tsubdomain_name = serializers.SerializerMethodField('get_subdomain_name')\n\ttime_taken = serializers.SerializerMethodField('get_total_time_taken')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = '__all__'\n\tdef get_subdomain_name(self, subscan):\n\t\treturn subscan.subdomain.name",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttime_taken",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttime_taken = serializers.SerializerMethodField('get_total_time_taken')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = '__all__'\n\tdef get_subdomain_name(self, subscan):\n\t\treturn subscan.subdomain.name\n\tdef get_total_time_taken(self, subscan):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\telapsed_time",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = '__all__'\n\tdef get_subdomain_name(self, subscan):\n\t\treturn subscan.subdomain.name\n\tdef get_total_time_taken(self, subscan):\n\t\treturn subscan.get_total_time_taken()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tcompleted_ago",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = '__all__'\n\tdef get_subdomain_name(self, subscan):\n\t\treturn subscan.subdomain.name\n\tdef get_total_time_taken(self, subscan):\n\t\treturn subscan.get_total_time_taken()\n\tdef get_elapsed_time(self, subscan):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tengine",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tengine = serializers.SerializerMethodField('get_engine_name')\n\tclass Meta:\n\t\tmodel = SubScan\n\t\tfields = '__all__'\n\tdef get_subdomain_name(self, subscan):\n\t\treturn subscan.subdomain.name\n\tdef get_total_time_taken(self, subscan):\n\t\treturn subscan.get_total_time_taken()\n\tdef get_elapsed_time(self, subscan):\n\t\treturn subscan.get_elapsed_time()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = SubScan\n\t\tfields = '__all__'\n\tdef get_subdomain_name(self, subscan):\n\t\treturn subscan.subdomain.name\n\tdef get_total_time_taken(self, subscan):\n\t\treturn subscan.get_total_time_taken()\n\tdef get_elapsed_time(self, subscan):\n\t\treturn subscan.get_elapsed_time()\n\tdef get_completed_ago(self, subscan):\n\t\treturn subscan.get_completed_ago()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\tdef get_subdomain_name(self, subscan):\n\t\treturn subscan.subdomain.name\n\tdef get_total_time_taken(self, subscan):\n\t\treturn subscan.get_total_time_taken()\n\tdef get_elapsed_time(self, subscan):\n\t\treturn subscan.get_elapsed_time()\n\tdef get_completed_ago(self, subscan):\n\t\treturn subscan.get_completed_ago()\n\tdef get_engine_name(self, subscan):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Command\n\t\tfields = '__all__'\n\t\tdepth = 1\nclass ScanHistorySerializer(serializers.ModelSerializer):\n\tsubdomain_count = serializers.SerializerMethodField('get_subdomain_count')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tvulnerability_count = serializers.SerializerMethodField('get_vulnerability_count')\n\tcurrent_progress = serializers.SerializerMethodField('get_progress')\n\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\t\tdepth = 1\nclass ScanHistorySerializer(serializers.ModelSerializer):\n\tsubdomain_count = serializers.SerializerMethodField('get_subdomain_count')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tvulnerability_count = serializers.SerializerMethodField('get_vulnerability_count')\n\tcurrent_progress = serializers.SerializerMethodField('get_progress')\n\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tdepth",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tdepth = 1\nclass ScanHistorySerializer(serializers.ModelSerializer):\n\tsubdomain_count = serializers.SerializerMethodField('get_subdomain_count')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tvulnerability_count = serializers.SerializerMethodField('get_vulnerability_count')\n\tcurrent_progress = serializers.SerializerMethodField('get_progress')\n\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tsubdomain_count = serializers.SerializerMethodField('get_subdomain_count')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tvulnerability_count = serializers.SerializerMethodField('get_vulnerability_count')\n\tcurrent_progress = serializers.SerializerMethodField('get_progress')\n\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:\n\t\tmodel = ScanHistory",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tendpoint_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tvulnerability_count = serializers.SerializerMethodField('get_vulnerability_count')\n\tcurrent_progress = serializers.SerializerMethodField('get_progress')\n\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tvulnerability_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tvulnerability_count = serializers.SerializerMethodField('get_vulnerability_count')\n\tcurrent_progress = serializers.SerializerMethodField('get_progress')\n\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'id',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tcurrent_progress",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tcurrent_progress = serializers.SerializerMethodField('get_progress')\n\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'subdomain_count',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tcompleted_time",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tcompleted_time = serializers.SerializerMethodField('get_total_scan_time_in_sec')\n\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'subdomain_count',\n\t\t\t'endpoint_count',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\telapsed_time",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\telapsed_time = serializers.SerializerMethodField('get_elapsed_time')\n\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'subdomain_count',\n\t\t\t'endpoint_count',\n\t\t\t'vulnerability_count',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tcompleted_ago",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tcompleted_ago = serializers.SerializerMethodField('get_completed_ago')\n\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'subdomain_count',\n\t\t\t'endpoint_count',\n\t\t\t'vulnerability_count',\n\t\t\t'current_progress',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\torganizations",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\torganizations = serializers.SerializerMethodField('get_organizations')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'subdomain_count',\n\t\t\t'endpoint_count',\n\t\t\t'vulnerability_count',\n\t\t\t'current_progress',\n\t\t\t'completed_time',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'subdomain_count',\n\t\t\t'endpoint_count',\n\t\t\t'vulnerability_count',\n\t\t\t'current_progress',\n\t\t\t'completed_time',\n\t\t\t'elapsed_time',\n\t\t\t'completed_ago',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'id',\n\t\t\t'subdomain_count',\n\t\t\t'endpoint_count',\n\t\t\t'vulnerability_count',\n\t\t\t'current_progress',\n\t\t\t'completed_time',\n\t\t\t'elapsed_time',\n\t\t\t'completed_ago',\n\t\t\t'organizations',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tdepth",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tdepth = 1\n\tdef get_subdomain_count(self, scan_history):\n\t\tif scan_history.get_subdomain_count:\n\t\t\treturn scan_history.get_subdomain_count()\n\tdef get_endpoint_count(self, scan_history):\n\t\tif scan_history.get_endpoint_count:\n\t\t\treturn scan_history.get_endpoint_count()\n\tdef get_vulnerability_count(self, scan_history):\n\t\tif scan_history.get_vulnerability_count:\n\t\t\treturn scan_history.get_vulnerability_count()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Organization\n\t\tfields = '__all__'\nclass EngineSerializer(serializers.ModelSerializer):\n\ttasks = serializers.SerializerMethodField('get_tasks')\n\tdef get_tasks(self, instance):\n\t\treturn instance.tasks\n\tclass Meta:\n\t\tmodel = EngineType\n\t\tfields = [\n\t\t\t'id',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass EngineSerializer(serializers.ModelSerializer):\n\ttasks = serializers.SerializerMethodField('get_tasks')\n\tdef get_tasks(self, instance):\n\t\treturn instance.tasks\n\tclass Meta:\n\t\tmodel = EngineType\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'default_engine',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttasks",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttasks = serializers.SerializerMethodField('get_tasks')\n\tdef get_tasks(self, instance):\n\t\treturn instance.tasks\n\tclass Meta:\n\t\tmodel = EngineType\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'default_engine',\n\t\t\t'engine_name',\n\t\t\t'yaml_configuration',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = EngineType\n\t\tfields = [\n\t\t\t'id',\n\t\t\t'default_engine',\n\t\t\t'engine_name',\n\t\t\t'yaml_configuration',\n\t\t\t'tasks'\n\t\t]\nclass OrganizationTargetsSerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'id',\n\t\t\t'default_engine',\n\t\t\t'engine_name',\n\t\t\t'yaml_configuration',\n\t\t\t'tasks'\n\t\t]\nclass OrganizationTargetsSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Domain",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Domain\n\t\tfields = [\n\t\t\t'name'\n\t\t]\nclass VisualiseVulnerabilitySerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Vulnerability\n\t\tfields = [\n\t\t\t'description',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'name'\n\t\t]\nclass VisualiseVulnerabilitySerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Vulnerability\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Vulnerability\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_description(self, vulnerability):\n\t\treturn vulnerability.name\nclass VisualisePortSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Vulnerability\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_description(self, vulnerability):\n\t\treturn vulnerability.name\nclass VisualisePortSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\ttitle = serializers.SerializerMethodField('get_title')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_description(self, vulnerability):\n\t\treturn vulnerability.name\nclass VisualisePortSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\ttitle = serializers.SerializerMethodField('get_title')\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\ttitle = serializers.SerializerMethodField('get_title')\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'is_uncommon',\n\t\t\t'title',\n\t\t]\n\tdef get_description(self, port):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttitle = serializers.SerializerMethodField('get_title')\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'is_uncommon',\n\t\t\t'title',\n\t\t]\n\tdef get_description(self, port):\n\t\treturn str(port.number) + \"/\" + str(port.service_name)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Port\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'is_uncommon',\n\t\t\t'title',\n\t\t]\n\tdef get_description(self, port):\n\t\treturn str(port.number) + \"/\" + str(port.service_name)\n\tdef get_title(self, port):\n\t\tif port.is_uncommon:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description',\n\t\t\t'is_uncommon',\n\t\t\t'title',\n\t\t]\n\tdef get_description(self, port):\n\t\treturn str(port.number) + \"/\" + str(port.service_name)\n\tdef get_title(self, port):\n\t\tif port.is_uncommon:\n\t\t\treturn \"Uncommon Port\"",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = [\n\t\t\t'description'\n\t\t]\n\tdef get_description(self, tech):\n\t\treturn tech.name\nclass VisualiseIpSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Technology\n\t\tfields = [\n\t\t\t'description'\n\t\t]\n\tdef get_description(self, tech):\n\t\treturn tech.name\nclass VisualiseIpSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description'\n\t\t]\n\tdef get_description(self, tech):\n\t\treturn tech.name\nclass VisualiseIpSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:\n\t\tmodel = IpAddress",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children'\n\t\t]\n\tdef get_description(self, Ip):\n\t\treturn Ip.address",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tchildren",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children'\n\t\t]\n\tdef get_description(self, Ip):\n\t\treturn Ip.address\n\tdef get_children(self, ip):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = IpAddress\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children'\n\t\t]\n\tdef get_description(self, Ip):\n\t\treturn Ip.address\n\tdef get_children(self, ip):\n\t\tport = Port.objects.filter(\n\t\t\tports__in=IpAddress.objects.filter(",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description',\n\t\t\t'children'\n\t\t]\n\tdef get_description(self, Ip):\n\t\treturn Ip.address\n\tdef get_children(self, ip):\n\t\tport = Port.objects.filter(\n\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\taddress=ip))",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tport",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tport = Port.objects.filter(\n\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\taddress=ip))\n\t\tserializer = VisualisePortSerializer(port, many=True)\n\t\treturn serializer.data\nclass VisualiseEndpointSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = [",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tserializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tserializer = VisualisePortSerializer(port, many=True)\n\t\treturn serializer.data\nclass VisualiseEndpointSerializer(serializers.ModelSerializer):\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_description(self, endpoint):\n\t\treturn endpoint.http_url\nclass VisualiseSubdomainSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = EndPoint\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_description(self, endpoint):\n\t\treturn endpoint.http_url\nclass VisualiseSubdomainSerializer(serializers.ModelSerializer):\n\tchildren = serializers.SerializerMethodField('get_children')\n\tdescription = serializers.SerializerMethodField('get_description')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_description(self, endpoint):\n\t\treturn endpoint.http_url\nclass VisualiseSubdomainSerializer(serializers.ModelSerializer):\n\tchildren = serializers.SerializerMethodField('get_children')\n\tdescription = serializers.SerializerMethodField('get_description')\n\ttitle = serializers.SerializerMethodField('get_title')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tchildren",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tchildren = serializers.SerializerMethodField('get_children')\n\tdescription = serializers.SerializerMethodField('get_description')\n\ttitle = serializers.SerializerMethodField('get_title')\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children',\n\t\t\t'http_status',\n\t\t\t'title',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\ttitle = serializers.SerializerMethodField('get_title')\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children',\n\t\t\t'http_status',\n\t\t\t'title',\n\t\t]",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttitle = serializers.SerializerMethodField('get_title')\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children',\n\t\t\t'http_status',\n\t\t\t'title',\n\t\t]\n\tdef get_description(self, subdomain):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Subdomain\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'children',\n\t\t\t'http_status',\n\t\t\t'title',\n\t\t]\n\tdef get_description(self, subdomain):\n\t\treturn subdomain.name\n\tdef get_title(self, subdomain):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description',\n\t\t\t'children',\n\t\t\t'http_status',\n\t\t\t'title',\n\t\t]\n\tdef get_description(self, subdomain):\n\t\treturn subdomain.name\n\tdef get_title(self, subdomain):\n\t\tif get_interesting_subdomains(subdomain.scan_history.id).filter(name=subdomain.name).exists():",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tscan_history = self.context.get('scan_history')\n\t\tsubdomains = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(scan_history=scan_history)\n\t\t\t.filter(name=subdomain_name)\n\t\t)\n\t\tips = IpAddress.objects.filter(ip_addresses__in=subdomains)\n\t\tip_serializer = VisualiseIpSerializer(ips, many=True)\n\t\t# endpoint = EndPoint.objects.filter(\n\t\t#     scan_history=self.context.get('scan_history')).filter(",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tsubdomains = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(scan_history=scan_history)\n\t\t\t.filter(name=subdomain_name)\n\t\t)\n\t\tips = IpAddress.objects.filter(ip_addresses__in=subdomains)\n\t\tip_serializer = VisualiseIpSerializer(ips, many=True)\n\t\t# endpoint = EndPoint.objects.filter(\n\t\t#     scan_history=self.context.get('scan_history')).filter(\n\t\t#     subdomain__name=subdomain_name)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tips",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tips = IpAddress.objects.filter(ip_addresses__in=subdomains)\n\t\tip_serializer = VisualiseIpSerializer(ips, many=True)\n\t\t# endpoint = EndPoint.objects.filter(\n\t\t#     scan_history=self.context.get('scan_history')).filter(\n\t\t#     subdomain__name=subdomain_name)\n\t\t# endpoint_serializer = VisualiseEndpointSerializer(endpoint, many=True)\n\t\ttechnologies = Technology.objects.filter(technologies__in=subdomains)\n\t\ttech_serializer = VisualiseTechnologySerializer(technologies, many=True)\n\t\tvulnerability = (\n\t\t\tVulnerability.objects",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tip_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tip_serializer = VisualiseIpSerializer(ips, many=True)\n\t\t# endpoint = EndPoint.objects.filter(\n\t\t#     scan_history=self.context.get('scan_history')).filter(\n\t\t#     subdomain__name=subdomain_name)\n\t\t# endpoint_serializer = VisualiseEndpointSerializer(endpoint, many=True)\n\t\ttechnologies = Technology.objects.filter(technologies__in=subdomains)\n\t\ttech_serializer = VisualiseTechnologySerializer(technologies, many=True)\n\t\tvulnerability = (\n\t\t\tVulnerability.objects\n\t\t\t.filter(scan_history=scan_history)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\ttechnologies",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\ttechnologies = Technology.objects.filter(technologies__in=subdomains)\n\t\ttech_serializer = VisualiseTechnologySerializer(technologies, many=True)\n\t\tvulnerability = (\n\t\t\tVulnerability.objects\n\t\t\t.filter(scan_history=scan_history)\n\t\t\t.filter(subdomain=subdomain_name)\n\t\t)\n\t\treturn_data = []\n\t\tif ip_serializer.data:\n\t\t\treturn_data.append({",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\ttech_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\ttech_serializer = VisualiseTechnologySerializer(technologies, many=True)\n\t\tvulnerability = (\n\t\t\tVulnerability.objects\n\t\t\t.filter(scan_history=scan_history)\n\t\t\t.filter(subdomain=subdomain_name)\n\t\t)\n\t\treturn_data = []\n\t\tif ip_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'IPs',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tvulnerability = (\n\t\t\tVulnerability.objects\n\t\t\t.filter(scan_history=scan_history)\n\t\t\t.filter(subdomain=subdomain_name)\n\t\t)\n\t\treturn_data = []\n\t\tif ip_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'IPs',\n\t\t\t\t'children': ip_serializer.data",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\treturn_data",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\treturn_data = []\n\t\tif ip_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'IPs',\n\t\t\t\t'children': ip_serializer.data\n\t\t\t})\n\t\t# if endpoint_serializer.data:\n\t\t#     return_data.append({\n\t\t#         'description': 'Endpoints',\n\t\t#         'children': endpoint_serializer.data",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\tvulnerability_data",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\tvulnerability_data = []\n\t\t\tcritical = vulnerability.filter(severity=4)\n\t\t\tif critical:\n\t\t\t\tcritical_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tcritical,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Critical',\n\t\t\t\t\t'children': critical_serializer.data",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\tcritical",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\tcritical = vulnerability.filter(severity=4)\n\t\t\tif critical:\n\t\t\t\tcritical_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tcritical,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Critical',\n\t\t\t\t\t'children': critical_serializer.data\n\t\t\t\t})",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcritical_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tcritical_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tcritical,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Critical',\n\t\t\t\t\t'children': critical_serializer.data\n\t\t\t\t})\n\t\t\thigh = vulnerability.filter(severity=3)\n\t\t\tif high:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\thigh",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\thigh = vulnerability.filter(severity=3)\n\t\t\tif high:\n\t\t\t\thigh_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\thigh,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'High',\n\t\t\t\t\t'children': high_serializer.data\n\t\t\t\t})",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\thigh_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\thigh_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\thigh,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'High',\n\t\t\t\t\t'children': high_serializer.data\n\t\t\t\t})\n\t\t\tmedium = vulnerability.filter(severity=2)\n\t\t\tif medium:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\tmedium",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\tmedium = vulnerability.filter(severity=2)\n\t\t\tif medium:\n\t\t\t\tmedium_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tmedium,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Medium',\n\t\t\t\t\t'children': medium_serializer.data\n\t\t\t\t})",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmedium_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tmedium_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tmedium,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Medium',\n\t\t\t\t\t'children': medium_serializer.data\n\t\t\t\t})\n\t\t\tlow = vulnerability.filter(severity=1)\n\t\t\tif low:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\tlow",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\tlow = vulnerability.filter(severity=1)\n\t\t\tif low:\n\t\t\t\tlow_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tlow,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Low',\n\t\t\t\t\t'children': low_serializer.data\n\t\t\t\t})",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tlow_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tlow_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tlow,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Low',\n\t\t\t\t\t'children': low_serializer.data\n\t\t\t\t})\n\t\t\tinfo = vulnerability.filter(severity=0)\n\t\t\tif info:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\tinfo",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\tinfo = vulnerability.filter(severity=0)\n\t\t\tif info:\n\t\t\t\tinfo_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tinfo,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Informational',\n\t\t\t\t\t'children': info_serializer.data\n\t\t\t\t})",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tinfo_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tinfo_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tinfo,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Informational',\n\t\t\t\t\t'children': info_serializer.data\n\t\t\t\t})\n\t\t\tuknown = vulnerability.filter(severity=-1)\n\t\t\tif uknown:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\tuknown",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\tuknown = vulnerability.filter(severity=-1)\n\t\t\tif uknown:\n\t\t\t\tuknown_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tuknown,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Unknown',\n\t\t\t\t\t'children': uknown_serializer.data\n\t\t\t\t})",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tuknown_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tuknown_serializer = VisualiseVulnerabilitySerializer(\n\t\t\t\t\tuknown,\n\t\t\t\t\tmany=True\n\t\t\t\t)\n\t\t\t\tvulnerability_data.append({\n\t\t\t\t\t'description': 'Unknown',\n\t\t\t\t\t'children': uknown_serializer.data\n\t\t\t\t})\n\t\t\tif vulnerability_data:\n\t\t\t\treturn_data.append({",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttitle = serializers.SerializerMethodField('get_title')\n\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Email\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'password',\n\t\t\t'title'\n\t\t]\n\tdef get_description(self, email):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Email\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'password',\n\t\t\t'title'\n\t\t]\n\tdef get_description(self, email):\n\t\tif email.password:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Email\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'password',\n\t\t\t'title'\n\t\t]\n\tdef get_description(self, email):\n\t\tif email.password:\n\t\t\treturn email.address + \" > \" + email.password\n\t\treturn email.address",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description',\n\t\t\t'password',\n\t\t\t'title'\n\t\t]\n\tdef get_description(self, email):\n\t\tif email.password:\n\t\t\treturn email.address + \" > \" + email.password\n\t\treturn email.address\n\tdef get_title(self, email):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttitle = serializers.SerializerMethodField('get_title')\n\tdescription = serializers.SerializerMethodField('get_description')\n\thttp_url = serializers.SerializerMethodField('get_http_url')\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = [\n\t\t\t'title',\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\thttp_url = serializers.SerializerMethodField('get_http_url')\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = [\n\t\t\t'title',\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_title(self, dork):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\thttp_url",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\thttp_url = serializers.SerializerMethodField('get_http_url')\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = [\n\t\t\t'title',\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_title(self, dork):\n\t\treturn dork.type",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Dork\n\t\tfields = [\n\t\t\t'title',\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_title(self, dork):\n\t\treturn dork.type\n\tdef get_description(self, dork):\n\t\treturn dork.type",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'title',\n\t\t\t'description',\n\t\t\t'http_url'\n\t\t]\n\tdef get_title(self, dork):\n\t\treturn dork.type\n\tdef get_description(self, dork):\n\t\treturn dork.type\n\tdef get_http_url(self, dork):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\tclass Meta:\n\t\tmodel = Employee\n\t\tfields = [\n\t\t\t'description'\n\t\t]\n\tdef get_description(self, employee):\n\t\tif employee.designation:\n\t\t\treturn employee.name + '--' + employee.designation\n\t\treturn employee.name",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Employee\n\t\tfields = [\n\t\t\t'description'\n\t\t]\n\tdef get_description(self, employee):\n\t\tif employee.designation:\n\t\t\treturn employee.name + '--' + employee.designation\n\t\treturn employee.name\nclass VisualiseDataSerializer(serializers.ModelSerializer):\n\ttitle = serializers.ReadOnlyField(default='Target')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description'\n\t\t]\n\tdef get_description(self, employee):\n\t\tif employee.designation:\n\t\t\treturn employee.name + '--' + employee.designation\n\t\treturn employee.name\nclass VisualiseDataSerializer(serializers.ModelSerializer):\n\ttitle = serializers.ReadOnlyField(default='Target')\n\tdescription = serializers.SerializerMethodField('get_description')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttitle = serializers.ReadOnlyField(default='Target')\n\tdescription = serializers.SerializerMethodField('get_description')\n\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'title',\n\t\t\t'children',\n\t\t]",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdescription = serializers.SerializerMethodField('get_description')\n\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'title',\n\t\t\t'children',\n\t\t]\n\tdef get_description(self, scan_history):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tchildren",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tchildren = serializers.SerializerMethodField('get_children')\n\tclass Meta:\n\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'title',\n\t\t\t'children',\n\t\t]\n\tdef get_description(self, scan_history):\n\t\treturn scan_history.domain.name",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = ScanHistory\n\t\tfields = [\n\t\t\t'description',\n\t\t\t'title',\n\t\t\t'children',\n\t\t]\n\tdef get_description(self, scan_history):\n\t\treturn scan_history.domain.name\n\tdef get_children(self, history):\n\t\tscan_history = ScanHistory.objects.filter(id=history.id)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = [\n\t\t\t'description',\n\t\t\t'title',\n\t\t\t'children',\n\t\t]\n\tdef get_description(self, scan_history):\n\t\treturn scan_history.domain.name\n\tdef get_children(self, history):\n\t\tscan_history = ScanHistory.objects.filter(id=history.id)\n\t\tsubdomain = Subdomain.objects.filter(scan_history=history)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tscan_history = ScanHistory.objects.filter(id=history.id)\n\t\tsubdomain = Subdomain.objects.filter(scan_history=history)\n\t\tsubdomain_serializer = VisualiseSubdomainSerializer(\n\t\t\tsubdomain,\n\t\t\tmany=True,\n\t\t\tcontext={'scan_history': history})\n\t\temail = Email.objects.filter(emails__in=scan_history)\n\t\temail_serializer = VisualiseEmailSerializer(email, many=True)\n\t\tdork = Dork.objects.filter(dorks__in=scan_history)\n\t\tdork_serializer = VisualiseDorkSerializer(dork, many=True)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tsubdomain = Subdomain.objects.filter(scan_history=history)\n\t\tsubdomain_serializer = VisualiseSubdomainSerializer(\n\t\t\tsubdomain,\n\t\t\tmany=True,\n\t\t\tcontext={'scan_history': history})\n\t\temail = Email.objects.filter(emails__in=scan_history)\n\t\temail_serializer = VisualiseEmailSerializer(email, many=True)\n\t\tdork = Dork.objects.filter(dorks__in=scan_history)\n\t\tdork_serializer = VisualiseDorkSerializer(dork, many=True)\n\t\temployee = Employee.objects.filter(employees__in=scan_history)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tsubdomain_serializer = VisualiseSubdomainSerializer(\n\t\t\tsubdomain,\n\t\t\tmany=True,\n\t\t\tcontext={'scan_history': history})\n\t\temail = Email.objects.filter(emails__in=scan_history)\n\t\temail_serializer = VisualiseEmailSerializer(email, many=True)\n\t\tdork = Dork.objects.filter(dorks__in=scan_history)\n\t\tdork_serializer = VisualiseDorkSerializer(dork, many=True)\n\t\temployee = Employee.objects.filter(employees__in=scan_history)\n\t\temployee_serializer = VisualiseEmployeeSerializer(employee, many=True)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\temail",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\temail = Email.objects.filter(emails__in=scan_history)\n\t\temail_serializer = VisualiseEmailSerializer(email, many=True)\n\t\tdork = Dork.objects.filter(dorks__in=scan_history)\n\t\tdork_serializer = VisualiseDorkSerializer(dork, many=True)\n\t\temployee = Employee.objects.filter(employees__in=scan_history)\n\t\temployee_serializer = VisualiseEmployeeSerializer(employee, many=True)\n\t\tmetainfo = MetaFinderDocument.objects.filter(\n\t\t\tscan_history__id=history.id)\n\t\treturn_data = []\n\t\tif subdomain_serializer.data:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\temail_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\temail_serializer = VisualiseEmailSerializer(email, many=True)\n\t\tdork = Dork.objects.filter(dorks__in=scan_history)\n\t\tdork_serializer = VisualiseDorkSerializer(dork, many=True)\n\t\temployee = Employee.objects.filter(employees__in=scan_history)\n\t\temployee_serializer = VisualiseEmployeeSerializer(employee, many=True)\n\t\tmetainfo = MetaFinderDocument.objects.filter(\n\t\t\tscan_history__id=history.id)\n\t\treturn_data = []\n\t\tif subdomain_serializer.data:\n\t\t\treturn_data.append({",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tdork",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tdork = Dork.objects.filter(dorks__in=scan_history)\n\t\tdork_serializer = VisualiseDorkSerializer(dork, many=True)\n\t\temployee = Employee.objects.filter(employees__in=scan_history)\n\t\temployee_serializer = VisualiseEmployeeSerializer(employee, many=True)\n\t\tmetainfo = MetaFinderDocument.objects.filter(\n\t\t\tscan_history__id=history.id)\n\t\treturn_data = []\n\t\tif subdomain_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'Subdomains',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tdork_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tdork_serializer = VisualiseDorkSerializer(dork, many=True)\n\t\temployee = Employee.objects.filter(employees__in=scan_history)\n\t\temployee_serializer = VisualiseEmployeeSerializer(employee, many=True)\n\t\tmetainfo = MetaFinderDocument.objects.filter(\n\t\t\tscan_history__id=history.id)\n\t\treturn_data = []\n\t\tif subdomain_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'Subdomains',\n\t\t\t\t'children': subdomain_serializer.data})",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\temployee",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\temployee = Employee.objects.filter(employees__in=scan_history)\n\t\temployee_serializer = VisualiseEmployeeSerializer(employee, many=True)\n\t\tmetainfo = MetaFinderDocument.objects.filter(\n\t\t\tscan_history__id=history.id)\n\t\treturn_data = []\n\t\tif subdomain_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'Subdomains',\n\t\t\t\t'children': subdomain_serializer.data})\n\t\tif email_serializer.data or employee_serializer.data or dork_serializer.data or metainfo:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\temployee_serializer",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\temployee_serializer = VisualiseEmployeeSerializer(employee, many=True)\n\t\tmetainfo = MetaFinderDocument.objects.filter(\n\t\t\tscan_history__id=history.id)\n\t\treturn_data = []\n\t\tif subdomain_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'Subdomains',\n\t\t\t\t'children': subdomain_serializer.data})\n\t\tif email_serializer.data or employee_serializer.data or dork_serializer.data or metainfo:\n\t\t\tosint_data = []",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmetainfo",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmetainfo = MetaFinderDocument.objects.filter(\n\t\t\tscan_history__id=history.id)\n\t\treturn_data = []\n\t\tif subdomain_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'Subdomains',\n\t\t\t\t'children': subdomain_serializer.data})\n\t\tif email_serializer.data or employee_serializer.data or dork_serializer.data or metainfo:\n\t\t\tosint_data = []\n\t\t\tif email_serializer.data:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\treturn_data",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\treturn_data = []\n\t\tif subdomain_serializer.data:\n\t\t\treturn_data.append({\n\t\t\t\t'description': 'Subdomains',\n\t\t\t\t'children': subdomain_serializer.data})\n\t\tif email_serializer.data or employee_serializer.data or dork_serializer.data or metainfo:\n\t\t\tosint_data = []\n\t\t\tif email_serializer.data:\n\t\t\t\tosint_data.append({\n\t\t\t\t\t'description': 'Emails',",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\tosint_data",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\tosint_data = []\n\t\t\tif email_serializer.data:\n\t\t\t\tosint_data.append({\n\t\t\t\t\t'description': 'Emails',\n\t\t\t\t\t'children': email_serializer.data})\n\t\t\tif employee_serializer.data:\n\t\t\t\tosint_data.append({\n\t\t\t\t\t'description': 'Employees',\n\t\t\t\t\t'children': employee_serializer.data})\n\t\t\tif dork_serializer.data:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmetainfo_data",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tmetainfo_data = []\n\t\t\t\tusernames = (\n\t\t\t\t\tmetainfo\n\t\t\t\t\t.annotate(description=F('author'))\n\t\t\t\t\t.values('description')\n\t\t\t\t\t.distinct()\n\t\t\t\t\t.annotate(children=Value([], output_field=JSONField()))\n\t\t\t\t\t.filter(author__isnull=False)\n\t\t\t\t)\n\t\t\t\tif usernames:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tusernames",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tusernames = (\n\t\t\t\t\tmetainfo\n\t\t\t\t\t.annotate(description=F('author'))\n\t\t\t\t\t.values('description')\n\t\t\t\t\t.distinct()\n\t\t\t\t\t.annotate(children=Value([], output_field=JSONField()))\n\t\t\t\t\t.filter(author__isnull=False)\n\t\t\t\t)\n\t\t\t\tif usernames:\n\t\t\t\t\tmetainfo_data.append({",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsoftware",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tsoftware = (\n\t\t\t\t\tmetainfo\n\t\t\t\t\t.annotate(description=F('producer'))\n\t\t\t\t\t.values('description')\n\t\t\t\t\t.distinct()\n\t\t\t\t\t.annotate(children=Value([], output_field=JSONField()))\n\t\t\t\t\t.filter(producer__isnull=False)\n\t\t\t\t)\n\t\t\t\tif software:\n\t\t\t\t\tmetainfo_data.append({",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tos",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\t\t\tos = (\n\t\t\t\t\tmetainfo\n\t\t\t\t\t.annotate(description=F('os'))\n\t\t\t\t\t.values('description')\n\t\t\t\t\t.distinct()\n\t\t\t\t\t.annotate(children=Value([], output_field=JSONField()))\n\t\t\t\t\t.filter(os__isnull=False)\n\t\t\t\t)\n\t\t\t\tif os:\n\t\t\t\t\tmetainfo_data.append({",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tchange",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tchange = serializers.SerializerMethodField('get_change')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_change(self, Subdomain):\n\t\treturn Subdomain.change\n\tdef get_is_interesting(self, Subdomain):\n\t\treturn (\n\t\t\tget_interesting_subdomains(Subdomain.scan_history.id)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tis_interesting",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_change(self, Subdomain):\n\t\treturn Subdomain.change\n\tdef get_is_interesting(self, Subdomain):\n\t\treturn (\n\t\t\tget_interesting_subdomains(Subdomain.scan_history.id)\n\t\t\t.filter(name=Subdomain.name)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_change(self, Subdomain):\n\t\treturn Subdomain.change\n\tdef get_is_interesting(self, Subdomain):\n\t\treturn (\n\t\t\tget_interesting_subdomains(Subdomain.scan_history.id)\n\t\t\t.filter(name=Subdomain.name)\n\t\t\t.exists()\n\t\t)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\tdef get_change(self, Subdomain):\n\t\treturn Subdomain.change\n\tdef get_is_interesting(self, Subdomain):\n\t\treturn (\n\t\t\tget_interesting_subdomains(Subdomain.scan_history.id)\n\t\t\t.filter(name=Subdomain.name)\n\t\t\t.exists()\n\t\t)\nclass EndPointChangesSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tchange",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tchange = serializers.SerializerMethodField('get_change')\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = '__all__'\n\tdef get_change(self, EndPoint):\n\t\treturn EndPoint.change\nclass InterestingSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = ['name']",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = EndPoint\n\t\tfields = '__all__'\n\tdef get_change(self, EndPoint):\n\t\treturn EndPoint.change\nclass InterestingSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = ['name']\nclass EmailSerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\tdef get_change(self, EndPoint):\n\t\treturn EndPoint.change\nclass InterestingSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = ['name']\nclass EmailSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Email",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Subdomain\n\t\tfields = ['name']\nclass EmailSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Email\n\t\tfields = '__all__'\nclass DorkSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = ['name']\nclass EmailSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Email\n\t\tfields = '__all__'\nclass DorkSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = '__all__'\nclass EmployeeSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Email\n\t\tfields = '__all__'\nclass DorkSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = '__all__'\nclass EmployeeSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Employee\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass DorkSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Dork\n\t\tfields = '__all__'\nclass EmployeeSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Employee\n\t\tfields = '__all__'\nclass MetafinderDocumentSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Dork\n\t\tfields = '__all__'\nclass EmployeeSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Employee\n\t\tfields = '__all__'\nclass MetafinderDocumentSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass EmployeeSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Employee\n\t\tfields = '__all__'\nclass MetafinderDocumentSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = '__all__'\n\t\tdepth = 1",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Employee\n\t\tfields = '__all__'\nclass MetafinderDocumentSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = '__all__'\n\t\tdepth = 1\nclass MetafinderUserSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass MetafinderDocumentSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = '__all__'\n\t\tdepth = 1\nclass MetafinderUserSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = ['author']",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = MetaFinderDocument\n\t\tfields = '__all__'\n\t\tdepth = 1\nclass MetafinderUserSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = ['author']\nclass InterestingEndPointSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\t\tdepth = 1\nclass MetafinderUserSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = ['author']\nclass InterestingEndPointSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tdepth",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tdepth = 1\nclass MetafinderUserSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = MetaFinderDocument\n\t\tfields = ['author']\nclass InterestingEndPointSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass TechnologyCountSerializer(serializers.Serializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = MetaFinderDocument\n\t\tfields = ['author']\nclass InterestingEndPointSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass TechnologyCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\tname = serializers.CharField()\nclass DorkCountSerializer(serializers.Serializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = ['author']\nclass InterestingEndPointSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass TechnologyCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\tname = serializers.CharField()\nclass DorkCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass TechnologyCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\tname = serializers.CharField()\nclass DorkCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\ttype = serializers.CharField()\nclass TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = ['http_url']\nclass TechnologyCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\tname = serializers.CharField()\nclass DorkCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\ttype = serializers.CharField()\nclass TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Technology",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tcount",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tcount = serializers.CharField()\n\tname = serializers.CharField()\nclass DorkCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\ttype = serializers.CharField()\nclass TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = '__all__'\nclass PortSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tname = serializers.CharField()\nclass DorkCountSerializer(serializers.Serializer):\n\tcount = serializers.CharField()\n\ttype = serializers.CharField()\nclass TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = '__all__'\nclass PortSerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tcount",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tcount = serializers.CharField()\n\ttype = serializers.CharField()\nclass TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = '__all__'\nclass PortSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttype",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttype = serializers.CharField()\nclass TechnologySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Technology\n\t\tfields = '__all__'\nclass PortSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = '__all__'\nclass IpSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Technology\n\t\tfields = '__all__'\nclass PortSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = '__all__'\nclass IpSerializer(serializers.ModelSerializer):\n\tports = PortSerializer(many=True)\n\tclass Meta:\n\t\tmodel = IpAddress",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass PortSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Port\n\t\tfields = '__all__'\nclass IpSerializer(serializers.ModelSerializer):\n\tports = PortSerializer(many=True)\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Port\n\t\tfields = '__all__'\nclass IpSerializer(serializers.ModelSerializer):\n\tports = PortSerializer(many=True)\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = '__all__'\nclass DirectoryFileSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = DirectoryFile",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass IpSerializer(serializers.ModelSerializer):\n\tports = PortSerializer(many=True)\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = '__all__'\nclass DirectoryFileSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = DirectoryFile\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tports",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tports = PortSerializer(many=True)\n\tclass Meta:\n\t\tmodel = IpAddress\n\t\tfields = '__all__'\nclass DirectoryFileSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = DirectoryFile\n\t\tfields = '__all__'\nclass DirectoryScanSerializer(serializers.ModelSerializer):\n\tscanned_date = serializers.SerializerMethodField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = IpAddress\n\t\tfields = '__all__'\nclass DirectoryFileSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = DirectoryFile\n\t\tfields = '__all__'\nclass DirectoryScanSerializer(serializers.ModelSerializer):\n\tscanned_date = serializers.SerializerMethodField()\n\tformatted_date_for_id = serializers.SerializerMethodField()\n\tdirectory_files = DirectoryFileSerializer(many=True)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass DirectoryFileSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = DirectoryFile\n\t\tfields = '__all__'\nclass DirectoryScanSerializer(serializers.ModelSerializer):\n\tscanned_date = serializers.SerializerMethodField()\n\tformatted_date_for_id = serializers.SerializerMethodField()\n\tdirectory_files = DirectoryFileSerializer(many=True)\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = DirectoryFile\n\t\tfields = '__all__'\nclass DirectoryScanSerializer(serializers.ModelSerializer):\n\tscanned_date = serializers.SerializerMethodField()\n\tformatted_date_for_id = serializers.SerializerMethodField()\n\tdirectory_files = DirectoryFileSerializer(many=True)\n\tclass Meta:\n\t\tmodel = DirectoryScan\n\t\tfields = '__all__'\n\tdef get_scanned_date(self, DirectoryScan):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass DirectoryScanSerializer(serializers.ModelSerializer):\n\tscanned_date = serializers.SerializerMethodField()\n\tformatted_date_for_id = serializers.SerializerMethodField()\n\tdirectory_files = DirectoryFileSerializer(many=True)\n\tclass Meta:\n\t\tmodel = DirectoryScan\n\t\tfields = '__all__'\n\tdef get_scanned_date(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b %d, %Y %H:%M\")",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tscanned_date",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tscanned_date = serializers.SerializerMethodField()\n\tformatted_date_for_id = serializers.SerializerMethodField()\n\tdirectory_files = DirectoryFileSerializer(many=True)\n\tclass Meta:\n\t\tmodel = DirectoryScan\n\t\tfields = '__all__'\n\tdef get_scanned_date(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_formatted_date_for_id(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b_%d_%Y_%H_%M\")",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tformatted_date_for_id",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tformatted_date_for_id = serializers.SerializerMethodField()\n\tdirectory_files = DirectoryFileSerializer(many=True)\n\tclass Meta:\n\t\tmodel = DirectoryScan\n\t\tfields = '__all__'\n\tdef get_scanned_date(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_formatted_date_for_id(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b_%d_%Y_%H_%M\")\nclass IpSubdomainSerializer(serializers.ModelSerializer):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdirectory_files",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdirectory_files = DirectoryFileSerializer(many=True)\n\tclass Meta:\n\t\tmodel = DirectoryScan\n\t\tfields = '__all__'\n\tdef get_scanned_date(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_formatted_date_for_id(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b_%d_%Y_%H_%M\")\nclass IpSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = DirectoryScan\n\t\tfields = '__all__'\n\tdef get_scanned_date(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_formatted_date_for_id(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b_%d_%Y_%H_%M\")\nclass IpSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = ['name', 'ip_addresses']",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\tdef get_scanned_date(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_formatted_date_for_id(self, DirectoryScan):\n\t\treturn DirectoryScan.scanned_date.strftime(\"%b_%d_%Y_%H_%M\")\nclass IpSubdomainSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = ['name', 'ip_addresses']\n\t\tdepth = 1",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Subdomain\n\t\tfields = ['name', 'ip_addresses']\n\t\tdepth = 1\nclass WafSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Waf\n\t\tfields = '__all__'\nclass SubdomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField('get_vuln_count')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = ['name', 'ip_addresses']\n\t\tdepth = 1\nclass WafSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Waf\n\t\tfields = '__all__'\nclass SubdomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField('get_vuln_count')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tdepth",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tdepth = 1\nclass WafSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Waf\n\t\tfields = '__all__'\nclass SubdomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField('get_vuln_count')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tinfo_count = serializers.SerializerMethodField('get_info_count')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Waf\n\t\tfields = '__all__'\nclass SubdomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField('get_vuln_count')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tinfo_count = serializers.SerializerMethodField('get_info_count')\n\tlow_count = serializers.SerializerMethodField('get_low_count')\n\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass SubdomainSerializer(serializers.ModelSerializer):\n\tvuln_count = serializers.SerializerMethodField('get_vuln_count')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tinfo_count = serializers.SerializerMethodField('get_info_count')\n\tlow_count = serializers.SerializerMethodField('get_low_count')\n\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tvuln_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tvuln_count = serializers.SerializerMethodField('get_vuln_count')\n\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tinfo_count = serializers.SerializerMethodField('get_info_count')\n\tlow_count = serializers.SerializerMethodField('get_low_count')\n\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tis_interesting",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tis_interesting = serializers.SerializerMethodField('get_is_interesting')\n\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tinfo_count = serializers.SerializerMethodField('get_info_count')\n\tlow_count = serializers.SerializerMethodField('get_low_count')\n\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tendpoint_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tendpoint_count = serializers.SerializerMethodField('get_endpoint_count')\n\tinfo_count = serializers.SerializerMethodField('get_info_count')\n\tlow_count = serializers.SerializerMethodField('get_low_count')\n\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tinfo_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tinfo_count = serializers.SerializerMethodField('get_info_count')\n\tlow_count = serializers.SerializerMethodField('get_low_count')\n\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tlow_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tlow_count = serializers.SerializerMethodField('get_low_count')\n\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tmedium_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tmedium_count = serializers.SerializerMethodField('get_medium_count')\n\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\thigh_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\thigh_count = serializers.SerializerMethodField('get_high_count')\n\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tcritical_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tcritical_count = serializers.SerializerMethodField('get_critical_count')\n\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:\n\t\tmodel = Subdomain",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttodos_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttodos_count = serializers.SerializerMethodField('get_todos_count')\n\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdirectories_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdirectories_count = serializers.SerializerMethodField('get_directories_count')\n\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_is_interesting(self, subdomain):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tsubscan_count",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tsubscan_count = serializers.SerializerMethodField('get_subscan_count')\n\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_is_interesting(self, subdomain):\n\t\tscan_id = subdomain.scan_history.id if subdomain.scan_history else None",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tip_addresses",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tip_addresses = IpSerializer(many=True)\n\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_is_interesting(self, subdomain):\n\t\tscan_id = subdomain.scan_history.id if subdomain.scan_history else None\n\t\treturn (",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\twaf",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\twaf = WafSerializer(many=True)\n\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_is_interesting(self, subdomain):\n\t\tscan_id = subdomain.scan_history.id if subdomain.scan_history else None\n\t\treturn (\n\t\t\tget_interesting_subdomains(scan_id)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttechnologies",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttechnologies = TechnologySerializer(many=True)\n\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_is_interesting(self, subdomain):\n\t\tscan_id = subdomain.scan_history.id if subdomain.scan_history else None\n\t\treturn (\n\t\t\tget_interesting_subdomains(scan_id)\n\t\t\t.filter(name=subdomain.name)",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdirectories",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdirectories = DirectoryScanSerializer(many=True)\n\tclass Meta:\n\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_is_interesting(self, subdomain):\n\t\tscan_id = subdomain.scan_history.id if subdomain.scan_history else None\n\t\treturn (\n\t\t\tget_interesting_subdomains(scan_id)\n\t\t\t.filter(name=subdomain.name)\n\t\t\t.exists()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Subdomain\n\t\tfields = '__all__'\n\tdef get_is_interesting(self, subdomain):\n\t\tscan_id = subdomain.scan_history.id if subdomain.scan_history else None\n\t\treturn (\n\t\t\tget_interesting_subdomains(scan_id)\n\t\t\t.filter(name=subdomain.name)\n\t\t\t.exists()\n\t\t)\n\tdef get_endpoint_count(self, subdomain):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\tdef get_is_interesting(self, subdomain):\n\t\tscan_id = subdomain.scan_history.id if subdomain.scan_history else None\n\t\treturn (\n\t\t\tget_interesting_subdomains(scan_id)\n\t\t\t.filter(name=subdomain.name)\n\t\t\t.exists()\n\t\t)\n\tdef get_endpoint_count(self, subdomain):\n\t\treturn subdomain.get_endpoint_count",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tscan_id = subdomain.scan_history.id if subdomain.scan_history else None\n\t\treturn (\n\t\t\tget_interesting_subdomains(scan_id)\n\t\t\t.filter(name=subdomain.name)\n\t\t\t.exists()\n\t\t)\n\tdef get_endpoint_count(self, subdomain):\n\t\treturn subdomain.get_endpoint_count\n\tdef get_info_count(self, subdomain):\n\t\treturn subdomain.get_info_count",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\ttechs",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\ttechs = TechnologySerializer(many=True)\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = '__all__'\nclass EndpointOnlyURLsSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass VulnerabilitySerializer(serializers.ModelSerializer):\n\tdiscovered_date = serializers.SerializerMethodField()",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = EndPoint\n\t\tfields = '__all__'\nclass EndpointOnlyURLsSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass VulnerabilitySerializer(serializers.ModelSerializer):\n\tdiscovered_date = serializers.SerializerMethodField()\n\tseverity = serializers.SerializerMethodField()\n\tdef get_discovered_date(self, Vulnerability):",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\nclass EndpointOnlyURLsSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass VulnerabilitySerializer(serializers.ModelSerializer):\n\tdiscovered_date = serializers.SerializerMethodField()\n\tseverity = serializers.SerializerMethodField()\n\tdef get_discovered_date(self, Vulnerability):\n\t\treturn Vulnerability.discovered_date.strftime(\"%b %d, %Y %H:%M\")",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = EndPoint\n\t\tfields = ['http_url']\nclass VulnerabilitySerializer(serializers.ModelSerializer):\n\tdiscovered_date = serializers.SerializerMethodField()\n\tseverity = serializers.SerializerMethodField()\n\tdef get_discovered_date(self, Vulnerability):\n\t\treturn Vulnerability.discovered_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_severity(self, Vulnerability):\n\t\tif Vulnerability.severity == 0:\n\t\t\treturn \"Info\"",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = ['http_url']\nclass VulnerabilitySerializer(serializers.ModelSerializer):\n\tdiscovered_date = serializers.SerializerMethodField()\n\tseverity = serializers.SerializerMethodField()\n\tdef get_discovered_date(self, Vulnerability):\n\t\treturn Vulnerability.discovered_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_severity(self, Vulnerability):\n\t\tif Vulnerability.severity == 0:\n\t\t\treturn \"Info\"\n\t\telif Vulnerability.severity == 1:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tdiscovered_date",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tdiscovered_date = serializers.SerializerMethodField()\n\tseverity = serializers.SerializerMethodField()\n\tdef get_discovered_date(self, Vulnerability):\n\t\treturn Vulnerability.discovered_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_severity(self, Vulnerability):\n\t\tif Vulnerability.severity == 0:\n\t\t\treturn \"Info\"\n\t\telif Vulnerability.severity == 1:\n\t\t\treturn \"Low\"\n\t\telif Vulnerability.severity == 2:",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\tseverity",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\tseverity = serializers.SerializerMethodField()\n\tdef get_discovered_date(self, Vulnerability):\n\t\treturn Vulnerability.discovered_date.strftime(\"%b %d, %Y %H:%M\")\n\tdef get_severity(self, Vulnerability):\n\t\tif Vulnerability.severity == 0:\n\t\t\treturn \"Info\"\n\t\telif Vulnerability.severity == 1:\n\t\t\treturn \"Low\"\n\t\telif Vulnerability.severity == 2:\n\t\t\treturn \"Medium\"",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tmodel = Vulnerability\n\t\tfields = '__all__'\n\t\tdepth = 2",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tfields = '__all__'\n\t\tdepth = 2",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "\t\tdepth",
        "kind": 5,
        "importPath": "web.api.serializers",
        "description": "web.api.serializers",
        "peekOfCode": "\t\tdepth = 2",
        "detail": "web.api.serializers",
        "documentation": {}
    },
    {
        "label": "import_hackerone_programs_task",
        "kind": 2,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "def import_hackerone_programs_task(handles, project_slug, is_sync = False):\n\t\"\"\"\n\tRuns in the background to import programs from HackerOne\n\tArgs:\n\t\thandles (list): List of handles to import\n\t\tproject_slug (str): Slug of the project\n\t\tis_sync (bool): If the import is a sync operation\n\tReturns:\n\t\tNone\n\t\trather creates inapp notifications",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "sync_bookmarked_programs_task",
        "kind": 2,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "def sync_bookmarked_programs_task(project_slug):\n\t\"\"\"\n\t\tRuns in the background to sync bookmarked programs from HackerOne\n\t\tArgs:\n\t\t\tproject_slug (str): Slug of the project\n\t\tReturns:\n\t\t\tNone\n\t\t\tCreates in-app notifications for progress and results\n\t\"\"\"\n\tdef fetch_bookmarked_programs():",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\turl = f'https://api.hackerone.com/v1/hackers/programs/{program_handle}'\n\t\theaders = {'Accept': 'application/json'}\n\t\tcreds = get_hackerone_key_username()\n\t\tif not creds:\n\t\t\traise Exception(\"HackerOne API credentials not configured\")\n\t\tusername, api_key = creds\n\t\tresponse = requests.get(\n\t\t\turl,\n\t\t\theaders=headers,\n\t\t\tauth=(username, api_key)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\theaders",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\theaders = {'Accept': 'application/json'}\n\t\tcreds = get_hackerone_key_username()\n\t\tif not creds:\n\t\t\traise Exception(\"HackerOne API credentials not configured\")\n\t\tusername, api_key = creds\n\t\tresponse = requests.get(\n\t\t\turl,\n\t\t\theaders=headers,\n\t\t\tauth=(username, api_key)\n\t\t)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcreds",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\tcreds = get_hackerone_key_username()\n\t\tif not creds:\n\t\t\traise Exception(\"HackerOne API credentials not configured\")\n\t\tusername, api_key = creds\n\t\tresponse = requests.get(\n\t\t\turl,\n\t\t\theaders=headers,\n\t\t\tauth=(username, api_key)\n\t\t)\n\t\tif response.status_code == 401:",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\tresponse = requests.get(\n\t\t\turl,\n\t\t\theaders=headers,\n\t\t\tauth=(username, api_key)\n\t\t)\n\t\tif response.status_code == 401:\n\t\t\traise Exception(\"HackerOne API credentials are invalid\")\n\t\tif response.status_code == 200:\n\t\t\treturn response.json()\n\t\telse:",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\tprogram_details",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\tprogram_details = fetch_program_details_from_hackerone(handle)\n\t\tif program_details:\n\t\t\t# Thanks, some parts of this logics were originally written by @null-ref-0000\n\t\t\t# via PR https://github.com/yogeshojha/rengine/pull/1410\n\t\t\ttry:\n\t\t\t\tprogram_name = program_details['attributes']['name']\n\t\t\t\tassets = []\n\t\t\t\tscopes = program_details['relationships']['structured_scopes']['data']\n\t\t\t\tfor scope in scopes:\n\t\t\t\t\tasset_type = scope['attributes']['asset_type']",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprogram_name",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\tprogram_name = program_details['attributes']['name']\n\t\t\t\tassets = []\n\t\t\t\tscopes = program_details['relationships']['structured_scopes']['data']\n\t\t\t\tfor scope in scopes:\n\t\t\t\t\tasset_type = scope['attributes']['asset_type']\n\t\t\t\t\tasset_identifier = scope['attributes']['asset_identifier']\n\t\t\t\t\teligible_for_submission = scope['attributes']['eligible_for_submission']\n\t\t\t\t\t# for now we should ignore the scope that are not eligible for submission\n\t\t\t\t\t# in future release we will add this in target out_of_scope\n\t\t\t\t\t# we need to filter the scope that are supported by reNgine now",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tassets",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\tassets = []\n\t\t\t\tscopes = program_details['relationships']['structured_scopes']['data']\n\t\t\t\tfor scope in scopes:\n\t\t\t\t\tasset_type = scope['attributes']['asset_type']\n\t\t\t\t\tasset_identifier = scope['attributes']['asset_identifier']\n\t\t\t\t\teligible_for_submission = scope['attributes']['eligible_for_submission']\n\t\t\t\t\t# for now we should ignore the scope that are not eligible for submission\n\t\t\t\t\t# in future release we will add this in target out_of_scope\n\t\t\t\t\t# we need to filter the scope that are supported by reNgine now\n\t\t\t\t\tif asset_type in HACKERONE_ALLOWED_ASSET_TYPES and eligible_for_submission:",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tscopes",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\tscopes = program_details['relationships']['structured_scopes']['data']\n\t\t\t\tfor scope in scopes:\n\t\t\t\t\tasset_type = scope['attributes']['asset_type']\n\t\t\t\t\tasset_identifier = scope['attributes']['asset_identifier']\n\t\t\t\t\teligible_for_submission = scope['attributes']['eligible_for_submission']\n\t\t\t\t\t# for now we should ignore the scope that are not eligible for submission\n\t\t\t\t\t# in future release we will add this in target out_of_scope\n\t\t\t\t\t# we need to filter the scope that are supported by reNgine now\n\t\t\t\t\tif asset_type in HACKERONE_ALLOWED_ASSET_TYPES and eligible_for_submission:\n\t\t\t\t\t\tassets.append(asset_identifier)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tasset_type",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\t\tasset_type = scope['attributes']['asset_type']\n\t\t\t\t\tasset_identifier = scope['attributes']['asset_identifier']\n\t\t\t\t\teligible_for_submission = scope['attributes']['eligible_for_submission']\n\t\t\t\t\t# for now we should ignore the scope that are not eligible for submission\n\t\t\t\t\t# in future release we will add this in target out_of_scope\n\t\t\t\t\t# we need to filter the scope that are supported by reNgine now\n\t\t\t\t\tif asset_type in HACKERONE_ALLOWED_ASSET_TYPES and eligible_for_submission:\n\t\t\t\t\t\tassets.append(asset_identifier)\n\t\t\t\t\t# in some cases asset_type is OTHER and may contain the asset\n\t\t\t\t\telif asset_type == 'OTHER' and ('.' in asset_identifier or asset_identifier.startswith('http')):",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tasset_identifier",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\t\tasset_identifier = scope['attributes']['asset_identifier']\n\t\t\t\t\teligible_for_submission = scope['attributes']['eligible_for_submission']\n\t\t\t\t\t# for now we should ignore the scope that are not eligible for submission\n\t\t\t\t\t# in future release we will add this in target out_of_scope\n\t\t\t\t\t# we need to filter the scope that are supported by reNgine now\n\t\t\t\t\tif asset_type in HACKERONE_ALLOWED_ASSET_TYPES and eligible_for_submission:\n\t\t\t\t\t\tassets.append(asset_identifier)\n\t\t\t\t\t# in some cases asset_type is OTHER and may contain the asset\n\t\t\t\t\telif asset_type == 'OTHER' and ('.' in asset_identifier or asset_identifier.startswith('http')):\n\t\t\t\t\t\tassets.append(asset_identifier)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\teligible_for_submission",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\t\teligible_for_submission = scope['attributes']['eligible_for_submission']\n\t\t\t\t\t# for now we should ignore the scope that are not eligible for submission\n\t\t\t\t\t# in future release we will add this in target out_of_scope\n\t\t\t\t\t# we need to filter the scope that are supported by reNgine now\n\t\t\t\t\tif asset_type in HACKERONE_ALLOWED_ASSET_TYPES and eligible_for_submission:\n\t\t\t\t\t\tassets.append(asset_identifier)\n\t\t\t\t\t# in some cases asset_type is OTHER and may contain the asset\n\t\t\t\t\telif asset_type == 'OTHER' and ('.' in asset_identifier or asset_identifier.startswith('http')):\n\t\t\t\t\t\tassets.append(asset_identifier)\n\t\t\t\t# cleanup assets",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tassets",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\tassets = list(set(assets))\n\t\t\t\t# convert assets to list of dict with name and description\n\t\t\t\tassets = [{'name': asset, 'description': None} for asset in assets]\n\t\t\t\tnew_targets_added = bulk_import_targets(\n\t\t\t\t\ttargets=assets,\n\t\t\t\t\tproject_slug=project_slug,\n\t\t\t\t\torganization_name=program_name,\n\t\t\t\t\torg_description='Imported from Hackerone',\n\t\t\t\t\th1_team_handle=handle\n\t\t\t\t)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tassets",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\tassets = [{'name': asset, 'description': None} for asset in assets]\n\t\t\t\tnew_targets_added = bulk_import_targets(\n\t\t\t\t\ttargets=assets,\n\t\t\t\t\tproject_slug=project_slug,\n\t\t\t\t\torganization_name=program_name,\n\t\t\t\t\torg_description='Imported from Hackerone',\n\t\t\t\t\th1_team_handle=handle\n\t\t\t\t)\n\t\t\t\tif new_targets_added:\n\t\t\t\t\tcreate_inappnotification(",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnew_targets_added",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\t\tnew_targets_added = bulk_import_targets(\n\t\t\t\t\ttargets=assets,\n\t\t\t\t\tproject_slug=project_slug,\n\t\t\t\t\torganization_name=program_name,\n\t\t\t\t\torg_description='Imported from Hackerone',\n\t\t\t\t\th1_team_handle=handle\n\t\t\t\t)\n\t\t\t\tif new_targets_added:\n\t\t\t\t\tcreate_inappnotification(\n\t\t\t\t\t\ttitle=f\"HackerOne Program Imported: {handle}\",",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\ttitle = \"HackerOne Program Sync Completed\"\n\t\tdescription = f\"Sync process for {len(handles)} program(s) has completed.\"\n\telse:\n\t\ttitle = \"HackerOne Program Import Completed\"\n\t\tdescription = f\"Import process for {len(handles)} program(s) has completed.\"\n\tcreate_inappnotification(\n\t\ttitle=title,\n\t\tdescription=description,\n\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,\n\t\tproject_slug=project_slug,",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\tdescription = f\"Sync process for {len(handles)} program(s) has completed.\"\n\telse:\n\t\ttitle = \"HackerOne Program Import Completed\"\n\t\tdescription = f\"Import process for {len(handles)} program(s) has completed.\"\n\tcreate_inappnotification(\n\t\ttitle=title,\n\t\tdescription=description,\n\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,\n\t\tproject_slug=project_slug,\n\t\ticon=\"mdi-check-all\",",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\ttitle = \"HackerOne Program Import Completed\"\n\t\tdescription = f\"Import process for {len(handles)} program(s) has completed.\"\n\tcreate_inappnotification(\n\t\ttitle=title,\n\t\tdescription=description,\n\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,\n\t\tproject_slug=project_slug,\n\t\ticon=\"mdi-check-all\",\n\t\tstatus='success'\n\t)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\tdescription = f\"Import process for {len(handles)} program(s) has completed.\"\n\tcreate_inappnotification(\n\t\ttitle=title,\n\t\tdescription=description,\n\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,\n\t\tproject_slug=project_slug,\n\t\ticon=\"mdi-check-all\",\n\t\tstatus='success'\n\t)\n@app.task(name='sync_bookmarked_programs_task', bind=False, queue='api_queue')",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\turl = f'https://api.hackerone.com/v1/hackers/programs?&page[size]=100'\n\t\theaders = {'Accept': 'application/json'}\n\t\tbookmarked_programs = []\n\t\tcredentials = get_hackerone_key_username()\n\t\tif not credentials:\n\t\t\traise Exception(\"HackerOne API credentials not configured\")\n\t\tusername, api_key = credentials\n\t\twhile url:\n\t\t\tresponse = requests.get(\n\t\t\t\turl,",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\theaders",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\theaders = {'Accept': 'application/json'}\n\t\tbookmarked_programs = []\n\t\tcredentials = get_hackerone_key_username()\n\t\tif not credentials:\n\t\t\traise Exception(\"HackerOne API credentials not configured\")\n\t\tusername, api_key = credentials\n\t\twhile url:\n\t\t\tresponse = requests.get(\n\t\t\t\turl,\n\t\t\t\theaders=headers,",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\tbookmarked_programs",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\tbookmarked_programs = []\n\t\tcredentials = get_hackerone_key_username()\n\t\tif not credentials:\n\t\t\traise Exception(\"HackerOne API credentials not configured\")\n\t\tusername, api_key = credentials\n\t\twhile url:\n\t\t\tresponse = requests.get(\n\t\t\t\turl,\n\t\t\t\theaders=headers,\n\t\t\t\tauth=(username, api_key)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcredentials",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\tcredentials = get_hackerone_key_username()\n\t\tif not credentials:\n\t\t\traise Exception(\"HackerOne API credentials not configured\")\n\t\tusername, api_key = credentials\n\t\twhile url:\n\t\t\tresponse = requests.get(\n\t\t\t\turl,\n\t\t\t\theaders=headers,\n\t\t\t\tauth=(username, api_key)\n\t\t\t)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\tresponse = requests.get(\n\t\t\t\turl,\n\t\t\t\theaders=headers,\n\t\t\t\tauth=(username, api_key)\n\t\t\t)\n\t\t\tif response.status_code == 401:\n\t\t\t\traise Exception(\"HackerOne API credentials are invalid\")\n\t\t\telif response.status_code != 200:\n\t\t\t\traise Exception(f\"HackerOne API request failed with status code {response.status_code}\")\n\t\t\tdata = response.json()",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\tdata = response.json()\n\t\t\tprograms = data['data']\n\t\t\tbookmarked = [p for p in programs if p['attributes']['bookmarked']]\n\t\t\tbookmarked_programs.extend(bookmarked)\n\t\t\turl = data['links'].get('next')\n\t\treturn bookmarked_programs\n\ttry:\n\t\tbookmarked_programs = fetch_bookmarked_programs()\n\t\thandles = [program['attributes']['handle'] for program in bookmarked_programs]\n\t\tif not handles:",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\tprograms = data['data']\n\t\t\tbookmarked = [p for p in programs if p['attributes']['bookmarked']]\n\t\t\tbookmarked_programs.extend(bookmarked)\n\t\t\turl = data['links'].get('next')\n\t\treturn bookmarked_programs\n\ttry:\n\t\tbookmarked_programs = fetch_bookmarked_programs()\n\t\thandles = [program['attributes']['handle'] for program in bookmarked_programs]\n\t\tif not handles:\n\t\t\tcreate_inappnotification(",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tbookmarked",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\tbookmarked = [p for p in programs if p['attributes']['bookmarked']]\n\t\t\tbookmarked_programs.extend(bookmarked)\n\t\t\turl = data['links'].get('next')\n\t\treturn bookmarked_programs\n\ttry:\n\t\tbookmarked_programs = fetch_bookmarked_programs()\n\t\thandles = [program['attributes']['handle'] for program in bookmarked_programs]\n\t\tif not handles:\n\t\t\tcreate_inappnotification(\n\t\t\t\ttitle=\"HackerOne Bookmarked Programs Sync Completed\",",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\turl",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\t\turl = data['links'].get('next')\n\t\treturn bookmarked_programs\n\ttry:\n\t\tbookmarked_programs = fetch_bookmarked_programs()\n\t\thandles = [program['attributes']['handle'] for program in bookmarked_programs]\n\t\tif not handles:\n\t\t\tcreate_inappnotification(\n\t\t\t\ttitle=\"HackerOne Bookmarked Programs Sync Completed\",\n\t\t\t\tdescription=\"No bookmarked programs found.\",\n\t\t\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\tbookmarked_programs",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\tbookmarked_programs = fetch_bookmarked_programs()\n\t\thandles = [program['attributes']['handle'] for program in bookmarked_programs]\n\t\tif not handles:\n\t\t\tcreate_inappnotification(\n\t\t\t\ttitle=\"HackerOne Bookmarked Programs Sync Completed\",\n\t\t\t\tdescription=\"No bookmarked programs found.\",\n\t\t\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,\n\t\t\t\tproject_slug=project_slug,\n\t\t\t\ticon=\"mdi-information\",\n\t\t\t\tstatus='info'",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "\t\thandles",
        "kind": 5,
        "importPath": "web.api.shared_api_tasks",
        "description": "web.api.shared_api_tasks",
        "peekOfCode": "\t\thandles = [program['attributes']['handle'] for program in bookmarked_programs]\n\t\tif not handles:\n\t\t\tcreate_inappnotification(\n\t\t\t\ttitle=\"HackerOne Bookmarked Programs Sync Completed\",\n\t\t\t\tdescription=\"No bookmarked programs found.\",\n\t\t\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,\n\t\t\t\tproject_slug=project_slug,\n\t\t\t\ticon=\"mdi-information\",\n\t\t\t\tstatus='info'\n\t\t\t)",
        "detail": "web.api.shared_api_tasks",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "web.api.urls",
        "description": "web.api.urls",
        "peekOfCode": "app_name = 'api'\nrouter = routers.DefaultRouter()\nrouter.register(r'listDatatableSubdomain', SubdomainDatatableViewSet)\nrouter.register(r'listTargets', ListTargetsDatatableViewSet)\nrouter.register(r'listSubdomains', SubdomainsViewSet)\nrouter.register(r'listEndpoints', EndPointViewSet)\nrouter.register(r'listDirectories', DirectoryViewSet)\nrouter.register(r'listVulnerability', VulnerabilityViewSet)\nrouter.register(r'listInterestingSubdomains', InterestingSubdomainViewSet)\nrouter.register(r'listInterestingEndpoints', InterestingEndpointViewSet)",
        "detail": "web.api.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "web.api.urls",
        "description": "web.api.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(r'listDatatableSubdomain', SubdomainDatatableViewSet)\nrouter.register(r'listTargets', ListTargetsDatatableViewSet)\nrouter.register(r'listSubdomains', SubdomainsViewSet)\nrouter.register(r'listEndpoints', EndPointViewSet)\nrouter.register(r'listDirectories', DirectoryViewSet)\nrouter.register(r'listVulnerability', VulnerabilityViewSet)\nrouter.register(r'listInterestingSubdomains', InterestingSubdomainViewSet)\nrouter.register(r'listInterestingEndpoints', InterestingEndpointViewSet)\nrouter.register(r'listSubdomainChanges', SubdomainChangesViewSet)",
        "detail": "web.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web.api.urls",
        "description": "web.api.urls",
        "peekOfCode": "urlpatterns = [\n    url('^', include(router.urls)),\n    path(\n        'add/target/',\n        AddTarget.as_view(),\n        name='addTarget'),\n    path(\n        'add/recon_note/',\n        AddReconNote.as_view(),\n        name='addReconNote'),",
        "detail": "web.api.urls",
        "documentation": {}
    },
    {
        "label": "ToggleBugBountyModeView",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ToggleBugBountyModeView(APIView):\n\t\"\"\"\n\t\tThis class manages the user bug bounty mode\n\t\"\"\"\n\tdef post(self, request, *args, **kwargs):\n\t\tuser_preferences = get_object_or_404(UserPreferences, user=request.user)\n\t\tuser_preferences.bug_bounty_mode = not user_preferences.bug_bounty_mode\n\t\tuser_preferences.save()\n\t\treturn Response({\n\t\t\t'bug_bounty_mode': user_preferences.bug_bounty_mode",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "HackerOneProgramViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class HackerOneProgramViewSet(viewsets.ViewSet):\n\t\"\"\"\n\t\tThis class manages the HackerOne Program model, \n\t\tprovides basic fetching of programs and caching\n\t\"\"\"\n\tCACHE_KEY = 'hackerone_programs'\n\tCACHE_TIMEOUT = 60 * 30 # 30 minutes\n\tPROGRAM_CACHE_KEY = 'hackerone_program_{}'\n\tAPI_BASE = 'https://api.hackerone.com/v1/hackers'\n\tALLOWED_ASSET_TYPES = [\"WILDCARD\", \"DOMAIN\", \"IP_ADDRESS\", \"CIDR\", \"URL\"]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "InAppNotificationManagerViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class InAppNotificationManagerViewSet(viewsets.ModelViewSet):\n\t\"\"\"\n\t\tThis class manages the notification model, provided CRUD operation on notif model\n\t\tsuch as read notif, clear all, fetch all notifications etc\n\t\"\"\"\n\tserializer_class = InAppNotificationSerializer\n\tpagination_class = None\n\tdef get_queryset(self):\n\t\t# we will see later if user based notif is needed\n\t\t# return InAppNotification.objects.filter(user=self.request.user)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "OllamaManager",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class OllamaManager(APIView):\n\tdef get(self, request):\n\t\t\"\"\"\n\t\tAPI to download Ollama Models\n\t\tsends a POST request to download the model\n\t\t\"\"\"\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\tresponse = {\n\t\t\t'status': False",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "GPTAttackSuggestion",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class GPTAttackSuggestion(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif not subdomain_id:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Missing GET param Subdomain `subdomain_id`'\n\t\t\t})\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "LLMVulnerabilityReportGenerator",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class LLMVulnerabilityReportGenerator(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tvulnerability_id = req.query_params.get('id')\n\t\tif not vulnerability_id:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Missing GET param Vulnerability `id`'\n\t\t\t})\n\t\ttask = llm_vulnerability_description.apply_async(args=(vulnerability_id,))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "CreateProjectApi",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class CreateProjectApi(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tproject_name = req.query_params.get('name')\n\t\tslug = slugify(project_name)\n\t\tinsert_date = timezone.now()\n\t\ttry:\n\t\t\tproject = Project.objects.create(\n\t\t\t\tname=project_name,\n\t\t\t\tslug=slug,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "QueryInterestingSubdomains",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class QueryInterestingSubdomains(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')\n\t\tif scan_id:\n\t\t\tqueryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tqueryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListTargetsDatatableViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListTargetsDatatableViewSet(viewsets.ModelViewSet):\n\tqueryset = Domain.objects.all()\n\tserializer_class = DomainSerializer\n\tdef get_queryset(self):\n\t\tslug = self.request.GET.get('slug', None)\n\t\tif slug:\n\t\t\tself.queryset = self.queryset.filter(project__slug=slug)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "WafDetector",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class WafDetector(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\turl= req.query_params.get('url')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\t# validate url as a first step to avoid command injection\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "SearchHistoryView",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class SearchHistoryView(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tscan_history = SearchHistory.objects.all().order_by('-id')[:5]\n\t\tif scan_history:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = SearchHistorySerializer(scan_history, many=True).data\n\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "UniversalSearch",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class UniversalSearch(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tquery = req.query_params.get('query')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif not query:\n\t\t\tresponse['message'] = 'No query parameter provided!'\n\t\t\treturn Response(response)\n\t\tresponse['results'] = {}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "FetchMostCommonVulnerability",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class FetchMostCommonVulnerability(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:\n\t\t\tlimit = data.get('limit', 20)\n\t\t\tproject_slug = data.get('slug')\n\t\t\tscan_history_id = data.get('scan_history_id')\n\t\t\ttarget_id = data.get('target_id')\n\t\t\tis_ignore_info = data.get('ignore_info', False)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "FetchMostVulnerable",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class FetchMostVulnerable(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tproject_slug = data.get('slug')\n\t\tscan_history_id = data.get('scan_history_id')\n\t\ttarget_id = data.get('target_id')\n\t\tlimit = data.get('limit', 20)\n\t\tis_ignore_info = data.get('ignore_info', False)\n\t\tresponse = {}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "CVEDetails",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class CVEDetails(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tcve_id = req.query_params.get('cve_id')\n\t\tif not cve_id:\n\t\t\treturn Response({'status': False, 'message': 'CVE ID not provided'})\n\t\tresponse = requests.get('https://cve.circl.lu/api/cve/' + cve_id)\n\t\tif response.status_code != 200:\n\t\t\treturn  Response({'status': False, 'message': 'Unknown Error Occured!'})\n\t\tif not response.json():",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "AddReconNote",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class AddReconNote(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id')\n\t\ttitle = data.get('title')\n\t\tdescription = data.get('description')\n\t\tproject = data.get('project')\n\t\ttry:\n\t\t\tproject = Project.objects.get(slug=project)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ToggleSubdomainImportantStatus",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ToggleSubdomainImportantStatus(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id')\n\t\tresponse = {'status': False, 'message': 'No subdomain_id provided'}\n\t\tname = Subdomain.objects.get(id=subdomain_id)\n\t\tname.is_important = not name.is_important\n\t\tname.save()\n\t\tresponse = {'status': True}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "AddTarget",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class AddTarget(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\th1_team_handle = data.get('h1_team_handle')\n\t\tdescription = data.get('description')\n\t\tdomain_name = data.get('domain_name')\n\t\t# remove wild card from domain\n\t\tdomain_name = domain_name.replace('*', '')\n\t\t# if domain_name begins with . remove that",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "FetchSubscanResults",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class FetchSubscanResults(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\t# data = req.data\n\t\tsubscan_id = req.query_params.get('subscan_id')\n\t\tsubscan = SubScan.objects.filter(id=subscan_id)\n\t\tif not subscan.exists():\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': f'Subscan {subscan_id} does not exist'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListSubScans",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListSubScans(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id', None)\n\t\tscan_history = data.get('scan_history_id', None)\n\t\tdomain_id = data.get('domain_id', None)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif subdomain_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "DeleteMultipleRows",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class DeleteMultipleRows(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:\n\t\t\tif data['type'] == 'subscan':\n\t\t\t\tfor row in data['rows']:\n\t\t\t\t\tSubScan.objects.get(id=row).delete()\n\t\t\telif data['type'] == 'organization':\n\t\t\t\tfor row in data['rows']:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "StopScan",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class StopScan(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tscan_ids = data.get('scan_ids', [])\n\t\tsubscan_ids = data.get('subscan_ids', [])\n\t\tscan_ids = [int(id) for id in scan_ids]\n\t\tsubscan_ids = [int(id) for id in subscan_ids]\n\t\tresponse = {'status': False}\n\t\tdef abort_scan(scan):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "InitiateSubTask",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class InitiateSubTask(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tengine_id = data.get('engine_id')\n\t\tscan_types = data['tasks']\n\t\tfor subdomain_id in data['subdomain_ids']:\n\t\t\tlogger.info(f'Running subscans {scan_types} on subdomain \"{subdomain_id}\" ...')\n\t\t\tfor stype in scan_types:\n\t\t\t\tctx = {",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "DeleteSubdomain",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class DeleteSubdomain(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tfor id in req.data['subdomain_ids']:\n\t\t\tSubdomain.objects.get(id=id).delete()\n\t\treturn Response({'status': True})\nclass DeleteVulnerability(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tfor id in req.data['vulnerability_ids']:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "DeleteVulnerability",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class DeleteVulnerability(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tfor id in req.data['vulnerability_ids']:\n\t\t\tVulnerability.objects.get(id=id).delete()\n\t\treturn Response({'status': True})\nclass ListInterestingKeywords(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tkeywords = get_lookup_keywords()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListInterestingKeywords",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListInterestingKeywords(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tkeywords = get_lookup_keywords()\n\t\treturn Response(keywords)\nclass RengineUpdateCheck(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tgithub_api = \\\n\t\t\t'https://api.github.com/repos/yogeshojha/rengine/releases'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "RengineUpdateCheck",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class RengineUpdateCheck(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tgithub_api = \\\n\t\t\t'https://api.github.com/repos/yogeshojha/rengine/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\tif 'message' in response:\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})\n\t\treturn_response = {}\n\t\t# get current version_number",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "UninstallTool",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class UninstallTool(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif tool.is_default:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "UpdateTool",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class UpdateTool(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\t# if git clone was used for installation, then we must use git pull inside project directory,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "GetExternalToolCurrentVersion",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class GetExternalToolCurrentVersion(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\t# toolname is also the command\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\t# can supply either tool id or tool_name\n\t\ttool = None\n\t\tif tool_id:\n\t\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "GithubToolCheckGetLatestRelease",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class GithubToolCheckGetLatestRelease(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():\n\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ScanStatus",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ScanStatus(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tslug = self.request.GET.get('project', None)\n\t\t# main tasks\n\t\trecently_completed_scans = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')\n\t\t\t.filter(Q(scan_status=0) | Q(scan_status=2) | Q(scan_status=3))[:10]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "Whois",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class Whois(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\ttarget = req.query_params.get('target')\n\t\tif not target:\n\t\t\treturn Response({'status': False, 'message': 'Target IP/Domain required!'})\n\t\tif not (validators.domain(target) or validators.ipv4(target) or validators.ipv6(target)):\n\t\t\tprint(f'Ip address or domain \"{target}\" did not pass validator.')\n\t\t\treturn Response({'status': False, 'message': 'Invalid domain or IP'})\n\t\tis_force_update = req.query_params.get('is_reload')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ReverseWhois",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ReverseWhois(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tlookup_keyword = req.query_params.get('lookup_keyword')\n\t\ttask = query_reverse_whois.apply_async(args=(lookup_keyword,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass DomainIPHistory(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "DomainIPHistory",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class DomainIPHistory(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tdomain = req.query_params.get('domain')\n\t\ttask = query_ip_history.apply_async(args=(domain,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CMSDetector(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "CMSDetector",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class CMSDetector(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\turl = req.query_params.get('url')\n\t\t#save_db = True if 'save_db' in req.query_params else False\n\t\tresponse = {'status': False}\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "IPToDomain",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class IPToDomain(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tip_address = req.query_params.get('ip_address')\n\t\tif not ip_address:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'IP Address Required'\n\t\t\t})\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "VulnerabilityReport",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class VulnerabilityReport(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tvulnerability_id = req.query_params.get('vulnerability_id')\n\t\treturn Response({\"status\": send_hackerone_report(vulnerability_id)})\nclass GetFileContents(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tname = req.query_params.get('name')\n\t\tresponse = {}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "GetFileContents",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class GetFileContents(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tname = req.query_params.get('name')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif 'nuclei_config' in req.query_params:\n\t\t\tpath = \"/root/.config/nuclei/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListTodoNotes",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListTodoNotes(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tnotes = TodoNote.objects.all().order_by('-id')\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tnotes = notes.filter(project__slug=project)\n\t\ttarget_id = req.query_params.get('target_id')\n\t\ttodo_id = req.query_params.get('todo_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListScanHistory",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListScanHistory(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_history = ScanHistory.objects.all().order_by('-start_scan_date')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tscan_history = scan_history.filter(domain__project__slug=project)\n\t\tscan_history = ScanHistorySerializer(scan_history, many=True)\n\t\treturn Response(scan_history.data)\nclass ListEngines(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListEngines",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListEngines(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tengines = EngineType.objects.order_by('engine_name').all()\n\t\tengine_serializer = EngineSerializer(engines, many=True)\n\t\treturn Response({'engines': engine_serializer.data})\nclass ListOrganizations(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganizations = Organization.objects.all()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListOrganizations",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListOrganizations(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganizations = Organization.objects.all()\n\t\torganization_serializer = OrganizationSerializer(organizations, many=True)\n\t\treturn Response({'organizations': organization_serializer.data})\nclass ListTargetsInOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganization_id = req.query_params.get('organization_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListTargetsInOrganization",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListTargetsInOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganization_id = req.query_params.get('organization_id')\n\t\torganization = Organization.objects.filter(id=organization_id)\n\t\ttargets = Domain.objects.filter(domains__in=organization)\n\t\torganization_serializer = OrganizationSerializer(organization, many=True)\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'organization': organization_serializer.data, 'domains': targets_serializer.data})\nclass ListTargetsWithoutOrganization(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListTargetsWithoutOrganization",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListTargetsWithoutOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\ttargets = Domain.objects.exclude(domains__in=Organization.objects.all())\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'domains': targets_serializer.data})\nclass VisualiseData(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "VisualiseData",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class VisualiseData(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tmitch_data = ScanHistory.objects.filter(id=scan_id)\n\t\t\tserializer = VisualiseDataSerializer(mitch_data, many=True)\n\t\t\treturn Response(serializer.data)\n\t\telse:\n\t\t\treturn Response()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListTechnology",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListTechnology(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif target_id:\n\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListDorkTypes",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListDorkTypes(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id)\n\t\t\t).values('type').annotate(count=Count('type')).order_by('-count')\n\t\t\tserializer = DorkCountSerializer(dork, many=True)\n\t\t\treturn Response({\"dorks\": serializer.data})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListEmails",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListEmails(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\temail = Email.objects.filter(\n\t\t\t\temails__in=ScanHistory.objects.filter(id=scan_id)).order_by('password')\n\t\t\tserializer = EmailSerializer(email, many=True)\n\t\t\treturn Response({\"emails\": serializer.data})\nclass ListDorks(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListDorks",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListDorks(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttype = req.query_params.get('type')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id))\n\t\telse:\n\t\t\tdork = Dork.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListEmployees",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListEmployees(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\temployee = Employee.objects.filter(\n\t\t\t\temployees__in=ScanHistory.objects.filter(id=scan_id))\n\t\t\tserializer = EmployeeSerializer(employee, many=True)\n\t\t\treturn Response({\"employees\": serializer.data})\nclass ListPorts(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListPorts",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListPorts(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tif target_id:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListSubdomains",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListSubdomains(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tport = req.query_params.get('port')\n\t\ttech = req.query_params.get('tech')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListOsintUsers",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListOsintUsers(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).exclude(author__isnull=True).values('author').distinct()\n\t\t\tserializer = MetafinderUserSerializer(documents, many=True)\n\t\t\treturn Response({\"users\": serializer.data})\nclass ListMetadata(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListMetadata",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListMetadata(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).distinct()\n\t\t\tserializer = MetafinderDocumentSerializer(documents, many=True)\n\t\t\treturn Response({\"metadata\": serializer.data})\nclass ListIPs(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListIPs",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListIPs(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tport = req.query_params.get('port')\n\t\tif target_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "IpAddressViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class IpAddressViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = IpSubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tself.queryset = Subdomain.objects.filter(\n\t\t\t\tscan_history__id=scan_id).exclude(\n\t\t\t\tip_addresses__isnull=True).distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "SubdomainsViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class SubdomainsViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tif 'only_screenshot' in self.request.query_params:\n\t\t\t\treturn (\n\t\t\t\t\tSubdomain.objects",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "SubdomainChangesViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class SubdomainChangesViewSet(viewsets.ModelViewSet):\n\t'''\n\t\tThis viewset will return the Subdomain changes\n\t\tTo get the new subdomains, we will look for ScanHistory with\n\t\tsubdomain_discovery = True and the status of the last scan has to be\n\t\tsuccessful and calculate difference\n\t'''\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainChangesSerializer\n\tdef get_queryset(self):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "EndPointChangesViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class EndPointChangesViewSet(viewsets.ModelViewSet):\n\t'''\n\t\tThis viewset will return the EndPoint changes\n\t'''\n\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndPointChangesSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "InterestingSubdomainViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class InterestingSubdomainViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')\n\t\tif 'only_subdomains' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingSubdomainSerializer\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "InterestingEndpointViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class InterestingEndpointViewSet(viewsets.ModelViewSet):\n\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif 'only_endpoints' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingEndPointSerializer\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "SubdomainDatatableViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class SubdomainDatatableViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tname = req.query_params.get('name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListActivityLogsViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListActivityLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tactivity_id = req.query_params.get('activity_id')\n\t\tself.queryset = Command.objects.filter(activity__id=activity_id)\n\t\treturn self.queryset\nclass ListScanLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListScanLogsViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListScanLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tself.queryset = Command.objects.filter(scan_history__id=scan_id)\n\t\treturn self.queryset\nclass ListEndpoints(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "ListEndpoints",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class ListEndpoints(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tsubdomain_name = req.query_params.get('subdomain_name')\n\t\tpattern = req.query_params.get('pattern')\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "EndPointViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class EndPointViewSet(viewsets.ModelViewSet):\n\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tproject = req.query_params.get('project')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "DirectoryViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class DirectoryViewSet(viewsets.ModelViewSet):\n\tqueryset = DirectoryFile.objects.none()\n\tserializer_class = DirectoryFileSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomains = None\n\t\tif not (scan_id or subdomain_id):\n\t\t\treturn Response({",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "VulnerabilityViewSet",
        "kind": 6,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "class VulnerabilityViewSet(viewsets.ModelViewSet):\n\tqueryset = Vulnerability.objects.none()\n\tserializer_class = VulnerabilitySerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tdomain = req.query_params.get('domain')\n\t\tseverity = req.query_params.get('severity')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ToggleBugBountyModeView(APIView):\n\t\"\"\"\n\t\tThis class manages the user bug bounty mode\n\t\"\"\"\n\tdef post(self, request, *args, **kwargs):\n\t\tuser_preferences = get_object_or_404(UserPreferences, user=request.user)\n\t\tuser_preferences.bug_bounty_mode = not user_preferences.bug_bounty_mode\n\t\tuser_preferences.save()\n\t\treturn Response({",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tuser_preferences",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tuser_preferences = get_object_or_404(UserPreferences, user=request.user)\n\t\tuser_preferences.bug_bounty_mode = not user_preferences.bug_bounty_mode\n\t\tuser_preferences.save()\n\t\treturn Response({\n\t\t\t'bug_bounty_mode': user_preferences.bug_bounty_mode\n\t\t}, status=status.HTTP_200_OK)\nclass HackerOneProgramViewSet(viewsets.ViewSet):\n\t\"\"\"\n\t\tThis class manages the HackerOne Program model, \n\t\tprovides basic fetching of programs and caching",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tuser_preferences.bug_bounty_mode",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tuser_preferences.bug_bounty_mode = not user_preferences.bug_bounty_mode\n\t\tuser_preferences.save()\n\t\treturn Response({\n\t\t\t'bug_bounty_mode': user_preferences.bug_bounty_mode\n\t\t}, status=status.HTTP_200_OK)\nclass HackerOneProgramViewSet(viewsets.ViewSet):\n\t\"\"\"\n\t\tThis class manages the HackerOne Program model, \n\t\tprovides basic fetching of programs and caching\n\t\"\"\"",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tCACHE_KEY",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tCACHE_KEY = 'hackerone_programs'\n\tCACHE_TIMEOUT = 60 * 30 # 30 minutes\n\tPROGRAM_CACHE_KEY = 'hackerone_program_{}'\n\tAPI_BASE = 'https://api.hackerone.com/v1/hackers'\n\tALLOWED_ASSET_TYPES = [\"WILDCARD\", \"DOMAIN\", \"IP_ADDRESS\", \"CIDR\", \"URL\"]\n\tdef list(self, request):\n\t\ttry:\n\t\t\tsort_by = request.query_params.get('sort_by', 'age')\n\t\t\tsort_order = request.query_params.get('sort_order', 'desc')\n\t\t\tprograms = self.get_cached_programs()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tCACHE_TIMEOUT",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tCACHE_TIMEOUT = 60 * 30 # 30 minutes\n\tPROGRAM_CACHE_KEY = 'hackerone_program_{}'\n\tAPI_BASE = 'https://api.hackerone.com/v1/hackers'\n\tALLOWED_ASSET_TYPES = [\"WILDCARD\", \"DOMAIN\", \"IP_ADDRESS\", \"CIDR\", \"URL\"]\n\tdef list(self, request):\n\t\ttry:\n\t\t\tsort_by = request.query_params.get('sort_by', 'age')\n\t\t\tsort_order = request.query_params.get('sort_order', 'desc')\n\t\t\tprograms = self.get_cached_programs()\n\t\t\tif sort_by == 'name':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tPROGRAM_CACHE_KEY",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tPROGRAM_CACHE_KEY = 'hackerone_program_{}'\n\tAPI_BASE = 'https://api.hackerone.com/v1/hackers'\n\tALLOWED_ASSET_TYPES = [\"WILDCARD\", \"DOMAIN\", \"IP_ADDRESS\", \"CIDR\", \"URL\"]\n\tdef list(self, request):\n\t\ttry:\n\t\t\tsort_by = request.query_params.get('sort_by', 'age')\n\t\t\tsort_order = request.query_params.get('sort_order', 'desc')\n\t\t\tprograms = self.get_cached_programs()\n\t\t\tif sort_by == 'name':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes']['name'].lower(), ",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tAPI_BASE",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tAPI_BASE = 'https://api.hackerone.com/v1/hackers'\n\tALLOWED_ASSET_TYPES = [\"WILDCARD\", \"DOMAIN\", \"IP_ADDRESS\", \"CIDR\", \"URL\"]\n\tdef list(self, request):\n\t\ttry:\n\t\t\tsort_by = request.query_params.get('sort_by', 'age')\n\t\t\tsort_order = request.query_params.get('sort_order', 'desc')\n\t\t\tprograms = self.get_cached_programs()\n\t\t\tif sort_by == 'name':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes']['name'].lower(), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tALLOWED_ASSET_TYPES",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tALLOWED_ASSET_TYPES = [\"WILDCARD\", \"DOMAIN\", \"IP_ADDRESS\", \"CIDR\", \"URL\"]\n\tdef list(self, request):\n\t\ttry:\n\t\t\tsort_by = request.query_params.get('sort_by', 'age')\n\t\t\tsort_order = request.query_params.get('sort_order', 'desc')\n\t\t\tprograms = self.get_cached_programs()\n\t\t\tif sort_by == 'name':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes']['name'].lower(), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'reports':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsort_by",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsort_by = request.query_params.get('sort_by', 'age')\n\t\t\tsort_order = request.query_params.get('sort_order', 'desc')\n\t\t\tprograms = self.get_cached_programs()\n\t\t\tif sort_by == 'name':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes']['name'].lower(), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'reports':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes'].get('number_of_reports_for_user', 0), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'age':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsort_order",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsort_order = request.query_params.get('sort_order', 'desc')\n\t\t\tprograms = self.get_cached_programs()\n\t\t\tif sort_by == 'name':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes']['name'].lower(), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'reports':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes'].get('number_of_reports_for_user', 0), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'age':\n\t\t\t\tprograms = sorted(programs, ",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tprograms = self.get_cached_programs()\n\t\t\tif sort_by == 'name':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes']['name'].lower(), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'reports':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes'].get('number_of_reports_for_user', 0), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'age':\n\t\t\t\tprograms = sorted(programs, \n\t\t\t\t\tkey=lambda x: datetime.strptime(x['attributes'].get('started_accepting_at', '1970-01-01T00:00:00.000Z'), '%Y-%m-%dT%H:%M:%S.%fZ'), ",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes']['name'].lower(), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'reports':\n\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes'].get('number_of_reports_for_user', 0), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'age':\n\t\t\t\tprograms = sorted(programs, \n\t\t\t\t\tkey=lambda x: datetime.strptime(x['attributes'].get('started_accepting_at', '1970-01-01T00:00:00.000Z'), '%Y-%m-%dT%H:%M:%S.%fZ'), \n\t\t\t\t\treverse=(sort_order.lower() == 'desc')\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tprograms = sorted(programs, key=lambda x: x['attributes'].get('number_of_reports_for_user', 0), \n\t\t\t\t\t\treverse=(sort_order.lower() == 'desc'))\n\t\t\telif sort_by == 'age':\n\t\t\t\tprograms = sorted(programs, \n\t\t\t\t\tkey=lambda x: datetime.strptime(x['attributes'].get('started_accepting_at', '1970-01-01T00:00:00.000Z'), '%Y-%m-%dT%H:%M:%S.%fZ'), \n\t\t\t\t\treverse=(sort_order.lower() == 'desc')\n\t\t\t\t)\n\t\t\tserializer = HackerOneProgramSerializer(programs, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tprograms = sorted(programs, \n\t\t\t\t\tkey=lambda x: datetime.strptime(x['attributes'].get('started_accepting_at', '1970-01-01T00:00:00.000Z'), '%Y-%m-%dT%H:%M:%S.%fZ'), \n\t\t\t\t\treverse=(sort_order.lower() == 'desc')\n\t\t\t\t)\n\t\t\tserializer = HackerOneProgramSerializer(programs, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\tdef get_api_credentials(self):\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = HackerOneProgramSerializer(programs, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\tdef get_api_credentials(self):\n\t\ttry:\n\t\t\tapi_key = HackerOneAPIKey.objects.first()\n\t\t\tif not api_key:\n\t\t\t\traise ObjectDoesNotExist(\"HackerOne API credentials not found\")\n\t\t\treturn api_key.username, api_key.key",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tapi_key",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tapi_key = HackerOneAPIKey.objects.first()\n\t\t\tif not api_key:\n\t\t\t\traise ObjectDoesNotExist(\"HackerOne API credentials not found\")\n\t\t\treturn api_key.username, api_key.key\n\t\texcept ObjectDoesNotExist:\n\t\t\traise Exception(\"HackerOne API credentials not configured\")\n\t@action(detail=False, methods=['get'])\n\tdef bookmarked_programs(self, request):\n\t\ttry:\n\t\t\t# do not cache bookmarked programs due to the user specific nature",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tprograms = self.fetch_programs_from_hackerone()\n\t\t\tbookmarked = [p for p in programs if p['attributes']['bookmarked']]\n\t\t\tserializer = HackerOneProgramSerializer(bookmarked, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\t@action(detail=False, methods=['get'])\n\tdef bounty_programs(self, request):\n\t\ttry:\n\t\t\tprograms = self.get_cached_programs()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tbookmarked",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tbookmarked = [p for p in programs if p['attributes']['bookmarked']]\n\t\t\tserializer = HackerOneProgramSerializer(bookmarked, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\t@action(detail=False, methods=['get'])\n\tdef bounty_programs(self, request):\n\t\ttry:\n\t\t\tprograms = self.get_cached_programs()\n\t\t\tbounty_programs = [p for p in programs if p['attributes']['offers_bounties']]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = HackerOneProgramSerializer(bookmarked, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\t@action(detail=False, methods=['get'])\n\tdef bounty_programs(self, request):\n\t\ttry:\n\t\t\tprograms = self.get_cached_programs()\n\t\t\tbounty_programs = [p for p in programs if p['attributes']['offers_bounties']]\n\t\t\tserializer = HackerOneProgramSerializer(bounty_programs, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tprograms = self.get_cached_programs()\n\t\t\tbounty_programs = [p for p in programs if p['attributes']['offers_bounties']]\n\t\t\tserializer = HackerOneProgramSerializer(bounty_programs, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\tdef get_cached_programs(self):\n\t\tprograms = cache.get(self.CACHE_KEY)\n\t\tif programs is None:\n\t\t\tprograms = self.fetch_programs_from_hackerone()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tbounty_programs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tbounty_programs = [p for p in programs if p['attributes']['offers_bounties']]\n\t\t\tserializer = HackerOneProgramSerializer(bounty_programs, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\tdef get_cached_programs(self):\n\t\tprograms = cache.get(self.CACHE_KEY)\n\t\tif programs is None:\n\t\t\tprograms = self.fetch_programs_from_hackerone()\n\t\t\tcache.set(self.CACHE_KEY, programs, self.CACHE_TIMEOUT)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = HackerOneProgramSerializer(bounty_programs, many=True)\n\t\t\treturn Response(serializer.data)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\tdef get_cached_programs(self):\n\t\tprograms = cache.get(self.CACHE_KEY)\n\t\tif programs is None:\n\t\t\tprograms = self.fetch_programs_from_hackerone()\n\t\t\tcache.set(self.CACHE_KEY, programs, self.CACHE_TIMEOUT)\n\t\treturn programs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tprograms = cache.get(self.CACHE_KEY)\n\t\tif programs is None:\n\t\t\tprograms = self.fetch_programs_from_hackerone()\n\t\t\tcache.set(self.CACHE_KEY, programs, self.CACHE_TIMEOUT)\n\t\treturn programs\n\tdef fetch_programs_from_hackerone(self):\n\t\turl = f'{self.API_BASE}/programs?page[size]=100'\n\t\theaders = {'Accept': 'application/json'}\n\t\tall_programs = []\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tprograms = self.fetch_programs_from_hackerone()\n\t\t\tcache.set(self.CACHE_KEY, programs, self.CACHE_TIMEOUT)\n\t\treturn programs\n\tdef fetch_programs_from_hackerone(self):\n\t\turl = f'{self.API_BASE}/programs?page[size]=100'\n\t\theaders = {'Accept': 'application/json'}\n\t\tall_programs = []\n\t\ttry:\n\t\t\tusername, api_key = self.get_api_credentials()\n\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\turl = f'{self.API_BASE}/programs?page[size]=100'\n\t\theaders = {'Accept': 'application/json'}\n\t\tall_programs = []\n\t\ttry:\n\t\t\tusername, api_key = self.get_api_credentials()\n\t\texcept Exception as e:\n\t\t\traise Exception(\"API credentials error: \" + str(e))\n\t\twhile url:\n\t\t\tresponse = requests.get(\n\t\t\t\turl,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\theaders",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\theaders = {'Accept': 'application/json'}\n\t\tall_programs = []\n\t\ttry:\n\t\t\tusername, api_key = self.get_api_credentials()\n\t\texcept Exception as e:\n\t\t\traise Exception(\"API credentials error: \" + str(e))\n\t\twhile url:\n\t\t\tresponse = requests.get(\n\t\t\t\turl,\n\t\t\t\theaders=headers,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tall_programs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tall_programs = []\n\t\ttry:\n\t\t\tusername, api_key = self.get_api_credentials()\n\t\texcept Exception as e:\n\t\t\traise Exception(\"API credentials error: \" + str(e))\n\t\twhile url:\n\t\t\tresponse = requests.get(\n\t\t\t\turl,\n\t\t\t\theaders=headers,\n\t\t\t\tauth=(username, api_key)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = requests.get(\n\t\t\t\turl,\n\t\t\t\theaders=headers,\n\t\t\t\tauth=(username, api_key)\n\t\t\t)\n\t\t\tif response.status_code == 401:\n\t\t\t\traise Exception(\"Invalid API credentials\")\n\t\t\telif response.status_code != 200:\n\t\t\t\traise Exception(f\"HackerOne API request failed with status code {response.status_code}\")\n\t\t\tdata = response.json()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdata = response.json()\n\t\t\tall_programs.extend(data['data'])\n\t\t\turl = data['links'].get('next')\n\t\treturn all_programs\n\t@action(detail=False, methods=['post'])\n\tdef refresh_cache(self, request):\n\t\ttry:\n\t\t\tprograms = self.fetch_programs_from_hackerone()\n\t\t\tcache.set(self.CACHE_KEY, programs, self.CACHE_TIMEOUT)\n\t\t\treturn Response({\"status\": \"Cache refreshed successfully\"})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\turl",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\turl = data['links'].get('next')\n\t\treturn all_programs\n\t@action(detail=False, methods=['post'])\n\tdef refresh_cache(self, request):\n\t\ttry:\n\t\t\tprograms = self.fetch_programs_from_hackerone()\n\t\t\tcache.set(self.CACHE_KEY, programs, self.CACHE_TIMEOUT)\n\t\t\treturn Response({\"status\": \"Cache refreshed successfully\"})\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tprograms",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tprograms = self.fetch_programs_from_hackerone()\n\t\t\tcache.set(self.CACHE_KEY, programs, self.CACHE_TIMEOUT)\n\t\t\treturn Response({\"status\": \"Cache refreshed successfully\"})\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\t@action(detail=True, methods=['get'])\n\tdef program_details(self, request, pk=None):\n\t\ttry:\n\t\t\tprogram_handle = pk\n\t\t\tcache_key = self.PROGRAM_CACHE_KEY.format(program_handle)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tprogram_handle",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tprogram_handle = pk\n\t\t\tcache_key = self.PROGRAM_CACHE_KEY.format(program_handle)\n\t\t\tprogram_details = cache.get(cache_key)\n\t\t\tif program_details is None:\n\t\t\t\tprogram_details = self.fetch_program_details_from_hackerone(program_handle)\n\t\t\t\tif program_details:\n\t\t\t\t\tcache.set(cache_key, program_details, self.CACHE_TIMEOUT)\n\t\t\tif program_details:\n\t\t\t\tfiltered_scopes = [\n\t\t\t\t\tscope for scope in program_details.get('relationships', {}).get('structured_scopes', {}).get('data', [])",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tcache_key",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tcache_key = self.PROGRAM_CACHE_KEY.format(program_handle)\n\t\t\tprogram_details = cache.get(cache_key)\n\t\t\tif program_details is None:\n\t\t\t\tprogram_details = self.fetch_program_details_from_hackerone(program_handle)\n\t\t\t\tif program_details:\n\t\t\t\t\tcache.set(cache_key, program_details, self.CACHE_TIMEOUT)\n\t\t\tif program_details:\n\t\t\t\tfiltered_scopes = [\n\t\t\t\t\tscope for scope in program_details.get('relationships', {}).get('structured_scopes', {}).get('data', [])\n\t\t\t\t\tif scope.get('attributes', {}).get('asset_type') in self.ALLOWED_ASSET_TYPES",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tprogram_details",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tprogram_details = cache.get(cache_key)\n\t\t\tif program_details is None:\n\t\t\t\tprogram_details = self.fetch_program_details_from_hackerone(program_handle)\n\t\t\t\tif program_details:\n\t\t\t\t\tcache.set(cache_key, program_details, self.CACHE_TIMEOUT)\n\t\t\tif program_details:\n\t\t\t\tfiltered_scopes = [\n\t\t\t\t\tscope for scope in program_details.get('relationships', {}).get('structured_scopes', {}).get('data', [])\n\t\t\t\t\tif scope.get('attributes', {}).get('asset_type') in self.ALLOWED_ASSET_TYPES\n\t\t\t\t]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprogram_details",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tprogram_details = self.fetch_program_details_from_hackerone(program_handle)\n\t\t\t\tif program_details:\n\t\t\t\t\tcache.set(cache_key, program_details, self.CACHE_TIMEOUT)\n\t\t\tif program_details:\n\t\t\t\tfiltered_scopes = [\n\t\t\t\t\tscope for scope in program_details.get('relationships', {}).get('structured_scopes', {}).get('data', [])\n\t\t\t\t\tif scope.get('attributes', {}).get('asset_type') in self.ALLOWED_ASSET_TYPES\n\t\t\t\t]\n\t\t\t\tprogram_details['relationships']['structured_scopes']['data'] = filtered_scopes\n\t\t\t\treturn Response(program_details)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfiltered_scopes",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tfiltered_scopes = [\n\t\t\t\t\tscope for scope in program_details.get('relationships', {}).get('structured_scopes', {}).get('data', [])\n\t\t\t\t\tif scope.get('attributes', {}).get('asset_type') in self.ALLOWED_ASSET_TYPES\n\t\t\t\t]\n\t\t\t\tprogram_details['relationships']['structured_scopes']['data'] = filtered_scopes\n\t\t\t\treturn Response(program_details)\n\t\t\telse:\n\t\t\t\treturn Response({\"error\": \"Program not found\"}, status=status.HTTP_404_NOT_FOUND)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprogram_details['relationships']['structured_scopes']['data']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tprogram_details['relationships']['structured_scopes']['data'] = filtered_scopes\n\t\t\t\treturn Response(program_details)\n\t\t\telse:\n\t\t\t\treturn Response({\"error\": \"Program not found\"}, status=status.HTTP_404_NOT_FOUND)\n\t\texcept Exception as e:\n\t\t\treturn self.handle_exception(e)\n\tdef fetch_program_details_from_hackerone(self, program_handle):\n\t\turl = f'{self.API_BASE}/programs/{program_handle}'\n\t\theaders = {'Accept': 'application/json'}\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\turl = f'{self.API_BASE}/programs/{program_handle}'\n\t\theaders = {'Accept': 'application/json'}\n\t\ttry:\n\t\t\tusername, api_key = self.get_api_credentials()\n\t\texcept Exception as e:\n\t\t\traise Exception(\"API credentials error: \" + str(e))\n\t\tresponse = requests.get(\n\t\t\turl,\n\t\t\theaders=headers,\n\t\t\tauth=(username, api_key)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\theaders",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\theaders = {'Accept': 'application/json'}\n\t\ttry:\n\t\t\tusername, api_key = self.get_api_credentials()\n\t\texcept Exception as e:\n\t\t\traise Exception(\"API credentials error: \" + str(e))\n\t\tresponse = requests.get(\n\t\t\turl,\n\t\t\theaders=headers,\n\t\t\tauth=(username, api_key)\n\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = requests.get(\n\t\t\turl,\n\t\t\theaders=headers,\n\t\t\tauth=(username, api_key)\n\t\t)\n\t\tif response.status_code == 401:\n\t\t\traise Exception(\"Invalid API credentials\")\n\t\telif response.status_code == 200:\n\t\t\treturn response.json()\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tproject_slug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tproject_slug = request.query_params.get('project_slug')\n\t\t\tif not project_slug:\n\t\t\t\treturn Response({\"error\": \"Project slug is required\"}, status=status.HTTP_400_BAD_REQUEST)\n\t\t\thandles = request.data.get('handles', [])\n\t\t\tif not handles:\n\t\t\t\treturn Response({\"error\": \"No program handles provided\"}, status=status.HTTP_400_BAD_REQUEST)\n\t\t\timport_hackerone_programs_task.delay(handles, project_slug)\n\t\t\tcreate_inappnotification(\n\t\t\t\ttitle=\"HackerOne Program Import Started\",\n\t\t\t\tdescription=f\"Import process for {len(handles)} program(s) has begun.\",",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\thandles",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\thandles = request.data.get('handles', [])\n\t\t\tif not handles:\n\t\t\t\treturn Response({\"error\": \"No program handles provided\"}, status=status.HTTP_400_BAD_REQUEST)\n\t\t\timport_hackerone_programs_task.delay(handles, project_slug)\n\t\t\tcreate_inappnotification(\n\t\t\t\ttitle=\"HackerOne Program Import Started\",\n\t\t\t\tdescription=f\"Import process for {len(handles)} program(s) has begun.\",\n\t\t\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,\n\t\t\t\tproject_slug=project_slug,\n\t\t\t\ticon=\"mdi-download\",",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tproject_slug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tproject_slug = request.query_params.get('project_slug')\n\t\t\tif not project_slug:\n\t\t\t\treturn Response({\"error\": \"Project slug is required\"}, status=status.HTTP_400_BAD_REQUEST)\n\t\t\tsync_bookmarked_programs_task.delay(project_slug)\n\t\t\tcreate_inappnotification(\n\t\t\t\ttitle=\"HackerOne Bookmarked Programs Sync Started\",\n\t\t\t\tdescription=\"Sync process for bookmarked programs has begun.\",\n\t\t\t\tnotification_type=PROJECT_LEVEL_NOTIFICATION,\n\t\t\t\tproject_slug=project_slug,\n\t\t\t\ticon=\"mdi-sync\",",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = InAppNotificationSerializer\n\tpagination_class = None\n\tdef get_queryset(self):\n\t\t# we will see later if user based notif is needed\n\t\t# return InAppNotification.objects.filter(user=self.request.user)\n\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = InAppNotification.objects.all()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tpagination_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tpagination_class = None\n\tdef get_queryset(self):\n\t\t# we will see later if user based notif is needed\n\t\t# return InAppNotification.objects.filter(user=self.request.user)\n\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = InAppNotification.objects.all()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject_slug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = InAppNotification.objects.all()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\treturn queryset.order_by('-created_at')\n\t@action(detail=False, methods=['post'])\n\tdef mark_all_read(self, request):\n\t\t# marks all notification read",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqueryset = InAppNotification.objects.all()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\treturn queryset.order_by('-created_at')\n\t@action(detail=False, methods=['post'])\n\tdef mark_all_read(self, request):\n\t\t# marks all notification read\n\t\tproject_slug = self.request.query_params.get('project_slug')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\treturn queryset.order_by('-created_at')\n\t@action(detail=False, methods=['post'])\n\tdef mark_all_read(self, request):\n\t\t# marks all notification read\n\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = self.get_queryset()\n\t\tif project_slug:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject_slug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = self.get_queryset()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tqueryset.update(is_read=True)\n\t\treturn Response(status=HTTP_204_NO_CONTENT)\n\t@action(detail=True, methods=['post'])\n\tdef mark_read(self, request, pk=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqueryset = self.get_queryset()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tqueryset.update(is_read=True)\n\t\treturn Response(status=HTTP_204_NO_CONTENT)\n\t@action(detail=True, methods=['post'])\n\tdef mark_read(self, request, pk=None):\n\t\t# mark individual notification read when cliked",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tqueryset.update(is_read=True)\n\t\treturn Response(status=HTTP_204_NO_CONTENT)\n\t@action(detail=True, methods=['post'])\n\tdef mark_read(self, request, pk=None):\n\t\t# mark individual notification read when cliked\n\t\tnotification = self.get_object()\n\t\tnotification.is_read = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tnotification",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tnotification = self.get_object()\n\t\tnotification.is_read = True\n\t\tnotification.save()\n\t\treturn Response(status=HTTP_204_NO_CONTENT)\n\t@action(detail=False, methods=['get'])\n\tdef unread_count(self, request):\n\t\t# this fetches the count for unread notif mainly for the badge\n\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = self.get_queryset()\n\t\tif project_slug:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tnotification.is_read",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tnotification.is_read = True\n\t\tnotification.save()\n\t\treturn Response(status=HTTP_204_NO_CONTENT)\n\t@action(detail=False, methods=['get'])\n\tdef unread_count(self, request):\n\t\t# this fetches the count for unread notif mainly for the badge\n\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = self.get_queryset()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject_slug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = self.get_queryset()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tcount = queryset.filter(is_read=False).count()\n\t\treturn Response({'count': count})\n\t@action(detail=False, methods=['post'])\n\tdef clear_all(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqueryset = self.get_queryset()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tcount = queryset.filter(is_read=False).count()\n\t\treturn Response({'count': count})\n\t@action(detail=False, methods=['post'])\n\tdef clear_all(self, request):\n\t\t# when clicked on the clear button this must be called to clear all notif",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tcount = queryset.filter(is_read=False).count()\n\t\treturn Response({'count': count})\n\t@action(detail=False, methods=['post'])\n\tdef clear_all(self, request):\n\t\t# when clicked on the clear button this must be called to clear all notif\n\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = self.get_queryset()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tcount",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tcount = queryset.filter(is_read=False).count()\n\t\treturn Response({'count': count})\n\t@action(detail=False, methods=['post'])\n\tdef clear_all(self, request):\n\t\t# when clicked on the clear button this must be called to clear all notif\n\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = self.get_queryset()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject_slug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject_slug = self.request.query_params.get('project_slug')\n\t\tqueryset = self.get_queryset()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tqueryset.delete()\n\t\treturn Response(status=HTTP_204_NO_CONTENT)\nclass OllamaManager(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqueryset = self.get_queryset()\n\t\tif project_slug:\n\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tqueryset.delete()\n\t\treturn Response(status=HTTP_204_NO_CONTENT)\nclass OllamaManager(APIView):\n\tdef get(self, request):\n\t\t\"\"\"",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqueryset = queryset.filter(\n\t\t\t\tQ(project__slug=project_slug) | Q(notification_type='system')\n\t\t\t)\n\t\tqueryset.delete()\n\t\treturn Response(status=HTTP_204_NO_CONTENT)\nclass OllamaManager(APIView):\n\tdef get(self, request):\n\t\t\"\"\"\n\t\tAPI to download Ollama Models\n\t\tsends a POST request to download the model",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\ttry:\n\t\t\tpull_model_api = f'{OLLAMA_INSTANCE}/api/pull'\n\t\t\t_response = requests.post(\n\t\t\t\tpull_model_api, \n\t\t\t\tjson={",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tmodel_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tmodel_name = req.query_params.get('model')\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\ttry:\n\t\t\tpull_model_api = f'{OLLAMA_INSTANCE}/api/pull'\n\t\t\t_response = requests.post(\n\t\t\t\tpull_model_api, \n\t\t\t\tjson={\n\t\t\t\t\t'name': model_name,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\ttry:\n\t\t\tpull_model_api = f'{OLLAMA_INSTANCE}/api/pull'\n\t\t\t_response = requests.post(\n\t\t\t\tpull_model_api, \n\t\t\t\tjson={\n\t\t\t\t\t'name': model_name,\n\t\t\t\t\t'stream': False",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpull_model_api",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpull_model_api = f'{OLLAMA_INSTANCE}/api/pull'\n\t\t\t_response = requests.post(\n\t\t\t\tpull_model_api, \n\t\t\t\tjson={\n\t\t\t\t\t'name': model_name,\n\t\t\t\t\t'stream': False\n\t\t\t\t}\n\t\t\t).json()\n\t\t\tif _response.get('error'):\n\t\t\t\tresponse['status'] = False",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t_response",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t_response = requests.post(\n\t\t\t\tpull_model_api, \n\t\t\t\tjson={\n\t\t\t\t\t'name': model_name,\n\t\t\t\t\t'stream': False\n\t\t\t\t}\n\t\t\t).json()\n\t\t\tif _response.get('error'):\n\t\t\t\tresponse['status'] = False\n\t\t\t\tresponse['error'] = _response.get('error')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = False\n\t\t\t\tresponse['error'] = _response.get('error')\n\t\t\telse:\n\t\t\t\tresponse['status'] = True\n\t\texcept Exception as e:\n\t\t\tresponse['error'] = str(e)\t\t\n\t\treturn Response(response)\n\tdef delete(self, request):\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['error']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['error'] = _response.get('error')\n\t\t\telse:\n\t\t\t\tresponse['status'] = True\n\t\texcept Exception as e:\n\t\t\tresponse['error'] = str(e)\t\t\n\t\treturn Response(response)\n\tdef delete(self, request):\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\tdelete_model_api = f'{OLLAMA_INSTANCE}/api/delete'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\texcept Exception as e:\n\t\t\tresponse['error'] = str(e)\t\t\n\t\treturn Response(response)\n\tdef delete(self, request):\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\tdelete_model_api = f'{OLLAMA_INSTANCE}/api/delete'\n\t\tresponse = {\n\t\t\t'status': False",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['error']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['error'] = str(e)\t\t\n\t\treturn Response(response)\n\tdef delete(self, request):\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\tdelete_model_api = f'{OLLAMA_INSTANCE}/api/delete'\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\tdelete_model_api = f'{OLLAMA_INSTANCE}/api/delete'\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\ttry:\n\t\t\t_response = requests.delete(\n\t\t\t\tdelete_model_api, \n\t\t\t\tjson={",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tmodel_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tmodel_name = req.query_params.get('model')\n\t\tdelete_model_api = f'{OLLAMA_INSTANCE}/api/delete'\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\ttry:\n\t\t\t_response = requests.delete(\n\t\t\t\tdelete_model_api, \n\t\t\t\tjson={\n\t\t\t\t\t'name': model_name",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdelete_model_api",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdelete_model_api = f'{OLLAMA_INSTANCE}/api/delete'\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\ttry:\n\t\t\t_response = requests.delete(\n\t\t\t\tdelete_model_api, \n\t\t\t\tjson={\n\t\t\t\t\t'name': model_name\n\t\t\t\t}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\ttry:\n\t\t\t_response = requests.delete(\n\t\t\t\tdelete_model_api, \n\t\t\t\tjson={\n\t\t\t\t\t'name': model_name\n\t\t\t\t}\n\t\t\t).json()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t_response",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t_response = requests.delete(\n\t\t\t\tdelete_model_api, \n\t\t\t\tjson={\n\t\t\t\t\t'name': model_name\n\t\t\t\t}\n\t\t\t).json()\n\t\t\tif _response.get('error'):\n\t\t\t\tresponse['status'] = False\n\t\t\t\tresponse['error'] = _response.get('error')\n\t\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = False\n\t\t\t\tresponse['error'] = _response.get('error')\n\t\t\telse:\n\t\t\t\tresponse['status'] = True\n\t\texcept Exception as e:\n\t\t\tresponse['error'] = str(e)\n\t\treturn Response(response)\n\tdef put(self, request):\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['error']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['error'] = _response.get('error')\n\t\t\telse:\n\t\t\t\tresponse['status'] = True\n\t\texcept Exception as e:\n\t\t\tresponse['error'] = str(e)\n\t\treturn Response(response)\n\tdef put(self, request):\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\t# check if model_name is in DEFAULT_GPT_MODELS",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\texcept Exception as e:\n\t\t\tresponse['error'] = str(e)\n\t\treturn Response(response)\n\tdef put(self, request):\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\t# check if model_name is in DEFAULT_GPT_MODELS\n\t\tresponse = {\n\t\t\t'status': False",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['error']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['error'] = str(e)\n\t\treturn Response(response)\n\tdef put(self, request):\n\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\t# check if model_name is in DEFAULT_GPT_MODELS\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\tuse_ollama = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tmodel_name = req.query_params.get('model')\n\t\t# check if model_name is in DEFAULT_GPT_MODELS\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\tuse_ollama = True\n\t\tif any(model['name'] == model_name for model in DEFAULT_GPT_MODELS):\n\t\t\tuse_ollama = False\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tmodel_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tmodel_name = req.query_params.get('model')\n\t\t# check if model_name is in DEFAULT_GPT_MODELS\n\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\tuse_ollama = True\n\t\tif any(model['name'] == model_name for model in DEFAULT_GPT_MODELS):\n\t\t\tuse_ollama = False\n\t\ttry:\n\t\t\tOllamaSettings.objects.update_or_create(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {\n\t\t\t'status': False\n\t\t}\n\t\tuse_ollama = True\n\t\tif any(model['name'] == model_name for model in DEFAULT_GPT_MODELS):\n\t\t\tuse_ollama = False\n\t\ttry:\n\t\t\tOllamaSettings.objects.update_or_create(\n\t\t\t\tdefaults={\n\t\t\t\t\t'selected_model': model_name,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tuse_ollama",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tuse_ollama = True\n\t\tif any(model['name'] == model_name for model in DEFAULT_GPT_MODELS):\n\t\t\tuse_ollama = False\n\t\ttry:\n\t\t\tOllamaSettings.objects.update_or_create(\n\t\t\t\tdefaults={\n\t\t\t\t\t'selected_model': model_name,\n\t\t\t\t\t'use_ollama': use_ollama\n\t\t\t\t},\n\t\t\t\tid=1",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tuse_ollama",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tuse_ollama = False\n\t\ttry:\n\t\t\tOllamaSettings.objects.update_or_create(\n\t\t\t\tdefaults={\n\t\t\t\t\t'selected_model': model_name,\n\t\t\t\t\t'use_ollama': use_ollama\n\t\t\t\t},\n\t\t\t\tid=1\n\t\t\t)\n\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\texcept Exception as e:\n\t\t\tresponse['error'] = str(e)\n\t\treturn Response(response)\nclass GPTAttackSuggestion(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif not subdomain_id:\n\t\t\treturn Response({",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['error']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['error'] = str(e)\n\t\treturn Response(response)\nclass GPTAttackSuggestion(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif not subdomain_id:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Missing GET param Subdomain `subdomain_id`'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif not subdomain_id:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Missing GET param Subdomain `subdomain_id`'\n\t\t\t})\n\t\ttry:\n\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif not subdomain_id:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Missing GET param Subdomain `subdomain_id`'\n\t\t\t})\n\t\ttry:\n\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\texcept Exception as e:\n\t\t\treturn Response({",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\texcept Exception as e:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Subdomain not found with id ' + subdomain_id\n\t\t\t})\n\t\tif subdomain.attack_surface:\n\t\t\treturn Response({\n\t\t\t\t'status': True,\n\t\t\t\t'subdomain_name': subdomain.name,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tip_addrs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tip_addrs = subdomain.ip_addresses.all()\n\t\topen_ports_str = ''\n\t\tfor ip in ip_addrs:\n\t\t\tports = ip.ports.all()\n\t\t\tfor port in ports:\n\t\t\t\topen_ports_str += f'{port.number}/{port.service_name}, '\n\t\ttech_used = ''\n\t\tfor tech in subdomain.technologies.all():\n\t\t\ttech_used += f'{tech.name}, '\n\t\tllm_input = f'''",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\topen_ports_str",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\topen_ports_str = ''\n\t\tfor ip in ip_addrs:\n\t\t\tports = ip.ports.all()\n\t\t\tfor port in ports:\n\t\t\t\topen_ports_str += f'{port.number}/{port.service_name}, '\n\t\ttech_used = ''\n\t\tfor tech in subdomain.technologies.all():\n\t\t\ttech_used += f'{tech.name}, '\n\t\tllm_input = f'''\n\t\t\tSubdomain Name: {subdomain.name}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tports",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tports = ip.ports.all()\n\t\t\tfor port in ports:\n\t\t\t\topen_ports_str += f'{port.number}/{port.service_name}, '\n\t\ttech_used = ''\n\t\tfor tech in subdomain.technologies.all():\n\t\t\ttech_used += f'{tech.name}, '\n\t\tllm_input = f'''\n\t\t\tSubdomain Name: {subdomain.name}\n\t\t\tSubdomain Page Title: {subdomain.page_title}\n\t\t\tOpen Ports: {open_ports_str}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttech_used",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttech_used = ''\n\t\tfor tech in subdomain.technologies.all():\n\t\t\ttech_used += f'{tech.name}, '\n\t\tllm_input = f'''\n\t\t\tSubdomain Name: {subdomain.name}\n\t\t\tSubdomain Page Title: {subdomain.page_title}\n\t\t\tOpen Ports: {open_ports_str}\n\t\t\tHTTP Status: {subdomain.http_status}\n\t\t\tTechnologies Used: {tech_used}\n\t\t\tContent type: {subdomain.content_type}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tllm_input",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tllm_input = f'''\n\t\t\tSubdomain Name: {subdomain.name}\n\t\t\tSubdomain Page Title: {subdomain.page_title}\n\t\t\tOpen Ports: {open_ports_str}\n\t\t\tHTTP Status: {subdomain.http_status}\n\t\t\tTechnologies Used: {tech_used}\n\t\t\tContent type: {subdomain.content_type}\n\t\t\tWeb Server: {subdomain.webserver}\n\t\t\tPage Content Length: {subdomain.content_length}\n\t\t'''",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tllm_input",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tllm_input = re.sub(r'\\t', '', llm_input)\n\t\tgpt = LLMAttackSuggestionGenerator(logger)\n\t\tresponse = gpt.get_attack_suggestion(llm_input)\n\t\tresponse['subdomain_name'] = subdomain.name\n\t\tif response.get('status'):\n\t\t\tsubdomain.attack_surface = response.get('description')\n\t\t\tsubdomain.save()\n\t\treturn Response(response)\nclass LLMVulnerabilityReportGenerator(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tgpt",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tgpt = LLMAttackSuggestionGenerator(logger)\n\t\tresponse = gpt.get_attack_suggestion(llm_input)\n\t\tresponse['subdomain_name'] = subdomain.name\n\t\tif response.get('status'):\n\t\t\tsubdomain.attack_surface = response.get('description')\n\t\t\tsubdomain.save()\n\t\treturn Response(response)\nclass LLMVulnerabilityReportGenerator(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = gpt.get_attack_suggestion(llm_input)\n\t\tresponse['subdomain_name'] = subdomain.name\n\t\tif response.get('status'):\n\t\t\tsubdomain.attack_surface = response.get('description')\n\t\t\tsubdomain.save()\n\t\treturn Response(response)\nclass LLMVulnerabilityReportGenerator(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tvulnerability_id = req.query_params.get('id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['subdomain_name']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['subdomain_name'] = subdomain.name\n\t\tif response.get('status'):\n\t\t\tsubdomain.attack_surface = response.get('description')\n\t\t\tsubdomain.save()\n\t\treturn Response(response)\nclass LLMVulnerabilityReportGenerator(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tvulnerability_id = req.query_params.get('id')\n\t\tif not vulnerability_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.attack_surface",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain.attack_surface = response.get('description')\n\t\t\tsubdomain.save()\n\t\treturn Response(response)\nclass LLMVulnerabilityReportGenerator(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tvulnerability_id = req.query_params.get('id')\n\t\tif not vulnerability_id:\n\t\t\treturn Response({\n\t\t\t\t'status': False,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tvulnerability_id = req.query_params.get('id')\n\t\tif not vulnerability_id:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Missing GET param Vulnerability `id`'\n\t\t\t})\n\t\ttask = llm_vulnerability_description.apply_async(args=(vulnerability_id,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tvulnerability_id = req.query_params.get('id')\n\t\tif not vulnerability_id:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Missing GET param Vulnerability `id`'\n\t\t\t})\n\t\ttask = llm_vulnerability_description.apply_async(args=(vulnerability_id,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CreateProjectApi(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttask",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttask = llm_vulnerability_description.apply_async(args=(vulnerability_id,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CreateProjectApi(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tproject_name = req.query_params.get('name')\n\t\tslug = slugify(project_name)\n\t\tinsert_date = timezone.now()\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CreateProjectApi(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tproject_name = req.query_params.get('name')\n\t\tslug = slugify(project_name)\n\t\tinsert_date = timezone.now()\n\t\ttry:\n\t\t\tproject = Project.objects.create(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tproject_name = req.query_params.get('name')\n\t\tslug = slugify(project_name)\n\t\tinsert_date = timezone.now()\n\t\ttry:\n\t\t\tproject = Project.objects.create(\n\t\t\t\tname=project_name,\n\t\t\t\tslug=slug,\n\t\t\t\tinsert_date =insert_date\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject_name = req.query_params.get('name')\n\t\tslug = slugify(project_name)\n\t\tinsert_date = timezone.now()\n\t\ttry:\n\t\t\tproject = Project.objects.create(\n\t\t\t\tname=project_name,\n\t\t\t\tslug=slug,\n\t\t\t\tinsert_date =insert_date\n\t\t\t)\n\t\t\tresponse = {",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tslug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tslug = slugify(project_name)\n\t\tinsert_date = timezone.now()\n\t\ttry:\n\t\t\tproject = Project.objects.create(\n\t\t\t\tname=project_name,\n\t\t\t\tslug=slug,\n\t\t\t\tinsert_date =insert_date\n\t\t\t)\n\t\t\tresponse = {\n\t\t\t\t'status': True,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tinsert_date",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tinsert_date = timezone.now()\n\t\ttry:\n\t\t\tproject = Project.objects.create(\n\t\t\t\tname=project_name,\n\t\t\t\tslug=slug,\n\t\t\t\tinsert_date =insert_date\n\t\t\t)\n\t\t\tresponse = {\n\t\t\t\t'status': True,\n\t\t\t\t'project_name': project_name",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tproject = Project.objects.create(\n\t\t\t\tname=project_name,\n\t\t\t\tslug=slug,\n\t\t\t\tinsert_date =insert_date\n\t\t\t)\n\t\t\tresponse = {\n\t\t\t\t'status': True,\n\t\t\t\t'project_name': project_name\n\t\t\t}\n\t\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {\n\t\t\t\t'status': True,\n\t\t\t\t'project_name': project_name\n\t\t\t}\n\t\t\treturn Response(response)\n\t\texcept Exception as e:\n\t\t\tresponse = {\n\t\t\t\t'status': False,\n\t\t\t\t'error': str(e)\n\t\t\t}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {\n\t\t\t\t'status': False,\n\t\t\t\t'error': str(e)\n\t\t\t}\n\t\t\treturn Response(response, status=HTTP_400_BAD_REQUEST)\nclass QueryInterestingSubdomains(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')\n\t\tif scan_id:\n\t\t\tqueryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tqueryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tqueryset = get_interesting_subdomains()\n\t\tqueryset = queryset.distinct('name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')\n\t\tif scan_id:\n\t\t\tqueryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tqueryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tqueryset = get_interesting_subdomains()\n\t\tqueryset = queryset.distinct('name')\n\t\treturn Response(InterestingSubdomainSerializer(queryset, many=True).data)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain_id = req.query_params.get('target_id')\n\t\tif scan_id:\n\t\t\tqueryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tqueryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tqueryset = get_interesting_subdomains()\n\t\tqueryset = queryset.distinct('name')\n\t\treturn Response(InterestingSubdomainSerializer(queryset, many=True).data)\nclass ListTargetsDatatableViewSet(viewsets.ModelViewSet):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqueryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tqueryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tqueryset = get_interesting_subdomains()\n\t\tqueryset = queryset.distinct('name')\n\t\treturn Response(InterestingSubdomainSerializer(queryset, many=True).data)\nclass ListTargetsDatatableViewSet(viewsets.ModelViewSet):\n\tqueryset = Domain.objects.all()\n\tserializer_class = DomainSerializer",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqueryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tqueryset = get_interesting_subdomains()\n\t\tqueryset = queryset.distinct('name')\n\t\treturn Response(InterestingSubdomainSerializer(queryset, many=True).data)\nclass ListTargetsDatatableViewSet(viewsets.ModelViewSet):\n\tqueryset = Domain.objects.all()\n\tserializer_class = DomainSerializer\n\tdef get_queryset(self):\n\t\tslug = self.request.GET.get('slug', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqueryset = get_interesting_subdomains()\n\t\tqueryset = queryset.distinct('name')\n\t\treturn Response(InterestingSubdomainSerializer(queryset, many=True).data)\nclass ListTargetsDatatableViewSet(viewsets.ModelViewSet):\n\tqueryset = Domain.objects.all()\n\tserializer_class = DomainSerializer\n\tdef get_queryset(self):\n\t\tslug = self.request.GET.get('slug', None)\n\t\tif slug:\n\t\t\tself.queryset = self.queryset.filter(project__slug=slug)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqueryset = queryset.distinct('name')\n\t\treturn Response(InterestingSubdomainSerializer(queryset, many=True).data)\nclass ListTargetsDatatableViewSet(viewsets.ModelViewSet):\n\tqueryset = Domain.objects.all()\n\tserializer_class = DomainSerializer\n\tdef get_queryset(self):\n\t\tslug = self.request.GET.get('slug', None)\n\t\tif slug:\n\t\t\tself.queryset = self.queryset.filter(project__slug=slug)\n\t\treturn self.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Domain.objects.all()\n\tserializer_class = DomainSerializer\n\tdef get_queryset(self):\n\t\tslug = self.request.GET.get('slug', None)\n\t\tif slug:\n\t\t\tself.queryset = self.queryset.filter(project__slug=slug)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = DomainSerializer\n\tdef get_queryset(self):\n\t\tslug = self.request.GET.get('slug', None)\n\t\tif slug:\n\t\t\tself.queryset = self.queryset.filter(project__slug=slug)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tslug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tslug = self.request.GET.get('slug', None)\n\t\tif slug:\n\t\t\tself.queryset = self.queryset.filter(project__slug=slug)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = self.queryset.filter(project__slug=slug)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'id'\n\t\t\tif _order_col == '2':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'id'\n\t\t\tif _order_col == '2':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'insert_date'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsearch_value",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'id'\n\t\t\tif _order_col == '2':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'insert_date'\n\t\t\telif _order_col == '5':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'id'\n\t\t\tif _order_col == '2':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'insert_date'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'start_scan_date'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_direction",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'id'\n\t\t\tif _order_col == '2':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'insert_date'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'start_scan_date'\n\t\t\t\tif _order_direction == 'desc':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'id'\n\t\t\tif _order_col == '2':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'insert_date'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'start_scan_date'\n\t\t\t\tif _order_direction == 'desc':\n\t\t\t\t\treturn qs.order_by(F('start_scan_date').desc(nulls_last=True))\n\t\t\t\treturn qs.order_by(F('start_scan_date').asc(nulls_last=True))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'insert_date'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'start_scan_date'\n\t\t\t\tif _order_direction == 'desc':\n\t\t\t\t\treturn qs.order_by(F('start_scan_date').desc(nulls_last=True))\n\t\t\t\treturn qs.order_by(F('start_scan_date').asc(nulls_last=True))\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'insert_date'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'start_scan_date'\n\t\t\t\tif _order_direction == 'desc':\n\t\t\t\t\treturn qs.order_by(F('start_scan_date').desc(nulls_last=True))\n\t\t\t\treturn qs.order_by(F('start_scan_date').asc(nulls_last=True))\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'start_scan_date'\n\t\t\t\tif _order_direction == 'desc':\n\t\t\t\t\treturn qs.order_by(F('start_scan_date').desc(nulls_last=True))\n\t\t\t\treturn qs.order_by(F('start_scan_date').asc(nulls_last=True))\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |\n\t\t\t\tQ(description__icontains=search_value) |\n\t\t\t\tQ(domains__name__icontains=search_value)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = f'-{order_col}'\n\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |\n\t\t\t\tQ(description__icontains=search_value) |\n\t\t\t\tQ(domains__name__icontains=search_value)\n\t\t\t)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs.order_by('-id')\nclass WafDetector(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |\n\t\t\t\tQ(description__icontains=search_value) |\n\t\t\t\tQ(domains__name__icontains=search_value)\n\t\t\t)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs.order_by('-id')\nclass WafDetector(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\turl= req.query_params.get('url')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\t# validate url as a first step to avoid command injection\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\twafw00f_command = f'wafw00f {url}'\n\t\t_, output = run_command(wafw00f_command, remove_ansi_sequence=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\t# validate url as a first step to avoid command injection\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\twafw00f_command = f'wafw00f {url}'\n\t\t_, output = run_command(wafw00f_command, remove_ansi_sequence=True)\n\t\tregex = r\"behind (.*?) WAF\"\n\t\tgroup = re.search(regex, output)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['status'] = False\n\t\t# validate url as a first step to avoid command injection\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\twafw00f_command = f'wafw00f {url}'\n\t\t_, output = run_command(wafw00f_command, remove_ansi_sequence=True)\n\t\tregex = r\"behind (.*?) WAF\"\n\t\tgroup = re.search(regex, output)\n\t\tif group:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\twafw00f_command = f'wafw00f {url}'\n\t\t_, output = run_command(wafw00f_command, remove_ansi_sequence=True)\n\t\tregex = r\"behind (.*?) WAF\"\n\t\tgroup = re.search(regex, output)\n\t\tif group:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = group.group(1)\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\twafw00f_command",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\twafw00f_command = f'wafw00f {url}'\n\t\t_, output = run_command(wafw00f_command, remove_ansi_sequence=True)\n\t\tregex = r\"behind (.*?) WAF\"\n\t\tgroup = re.search(regex, output)\n\t\tif group:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = group.group(1)\n\t\telse:\n\t\t\tresponse['message'] = 'Could not detect any WAF!'\n\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tregex",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tregex = r\"behind (.*?) WAF\"\n\t\tgroup = re.search(regex, output)\n\t\tif group:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = group.group(1)\n\t\telse:\n\t\t\tresponse['message'] = 'Could not detect any WAF!'\n\t\treturn Response(response)\nclass SearchHistoryView(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tgroup",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tgroup = re.search(regex, output)\n\t\tif group:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = group.group(1)\n\t\telse:\n\t\t\tresponse['message'] = 'Could not detect any WAF!'\n\t\treturn Response(response)\nclass SearchHistoryView(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = group.group(1)\n\t\telse:\n\t\t\tresponse['message'] = 'Could not detect any WAF!'\n\t\treturn Response(response)\nclass SearchHistoryView(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tresponse = {}\n\t\tresponse['status'] = False",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['results']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['results'] = group.group(1)\n\t\telse:\n\t\t\tresponse['message'] = 'Could not detect any WAF!'\n\t\treturn Response(response)\nclass SearchHistoryView(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tscan_history = SearchHistory.objects.all().order_by('-id')[:5]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['message'] = 'Could not detect any WAF!'\n\t\treturn Response(response)\nclass SearchHistoryView(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tscan_history = SearchHistory.objects.all().order_by('-id')[:5]\n\t\tif scan_history:\n\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tscan_history = SearchHistory.objects.all().order_by('-id')[:5]\n\t\tif scan_history:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = SearchHistorySerializer(scan_history, many=True).data\n\t\treturn Response(response)\nclass UniversalSearch(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tscan_history = SearchHistory.objects.all().order_by('-id')[:5]\n\t\tif scan_history:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = SearchHistorySerializer(scan_history, many=True).data\n\t\treturn Response(response)\nclass UniversalSearch(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['status'] = False\n\t\tscan_history = SearchHistory.objects.all().order_by('-id')[:5]\n\t\tif scan_history:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = SearchHistorySerializer(scan_history, many=True).data\n\t\treturn Response(response)\nclass UniversalSearch(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tquery = req.query_params.get('query')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_history = SearchHistory.objects.all().order_by('-id')[:5]\n\t\tif scan_history:\n\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = SearchHistorySerializer(scan_history, many=True).data\n\t\treturn Response(response)\nclass UniversalSearch(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tquery = req.query_params.get('query')\n\t\tresponse = {}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\t\tresponse['results'] = SearchHistorySerializer(scan_history, many=True).data\n\t\treturn Response(response)\nclass UniversalSearch(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tquery = req.query_params.get('query')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif not query:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['results']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['results'] = SearchHistorySerializer(scan_history, many=True).data\n\t\treturn Response(response)\nclass UniversalSearch(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tquery = req.query_params.get('query')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif not query:\n\t\t\tresponse['message'] = 'No query parameter provided!'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tquery = req.query_params.get('query')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif not query:\n\t\t\tresponse['message'] = 'No query parameter provided!'\n\t\t\treturn Response(response)\n\t\tresponse['results'] = {}\n\t\t# search history to be saved\n\t\tSearchHistory.objects.get_or_create(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tquery = req.query_params.get('query')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif not query:\n\t\t\tresponse['message'] = 'No query parameter provided!'\n\t\t\treturn Response(response)\n\t\tresponse['results'] = {}\n\t\t# search history to be saved\n\t\tSearchHistory.objects.get_or_create(\n\t\t\tquery=query",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif not query:\n\t\t\tresponse['message'] = 'No query parameter provided!'\n\t\t\treturn Response(response)\n\t\tresponse['results'] = {}\n\t\t# search history to be saved\n\t\tSearchHistory.objects.get_or_create(\n\t\t\tquery=query\n\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['status'] = False\n\t\tif not query:\n\t\t\tresponse['message'] = 'No query parameter provided!'\n\t\t\treturn Response(response)\n\t\tresponse['results'] = {}\n\t\t# search history to be saved\n\t\tSearchHistory.objects.get_or_create(\n\t\t\tquery=query\n\t\t)\n\t\t# lookup query in subdomain",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['message'] = 'No query parameter provided!'\n\t\t\treturn Response(response)\n\t\tresponse['results'] = {}\n\t\t# search history to be saved\n\t\tSearchHistory.objects.get_or_create(\n\t\t\tquery=query\n\t\t)\n\t\t# lookup query in subdomain\n\t\tsubdomain = Subdomain.objects.filter(\n\t\t\tQ(name__icontains=query) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['results']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['results'] = {}\n\t\t# search history to be saved\n\t\tSearchHistory.objects.get_or_create(\n\t\t\tquery=query\n\t\t)\n\t\t# lookup query in subdomain\n\t\tsubdomain = Subdomain.objects.filter(\n\t\t\tQ(name__icontains=query) |\n\t\t\tQ(cname__icontains=query) |\n\t\t\tQ(page_title__icontains=query) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain = Subdomain.objects.filter(\n\t\t\tQ(name__icontains=query) |\n\t\t\tQ(cname__icontains=query) |\n\t\t\tQ(page_title__icontains=query) |\n\t\t\tQ(http_url__icontains=query)\n\t\t).distinct('name')\n\t\tsubdomain_data = SubdomainSerializer(subdomain, many=True).data\n\t\tresponse['results']['subdomains'] = subdomain_data\n\t\tendpoint = EndPoint.objects.filter(\n\t\t\tQ(http_url__icontains=query) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_data",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_data = SubdomainSerializer(subdomain, many=True).data\n\t\tresponse['results']['subdomains'] = subdomain_data\n\t\tendpoint = EndPoint.objects.filter(\n\t\t\tQ(http_url__icontains=query) |\n\t\t\tQ(page_title__icontains=query)\n\t\t).distinct('http_url')\n\t\tendpoint_data = EndpointSerializer(endpoint, many=True).data\n\t\tresponse['results']['endpoints'] = endpoint_data\n\t\tvulnerability = Vulnerability.objects.filter(\n\t\t\tQ(http_url__icontains=query) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['results']['subdomains']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['results']['subdomains'] = subdomain_data\n\t\tendpoint = EndPoint.objects.filter(\n\t\t\tQ(http_url__icontains=query) |\n\t\t\tQ(page_title__icontains=query)\n\t\t).distinct('http_url')\n\t\tendpoint_data = EndpointSerializer(endpoint, many=True).data\n\t\tresponse['results']['endpoints'] = endpoint_data\n\t\tvulnerability = Vulnerability.objects.filter(\n\t\t\tQ(http_url__icontains=query) |\n\t\t\tQ(name__icontains=query) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tendpoint = EndPoint.objects.filter(\n\t\t\tQ(http_url__icontains=query) |\n\t\t\tQ(page_title__icontains=query)\n\t\t).distinct('http_url')\n\t\tendpoint_data = EndpointSerializer(endpoint, many=True).data\n\t\tresponse['results']['endpoints'] = endpoint_data\n\t\tvulnerability = Vulnerability.objects.filter(\n\t\t\tQ(http_url__icontains=query) |\n\t\t\tQ(name__icontains=query) |\n\t\t\tQ(description__icontains=query)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint_data",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tendpoint_data = EndpointSerializer(endpoint, many=True).data\n\t\tresponse['results']['endpoints'] = endpoint_data\n\t\tvulnerability = Vulnerability.objects.filter(\n\t\t\tQ(http_url__icontains=query) |\n\t\t\tQ(name__icontains=query) |\n\t\t\tQ(description__icontains=query)\n\t\t).distinct()\n\t\tvulnerability_data = VulnerabilitySerializer(vulnerability, many=True).data\n\t\tresponse['results']['vulnerabilities'] = vulnerability_data\n\t\tresponse['results']['others'] = {}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['results']['endpoints']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['results']['endpoints'] = endpoint_data\n\t\tvulnerability = Vulnerability.objects.filter(\n\t\t\tQ(http_url__icontains=query) |\n\t\t\tQ(name__icontains=query) |\n\t\t\tQ(description__icontains=query)\n\t\t).distinct()\n\t\tvulnerability_data = VulnerabilitySerializer(vulnerability, many=True).data\n\t\tresponse['results']['vulnerabilities'] = vulnerability_data\n\t\tresponse['results']['others'] = {}\n\t\tif subdomain_data or endpoint_data or vulnerability_data:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tvulnerability = Vulnerability.objects.filter(\n\t\t\tQ(http_url__icontains=query) |\n\t\t\tQ(name__icontains=query) |\n\t\t\tQ(description__icontains=query)\n\t\t).distinct()\n\t\tvulnerability_data = VulnerabilitySerializer(vulnerability, many=True).data\n\t\tresponse['results']['vulnerabilities'] = vulnerability_data\n\t\tresponse['results']['others'] = {}\n\t\tif subdomain_data or endpoint_data or vulnerability_data:\n\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability_data",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tvulnerability_data = VulnerabilitySerializer(vulnerability, many=True).data\n\t\tresponse['results']['vulnerabilities'] = vulnerability_data\n\t\tresponse['results']['others'] = {}\n\t\tif subdomain_data or endpoint_data or vulnerability_data:\n\t\t\tresponse['status'] = True\n\t\treturn Response(response)\nclass FetchMostCommonVulnerability(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['results']['vulnerabilities']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['results']['vulnerabilities'] = vulnerability_data\n\t\tresponse['results']['others'] = {}\n\t\tif subdomain_data or endpoint_data or vulnerability_data:\n\t\t\tresponse['status'] = True\n\t\treturn Response(response)\nclass FetchMostCommonVulnerability(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['results']['others']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['results']['others'] = {}\n\t\tif subdomain_data or endpoint_data or vulnerability_data:\n\t\t\tresponse['status'] = True\n\t\treturn Response(response)\nclass FetchMostCommonVulnerability(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:\n\t\t\tlimit = data.get('limit', 20)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\treturn Response(response)\nclass FetchMostCommonVulnerability(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:\n\t\t\tlimit = data.get('limit', 20)\n\t\t\tproject_slug = data.get('slug')\n\t\t\tscan_history_id = data.get('scan_history_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:\n\t\t\tlimit = data.get('limit', 20)\n\t\t\tproject_slug = data.get('slug')\n\t\t\tscan_history_id = data.get('scan_history_id')\n\t\t\ttarget_id = data.get('target_id')\n\t\t\tis_ignore_info = data.get('ignore_info', False)\n\t\t\tresponse = {}\n\t\t\tresponse['status'] = False",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\ttry:\n\t\t\tlimit = data.get('limit', 20)\n\t\t\tproject_slug = data.get('slug')\n\t\t\tscan_history_id = data.get('scan_history_id')\n\t\t\ttarget_id = data.get('target_id')\n\t\t\tis_ignore_info = data.get('ignore_info', False)\n\t\t\tresponse = {}\n\t\t\tresponse['status'] = False\n\t\t\tif project_slug:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlimit",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlimit = data.get('limit', 20)\n\t\t\tproject_slug = data.get('slug')\n\t\t\tscan_history_id = data.get('scan_history_id')\n\t\t\ttarget_id = data.get('target_id')\n\t\t\tis_ignore_info = data.get('ignore_info', False)\n\t\t\tresponse = {}\n\t\t\tresponse['status'] = False\n\t\t\tif project_slug:\n\t\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tproject_slug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tproject_slug = data.get('slug')\n\t\t\tscan_history_id = data.get('scan_history_id')\n\t\t\ttarget_id = data.get('target_id')\n\t\t\tis_ignore_info = data.get('ignore_info', False)\n\t\t\tresponse = {}\n\t\t\tresponse['status'] = False\n\t\t\tif project_slug:\n\t\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)\n\t\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tscan_history_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tscan_history_id = data.get('scan_history_id')\n\t\t\ttarget_id = data.get('target_id')\n\t\t\tis_ignore_info = data.get('ignore_info', False)\n\t\t\tresponse = {}\n\t\t\tresponse['status'] = False\n\t\t\tif project_slug:\n\t\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)\n\t\t\telse:\n\t\t\t\tvulnerabilities = Vulnerability.objects.all()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttarget_id = data.get('target_id')\n\t\t\tis_ignore_info = data.get('ignore_info', False)\n\t\t\tresponse = {}\n\t\t\tresponse['status'] = False\n\t\t\tif project_slug:\n\t\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)\n\t\t\telse:\n\t\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\t\tif scan_history_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tis_ignore_info",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tis_ignore_info = data.get('ignore_info', False)\n\t\t\tresponse = {}\n\t\t\tresponse['status'] = False\n\t\t\tif project_slug:\n\t\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)\n\t\t\telse:\n\t\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\t\tif scan_history_id:\n\t\t\t\tvuln_query = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {}\n\t\t\tresponse['status'] = False\n\t\t\tif project_slug:\n\t\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)\n\t\t\telse:\n\t\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\t\tif scan_history_id:\n\t\t\t\tvuln_query = (\n\t\t\t\t\tvulnerabilities",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = False\n\t\t\tif project_slug:\n\t\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)\n\t\t\telse:\n\t\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\t\tif scan_history_id:\n\t\t\t\tvuln_query = (\n\t\t\t\t\tvulnerabilities\n\t\t\t\t\t.filter(scan_history__id=scan_history_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)\n\t\t\telse:\n\t\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\t\tif scan_history_id:\n\t\t\t\tvuln_query = (\n\t\t\t\t\tvulnerabilities\n\t\t\t\t\t.filter(scan_history__id=scan_history_id)\n\t\t\t\t\t.values(\"name\", \"severity\")\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tvulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tvulnerabilities = Vulnerability.objects.filter(target_domain__project=project)\n\t\t\telse:\n\t\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\t\tif scan_history_id:\n\t\t\t\tvuln_query = (\n\t\t\t\t\tvulnerabilities\n\t\t\t\t\t.filter(scan_history__id=scan_history_id)\n\t\t\t\t\t.values(\"name\", \"severity\")\n\t\t\t\t)\n\t\t\t\tif is_ignore_info:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tvulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\t\tif scan_history_id:\n\t\t\t\tvuln_query = (\n\t\t\t\t\tvulnerabilities\n\t\t\t\t\t.filter(scan_history__id=scan_history_id)\n\t\t\t\t\t.values(\"name\", \"severity\")\n\t\t\t\t)\n\t\t\t\tif is_ignore_info:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tvuln_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tvuln_query = (\n\t\t\t\t\tvulnerabilities\n\t\t\t\t\t.filter(scan_history__id=scan_history_id)\n\t\t\t\t\t.values(\"name\", \"severity\")\n\t\t\t\t)\n\t\t\t\tif is_ignore_info:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query\n\t\t\t\t\t\t.exclude(severity=0)\n\t\t\t\t\t\t.annotate(count=Count('name'))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tmost_common_vulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query\n\t\t\t\t\t\t.exclude(severity=0)\n\t\t\t\t\t\t.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)\n\t\t\t\telse:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query\n\t\t\t\t\t\t.annotate(count=Count('name'))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tmost_common_vulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query\n\t\t\t\t\t\t.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)\n\t\t\telif target_id:\n\t\t\t\tvuln_query = vulnerabilities.filter(target_domain__id=target_id).values(\"name\", \"severity\")\n\t\t\t\tif is_ignore_info:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tvuln_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tvuln_query = vulnerabilities.filter(target_domain__id=target_id).values(\"name\", \"severity\")\n\t\t\t\tif is_ignore_info:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query\n\t\t\t\t\t\t.exclude(severity=0)\n\t\t\t\t\t\t.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)\n\t\t\t\telse:\n\t\t\t\t\tmost_common_vulnerabilities = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tmost_common_vulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query\n\t\t\t\t\t\t.exclude(severity=0)\n\t\t\t\t\t\t.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)\n\t\t\t\telse:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query\n\t\t\t\t\t\t.annotate(count=Count('name'))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tmost_common_vulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query\n\t\t\t\t\t\t.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)\n\t\t\telse:\n\t\t\t\tvuln_query = vulnerabilities.values(\"name\", \"severity\")\n\t\t\t\tif is_ignore_info:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query.exclude(severity=0)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tvuln_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tvuln_query = vulnerabilities.values(\"name\", \"severity\")\n\t\t\t\tif is_ignore_info:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query.exclude(severity=0)\n\t\t\t\t\t\t.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)\n\t\t\t\telse:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query.annotate(count=Count('name'))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tmost_common_vulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query.exclude(severity=0)\n\t\t\t\t\t\t.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)\n\t\t\t\telse:\n\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tmost_common_vulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tmost_common_vulnerabilities = (\n\t\t\t\t\t\tvuln_query.annotate(count=Count('name'))\n\t\t\t\t\t\t.order_by(\"-count\")[:limit]\n\t\t\t\t\t)\n\t\t\tmost_common_vulnerabilities = [vuln for vuln in most_common_vulnerabilities]\n\t\t\tif most_common_vulnerabilities:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['result'] = most_common_vulnerabilities\n\t\texcept Exception as e:\n\t\t\tprint(str(e))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tmost_common_vulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tmost_common_vulnerabilities = [vuln for vuln in most_common_vulnerabilities]\n\t\t\tif most_common_vulnerabilities:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['result'] = most_common_vulnerabilities\n\t\texcept Exception as e:\n\t\t\tprint(str(e))\n\t\t\tresponse = {}\n\t\treturn Response(response)\nclass FetchMostVulnerable(APIView):\n\tdef post(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['result'] = most_common_vulnerabilities\n\t\texcept Exception as e:\n\t\t\tprint(str(e))\n\t\t\tresponse = {}\n\t\treturn Response(response)\nclass FetchMostVulnerable(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['result']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['result'] = most_common_vulnerabilities\n\t\texcept Exception as e:\n\t\t\tprint(str(e))\n\t\t\tresponse = {}\n\t\treturn Response(response)\nclass FetchMostVulnerable(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tproject_slug = data.get('slug')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {}\n\t\treturn Response(response)\nclass FetchMostVulnerable(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tproject_slug = data.get('slug')\n\t\tscan_history_id = data.get('scan_history_id')\n\t\ttarget_id = data.get('target_id')\n\t\tlimit = data.get('limit', 20)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\tproject_slug = data.get('slug')\n\t\tscan_history_id = data.get('scan_history_id')\n\t\ttarget_id = data.get('target_id')\n\t\tlimit = data.get('limit', 20)\n\t\tis_ignore_info = data.get('ignore_info', False)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif project_slug:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\tproject_slug = data.get('slug')\n\t\tscan_history_id = data.get('scan_history_id')\n\t\ttarget_id = data.get('target_id')\n\t\tlimit = data.get('limit', 20)\n\t\tis_ignore_info = data.get('ignore_info', False)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif project_slug:\n\t\t\tproject = Project.objects.get(slug=project_slug)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject_slug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject_slug = data.get('slug')\n\t\tscan_history_id = data.get('scan_history_id')\n\t\ttarget_id = data.get('target_id')\n\t\tlimit = data.get('limit', 20)\n\t\tis_ignore_info = data.get('ignore_info', False)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif project_slug:\n\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_history_id = data.get('scan_history_id')\n\t\ttarget_id = data.get('target_id')\n\t\tlimit = data.get('limit', 20)\n\t\tis_ignore_info = data.get('ignore_info', False)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif project_slug:\n\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)\n\t\t\tdomains = Domain.objects.filter(project=project)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = data.get('target_id')\n\t\tlimit = data.get('limit', 20)\n\t\tis_ignore_info = data.get('ignore_info', False)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif project_slug:\n\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)\n\t\t\tdomains = Domain.objects.filter(project=project)\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tlimit",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tlimit = data.get('limit', 20)\n\t\tis_ignore_info = data.get('ignore_info', False)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif project_slug:\n\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)\n\t\t\tdomains = Domain.objects.filter(project=project)\n\t\telse:\n\t\t\tsubdomains = Subdomain.objects.all()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tis_ignore_info",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tis_ignore_info = data.get('ignore_info', False)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif project_slug:\n\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)\n\t\t\tdomains = Domain.objects.filter(project=project)\n\t\telse:\n\t\t\tsubdomains = Subdomain.objects.all()\n\t\t\tdomains = Domain.objects.all()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif project_slug:\n\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)\n\t\t\tdomains = Domain.objects.filter(project=project)\n\t\telse:\n\t\t\tsubdomains = Subdomain.objects.all()\n\t\t\tdomains = Domain.objects.all()\n\t\tif scan_history_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['status'] = False\n\t\tif project_slug:\n\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)\n\t\t\tdomains = Domain.objects.filter(project=project)\n\t\telse:\n\t\t\tsubdomains = Subdomain.objects.all()\n\t\t\tdomains = Domain.objects.all()\n\t\tif scan_history_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_history_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)\n\t\t\tdomains = Domain.objects.filter(project=project)\n\t\telse:\n\t\t\tsubdomains = Subdomain.objects.all()\n\t\t\tdomains = Domain.objects.all()\n\t\tif scan_history_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_history_id)\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_subdomains = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomains = Subdomain.objects.filter(target_domain__project=project)\n\t\t\tdomains = Domain.objects.filter(project=project)\n\t\telse:\n\t\t\tsubdomains = Subdomain.objects.all()\n\t\t\tdomains = Domain.objects.all()\n\t\tif scan_history_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_history_id)\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdomains = Domain.objects.filter(project=project)\n\t\telse:\n\t\t\tsubdomains = Subdomain.objects.all()\n\t\t\tdomains = Domain.objects.all()\n\t\tif scan_history_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_history_id)\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomains = Subdomain.objects.all()\n\t\t\tdomains = Domain.objects.all()\n\t\tif scan_history_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_history_id)\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(\n\t\t\t\t\t\tvuln_count=Count('vulnerability__name', filter=~Q(vulnerability__severity=0))\n\t\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdomains = Domain.objects.all()\n\t\tif scan_history_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_history_id)\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(\n\t\t\t\t\t\tvuln_count=Count('vulnerability__name', filter=~Q(vulnerability__severity=0))\n\t\t\t\t\t)\n\t\t\t\t\t.order_by('-vuln_count')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_history_id)\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(\n\t\t\t\t\t\tvuln_count=Count('vulnerability__name', filter=~Q(vulnerability__severity=0))\n\t\t\t\t\t)\n\t\t\t\t\t.order_by('-vuln_count')\n\t\t\t\t\t.exclude(vuln_count=0)[:limit]\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmost_vulnerable_subdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(\n\t\t\t\t\t\tvuln_count=Count('vulnerability__name', filter=~Q(vulnerability__severity=0))\n\t\t\t\t\t)\n\t\t\t\t\t.order_by('-vuln_count')\n\t\t\t\t\t.exclude(vuln_count=0)[:limit]\n\t\t\t\t)\n\t\t\telse:\n\t\t\t\tmost_vulnerable_subdomains = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmost_vulnerable_subdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(vuln_count=Count('vulnerability__name'))\n\t\t\t\t\t.order_by('-vuln_count')\n\t\t\t\t\t.exclude(vuln_count=0)[:limit]\n\t\t\t\t)\n\t\t\t\tif most_vulnerable_subdomains:\n\t\t\t\t\tresponse['status'] = True\n\t\t\t\t\tresponse['result'] = (\n\t\t\t\t\t\tSubdomainSerializer(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tresponse['status'] = True\n\t\t\t\t\tresponse['result'] = (\n\t\t\t\t\t\tSubdomainSerializer(\n\t\t\t\t\t\t\tmost_vulnerable_subdomains,\n\t\t\t\t\t\t\tmany=True)\n\t\t\t\t\t\t.data\n\t\t\t\t\t)\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id)\n\t\t\tif is_ignore_info:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresponse['result']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tresponse['result'] = (\n\t\t\t\t\t\tSubdomainSerializer(\n\t\t\t\t\t\t\tmost_vulnerable_subdomains,\n\t\t\t\t\t\t\tmany=True)\n\t\t\t\t\t\t.data\n\t\t\t\t\t)\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id)\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_subdomains = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id)\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(vuln_count=Count('vulnerability__name', filter=~Q(vulnerability__severity=0)))\n\t\t\t\t\t.order_by('-vuln_count')\n\t\t\t\t\t.exclude(vuln_count=0)[:limit]\n\t\t\t\t)\n\t\t\telse:\n\t\t\t\tmost_vulnerable_subdomains = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmost_vulnerable_subdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(vuln_count=Count('vulnerability__name', filter=~Q(vulnerability__severity=0)))\n\t\t\t\t\t.order_by('-vuln_count')\n\t\t\t\t\t.exclude(vuln_count=0)[:limit]\n\t\t\t\t)\n\t\t\telse:\n\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(vuln_count=Count('vulnerability__name'))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmost_vulnerable_subdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tmost_vulnerable_subdomains = (\n\t\t\t\t\tsubdomain_query\n\t\t\t\t\t.annotate(vuln_count=Count('vulnerability__name'))\n\t\t\t\t\t.order_by('-vuln_count')\n\t\t\t\t\t.exclude(vuln_count=0)[:limit]\n\t\t\t\t)\n\t\t\tif most_vulnerable_subdomains:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['result'] = (\n\t\t\t\t\tSubdomainSerializer(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['result'] = (\n\t\t\t\t\tSubdomainSerializer(\n\t\t\t\t\t\tmost_vulnerable_subdomains,\n\t\t\t\t\t\tmany=True)\n\t\t\t\t\t.data\n\t\t\t\t)\n\t\telse:\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_targets = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['result']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['result'] = (\n\t\t\t\t\tSubdomainSerializer(\n\t\t\t\t\t\tmost_vulnerable_subdomains,\n\t\t\t\t\t\tmany=True)\n\t\t\t\t\t.data\n\t\t\t\t)\n\t\telse:\n\t\t\tif is_ignore_info:\n\t\t\t\tmost_vulnerable_targets = (\n\t\t\t\t\tdomains",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmost_vulnerable_targets",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tmost_vulnerable_targets = (\n\t\t\t\t\tdomains\n\t\t\t\t\t.annotate(vuln_count=Count('subdomain__vulnerability__name', filter=~Q(subdomain__vulnerability__severity=0)))\n\t\t\t\t\t.order_by('-vuln_count')\n\t\t\t\t\t.exclude(vuln_count=0)[:limit]\n\t\t\t\t)\n\t\t\telse:\n\t\t\t\tmost_vulnerable_targets = (\n\t\t\t\t\tdomains\n\t\t\t\t\t.annotate(vuln_count=Count('subdomain__vulnerability__name'))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmost_vulnerable_targets",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tmost_vulnerable_targets = (\n\t\t\t\t\tdomains\n\t\t\t\t\t.annotate(vuln_count=Count('subdomain__vulnerability__name'))\n\t\t\t\t\t.order_by('-vuln_count')\n\t\t\t\t\t.exclude(vuln_count=0)[:limit]\n\t\t\t\t)\n\t\t\tif most_vulnerable_targets:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['result'] = (\n\t\t\t\t\tDomainSerializer(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['result'] = (\n\t\t\t\t\tDomainSerializer(\n\t\t\t\t\t\tmost_vulnerable_targets,\n\t\t\t\t\t\tmany=True)\n\t\t\t\t\t.data\n\t\t\t\t)\n\t\treturn Response(response)\nclass CVEDetails(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['result']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['result'] = (\n\t\t\t\t\tDomainSerializer(\n\t\t\t\t\t\tmost_vulnerable_targets,\n\t\t\t\t\t\tmany=True)\n\t\t\t\t\t.data\n\t\t\t\t)\n\t\treturn Response(response)\nclass CVEDetails(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tcve_id = req.query_params.get('cve_id')\n\t\tif not cve_id:\n\t\t\treturn Response({'status': False, 'message': 'CVE ID not provided'})\n\t\tresponse = requests.get('https://cve.circl.lu/api/cve/' + cve_id)\n\t\tif response.status_code != 200:\n\t\t\treturn  Response({'status': False, 'message': 'Unknown Error Occured!'})\n\t\tif not response.json():\n\t\t\treturn  Response({'status': False, 'message': 'CVE ID does not exists.'})\n\t\treturn Response({'status': True, 'result': response.json()})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tcve_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tcve_id = req.query_params.get('cve_id')\n\t\tif not cve_id:\n\t\t\treturn Response({'status': False, 'message': 'CVE ID not provided'})\n\t\tresponse = requests.get('https://cve.circl.lu/api/cve/' + cve_id)\n\t\tif response.status_code != 200:\n\t\t\treturn  Response({'status': False, 'message': 'Unknown Error Occured!'})\n\t\tif not response.json():\n\t\t\treturn  Response({'status': False, 'message': 'CVE ID does not exists.'})\n\t\treturn Response({'status': True, 'result': response.json()})\nclass AddReconNote(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = requests.get('https://cve.circl.lu/api/cve/' + cve_id)\n\t\tif response.status_code != 200:\n\t\t\treturn  Response({'status': False, 'message': 'Unknown Error Occured!'})\n\t\tif not response.json():\n\t\t\treturn  Response({'status': False, 'message': 'CVE ID does not exists.'})\n\t\treturn Response({'status': True, 'result': response.json()})\nclass AddReconNote(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id')\n\t\ttitle = data.get('title')\n\t\tdescription = data.get('description')\n\t\tproject = data.get('project')\n\t\ttry:\n\t\t\tproject = Project.objects.get(slug=project)\n\t\t\tnote = TodoNote()\n\t\t\tnote.title = title",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id')\n\t\ttitle = data.get('title')\n\t\tdescription = data.get('description')\n\t\tproject = data.get('project')\n\t\ttry:\n\t\t\tproject = Project.objects.get(slug=project)\n\t\t\tnote = TodoNote()\n\t\t\tnote.title = title\n\t\t\tnote.description = description",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_id = data.get('subdomain_id')\n\t\ttitle = data.get('title')\n\t\tdescription = data.get('description')\n\t\tproject = data.get('project')\n\t\ttry:\n\t\t\tproject = Project.objects.get(slug=project)\n\t\t\tnote = TodoNote()\n\t\t\tnote.title = title\n\t\t\tnote.description = description\n\t\t\t# get scan history for subdomain_id",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttitle = data.get('title')\n\t\tdescription = data.get('description')\n\t\tproject = data.get('project')\n\t\ttry:\n\t\t\tproject = Project.objects.get(slug=project)\n\t\t\tnote = TodoNote()\n\t\t\tnote.title = title\n\t\t\tnote.description = description\n\t\t\t# get scan history for subdomain_id\n\t\t\tif subdomain_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdescription = data.get('description')\n\t\tproject = data.get('project')\n\t\ttry:\n\t\t\tproject = Project.objects.get(slug=project)\n\t\t\tnote = TodoNote()\n\t\t\tnote.title = title\n\t\t\tnote.description = description\n\t\t\t# get scan history for subdomain_id\n\t\t\tif subdomain_id:\n\t\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject = data.get('project')\n\t\ttry:\n\t\t\tproject = Project.objects.get(slug=project)\n\t\t\tnote = TodoNote()\n\t\t\tnote.title = title\n\t\t\tnote.description = description\n\t\t\t# get scan history for subdomain_id\n\t\t\tif subdomain_id:\n\t\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\t\t\tnote.subdomain = subdomain",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tproject = Project.objects.get(slug=project)\n\t\t\tnote = TodoNote()\n\t\t\tnote.title = title\n\t\t\tnote.description = description\n\t\t\t# get scan history for subdomain_id\n\t\t\tif subdomain_id:\n\t\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\t\t\tnote.subdomain = subdomain\n\t\t\t\t# also get scan history\n\t\t\t\tscan_history_id = subdomain.scan_history.id",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnote",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnote = TodoNote()\n\t\t\tnote.title = title\n\t\t\tnote.description = description\n\t\t\t# get scan history for subdomain_id\n\t\t\tif subdomain_id:\n\t\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\t\t\tnote.subdomain = subdomain\n\t\t\t\t# also get scan history\n\t\t\t\tscan_history_id = subdomain.scan_history.id\n\t\t\t\tscan_history = ScanHistory.objects.get(id=scan_history_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnote.title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnote.title = title\n\t\t\tnote.description = description\n\t\t\t# get scan history for subdomain_id\n\t\t\tif subdomain_id:\n\t\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\t\t\tnote.subdomain = subdomain\n\t\t\t\t# also get scan history\n\t\t\t\tscan_history_id = subdomain.scan_history.id\n\t\t\t\tscan_history = ScanHistory.objects.get(id=scan_history_id)\n\t\t\t\tnote.scan_history = scan_history",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnote.description",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnote.description = description\n\t\t\t# get scan history for subdomain_id\n\t\t\tif subdomain_id:\n\t\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\t\t\tnote.subdomain = subdomain\n\t\t\t\t# also get scan history\n\t\t\t\tscan_history_id = subdomain.scan_history.id\n\t\t\t\tscan_history = ScanHistory.objects.get(id=scan_history_id)\n\t\t\t\tnote.scan_history = scan_history\n\t\t\tnote.project = project",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tsubdomain = Subdomain.objects.get(id=subdomain_id)\n\t\t\t\tnote.subdomain = subdomain\n\t\t\t\t# also get scan history\n\t\t\t\tscan_history_id = subdomain.scan_history.id\n\t\t\t\tscan_history = ScanHistory.objects.get(id=scan_history_id)\n\t\t\t\tnote.scan_history = scan_history\n\t\t\tnote.project = project\n\t\t\tnote.save()\n\t\t\tresponse = {'status': True}\n\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnote.subdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tnote.subdomain = subdomain\n\t\t\t\t# also get scan history\n\t\t\t\tscan_history_id = subdomain.scan_history.id\n\t\t\t\tscan_history = ScanHistory.objects.get(id=scan_history_id)\n\t\t\t\tnote.scan_history = scan_history\n\t\t\tnote.project = project\n\t\t\tnote.save()\n\t\t\tresponse = {'status': True}\n\t\texcept Exception as e:\n\t\t\tresponse = {'status': False, 'message': str(e)}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tscan_history_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tscan_history_id = subdomain.scan_history.id\n\t\t\t\tscan_history = ScanHistory.objects.get(id=scan_history_id)\n\t\t\t\tnote.scan_history = scan_history\n\t\t\tnote.project = project\n\t\t\tnote.save()\n\t\t\tresponse = {'status': True}\n\t\texcept Exception as e:\n\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass ToggleSubdomainImportantStatus(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tscan_history = ScanHistory.objects.get(id=scan_history_id)\n\t\t\t\tnote.scan_history = scan_history\n\t\t\tnote.project = project\n\t\t\tnote.save()\n\t\t\tresponse = {'status': True}\n\t\texcept Exception as e:\n\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass ToggleSubdomainImportantStatus(APIView):\n\tdef post(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnote.scan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tnote.scan_history = scan_history\n\t\t\tnote.project = project\n\t\t\tnote.save()\n\t\t\tresponse = {'status': True}\n\t\texcept Exception as e:\n\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass ToggleSubdomainImportantStatus(APIView):\n\tdef post(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnote.project",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnote.project = project\n\t\t\tnote.save()\n\t\t\tresponse = {'status': True}\n\t\texcept Exception as e:\n\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass ToggleSubdomainImportantStatus(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {'status': True}\n\t\texcept Exception as e:\n\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass ToggleSubdomainImportantStatus(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id')\n\t\tresponse = {'status': False, 'message': 'No subdomain_id provided'}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass ToggleSubdomainImportantStatus(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id')\n\t\tresponse = {'status': False, 'message': 'No subdomain_id provided'}\n\t\tname = Subdomain.objects.get(id=subdomain_id)\n\t\tname.is_important = not name.is_important",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id')\n\t\tresponse = {'status': False, 'message': 'No subdomain_id provided'}\n\t\tname = Subdomain.objects.get(id=subdomain_id)\n\t\tname.is_important = not name.is_important\n\t\tname.save()\n\t\tresponse = {'status': True}\n\t\treturn Response(response)\nclass AddTarget(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id')\n\t\tresponse = {'status': False, 'message': 'No subdomain_id provided'}\n\t\tname = Subdomain.objects.get(id=subdomain_id)\n\t\tname.is_important = not name.is_important\n\t\tname.save()\n\t\tresponse = {'status': True}\n\t\treturn Response(response)\nclass AddTarget(APIView):\n\tdef post(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_id = data.get('subdomain_id')\n\t\tresponse = {'status': False, 'message': 'No subdomain_id provided'}\n\t\tname = Subdomain.objects.get(id=subdomain_id)\n\t\tname.is_important = not name.is_important\n\t\tname.save()\n\t\tresponse = {'status': True}\n\t\treturn Response(response)\nclass AddTarget(APIView):\n\tdef post(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {'status': False, 'message': 'No subdomain_id provided'}\n\t\tname = Subdomain.objects.get(id=subdomain_id)\n\t\tname.is_important = not name.is_important\n\t\tname.save()\n\t\tresponse = {'status': True}\n\t\treturn Response(response)\nclass AddTarget(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tname",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tname = Subdomain.objects.get(id=subdomain_id)\n\t\tname.is_important = not name.is_important\n\t\tname.save()\n\t\tresponse = {'status': True}\n\t\treturn Response(response)\nclass AddTarget(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\th1_team_handle = data.get('h1_team_handle')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tname.is_important",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tname.is_important = not name.is_important\n\t\tname.save()\n\t\tresponse = {'status': True}\n\t\treturn Response(response)\nclass AddTarget(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\th1_team_handle = data.get('h1_team_handle')\n\t\tdescription = data.get('description')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {'status': True}\n\t\treturn Response(response)\nclass AddTarget(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\th1_team_handle = data.get('h1_team_handle')\n\t\tdescription = data.get('description')\n\t\tdomain_name = data.get('domain_name')\n\t\t# remove wild card from domain",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\th1_team_handle = data.get('h1_team_handle')\n\t\tdescription = data.get('description')\n\t\tdomain_name = data.get('domain_name')\n\t\t# remove wild card from domain\n\t\tdomain_name = domain_name.replace('*', '')\n\t\t# if domain_name begins with . remove that\n\t\tif domain_name.startswith('.'):\n\t\t\tdomain_name = domain_name[1:]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\th1_team_handle = data.get('h1_team_handle')\n\t\tdescription = data.get('description')\n\t\tdomain_name = data.get('domain_name')\n\t\t# remove wild card from domain\n\t\tdomain_name = domain_name.replace('*', '')\n\t\t# if domain_name begins with . remove that\n\t\tif domain_name.startswith('.'):\n\t\t\tdomain_name = domain_name[1:]\n\t\torganization_name = data.get('organization')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\th1_team_handle",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\th1_team_handle = data.get('h1_team_handle')\n\t\tdescription = data.get('description')\n\t\tdomain_name = data.get('domain_name')\n\t\t# remove wild card from domain\n\t\tdomain_name = domain_name.replace('*', '')\n\t\t# if domain_name begins with . remove that\n\t\tif domain_name.startswith('.'):\n\t\t\tdomain_name = domain_name[1:]\n\t\torganization_name = data.get('organization')\n\t\tslug = data.get('slug')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdescription = data.get('description')\n\t\tdomain_name = data.get('domain_name')\n\t\t# remove wild card from domain\n\t\tdomain_name = domain_name.replace('*', '')\n\t\t# if domain_name begins with . remove that\n\t\tif domain_name.startswith('.'):\n\t\t\tdomain_name = domain_name[1:]\n\t\torganization_name = data.get('organization')\n\t\tslug = data.get('slug')\n\t\t# Validate domain name",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain_name = data.get('domain_name')\n\t\t# remove wild card from domain\n\t\tdomain_name = domain_name.replace('*', '')\n\t\t# if domain_name begins with . remove that\n\t\tif domain_name.startswith('.'):\n\t\t\tdomain_name = domain_name[1:]\n\t\torganization_name = data.get('organization')\n\t\tslug = data.get('slug')\n\t\t# Validate domain name\n\t\tif not validators.domain(domain_name):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain_name = domain_name.replace('*', '')\n\t\t# if domain_name begins with . remove that\n\t\tif domain_name.startswith('.'):\n\t\t\tdomain_name = domain_name[1:]\n\t\torganization_name = data.get('organization')\n\t\tslug = data.get('slug')\n\t\t# Validate domain name\n\t\tif not validators.domain(domain_name):\n\t\t\treturn Response({'status': False, 'message': 'Invalid domain or IP'})\n\t\tstatus = bulk_import_targets(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdomain_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdomain_name = domain_name[1:]\n\t\torganization_name = data.get('organization')\n\t\tslug = data.get('slug')\n\t\t# Validate domain name\n\t\tif not validators.domain(domain_name):\n\t\t\treturn Response({'status': False, 'message': 'Invalid domain or IP'})\n\t\tstatus = bulk_import_targets(\n\t\t\ttargets=[{\n\t\t\t\t'name': domain_name,\n\t\t\t\t'description': description,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\torganization_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\torganization_name = data.get('organization')\n\t\tslug = data.get('slug')\n\t\t# Validate domain name\n\t\tif not validators.domain(domain_name):\n\t\t\treturn Response({'status': False, 'message': 'Invalid domain or IP'})\n\t\tstatus = bulk_import_targets(\n\t\t\ttargets=[{\n\t\t\t\t'name': domain_name,\n\t\t\t\t'description': description,\n\t\t\t}],",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tslug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tslug = data.get('slug')\n\t\t# Validate domain name\n\t\tif not validators.domain(domain_name):\n\t\t\treturn Response({'status': False, 'message': 'Invalid domain or IP'})\n\t\tstatus = bulk_import_targets(\n\t\t\ttargets=[{\n\t\t\t\t'name': domain_name,\n\t\t\t\t'description': description,\n\t\t\t}],\n\t\t\torganization_name=organization_name,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tstatus",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tstatus = bulk_import_targets(\n\t\t\ttargets=[{\n\t\t\t\t'name': domain_name,\n\t\t\t\t'description': description,\n\t\t\t}],\n\t\t\torganization_name=organization_name,\n\t\t\th1_team_handle=h1_team_handle,\n\t\t\tproject_slug=slug\n\t\t)\n\t\tif status:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\t# data = req.data\n\t\tsubscan_id = req.query_params.get('subscan_id')\n\t\tsubscan = SubScan.objects.filter(id=subscan_id)\n\t\tif not subscan.exists():\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': f'Subscan {subscan_id} does not exist'\n\t\t\t})\n\t\tsubscan_data = SubScanResultSerializer(subscan.first(), many=False).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubscan_id = req.query_params.get('subscan_id')\n\t\tsubscan = SubScan.objects.filter(id=subscan_id)\n\t\tif not subscan.exists():\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': f'Subscan {subscan_id} does not exist'\n\t\t\t})\n\t\tsubscan_data = SubScanResultSerializer(subscan.first(), many=False).data\n\t\ttask_name = subscan_data['type']\n\t\tsubscan_results = []",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubscan = SubScan.objects.filter(id=subscan_id)\n\t\tif not subscan.exists():\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'error': f'Subscan {subscan_id} does not exist'\n\t\t\t})\n\t\tsubscan_data = SubScanResultSerializer(subscan.first(), many=False).data\n\t\ttask_name = subscan_data['type']\n\t\tsubscan_results = []\n\t\tif task_name == 'port_scan':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan_data",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubscan_data = SubScanResultSerializer(subscan.first(), many=False).data\n\t\ttask_name = subscan_data['type']\n\t\tsubscan_results = []\n\t\tif task_name == 'port_scan':\n\t\t\tips_in_subscan = IpAddress.objects.filter(ip_subscan_ids__in=subscan)\n\t\t\tsubscan_results = IpSerializer(ips_in_subscan, many=True).data\n\t\telif task_name == 'vulnerability_scan':\n\t\t\tvulns_in_subscan = Vulnerability.objects.filter(vuln_subscan_ids__in=subscan)\n\t\t\tsubscan_results = VulnerabilitySerializer(vulns_in_subscan, many=True).data\n\t\telif task_name == 'fetch_url':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttask_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttask_name = subscan_data['type']\n\t\tsubscan_results = []\n\t\tif task_name == 'port_scan':\n\t\t\tips_in_subscan = IpAddress.objects.filter(ip_subscan_ids__in=subscan)\n\t\t\tsubscan_results = IpSerializer(ips_in_subscan, many=True).data\n\t\telif task_name == 'vulnerability_scan':\n\t\t\tvulns_in_subscan = Vulnerability.objects.filter(vuln_subscan_ids__in=subscan)\n\t\t\tsubscan_results = VulnerabilitySerializer(vulns_in_subscan, many=True).data\n\t\telif task_name == 'fetch_url':\n\t\t\tendpoints_in_subscan = EndPoint.objects.filter(endpoint_subscan_ids__in=subscan)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan_results",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubscan_results = []\n\t\tif task_name == 'port_scan':\n\t\t\tips_in_subscan = IpAddress.objects.filter(ip_subscan_ids__in=subscan)\n\t\t\tsubscan_results = IpSerializer(ips_in_subscan, many=True).data\n\t\telif task_name == 'vulnerability_scan':\n\t\t\tvulns_in_subscan = Vulnerability.objects.filter(vuln_subscan_ids__in=subscan)\n\t\t\tsubscan_results = VulnerabilitySerializer(vulns_in_subscan, many=True).data\n\t\telif task_name == 'fetch_url':\n\t\t\tendpoints_in_subscan = EndPoint.objects.filter(endpoint_subscan_ids__in=subscan)\n\t\t\tsubscan_results = EndpointSerializer(endpoints_in_subscan, many=True).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tips_in_subscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tips_in_subscan = IpAddress.objects.filter(ip_subscan_ids__in=subscan)\n\t\t\tsubscan_results = IpSerializer(ips_in_subscan, many=True).data\n\t\telif task_name == 'vulnerability_scan':\n\t\t\tvulns_in_subscan = Vulnerability.objects.filter(vuln_subscan_ids__in=subscan)\n\t\t\tsubscan_results = VulnerabilitySerializer(vulns_in_subscan, many=True).data\n\t\telif task_name == 'fetch_url':\n\t\t\tendpoints_in_subscan = EndPoint.objects.filter(endpoint_subscan_ids__in=subscan)\n\t\t\tsubscan_results = EndpointSerializer(endpoints_in_subscan, many=True).data\n\t\telif task_name == 'dir_file_fuzz':\n\t\t\tdirs_in_subscan = DirectoryScan.objects.filter(dir_subscan_ids__in=subscan)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscan_results",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscan_results = IpSerializer(ips_in_subscan, many=True).data\n\t\telif task_name == 'vulnerability_scan':\n\t\t\tvulns_in_subscan = Vulnerability.objects.filter(vuln_subscan_ids__in=subscan)\n\t\t\tsubscan_results = VulnerabilitySerializer(vulns_in_subscan, many=True).data\n\t\telif task_name == 'fetch_url':\n\t\t\tendpoints_in_subscan = EndPoint.objects.filter(endpoint_subscan_ids__in=subscan)\n\t\t\tsubscan_results = EndpointSerializer(endpoints_in_subscan, many=True).data\n\t\telif task_name == 'dir_file_fuzz':\n\t\t\tdirs_in_subscan = DirectoryScan.objects.filter(dir_subscan_ids__in=subscan)\n\t\t\tsubscan_results = DirectoryScanSerializer(dirs_in_subscan, many=True).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tvulns_in_subscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tvulns_in_subscan = Vulnerability.objects.filter(vuln_subscan_ids__in=subscan)\n\t\t\tsubscan_results = VulnerabilitySerializer(vulns_in_subscan, many=True).data\n\t\telif task_name == 'fetch_url':\n\t\t\tendpoints_in_subscan = EndPoint.objects.filter(endpoint_subscan_ids__in=subscan)\n\t\t\tsubscan_results = EndpointSerializer(endpoints_in_subscan, many=True).data\n\t\telif task_name == 'dir_file_fuzz':\n\t\t\tdirs_in_subscan = DirectoryScan.objects.filter(dir_subscan_ids__in=subscan)\n\t\t\tsubscan_results = DirectoryScanSerializer(dirs_in_subscan, many=True).data\n\t\telif task_name == 'subdomain_discovery':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscan_results",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscan_results = VulnerabilitySerializer(vulns_in_subscan, many=True).data\n\t\telif task_name == 'fetch_url':\n\t\t\tendpoints_in_subscan = EndPoint.objects.filter(endpoint_subscan_ids__in=subscan)\n\t\t\tsubscan_results = EndpointSerializer(endpoints_in_subscan, many=True).data\n\t\telif task_name == 'dir_file_fuzz':\n\t\t\tdirs_in_subscan = DirectoryScan.objects.filter(dir_subscan_ids__in=subscan)\n\t\t\tsubscan_results = DirectoryScanSerializer(dirs_in_subscan, many=True).data\n\t\telif task_name == 'subdomain_discovery':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints_in_subscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints_in_subscan = EndPoint.objects.filter(endpoint_subscan_ids__in=subscan)\n\t\t\tsubscan_results = EndpointSerializer(endpoints_in_subscan, many=True).data\n\t\telif task_name == 'dir_file_fuzz':\n\t\t\tdirs_in_subscan = DirectoryScan.objects.filter(dir_subscan_ids__in=subscan)\n\t\t\tsubscan_results = DirectoryScanSerializer(dirs_in_subscan, many=True).data\n\t\telif task_name == 'subdomain_discovery':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\telif task_name == 'screenshot':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan, screenshot_path__isnull=False)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscan_results",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscan_results = EndpointSerializer(endpoints_in_subscan, many=True).data\n\t\telif task_name == 'dir_file_fuzz':\n\t\t\tdirs_in_subscan = DirectoryScan.objects.filter(dir_subscan_ids__in=subscan)\n\t\t\tsubscan_results = DirectoryScanSerializer(dirs_in_subscan, many=True).data\n\t\telif task_name == 'subdomain_discovery':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\telif task_name == 'screenshot':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan, screenshot_path__isnull=False)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdirs_in_subscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdirs_in_subscan = DirectoryScan.objects.filter(dir_subscan_ids__in=subscan)\n\t\t\tsubscan_results = DirectoryScanSerializer(dirs_in_subscan, many=True).data\n\t\telif task_name == 'subdomain_discovery':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\telif task_name == 'screenshot':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan, screenshot_path__isnull=False)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\tlogger.info(subscan_data)\n\t\tlogger.info(subscan_results)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscan_results",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscan_results = DirectoryScanSerializer(dirs_in_subscan, many=True).data\n\t\telif task_name == 'subdomain_discovery':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\telif task_name == 'screenshot':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan, screenshot_path__isnull=False)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\tlogger.info(subscan_data)\n\t\tlogger.info(subscan_results)\n\t\treturn Response({'subscan': subscan_data, 'result': subscan_results})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains_in_subscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\telif task_name == 'screenshot':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan, screenshot_path__isnull=False)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\tlogger.info(subscan_data)\n\t\tlogger.info(subscan_results)\n\t\treturn Response({'subscan': subscan_data, 'result': subscan_results})\nclass ListSubScans(APIView):\n\tdef post(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscan_results",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\telif task_name == 'screenshot':\n\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan, screenshot_path__isnull=False)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\tlogger.info(subscan_data)\n\t\tlogger.info(subscan_results)\n\t\treturn Response({'subscan': subscan_data, 'result': subscan_results})\nclass ListSubScans(APIView):\n\tdef post(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains_in_subscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomains_in_subscan = Subdomain.objects.filter(subdomain_subscan_ids__in=subscan, screenshot_path__isnull=False)\n\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\tlogger.info(subscan_data)\n\t\tlogger.info(subscan_results)\n\t\treturn Response({'subscan': subscan_data, 'result': subscan_results})\nclass ListSubScans(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscan_results",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscan_results = SubdomainSerializer(subdomains_in_subscan, many=True).data\n\t\tlogger.info(subscan_data)\n\t\tlogger.info(subscan_results)\n\t\treturn Response({'subscan': subscan_data, 'result': subscan_results})\nclass ListSubScans(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id', None)\n\t\tscan_history = data.get('scan_history_id', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id', None)\n\t\tscan_history = data.get('scan_history_id', None)\n\t\tdomain_id = data.get('domain_id', None)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif subdomain_id:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\tsubdomain_id = data.get('subdomain_id', None)\n\t\tscan_history = data.get('scan_history_id', None)\n\t\tdomain_id = data.get('domain_id', None)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif subdomain_id:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(subdomain__id=subdomain_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_id = data.get('subdomain_id', None)\n\t\tscan_history = data.get('scan_history_id', None)\n\t\tdomain_id = data.get('domain_id', None)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif subdomain_id:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(subdomain__id=subdomain_id)\n\t\t\t\t.order_by('-stop_scan_date')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_history = data.get('scan_history_id', None)\n\t\tdomain_id = data.get('domain_id', None)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif subdomain_id:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(subdomain__id=subdomain_id)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain_id = data.get('domain_id', None)\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif subdomain_id:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(subdomain__id=subdomain_id)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif subdomain_id:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(subdomain__id=subdomain_id)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['status'] = False\n\t\tif subdomain_id:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(subdomain__id=subdomain_id)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscans",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(subdomain__id=subdomain_id)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\telif scan_history:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresults",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\telif scan_history:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__id=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\telif scan_history:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__id=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['results']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['results'] = results\n\t\telif scan_history:\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__id=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscans",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__id=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\telif domain_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresults",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\telif domain_id:\n\t\t\tscan_history = ScanHistory.objects.filter(domain__id=domain_id)\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__in=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\telif domain_id:\n\t\t\tscan_history = ScanHistory.objects.filter(domain__id=domain_id)\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__in=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['results']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['results'] = results\n\t\telif domain_id:\n\t\t\tscan_history = ScanHistory.objects.filter(domain__id=domain_id)\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__in=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tscan_history = ScanHistory.objects.filter(domain__id=domain_id)\n\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__in=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubscans",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubscans = (\n\t\t\t\tSubScan.objects\n\t\t\t\t.filter(scan_history__in=scan_history)\n\t\t\t\t.order_by('-stop_scan_date')\n\t\t\t)\n\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresults",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresults = SubScanSerializer(subscans, many=True).data\n\t\t\tif subscans:\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\treturn Response(response)\nclass DeleteMultipleRows(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['results'] = results\n\t\treturn Response(response)\nclass DeleteMultipleRows(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:\n\t\t\tif data['type'] == 'subscan':\n\t\t\t\tfor row in data['rows']:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['results']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['results'] = results\n\t\treturn Response(response)\nclass DeleteMultipleRows(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:\n\t\t\tif data['type'] == 'subscan':\n\t\t\t\tfor row in data['rows']:\n\t\t\t\t\tSubScan.objects.get(id=row).delete()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\ttry:\n\t\t\tif data['type'] == 'subscan':\n\t\t\t\tfor row in data['rows']:\n\t\t\t\t\tSubScan.objects.get(id=row).delete()\n\t\t\telif data['type'] == 'organization':\n\t\t\t\tfor row in data['rows']:\n\t\t\t\t\tOrganization.objects.get(id=row).delete()\n\t\t\tresponse = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\ttry:\n\t\t\tif data['type'] == 'subscan':\n\t\t\t\tfor row in data['rows']:\n\t\t\t\t\tSubScan.objects.get(id=row).delete()\n\t\t\telif data['type'] == 'organization':\n\t\t\t\tfor row in data['rows']:\n\t\t\t\t\tOrganization.objects.get(id=row).delete()\n\t\t\tresponse = True\n\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = True\n\t\texcept Exception as e:\n\t\t\tresponse = False\n\t\treturn Response({'status': response})\nclass StopScan(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tscan_ids = data.get('scan_ids', [])\n\t\tsubscan_ids = data.get('subscan_ids', [])",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = False\n\t\treturn Response({'status': response})\nclass StopScan(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tscan_ids = data.get('scan_ids', [])\n\t\tsubscan_ids = data.get('subscan_ids', [])\n\t\tscan_ids = [int(id) for id in scan_ids]\n\t\tsubscan_ids = [int(id) for id in subscan_ids]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\tscan_ids = data.get('scan_ids', [])\n\t\tsubscan_ids = data.get('subscan_ids', [])\n\t\tscan_ids = [int(id) for id in scan_ids]\n\t\tsubscan_ids = [int(id) for id in subscan_ids]\n\t\tresponse = {'status': False}\n\t\tdef abort_scan(scan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting scan History')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\tscan_ids = data.get('scan_ids', [])\n\t\tsubscan_ids = data.get('subscan_ids', [])\n\t\tscan_ids = [int(id) for id in scan_ids]\n\t\tsubscan_ids = [int(id) for id in subscan_ids]\n\t\tresponse = {'status': False}\n\t\tdef abort_scan(scan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting scan History')\n\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_ids",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_ids = data.get('scan_ids', [])\n\t\tsubscan_ids = data.get('subscan_ids', [])\n\t\tscan_ids = [int(id) for id in scan_ids]\n\t\tsubscan_ids = [int(id) for id in subscan_ids]\n\t\tresponse = {'status': False}\n\t\tdef abort_scan(scan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting scan History')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {scan} status to ABORTED_TASK\")",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan_ids",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubscan_ids = data.get('subscan_ids', [])\n\t\tscan_ids = [int(id) for id in scan_ids]\n\t\tsubscan_ids = [int(id) for id in subscan_ids]\n\t\tresponse = {'status': False}\n\t\tdef abort_scan(scan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting scan History')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {scan} status to ABORTED_TASK\")\n\t\t\t\ttask_ids = scan.celery_ids",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_ids",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_ids = [int(id) for id in scan_ids]\n\t\tsubscan_ids = [int(id) for id in subscan_ids]\n\t\tresponse = {'status': False}\n\t\tdef abort_scan(scan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting scan History')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {scan} status to ABORTED_TASK\")\n\t\t\t\ttask_ids = scan.celery_ids\n\t\t\t\tscan.scan_status = ABORTED_TASK",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan_ids",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubscan_ids = [int(id) for id in subscan_ids]\n\t\tresponse = {'status': False}\n\t\tdef abort_scan(scan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting scan History')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {scan} status to ABORTED_TASK\")\n\t\t\t\ttask_ids = scan.celery_ids\n\t\t\t\tscan.scan_status = ABORTED_TASK\n\t\t\t\tscan.stop_scan_date = timezone.now()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {'status': False}\n\t\tdef abort_scan(scan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting scan History')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {scan} status to ABORTED_TASK\")\n\t\t\t\ttask_ids = scan.celery_ids\n\t\t\t\tscan.scan_status = ABORTED_TASK\n\t\t\t\tscan.stop_scan_date = timezone.now()\n\t\t\t\tscan.aborted_by = request.user",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting scan History')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {scan} status to ABORTED_TASK\")\n\t\t\t\ttask_ids = scan.celery_ids\n\t\t\t\tscan.scan_status = ABORTED_TASK\n\t\t\t\tscan.stop_scan_date = timezone.now()\n\t\t\t\tscan.aborted_by = request.user\n\t\t\t\tscan.save()\n\t\t\t\tfor task_id in task_ids:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttask_ids",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\ttask_ids = scan.celery_ids\n\t\t\t\tscan.scan_status = ABORTED_TASK\n\t\t\t\tscan.stop_scan_date = timezone.now()\n\t\t\t\tscan.aborted_by = request.user\n\t\t\t\tscan.save()\n\t\t\t\tfor task_id in task_ids:\n\t\t\t\t\tapp.control.revoke(task_id, terminate=True, signal='SIGKILL')\n\t\t\t\ttasks = (\n\t\t\t\t\tScanActivity.objects\n\t\t\t\t\t.filter(scan_of=scan)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tscan.scan_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tscan.scan_status = ABORTED_TASK\n\t\t\t\tscan.stop_scan_date = timezone.now()\n\t\t\t\tscan.aborted_by = request.user\n\t\t\t\tscan.save()\n\t\t\t\tfor task_id in task_ids:\n\t\t\t\t\tapp.control.revoke(task_id, terminate=True, signal='SIGKILL')\n\t\t\t\ttasks = (\n\t\t\t\t\tScanActivity.objects\n\t\t\t\t\t.filter(scan_of=scan)\n\t\t\t\t\t.filter(status=RUNNING_TASK)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tscan.stop_scan_date",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tscan.stop_scan_date = timezone.now()\n\t\t\t\tscan.aborted_by = request.user\n\t\t\t\tscan.save()\n\t\t\t\tfor task_id in task_ids:\n\t\t\t\t\tapp.control.revoke(task_id, terminate=True, signal='SIGKILL')\n\t\t\t\ttasks = (\n\t\t\t\t\tScanActivity.objects\n\t\t\t\t\t.filter(scan_of=scan)\n\t\t\t\t\t.filter(status=RUNNING_TASK)\n\t\t\t\t\t.order_by('-pk')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tscan.aborted_by",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tscan.aborted_by = request.user\n\t\t\t\tscan.save()\n\t\t\t\tfor task_id in task_ids:\n\t\t\t\t\tapp.control.revoke(task_id, terminate=True, signal='SIGKILL')\n\t\t\t\ttasks = (\n\t\t\t\t\tScanActivity.objects\n\t\t\t\t\t.filter(scan_of=scan)\n\t\t\t\t\t.filter(status=RUNNING_TASK)\n\t\t\t\t\t.order_by('-pk')\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttasks",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\ttasks = (\n\t\t\t\t\tScanActivity.objects\n\t\t\t\t\t.filter(scan_of=scan)\n\t\t\t\t\t.filter(status=RUNNING_TASK)\n\t\t\t\t\t.order_by('-pk')\n\t\t\t\t)\n\t\t\t\tfor task in tasks:\n\t\t\t\t\ttask.status = ABORTED_TASK\n\t\t\t\t\ttask.time = timezone.now()\n\t\t\t\t\ttask.save()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ttask.status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\ttask.status = ABORTED_TASK\n\t\t\t\t\ttask.time = timezone.now()\n\t\t\t\t\ttask.save()\n\t\t\t\tcreate_scan_activity(\n\t\t\t\t\tscan.id,\n\t\t\t\t\t\"Scan aborted\",\n\t\t\t\t\tABORTED_TASK\n\t\t\t\t)\n\t\t\t\tresponse['status'] = True\n\t\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ttask.time",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\ttask.time = timezone.now()\n\t\t\t\t\ttask.save()\n\t\t\t\tcreate_scan_activity(\n\t\t\t\t\tscan.id,\n\t\t\t\t\t\"Scan aborted\",\n\t\t\t\t\tABORTED_TASK\n\t\t\t\t)\n\t\t\t\tresponse['status'] = True\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)\n\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\t\treturn response\n\t\tdef abort_subscan(subscan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting subscan')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {subscan} status to ABORTED_TASK\")",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\t\treturn response\n\t\tdef abort_subscan(subscan):\n\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting subscan')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {subscan} status to ABORTED_TASK\")\n\t\t\t\ttask_ids = subscan.celery_ids\n\t\t\t\tfor task_id in task_ids:\n\t\t\t\t\tapp.control.revoke(task_id, terminate=True, signal='SIGKILL')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {}\n\t\t\tlogger.info(f'Aborting subscan')\n\t\t\ttry:\n\t\t\t\tlogger.info(f\"Setting scan {subscan} status to ABORTED_TASK\")\n\t\t\t\ttask_ids = subscan.celery_ids\n\t\t\t\tfor task_id in task_ids:\n\t\t\t\t\tapp.control.revoke(task_id, terminate=True, signal='SIGKILL')\n\t\t\t\tsubscan.status = ABORTED_TASK\n\t\t\t\tsubscan.stop_scan_date = timezone.now()\n\t\t\t\tsubscan.save()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttask_ids",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\ttask_ids = subscan.celery_ids\n\t\t\t\tfor task_id in task_ids:\n\t\t\t\t\tapp.control.revoke(task_id, terminate=True, signal='SIGKILL')\n\t\t\t\tsubscan.status = ABORTED_TASK\n\t\t\t\tsubscan.stop_scan_date = timezone.now()\n\t\t\t\tsubscan.save()\n\t\t\t\tcreate_scan_activity(\n\t\t\t\t\tsubscan.scan_history.id,\n\t\t\t\t\tf'Subscan aborted',\n\t\t\t\t\tABORTED_TASK",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubscan.status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tsubscan.status = ABORTED_TASK\n\t\t\t\tsubscan.stop_scan_date = timezone.now()\n\t\t\t\tsubscan.save()\n\t\t\t\tcreate_scan_activity(\n\t\t\t\t\tsubscan.scan_history.id,\n\t\t\t\t\tf'Subscan aborted',\n\t\t\t\t\tABORTED_TASK\n\t\t\t\t)\n\t\t\t\tresponse['status'] = True\n\t\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubscan.stop_scan_date",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tsubscan.stop_scan_date = timezone.now()\n\t\t\t\tsubscan.save()\n\t\t\t\tcreate_scan_activity(\n\t\t\t\t\tsubscan.scan_history.id,\n\t\t\t\t\tf'Subscan aborted',\n\t\t\t\t\tABORTED_TASK\n\t\t\t\t)\n\t\t\t\tresponse['status'] = True\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)\n\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\t\treturn response\n\t\tfor scan_id in scan_ids:\n\t\t\ttry:\n\t\t\t\tscan = ScanHistory.objects.get(id=scan_id)\n\t\t\t\t# if scan is already successful or aborted then do nothing\n\t\t\t\tif scan.scan_status == SUCCESS_TASK or scan.scan_status == ABORTED_TASK:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\t\treturn response\n\t\tfor scan_id in scan_ids:\n\t\t\ttry:\n\t\t\t\tscan = ScanHistory.objects.get(id=scan_id)\n\t\t\t\t# if scan is already successful or aborted then do nothing\n\t\t\t\tif scan.scan_status == SUCCESS_TASK or scan.scan_status == ABORTED_TASK:\n\t\t\t\t\tcontinue\n\t\t\t\tresponse = abort_scan(scan)\n\t\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tscan = ScanHistory.objects.get(id=scan_id)\n\t\t\t\t# if scan is already successful or aborted then do nothing\n\t\t\t\tif scan.scan_status == SUCCESS_TASK or scan.scan_status == ABORTED_TASK:\n\t\t\t\t\tcontinue\n\t\t\t\tresponse = abort_scan(scan)\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)\n\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\tfor subscan_id in subscan_ids:\n\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse = abort_scan(scan)\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)\n\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\tfor subscan_id in subscan_ids:\n\t\t\ttry:\n\t\t\t\tsubscan = SubScan.objects.get(id=subscan_id)\n\t\t\t\tif subscan.scan_status == SUCCESS_TASK or subscan.scan_status == ABORTED_TASK:\n\t\t\t\t\tcontinue\n\t\t\t\tresponse = abort_subscan(subscan)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\tfor subscan_id in subscan_ids:\n\t\t\ttry:\n\t\t\t\tsubscan = SubScan.objects.get(id=subscan_id)\n\t\t\t\tif subscan.scan_status == SUCCESS_TASK or subscan.scan_status == ABORTED_TASK:\n\t\t\t\t\tcontinue\n\t\t\t\tresponse = abort_subscan(subscan)\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)\n\t\t\t\tresponse = {'status': False, 'message': str(e)}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubscan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tsubscan = SubScan.objects.get(id=subscan_id)\n\t\t\t\tif subscan.scan_status == SUCCESS_TASK or subscan.scan_status == ABORTED_TASK:\n\t\t\t\t\tcontinue\n\t\t\t\tresponse = abort_subscan(subscan)\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)\n\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass InitiateSubTask(APIView):\n\tdef post(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse = abort_subscan(subscan)\n\t\t\texcept Exception as e:\n\t\t\t\tlogger.error(e)\n\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass InitiateSubTask(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tengine_id = data.get('engine_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\treturn Response(response)\nclass InitiateSubTask(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tengine_id = data.get('engine_id')\n\t\tscan_types = data['tasks']\n\t\tfor subdomain_id in data['subdomain_ids']:\n\t\t\tlogger.info(f'Running subscans {scan_types} on subdomain \"{subdomain_id}\" ...')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\tengine_id = data.get('engine_id')\n\t\tscan_types = data['tasks']\n\t\tfor subdomain_id in data['subdomain_ids']:\n\t\t\tlogger.info(f'Running subscans {scan_types} on subdomain \"{subdomain_id}\" ...')\n\t\t\tfor stype in scan_types:\n\t\t\t\tctx = {\n\t\t\t\t\t'scan_history_id': None,\n\t\t\t\t\t'subdomain_id': subdomain_id,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\tengine_id = data.get('engine_id')\n\t\tscan_types = data['tasks']\n\t\tfor subdomain_id in data['subdomain_ids']:\n\t\t\tlogger.info(f'Running subscans {scan_types} on subdomain \"{subdomain_id}\" ...')\n\t\t\tfor stype in scan_types:\n\t\t\t\tctx = {\n\t\t\t\t\t'scan_history_id': None,\n\t\t\t\t\t'subdomain_id': subdomain_id,\n\t\t\t\t\t'scan_type': stype,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tengine_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tengine_id = data.get('engine_id')\n\t\tscan_types = data['tasks']\n\t\tfor subdomain_id in data['subdomain_ids']:\n\t\t\tlogger.info(f'Running subscans {scan_types} on subdomain \"{subdomain_id}\" ...')\n\t\t\tfor stype in scan_types:\n\t\t\t\tctx = {\n\t\t\t\t\t'scan_history_id': None,\n\t\t\t\t\t'subdomain_id': subdomain_id,\n\t\t\t\t\t'scan_type': stype,\n\t\t\t\t\t'engine_id': engine_id",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_types",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_types = data['tasks']\n\t\tfor subdomain_id in data['subdomain_ids']:\n\t\t\tlogger.info(f'Running subscans {scan_types} on subdomain \"{subdomain_id}\" ...')\n\t\t\tfor stype in scan_types:\n\t\t\t\tctx = {\n\t\t\t\t\t'scan_history_id': None,\n\t\t\t\t\t'subdomain_id': subdomain_id,\n\t\t\t\t\t'scan_type': stype,\n\t\t\t\t\t'engine_id': engine_id\n\t\t\t\t}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tctx",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tctx = {\n\t\t\t\t\t'scan_history_id': None,\n\t\t\t\t\t'subdomain_id': subdomain_id,\n\t\t\t\t\t'scan_type': stype,\n\t\t\t\t\t'engine_id': engine_id\n\t\t\t\t}\n\t\t\t\tinitiate_subscan.apply_async(kwargs=ctx)\n\t\treturn Response({'status': True})\nclass DeleteSubdomain(APIView):\n\tdef post(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tfor id in req.data['subdomain_ids']:\n\t\t\tSubdomain.objects.get(id=id).delete()\n\t\treturn Response({'status': True})\nclass DeleteVulnerability(APIView):\n\tdef post(self, request):\n\t\treq = self.request\n\t\tfor id in req.data['vulnerability_ids']:\n\t\t\tVulnerability.objects.get(id=id).delete()\n\t\treturn Response({'status': True})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tfor id in req.data['vulnerability_ids']:\n\t\t\tVulnerability.objects.get(id=id).delete()\n\t\treturn Response({'status': True})\nclass ListInterestingKeywords(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tkeywords = get_lookup_keywords()\n\t\treturn Response(keywords)\nclass RengineUpdateCheck(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tkeywords = get_lookup_keywords()\n\t\treturn Response(keywords)\nclass RengineUpdateCheck(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tgithub_api = \\\n\t\t\t'https://api.github.com/repos/yogeshojha/rengine/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\tif 'message' in response:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tkeywords",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tkeywords = get_lookup_keywords()\n\t\treturn Response(keywords)\nclass RengineUpdateCheck(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tgithub_api = \\\n\t\t\t'https://api.github.com/repos/yogeshojha/rengine/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\tif 'message' in response:\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tgithub_api = \\\n\t\t\t'https://api.github.com/repos/yogeshojha/rengine/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\tif 'message' in response:\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})\n\t\treturn_response = {}\n\t\t# get current version_number\n\t\t# remove quotes from current_version\n\t\tcurrent_version = RENGINE_CURRENT_VERSION",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tgithub_api",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tgithub_api = \\\n\t\t\t'https://api.github.com/repos/yogeshojha/rengine/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\tif 'message' in response:\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})\n\t\treturn_response = {}\n\t\t# get current version_number\n\t\t# remove quotes from current_version\n\t\tcurrent_version = RENGINE_CURRENT_VERSION\n\t\t# for consistency remove v from both if exists",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = requests.get(github_api).json()\n\t\tif 'message' in response:\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})\n\t\treturn_response = {}\n\t\t# get current version_number\n\t\t# remove quotes from current_version\n\t\tcurrent_version = RENGINE_CURRENT_VERSION\n\t\t# for consistency remove v from both if exists\n\t\tlatest_version = re.search(r'v(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)',\n\t\t\t\t\t\t\t\t   ((response[0]['name'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treturn_response",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treturn_response = {}\n\t\t# get current version_number\n\t\t# remove quotes from current_version\n\t\tcurrent_version = RENGINE_CURRENT_VERSION\n\t\t# for consistency remove v from both if exists\n\t\tlatest_version = re.search(r'v(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)',\n\t\t\t\t\t\t\t\t   ((response[0]['name'\n\t\t\t\t\t\t\t\t   ])[1:] if response[0]['name'][0] == 'v'\n\t\t\t\t\t\t\t\t\telse response[0]['name']))\n\t\tlatest_version = latest_version.group(0) if latest_version else None",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tcurrent_version",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tcurrent_version = RENGINE_CURRENT_VERSION\n\t\t# for consistency remove v from both if exists\n\t\tlatest_version = re.search(r'v(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)',\n\t\t\t\t\t\t\t\t   ((response[0]['name'\n\t\t\t\t\t\t\t\t   ])[1:] if response[0]['name'][0] == 'v'\n\t\t\t\t\t\t\t\t\telse response[0]['name']))\n\t\tlatest_version = latest_version.group(0) if latest_version else None\n\t\tif not latest_version:\n\t\t\tlatest_version = re.search(r'(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)',\n\t\t\t\t\t\t\t\t\t\t((response[0]['name'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tlatest_version",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tlatest_version = re.search(r'v(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)',\n\t\t\t\t\t\t\t\t   ((response[0]['name'\n\t\t\t\t\t\t\t\t   ])[1:] if response[0]['name'][0] == 'v'\n\t\t\t\t\t\t\t\t\telse response[0]['name']))\n\t\tlatest_version = latest_version.group(0) if latest_version else None\n\t\tif not latest_version:\n\t\t\tlatest_version = re.search(r'(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)',\n\t\t\t\t\t\t\t\t\t\t((response[0]['name'\n\t\t\t\t\t\t\t\t\t\t])[1:] if response[0]['name'][0]\n\t\t\t\t\t\t\t\t\t\t== 'v' else response[0]['name']))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tlatest_version",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tlatest_version = latest_version.group(0) if latest_version else None\n\t\tif not latest_version:\n\t\t\tlatest_version = re.search(r'(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)',\n\t\t\t\t\t\t\t\t\t\t((response[0]['name'\n\t\t\t\t\t\t\t\t\t\t])[1:] if response[0]['name'][0]\n\t\t\t\t\t\t\t\t\t\t== 'v' else response[0]['name']))\n\t\t\tif latest_version:\n\t\t\t\tlatest_version = latest_version.group(0)\n\t\treturn_response['status'] = True\n\t\treturn_response['latest_version'] = latest_version",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlatest_version",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlatest_version = re.search(r'(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)',\n\t\t\t\t\t\t\t\t\t\t((response[0]['name'\n\t\t\t\t\t\t\t\t\t\t])[1:] if response[0]['name'][0]\n\t\t\t\t\t\t\t\t\t\t== 'v' else response[0]['name']))\n\t\t\tif latest_version:\n\t\t\t\tlatest_version = latest_version.group(0)\n\t\treturn_response['status'] = True\n\t\treturn_response['latest_version'] = latest_version\n\t\treturn_response['current_version'] = current_version\n\t\tis_version_update_available = version.parse(current_version) < version.parse(latest_version)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tlatest_version",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tlatest_version = latest_version.group(0)\n\t\treturn_response['status'] = True\n\t\treturn_response['latest_version'] = latest_version\n\t\treturn_response['current_version'] = current_version\n\t\tis_version_update_available = version.parse(current_version) < version.parse(latest_version)\n\t\t# if is_version_update_available then we should create inapp notification\n\t\tcreate_inappnotification(\n\t\t\ttitle='WebGuard Updated',\n\t\t\tdescription=f'System Updated to latest version.',\n\t\t\tnotification_type=SYSTEM_LEVEL_NOTIFICATION,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treturn_response['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treturn_response['status'] = True\n\t\treturn_response['latest_version'] = latest_version\n\t\treturn_response['current_version'] = current_version\n\t\tis_version_update_available = version.parse(current_version) < version.parse(latest_version)\n\t\t# if is_version_update_available then we should create inapp notification\n\t\tcreate_inappnotification(\n\t\t\ttitle='WebGuard Updated',\n\t\t\tdescription=f'System Updated to latest version.',\n\t\t\tnotification_type=SYSTEM_LEVEL_NOTIFICATION,\n\t\t\tproject_slug=None,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treturn_response['latest_version']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treturn_response['latest_version'] = latest_version\n\t\treturn_response['current_version'] = current_version\n\t\tis_version_update_available = version.parse(current_version) < version.parse(latest_version)\n\t\t# if is_version_update_available then we should create inapp notification\n\t\tcreate_inappnotification(\n\t\t\ttitle='WebGuard Updated',\n\t\t\tdescription=f'System Updated to latest version.',\n\t\t\tnotification_type=SYSTEM_LEVEL_NOTIFICATION,\n\t\t\tproject_slug=None,\n\t\t\ticon='mdi-update',",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treturn_response['current_version']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treturn_response['current_version'] = current_version\n\t\tis_version_update_available = version.parse(current_version) < version.parse(latest_version)\n\t\t# if is_version_update_available then we should create inapp notification\n\t\tcreate_inappnotification(\n\t\t\ttitle='WebGuard Updated',\n\t\t\tdescription=f'System Updated to latest version.',\n\t\t\tnotification_type=SYSTEM_LEVEL_NOTIFICATION,\n\t\t\tproject_slug=None,\n\t\t\ticon='mdi-update',\n\t\t\tredirect_link='#',",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tis_version_update_available",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tis_version_update_available = version.parse(current_version) < version.parse(latest_version)\n\t\t# if is_version_update_available then we should create inapp notification\n\t\tcreate_inappnotification(\n\t\t\ttitle='WebGuard Updated',\n\t\t\tdescription=f'System Updated to latest version.',\n\t\t\tnotification_type=SYSTEM_LEVEL_NOTIFICATION,\n\t\t\tproject_slug=None,\n\t\t\ticon='mdi-update',\n\t\t\tredirect_link='#',\n\t\t\topen_in_new_tab=True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treturn_response['update_available']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treturn_response['update_available'] = is_version_update_available\n\t\tif is_version_update_available:\n\t\t\treturn_response['changelog'] = response[0]['body']\n\t\treturn Response(return_response)\nclass UninstallTool(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\treturn_response['changelog']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\treturn_response['changelog'] = response[0]['body']\n\t\treturn Response(return_response)\nclass UninstallTool(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif tool.is_default:\n\t\t\treturn Response({'status': False, 'message': 'Default tools can not be uninstalled'})\n\t\t# check install instructions, if it is installed using go, then remove from go bin path,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif tool.is_default:\n\t\t\treturn Response({'status': False, 'message': 'Default tools can not be uninstalled'})\n\t\t# check install instructions, if it is installed using go, then remove from go bin path,\n\t\t# else try to remove from github clone path",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif tool.is_default:\n\t\t\treturn Response({'status': False, 'message': 'Default tools can not be uninstalled'})\n\t\t# check install instructions, if it is installed using go, then remove from go bin path,\n\t\t# else try to remove from github clone path\n\t\t# getting tool name is tricky!",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif tool.is_default:\n\t\t\treturn Response({'status': False, 'message': 'Default tools can not be uninstalled'})\n\t\t# check install instructions, if it is installed using go, then remove from go bin path,\n\t\t# else try to remove from github clone path\n\t\t# getting tool name is tricky!\n\t\tif 'go install' in tool.install_command:\n\t\t\ttool_name = tool.install_command.split('/')[-1].split('@')[0]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif tool.is_default:\n\t\t\treturn Response({'status': False, 'message': 'Default tools can not be uninstalled'})\n\t\t# check install instructions, if it is installed using go, then remove from go bin path,\n\t\t# else try to remove from github clone path\n\t\t# getting tool name is tricky!\n\t\tif 'go install' in tool.install_command:\n\t\t\ttool_name = tool.install_command.split('/')[-1].split('@')[0]\n\t\t\tuninstall_command = 'rm /go/bin/' + tool_name\n\t\telif 'git clone' in tool.install_command:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool_name = tool.install_command.split('/')[-1].split('@')[0]\n\t\t\tuninstall_command = 'rm /go/bin/' + tool_name\n\t\telif 'git clone' in tool.install_command:\n\t\t\ttool_name = tool.install_command[:-1] if tool.install_command[-1] == '/' else tool.install_command\n\t\t\ttool_name = tool_name.split('/')[-1]\n\t\t\tuninstall_command = 'rm -rf ' + tool.github_clone_path\n\t\telse:\n\t\t\treturn Response({'status': False, 'message': 'Cannot uninstall tool!'})\n\t\trun_command(uninstall_command)\n\t\trun_command.apply_async(args=(uninstall_command,))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tuninstall_command",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tuninstall_command = 'rm /go/bin/' + tool_name\n\t\telif 'git clone' in tool.install_command:\n\t\t\ttool_name = tool.install_command[:-1] if tool.install_command[-1] == '/' else tool.install_command\n\t\t\ttool_name = tool_name.split('/')[-1]\n\t\t\tuninstall_command = 'rm -rf ' + tool.github_clone_path\n\t\telse:\n\t\t\treturn Response({'status': False, 'message': 'Cannot uninstall tool!'})\n\t\trun_command(uninstall_command)\n\t\trun_command.apply_async(args=(uninstall_command,))\n\t\ttool.delete()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool_name = tool.install_command[:-1] if tool.install_command[-1] == '/' else tool.install_command\n\t\t\ttool_name = tool_name.split('/')[-1]\n\t\t\tuninstall_command = 'rm -rf ' + tool.github_clone_path\n\t\telse:\n\t\t\treturn Response({'status': False, 'message': 'Cannot uninstall tool!'})\n\t\trun_command(uninstall_command)\n\t\trun_command.apply_async(args=(uninstall_command,))\n\t\ttool.delete()\n\t\treturn Response({'status': True, 'message': 'Uninstall Tool Success'})\nclass UpdateTool(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool_name = tool_name.split('/')[-1]\n\t\t\tuninstall_command = 'rm -rf ' + tool.github_clone_path\n\t\telse:\n\t\t\treturn Response({'status': False, 'message': 'Cannot uninstall tool!'})\n\t\trun_command(uninstall_command)\n\t\trun_command.apply_async(args=(uninstall_command,))\n\t\ttool.delete()\n\t\treturn Response({'status': True, 'message': 'Uninstall Tool Success'})\nclass UpdateTool(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tuninstall_command",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tuninstall_command = 'rm -rf ' + tool.github_clone_path\n\t\telse:\n\t\t\treturn Response({'status': False, 'message': 'Cannot uninstall tool!'})\n\t\trun_command(uninstall_command)\n\t\trun_command.apply_async(args=(uninstall_command,))\n\t\ttool.delete()\n\t\treturn Response({'status': True, 'message': 'Uninstall Tool Success'})\nclass UpdateTool(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\t# if git clone was used for installation, then we must use git pull inside project directory,\n\t\t# otherwise use the same command as given\n\t\tupdate_command = tool.update_command.lower()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\t# if git clone was used for installation, then we must use git pull inside project directory,\n\t\t# otherwise use the same command as given\n\t\tupdate_command = tool.update_command.lower()\n\t\tif not update_command:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_name = req.query_params.get('name')\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\t# if git clone was used for installation, then we must use git pull inside project directory,\n\t\t# otherwise use the same command as given\n\t\tupdate_command = tool.update_command.lower()\n\t\tif not update_command:\n\t\t\treturn Response({'status': False, 'message': tool.name + 'has missing update command! Cannot update the tool.'})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\t# if git clone was used for installation, then we must use git pull inside project directory,\n\t\t# otherwise use the same command as given\n\t\tupdate_command = tool.update_command.lower()\n\t\tif not update_command:\n\t\t\treturn Response({'status': False, 'message': tool.name + 'has missing update command! Cannot update the tool.'})\n\t\telif update_command == 'git pull':\n\t\t\ttool_name = tool.install_command[:-1] if tool.install_command[-1] == '/' else tool.install_command",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\t# if git clone was used for installation, then we must use git pull inside project directory,\n\t\t# otherwise use the same command as given\n\t\tupdate_command = tool.update_command.lower()\n\t\tif not update_command:\n\t\t\treturn Response({'status': False, 'message': tool.name + 'has missing update command! Cannot update the tool.'})\n\t\telif update_command == 'git pull':\n\t\t\ttool_name = tool.install_command[:-1] if tool.install_command[-1] == '/' else tool.install_command\n\t\t\ttool_name = tool_name.split('/')[-1]\n\t\t\tupdate_command = 'cd /usr/src/github/' + tool_name + ' && git pull && cd -'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tupdate_command",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tupdate_command = tool.update_command.lower()\n\t\tif not update_command:\n\t\t\treturn Response({'status': False, 'message': tool.name + 'has missing update command! Cannot update the tool.'})\n\t\telif update_command == 'git pull':\n\t\t\ttool_name = tool.install_command[:-1] if tool.install_command[-1] == '/' else tool.install_command\n\t\t\ttool_name = tool_name.split('/')[-1]\n\t\t\tupdate_command = 'cd /usr/src/github/' + tool_name + ' && git pull && cd -'\n\t\ttry:\n\t\t\trun_command(update_command, shell=True)\n\t\t\trun_command.apply_async(args=[update_command], kwargs={'shell': True})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool_name = tool.install_command[:-1] if tool.install_command[-1] == '/' else tool.install_command\n\t\t\ttool_name = tool_name.split('/')[-1]\n\t\t\tupdate_command = 'cd /usr/src/github/' + tool_name + ' && git pull && cd -'\n\t\ttry:\n\t\t\trun_command(update_command, shell=True)\n\t\t\trun_command.apply_async(args=[update_command], kwargs={'shell': True})\n\t\t\treturn Response({'status': True, 'message': tool.name + ' updated successfully.'})\n\t\texcept Exception as e:\n\t\t\tlogger.error(str(e))\n\t\t\treturn Response({'status': False, 'message': str(e)})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool_name = tool_name.split('/')[-1]\n\t\t\tupdate_command = 'cd /usr/src/github/' + tool_name + ' && git pull && cd -'\n\t\ttry:\n\t\t\trun_command(update_command, shell=True)\n\t\t\trun_command.apply_async(args=[update_command], kwargs={'shell': True})\n\t\t\treturn Response({'status': True, 'message': tool.name + ' updated successfully.'})\n\t\texcept Exception as e:\n\t\t\tlogger.error(str(e))\n\t\t\treturn Response({'status': False, 'message': str(e)})\nclass GetExternalToolCurrentVersion(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tupdate_command",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tupdate_command = 'cd /usr/src/github/' + tool_name + ' && git pull && cd -'\n\t\ttry:\n\t\t\trun_command(update_command, shell=True)\n\t\t\trun_command.apply_async(args=[update_command], kwargs={'shell': True})\n\t\t\treturn Response({'status': True, 'message': tool.name + ' updated successfully.'})\n\t\texcept Exception as e:\n\t\t\tlogger.error(str(e))\n\t\t\treturn Response({'status': False, 'message': str(e)})\nclass GetExternalToolCurrentVersion(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\t# toolname is also the command\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\t# can supply either tool id or tool_name\n\t\ttool = None\n\t\tif tool_id:\n\t\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():\n\t\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\t# can supply either tool id or tool_name\n\t\ttool = None\n\t\tif tool_id:\n\t\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():\n\t\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\tif not InstalledExternalTool.objects.filter(name=tool_name).exists():",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_name = req.query_params.get('name')\n\t\t# can supply either tool id or tool_name\n\t\ttool = None\n\t\tif tool_id:\n\t\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():\n\t\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\tif not InstalledExternalTool.objects.filter(name=tool_name).exists():\n\t\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool = None\n\t\tif tool_id:\n\t\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():\n\t\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\tif not InstalledExternalTool.objects.filter(name=tool_name).exists():\n\t\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif not tool.version_lookup_command:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\tif not InstalledExternalTool.objects.filter(name=tool_name).exists():\n\t\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif not tool.version_lookup_command:\n\t\t\treturn Response({'status': False, 'message': 'Version Lookup command not provided.'})\n\t\tversion_number = None\n\t\t_, stdout = run_command(tool.version_lookup_command)\n\t\tif tool.version_match_regex:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif not tool.version_lookup_command:\n\t\t\treturn Response({'status': False, 'message': 'Version Lookup command not provided.'})\n\t\tversion_number = None\n\t\t_, stdout = run_command(tool.version_lookup_command)\n\t\tif tool.version_match_regex:\n\t\t\tversion_number = re.search(re.compile(tool.version_match_regex), str(stdout))\n\t\telse:\n\t\t\tversion_match_regex = r'(?i:v)?(\\d+(?:\\.\\d+){2,})'\n\t\t\tversion_number = re.search(version_match_regex, str(stdout))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tversion_number",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tversion_number = None\n\t\t_, stdout = run_command(tool.version_lookup_command)\n\t\tif tool.version_match_regex:\n\t\t\tversion_number = re.search(re.compile(tool.version_match_regex), str(stdout))\n\t\telse:\n\t\t\tversion_match_regex = r'(?i:v)?(\\d+(?:\\.\\d+){2,})'\n\t\t\tversion_number = re.search(version_match_regex, str(stdout))\n\t\tif not version_number:\n\t\t\treturn Response({'status': False, 'message': 'Invalid version lookup command.'})\n\t\treturn Response({'status': True, 'version_number': version_number.group(0), 'tool_name': tool.name})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tversion_number",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tversion_number = re.search(re.compile(tool.version_match_regex), str(stdout))\n\t\telse:\n\t\t\tversion_match_regex = r'(?i:v)?(\\d+(?:\\.\\d+){2,})'\n\t\t\tversion_number = re.search(version_match_regex, str(stdout))\n\t\tif not version_number:\n\t\t\treturn Response({'status': False, 'message': 'Invalid version lookup command.'})\n\t\treturn Response({'status': True, 'version_number': version_number.group(0), 'tool_name': tool.name})\nclass GithubToolCheckGetLatestRelease(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tversion_match_regex",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tversion_match_regex = r'(?i:v)?(\\d+(?:\\.\\d+){2,})'\n\t\t\tversion_number = re.search(version_match_regex, str(stdout))\n\t\tif not version_number:\n\t\t\treturn Response({'status': False, 'message': 'Invalid version lookup command.'})\n\t\treturn Response({'status': True, 'version_number': version_number.group(0), 'tool_name': tool.name})\nclass GithubToolCheckGetLatestRelease(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tversion_number",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tversion_number = re.search(version_match_regex, str(stdout))\n\t\tif not version_number:\n\t\t\treturn Response({'status': False, 'message': 'Invalid version lookup command.'})\n\t\treturn Response({'status': True, 'version_number': version_number.group(0), 'tool_name': tool.name})\nclass GithubToolCheckGetLatestRelease(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():\n\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif not tool.github_url:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_id = req.query_params.get('tool_id')\n\t\ttool_name = req.query_params.get('name')\n\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():\n\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif not tool.github_url:\n\t\t\treturn Response({'status': False, 'message': 'Github URL is not provided, Cannot check updates'})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_name = req.query_params.get('name')\n\t\tif not InstalledExternalTool.objects.filter(id=tool_id).exists():\n\t\t\treturn Response({'status': False, 'message': 'Tool Not found'})\n\t\tif tool_id:\n\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif not tool.github_url:\n\t\t\treturn Response({'status': False, 'message': 'Github URL is not provided, Cannot check updates'})\n\t\t# if tool_github_url has https://github.com/ remove and also remove trailing /",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool = InstalledExternalTool.objects.get(id=tool_id)\n\t\telif tool_name:\n\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif not tool.github_url:\n\t\t\treturn Response({'status': False, 'message': 'Github URL is not provided, Cannot check updates'})\n\t\t# if tool_github_url has https://github.com/ remove and also remove trailing /\n\t\ttool_github_url = tool.github_url.replace('http://github.com/', '').replace('https://github.com/', '')\n\t\ttool_github_url = remove_lead_and_trail_slash(tool_github_url)\n\t\tgithub_api = f'https://api.github.com/repos/{tool_github_url}/releases'\n\t\tresponse = requests.get(github_api).json()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttool = InstalledExternalTool.objects.get(name=tool_name)\n\t\tif not tool.github_url:\n\t\t\treturn Response({'status': False, 'message': 'Github URL is not provided, Cannot check updates'})\n\t\t# if tool_github_url has https://github.com/ remove and also remove trailing /\n\t\ttool_github_url = tool.github_url.replace('http://github.com/', '').replace('https://github.com/', '')\n\t\ttool_github_url = remove_lead_and_trail_slash(tool_github_url)\n\t\tgithub_api = f'https://api.github.com/repos/{tool_github_url}/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\t# check if api rate limit exceeded\n\t\tif 'message' in response and response['message'] == 'RateLimited':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_github_url",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_github_url = tool.github_url.replace('http://github.com/', '').replace('https://github.com/', '')\n\t\ttool_github_url = remove_lead_and_trail_slash(tool_github_url)\n\t\tgithub_api = f'https://api.github.com/repos/{tool_github_url}/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\t# check if api rate limit exceeded\n\t\tif 'message' in response and response['message'] == 'RateLimited':\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})\n\t\telif 'message' in response and response['message'] == 'Not Found':\n\t\t\treturn Response({'status': False, 'message': 'Not Found'})\n\t\telif not response:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttool_github_url",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttool_github_url = remove_lead_and_trail_slash(tool_github_url)\n\t\tgithub_api = f'https://api.github.com/repos/{tool_github_url}/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\t# check if api rate limit exceeded\n\t\tif 'message' in response and response['message'] == 'RateLimited':\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})\n\t\telif 'message' in response and response['message'] == 'Not Found':\n\t\t\treturn Response({'status': False, 'message': 'Not Found'})\n\t\telif not response:\n\t\t\treturn Response({'status': False, 'message': 'Not Found'})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tgithub_api",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tgithub_api = f'https://api.github.com/repos/{tool_github_url}/releases'\n\t\tresponse = requests.get(github_api).json()\n\t\t# check if api rate limit exceeded\n\t\tif 'message' in response and response['message'] == 'RateLimited':\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})\n\t\telif 'message' in response and response['message'] == 'Not Found':\n\t\t\treturn Response({'status': False, 'message': 'Not Found'})\n\t\telif not response:\n\t\t\treturn Response({'status': False, 'message': 'Not Found'})\n\t\t# only send latest release",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = requests.get(github_api).json()\n\t\t# check if api rate limit exceeded\n\t\tif 'message' in response and response['message'] == 'RateLimited':\n\t\t\treturn Response({'status': False, 'message': 'RateLimited'})\n\t\telif 'message' in response and response['message'] == 'Not Found':\n\t\t\treturn Response({'status': False, 'message': 'Not Found'})\n\t\telif not response:\n\t\t\treturn Response({'status': False, 'message': 'Not Found'})\n\t\t# only send latest release\n\t\tresponse = response[0]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = response[0]\n\t\tapi_response = {\n\t\t\t'status': True,\n\t\t\t'url': response['url'],\n\t\t\t'id': response['id'],\n\t\t\t'name': response['name'],\n\t\t\t'changelog': response['body'],\n\t\t}\n\t\treturn Response(api_response)\nclass ScanStatus(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tapi_response",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tapi_response = {\n\t\t\t'status': True,\n\t\t\t'url': response['url'],\n\t\t\t'id': response['id'],\n\t\t\t'name': response['name'],\n\t\t\t'changelog': response['body'],\n\t\t}\n\t\treturn Response(api_response)\nclass ScanStatus(APIView):\n\tdef get(self, request):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tslug = self.request.GET.get('project', None)\n\t\t# main tasks\n\t\trecently_completed_scans = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')\n\t\t\t.filter(Q(scan_status=0) | Q(scan_status=2) | Q(scan_status=3))[:10]\n\t\t)\n\t\tcurrent_scans = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tslug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tslug = self.request.GET.get('project', None)\n\t\t# main tasks\n\t\trecently_completed_scans = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')\n\t\t\t.filter(Q(scan_status=0) | Q(scan_status=2) | Q(scan_status=3))[:10]\n\t\t)\n\t\tcurrent_scans = (\n\t\t\tScanHistory.objects",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\trecently_completed_scans",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\trecently_completed_scans = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')\n\t\t\t.filter(Q(scan_status=0) | Q(scan_status=2) | Q(scan_status=3))[:10]\n\t\t)\n\t\tcurrent_scans = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tcurrent_scans",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tcurrent_scans = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')\n\t\t\t.filter(scan_status=1)\n\t\t)\n\t\tpending_scans = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain__project__slug=slug)\n\t\t\t.filter(scan_status=-1)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tpending_scans",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tpending_scans = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain__project__slug=slug)\n\t\t\t.filter(scan_status=-1)\n\t\t)\n\t\t# subtasks\n\t\trecently_completed_tasks = (\n\t\t\tSubScan.objects\n\t\t\t.filter(scan_history__domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\trecently_completed_tasks",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\trecently_completed_tasks = (\n\t\t\tSubScan.objects\n\t\t\t.filter(scan_history__domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')\n\t\t\t.filter(Q(status=0) | Q(status=2) | Q(status=3))[:15]\n\t\t)\n\t\tcurrent_tasks = (\n\t\t\tSubScan.objects\n\t\t\t.filter(scan_history__domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tcurrent_tasks",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tcurrent_tasks = (\n\t\t\tSubScan.objects\n\t\t\t.filter(scan_history__domain__project__slug=slug)\n\t\t\t.order_by('-start_scan_date')\n\t\t\t.filter(status=1)\n\t\t)\n\t\tpending_tasks = (\n\t\t\tSubScan.objects\n\t\t\t.filter(scan_history__domain__project__slug=slug)\n\t\t\t.filter(status=-1)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tpending_tasks",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tpending_tasks = (\n\t\t\tSubScan.objects\n\t\t\t.filter(scan_history__domain__project__slug=slug)\n\t\t\t.filter(status=-1)\n\t\t)\n\t\tresponse = {\n\t\t\t'scans': {\n\t\t\t\t'pending': ScanHistorySerializer(pending_scans, many=True).data,\n\t\t\t\t'scanning': ScanHistorySerializer(current_scans, many=True).data,\n\t\t\t\t'completed': ScanHistorySerializer(recently_completed_scans, many=True).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {\n\t\t\t'scans': {\n\t\t\t\t'pending': ScanHistorySerializer(pending_scans, many=True).data,\n\t\t\t\t'scanning': ScanHistorySerializer(current_scans, many=True).data,\n\t\t\t\t'completed': ScanHistorySerializer(recently_completed_scans, many=True).data\n\t\t\t},\n\t\t\t'tasks': {\n\t\t\t\t'pending': SubScanSerializer(pending_tasks, many=True).data,\n\t\t\t\t'running': SubScanSerializer(current_tasks, many=True).data,\n\t\t\t\t'completed': SubScanSerializer(recently_completed_tasks, many=True).data",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\ttarget = req.query_params.get('target')\n\t\tif not target:\n\t\t\treturn Response({'status': False, 'message': 'Target IP/Domain required!'})\n\t\tif not (validators.domain(target) or validators.ipv4(target) or validators.ipv6(target)):\n\t\t\tprint(f'Ip address or domain \"{target}\" did not pass validator.')\n\t\t\treturn Response({'status': False, 'message': 'Invalid domain or IP'})\n\t\tis_force_update = req.query_params.get('is_reload')\n\t\tis_force_update = True if is_force_update and 'true' == is_force_update.lower() else False\n\t\ttask = query_whois.apply_async(args=(target,is_force_update))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget = req.query_params.get('target')\n\t\tif not target:\n\t\t\treturn Response({'status': False, 'message': 'Target IP/Domain required!'})\n\t\tif not (validators.domain(target) or validators.ipv4(target) or validators.ipv6(target)):\n\t\t\tprint(f'Ip address or domain \"{target}\" did not pass validator.')\n\t\t\treturn Response({'status': False, 'message': 'Invalid domain or IP'})\n\t\tis_force_update = req.query_params.get('is_reload')\n\t\tis_force_update = True if is_force_update and 'true' == is_force_update.lower() else False\n\t\ttask = query_whois.apply_async(args=(target,is_force_update))\n\t\tresponse = task.wait()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tis_force_update",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tis_force_update = req.query_params.get('is_reload')\n\t\tis_force_update = True if is_force_update and 'true' == is_force_update.lower() else False\n\t\ttask = query_whois.apply_async(args=(target,is_force_update))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass ReverseWhois(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tlookup_keyword = req.query_params.get('lookup_keyword')\n\t\ttask = query_reverse_whois.apply_async(args=(lookup_keyword,))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tis_force_update",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tis_force_update = True if is_force_update and 'true' == is_force_update.lower() else False\n\t\ttask = query_whois.apply_async(args=(target,is_force_update))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass ReverseWhois(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tlookup_keyword = req.query_params.get('lookup_keyword')\n\t\ttask = query_reverse_whois.apply_async(args=(lookup_keyword,))\n\t\tresponse = task.wait()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttask",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttask = query_whois.apply_async(args=(target,is_force_update))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass ReverseWhois(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tlookup_keyword = req.query_params.get('lookup_keyword')\n\t\ttask = query_reverse_whois.apply_async(args=(lookup_keyword,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass ReverseWhois(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tlookup_keyword = req.query_params.get('lookup_keyword')\n\t\ttask = query_reverse_whois.apply_async(args=(lookup_keyword,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass DomainIPHistory(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tlookup_keyword = req.query_params.get('lookup_keyword')\n\t\ttask = query_reverse_whois.apply_async(args=(lookup_keyword,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass DomainIPHistory(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tdomain = req.query_params.get('domain')\n\t\ttask = query_ip_history.apply_async(args=(domain,))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tlookup_keyword",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tlookup_keyword = req.query_params.get('lookup_keyword')\n\t\ttask = query_reverse_whois.apply_async(args=(lookup_keyword,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass DomainIPHistory(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tdomain = req.query_params.get('domain')\n\t\ttask = query_ip_history.apply_async(args=(domain,))\n\t\tresponse = task.wait()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttask",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttask = query_reverse_whois.apply_async(args=(lookup_keyword,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass DomainIPHistory(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tdomain = req.query_params.get('domain')\n\t\ttask = query_ip_history.apply_async(args=(domain,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass DomainIPHistory(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tdomain = req.query_params.get('domain')\n\t\ttask = query_ip_history.apply_async(args=(domain,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CMSDetector(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdomain = req.query_params.get('domain')\n\t\ttask = query_ip_history.apply_async(args=(domain,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CMSDetector(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\turl = req.query_params.get('url')\n\t\t#save_db = True if 'save_db' in req.query_params else False",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain = req.query_params.get('domain')\n\t\ttask = query_ip_history.apply_async(args=(domain,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CMSDetector(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\turl = req.query_params.get('url')\n\t\t#save_db = True if 'save_db' in req.query_params else False\n\t\tresponse = {'status': False}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttask",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttask = query_ip_history.apply_async(args=(domain,))\n\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CMSDetector(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\turl = req.query_params.get('url')\n\t\t#save_db = True if 'save_db' in req.query_params else False\n\t\tresponse = {'status': False}\n\t\tif not (validators.url(url) or validators.domain(url)):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = task.wait()\n\t\treturn Response(response)\nclass CMSDetector(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\turl = req.query_params.get('url')\n\t\t#save_db = True if 'save_db' in req.query_params else False\n\t\tresponse = {'status': False}\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\turl = req.query_params.get('url')\n\t\t#save_db = True if 'save_db' in req.query_params else False\n\t\tresponse = {'status': False}\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\ttry:\n\t\t\t# response = get_cms_details(url)\n\t\t\tresponse = {}",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\turl = req.query_params.get('url')\n\t\t#save_db = True if 'save_db' in req.query_params else False\n\t\tresponse = {'status': False}\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\ttry:\n\t\t\t# response = get_cms_details(url)\n\t\t\tresponse = {}\n\t\t\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t#save_db",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t#save_db = True if 'save_db' in req.query_params else False\n\t\tresponse = {'status': False}\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\ttry:\n\t\t\t# response = get_cms_details(url)\n\t\t\tresponse = {}\n\t\t\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py'\n\t\t\tcms_detector_command += ' --random-agent --batch --follow-redirect'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {'status': False}\n\t\tif not (validators.url(url) or validators.domain(url)):\n\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\ttry:\n\t\t\t# response = get_cms_details(url)\n\t\t\tresponse = {}\n\t\t\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py'\n\t\t\tcms_detector_command += ' --random-agent --batch --follow-redirect'\n\t\t\tcms_detector_command += f' -u {url}'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['message'] = 'Invalid Domain/URL provided!'\n\t\t\treturn Response(response)\n\t\ttry:\n\t\t\t# response = get_cms_details(url)\n\t\t\tresponse = {}\n\t\t\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py'\n\t\t\tcms_detector_command += ' --random-agent --batch --follow-redirect'\n\t\t\tcms_detector_command += f' -u {url}'\n\t\t\t_, output = run_command(cms_detector_command, remove_ansi_sequence=True)\n\t\t\tresponse['message'] = 'Could not detect CMS!'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {}\n\t\t\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py'\n\t\t\tcms_detector_command += ' --random-agent --batch --follow-redirect'\n\t\t\tcms_detector_command += f' -u {url}'\n\t\t\t_, output = run_command(cms_detector_command, remove_ansi_sequence=True)\n\t\t\tresponse['message'] = 'Could not detect CMS!'\n\t\t\tparsed_url = urlparse(url)\n\t\t\tdomain_name = parsed_url.hostname\n\t\t\tport = parsed_url.port\n\t\t\tfind_dir = domain_name",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tcms_detector_command",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py'\n\t\t\tcms_detector_command += ' --random-agent --batch --follow-redirect'\n\t\t\tcms_detector_command += f' -u {url}'\n\t\t\t_, output = run_command(cms_detector_command, remove_ansi_sequence=True)\n\t\t\tresponse['message'] = 'Could not detect CMS!'\n\t\t\tparsed_url = urlparse(url)\n\t\t\tdomain_name = parsed_url.hostname\n\t\t\tport = parsed_url.port\n\t\t\tfind_dir = domain_name\n\t\t\tif port:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['message'] = 'Could not detect CMS!'\n\t\t\tparsed_url = urlparse(url)\n\t\t\tdomain_name = parsed_url.hostname\n\t\t\tport = parsed_url.port\n\t\t\tfind_dir = domain_name\n\t\t\tif port:\n\t\t\t\tfind_dir += '_{}'.format(port)\n\t\t\t# look for result path in output\n\t\t\tpath_regex = r\"Result: (\\/usr\\/src[^\\\"\\s]*)\"\n\t\t\tmatch = re.search(path_regex, output)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tparsed_url",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tparsed_url = urlparse(url)\n\t\t\tdomain_name = parsed_url.hostname\n\t\t\tport = parsed_url.port\n\t\t\tfind_dir = domain_name\n\t\t\tif port:\n\t\t\t\tfind_dir += '_{}'.format(port)\n\t\t\t# look for result path in output\n\t\t\tpath_regex = r\"Result: (\\/usr\\/src[^\\\"\\s]*)\"\n\t\t\tmatch = re.search(path_regex, output)\n\t\t\tif match:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdomain_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdomain_name = parsed_url.hostname\n\t\t\tport = parsed_url.port\n\t\t\tfind_dir = domain_name\n\t\t\tif port:\n\t\t\t\tfind_dir += '_{}'.format(port)\n\t\t\t# look for result path in output\n\t\t\tpath_regex = r\"Result: (\\/usr\\/src[^\\\"\\s]*)\"\n\t\t\tmatch = re.search(path_regex, output)\n\t\t\tif match:\n\t\t\t\tcms_json_path = match.group(1)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tport",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tport = parsed_url.port\n\t\t\tfind_dir = domain_name\n\t\t\tif port:\n\t\t\t\tfind_dir += '_{}'.format(port)\n\t\t\t# look for result path in output\n\t\t\tpath_regex = r\"Result: (\\/usr\\/src[^\\\"\\s]*)\"\n\t\t\tmatch = re.search(path_regex, output)\n\t\t\tif match:\n\t\t\t\tcms_json_path = match.group(1)\n\t\t\t\tif os.path.isfile(cms_json_path):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tfind_dir",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tfind_dir = domain_name\n\t\t\tif port:\n\t\t\t\tfind_dir += '_{}'.format(port)\n\t\t\t# look for result path in output\n\t\t\tpath_regex = r\"Result: (\\/usr\\/src[^\\\"\\s]*)\"\n\t\t\tmatch = re.search(path_regex, output)\n\t\t\tif match:\n\t\t\t\tcms_json_path = match.group(1)\n\t\t\t\tif os.path.isfile(cms_json_path):\n\t\t\t\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath_regex",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpath_regex = r\"Result: (\\/usr\\/src[^\\\"\\s]*)\"\n\t\t\tmatch = re.search(path_regex, output)\n\t\t\tif match:\n\t\t\t\tcms_json_path = match.group(1)\n\t\t\t\tif os.path.isfile(cms_json_path):\n\t\t\t\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\t\t\t\tif not cms_file_content.get('cms_id'):\n\t\t\t\t\t\treturn response\n\t\t\t\t\tresponse = {}\n\t\t\t\t\tresponse = cms_file_content",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tmatch",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tmatch = re.search(path_regex, output)\n\t\t\tif match:\n\t\t\t\tcms_json_path = match.group(1)\n\t\t\t\tif os.path.isfile(cms_json_path):\n\t\t\t\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\t\t\t\tif not cms_file_content.get('cms_id'):\n\t\t\t\t\t\treturn response\n\t\t\t\t\tresponse = {}\n\t\t\t\t\tresponse = cms_file_content\n\t\t\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcms_json_path",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tcms_json_path = match.group(1)\n\t\t\t\tif os.path.isfile(cms_json_path):\n\t\t\t\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\t\t\t\tif not cms_file_content.get('cms_id'):\n\t\t\t\t\t\treturn response\n\t\t\t\t\tresponse = {}\n\t\t\t\t\tresponse = cms_file_content\n\t\t\t\t\tresponse['status'] = True\n\t\t\t\t\ttry:\n\t\t\t\t\t\t# remove results",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tcms_file_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\t\t\t\tif not cms_file_content.get('cms_id'):\n\t\t\t\t\t\treturn response\n\t\t\t\t\tresponse = {}\n\t\t\t\t\tresponse = cms_file_content\n\t\t\t\t\tresponse['status'] = True\n\t\t\t\t\ttry:\n\t\t\t\t\t\t# remove results\n\t\t\t\t\t\tcms_dir_path = os.path.dirname(cms_json_path)\n\t\t\t\t\t\tshutil.rmtree(cms_dir_path)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tresponse = {}\n\t\t\t\t\tresponse = cms_file_content\n\t\t\t\t\tresponse['status'] = True\n\t\t\t\t\ttry:\n\t\t\t\t\t\t# remove results\n\t\t\t\t\t\tcms_dir_path = os.path.dirname(cms_json_path)\n\t\t\t\t\t\tshutil.rmtree(cms_dir_path)\n\t\t\t\t\texcept Exception as e:\n\t\t\t\t\t\tlogger.error(e)\n\t\t\t\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tresponse = cms_file_content\n\t\t\t\t\tresponse['status'] = True\n\t\t\t\t\ttry:\n\t\t\t\t\t\t# remove results\n\t\t\t\t\t\tcms_dir_path = os.path.dirname(cms_json_path)\n\t\t\t\t\t\tshutil.rmtree(cms_dir_path)\n\t\t\t\t\texcept Exception as e:\n\t\t\t\t\t\tlogger.error(e)\n\t\t\t\t\treturn Response(response)\n\t\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tresponse['status'] = True\n\t\t\t\t\ttry:\n\t\t\t\t\t\t# remove results\n\t\t\t\t\t\tcms_dir_path = os.path.dirname(cms_json_path)\n\t\t\t\t\t\tshutil.rmtree(cms_dir_path)\n\t\t\t\t\texcept Exception as e:\n\t\t\t\t\t\tlogger.error(e)\n\t\t\t\t\treturn Response(response)\n\t\t\treturn Response(response)\n\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tcms_dir_path",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\t\tcms_dir_path = os.path.dirname(cms_json_path)\n\t\t\t\t\t\tshutil.rmtree(cms_dir_path)\n\t\t\t\t\texcept Exception as e:\n\t\t\t\t\t\tlogger.error(e)\n\t\t\t\t\treturn Response(response)\n\t\t\treturn Response(response)\n\t\texcept Exception as e:\n\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\t\treturn Response(response)\nclass IPToDomain(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {'status': False, 'message': str(e)}\n\t\t\treturn Response(response)\nclass IPToDomain(APIView):\n\tdef get(self, request):\n\t\treq = self.request\n\t\tip_address = req.query_params.get('ip_address')\n\t\tif not ip_address:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'IP Address Required'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tip_address = req.query_params.get('ip_address')\n\t\tif not ip_address:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'IP Address Required'\n\t\t\t})\n\t\ttry:\n\t\t\tlogger.info(f'Resolving IP address {ip_address} ...')\n\t\t\tresolved_ips = []",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tip_address",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tip_address = req.query_params.get('ip_address')\n\t\tif not ip_address:\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'IP Address Required'\n\t\t\t})\n\t\ttry:\n\t\t\tlogger.info(f'Resolving IP address {ip_address} ...')\n\t\t\tresolved_ips = []\n\t\t\tfor ip in IPv4Network(ip_address, False):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresolved_ips",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresolved_ips = []\n\t\t\tfor ip in IPv4Network(ip_address, False):\n\t\t\t\tdomains = []\n\t\t\t\tips = []\n\t\t\t\ttry:\n\t\t\t\t\t(domain, domains, ips) = socket.gethostbyaddr(str(ip))\n\t\t\t\texcept socket.herror:\n\t\t\t\t\tlogger.info(f'No PTR record for {ip_address}')\n\t\t\t\t\tdomain = str(ip)\n\t\t\t\tif domain not in domains:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tdomains = []\n\t\t\t\tips = []\n\t\t\t\ttry:\n\t\t\t\t\t(domain, domains, ips) = socket.gethostbyaddr(str(ip))\n\t\t\t\texcept socket.herror:\n\t\t\t\t\tlogger.info(f'No PTR record for {ip_address}')\n\t\t\t\t\tdomain = str(ip)\n\t\t\t\tif domain not in domains:\n\t\t\t\t\tdomains.append(domain)\n\t\t\t\tresolved_ips.append({'ip': str(ip),'domain': domain, 'domains': domains, 'ips': ips})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tips",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tips = []\n\t\t\t\ttry:\n\t\t\t\t\t(domain, domains, ips) = socket.gethostbyaddr(str(ip))\n\t\t\t\texcept socket.herror:\n\t\t\t\t\tlogger.info(f'No PTR record for {ip_address}')\n\t\t\t\t\tdomain = str(ip)\n\t\t\t\tif domain not in domains:\n\t\t\t\t\tdomains.append(domain)\n\t\t\t\tresolved_ips.append({'ip': str(ip),'domain': domain, 'domains': domains, 'ips': ips})\n\t\t\tresponse = {",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tdomain = str(ip)\n\t\t\t\tif domain not in domains:\n\t\t\t\t\tdomains.append(domain)\n\t\t\t\tresolved_ips.append({'ip': str(ip),'domain': domain, 'domains': domains, 'ips': ips})\n\t\t\tresponse = {\n\t\t\t\t'status': True,\n\t\t\t\t'orig': ip_address,\n\t\t\t\t'ip_address': resolved_ips,\n\t\t\t}\n\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {\n\t\t\t\t'status': True,\n\t\t\t\t'orig': ip_address,\n\t\t\t\t'ip_address': resolved_ips,\n\t\t\t}\n\t\texcept Exception as e:\n\t\t\tlogger.exception(e)\n\t\t\tresponse = {\n\t\t\t\t'status': False,\n\t\t\t\t'ip_address': ip_address,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse = {\n\t\t\t\t'status': False,\n\t\t\t\t'ip_address': ip_address,\n\t\t\t\t'message': f'Exception {e}'\n\t\t\t}\n\t\tfinally:\n\t\t\treturn Response(response)\nclass VulnerabilityReport(APIView):\n\tdef get(self, request):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tvulnerability_id = req.query_params.get('vulnerability_id')\n\t\treturn Response({\"status\": send_hackerone_report(vulnerability_id)})\nclass GetFileContents(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tname = req.query_params.get('name')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif 'nuclei_config' in req.query_params:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tvulnerability_id = req.query_params.get('vulnerability_id')\n\t\treturn Response({\"status\": send_hackerone_report(vulnerability_id)})\nclass GetFileContents(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tname = req.query_params.get('name')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif 'nuclei_config' in req.query_params:\n\t\t\tpath = \"/root/.config/nuclei/config.yaml\"",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tname = req.query_params.get('name')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif 'nuclei_config' in req.query_params:\n\t\t\tpath = \"/root/.config/nuclei/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tname",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tname = req.query_params.get('name')\n\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif 'nuclei_config' in req.query_params:\n\t\t\tpath = \"/root/.config/nuclei/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse = {}\n\t\tresponse['status'] = False\n\t\tif 'nuclei_config' in req.query_params:\n\t\t\tpath = \"/root/.config/nuclei/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['status'] = False\n\t\tif 'nuclei_config' in req.query_params:\n\t\t\tpath = \"/root/.config/nuclei/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpath = \"/root/.config/nuclei/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'subfinder_config' in req.query_params:\n\t\t\tpath = \"/root/.config/subfinder/config.yaml\"",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'subfinder_config' in req.query_params:\n\t\t\tpath = \"/root/.config/subfinder/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'subfinder_config' in req.query_params:\n\t\t\tpath = \"/root/.config/subfinder/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'subfinder_config' in req.query_params:\n\t\t\tpath = \"/root/.config/subfinder/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['content']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'subfinder_config' in req.query_params:\n\t\t\tpath = \"/root/.config/subfinder/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpath = \"/root/.config/subfinder/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'naabu_config' in req.query_params:\n\t\t\tpath = \"/root/.config/naabu/config.yaml\"",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'naabu_config' in req.query_params:\n\t\t\tpath = \"/root/.config/naabu/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'naabu_config' in req.query_params:\n\t\t\tpath = \"/root/.config/naabu/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'naabu_config' in req.query_params:\n\t\t\tpath = \"/root/.config/naabu/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['content']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'naabu_config' in req.query_params:\n\t\t\tpath = \"/root/.config/naabu/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpath = \"/root/.config/naabu/config.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'theharvester_config' in req.query_params:\n\t\t\tpath = \"/usr/src/github/theHarvester/api-keys.yaml\"",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'theharvester_config' in req.query_params:\n\t\t\tpath = \"/usr/src/github/theHarvester/api-keys.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'theharvester_config' in req.query_params:\n\t\t\tpath = \"/usr/src/github/theHarvester/api-keys.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'theharvester_config' in req.query_params:\n\t\t\tpath = \"/usr/src/github/theHarvester/api-keys.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['content']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'theharvester_config' in req.query_params:\n\t\t\tpath = \"/usr/src/github/theHarvester/api-keys.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpath = \"/usr/src/github/theHarvester/api-keys.yaml\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'amass_config' in req.query_params:\n\t\t\tpath = \"/root/.config/amass.ini\"",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'amass_config' in req.query_params:\n\t\t\tpath = \"/root/.config/amass.ini\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'amass_config' in req.query_params:\n\t\t\tpath = \"/root/.config/amass.ini\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'amass_config' in req.query_params:\n\t\t\tpath = \"/root/.config/amass.ini\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['content']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'amass_config' in req.query_params:\n\t\t\tpath = \"/root/.config/amass.ini\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpath = \"/root/.config/amass.ini\"\n\t\t\tif not os.path.exists(path):\n\t\t\t\trun_command(f'touch {path}')\n\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'gf_pattern' in req.query_params:\n\t\t\tbasedir = '/root/.gf'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['message'] = 'File Created!'\n\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'gf_pattern' in req.query_params:\n\t\t\tbasedir = '/root/.gf'\n\t\t\tpath = f'/root/.gf/{name}.json'\n\t\t\tif is_safe_path(basedir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path, \"r\").read()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tf = open(path, \"r\")\n\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'gf_pattern' in req.query_params:\n\t\t\tbasedir = '/root/.gf'\n\t\t\tpath = f'/root/.gf/{name}.json'\n\t\t\tif is_safe_path(basedir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path, \"r\").read()\n\t\t\t\tresponse['status'] = True",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['status'] = True\n\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'gf_pattern' in req.query_params:\n\t\t\tbasedir = '/root/.gf'\n\t\t\tpath = f'/root/.gf/{name}.json'\n\t\t\tif is_safe_path(basedir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path, \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse['content']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tresponse['content'] = f.read()\n\t\t\treturn Response(response)\n\t\tif 'gf_pattern' in req.query_params:\n\t\t\tbasedir = '/root/.gf'\n\t\t\tpath = f'/root/.gf/{name}.json'\n\t\t\tif is_safe_path(basedir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path, \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tbasedir",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tbasedir = '/root/.gf'\n\t\t\tpath = f'/root/.gf/{name}.json'\n\t\t\tif is_safe_path(basedir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path, \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = \"Invalid path!\"\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpath = f'/root/.gf/{name}.json'\n\t\t\tif is_safe_path(basedir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path, \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = \"Invalid path!\"\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tif 'nuclei_template' in req.query_params:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcontent",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tcontent = open(path, \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = \"Invalid path!\"\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tif 'nuclei_template' in req.query_params:\n\t\t\tsafe_dir = '/root/nuclei-templates'\n\t\t\tpath = f'/root/nuclei-templates/{name}'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = \"Invalid path!\"\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tif 'nuclei_template' in req.query_params:\n\t\t\tsafe_dir = '/root/nuclei-templates'\n\t\t\tpath = f'/root/nuclei-templates/{name}'\n\t\t\tif is_safe_path(safe_dir, path) and os.path.exists(path):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['content']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = \"Invalid path!\"\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tif 'nuclei_template' in req.query_params:\n\t\t\tsafe_dir = '/root/nuclei-templates'\n\t\t\tpath = f'/root/nuclei-templates/{name}'\n\t\t\tif is_safe_path(safe_dir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path.format(name), \"r\").read()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['message'] = \"Invalid path!\"\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tif 'nuclei_template' in req.query_params:\n\t\t\tsafe_dir = '/root/nuclei-templates'\n\t\t\tpath = f'/root/nuclei-templates/{name}'\n\t\t\tif is_safe_path(safe_dir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path.format(name), \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tif 'nuclei_template' in req.query_params:\n\t\t\tsafe_dir = '/root/nuclei-templates'\n\t\t\tpath = f'/root/nuclei-templates/{name}'\n\t\t\tif is_safe_path(safe_dir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path.format(name), \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsafe_dir",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsafe_dir = '/root/nuclei-templates'\n\t\t\tpath = f'/root/nuclei-templates/{name}'\n\t\t\tif is_safe_path(safe_dir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path.format(name), \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = 'Invalid Path!'\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tpath",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tpath = f'/root/nuclei-templates/{name}'\n\t\t\tif is_safe_path(safe_dir, path) and os.path.exists(path):\n\t\t\t\tcontent = open(path.format(name), \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = 'Invalid Path!'\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tresponse['message'] = 'Invalid Query Params'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcontent",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tcontent = open(path.format(name), \"r\").read()\n\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = 'Invalid Path!'\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tresponse['message'] = 'Invalid Query Params'\n\t\treturn Response(response)\nclass ListTodoNotes(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = True\n\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = 'Invalid Path!'\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tresponse['message'] = 'Invalid Query Params'\n\t\treturn Response(response)\nclass ListTodoNotes(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['content']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['content'] = content\n\t\t\telse:\n\t\t\t\tresponse['message'] = 'Invalid Path!'\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tresponse['message'] = 'Invalid Query Params'\n\t\treturn Response(response)\nclass ListTodoNotes(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['message'] = 'Invalid Path!'\n\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tresponse['message'] = 'Invalid Query Params'\n\t\treturn Response(response)\nclass ListTodoNotes(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tnotes = TodoNote.objects.all().order_by('-id')\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tresponse['status'] = False\n\t\t\treturn Response(response)\n\t\tresponse['message'] = 'Invalid Query Params'\n\t\treturn Response(response)\nclass ListTodoNotes(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tnotes = TodoNote.objects.all().order_by('-id')\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['message']",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tresponse['message'] = 'Invalid Query Params'\n\t\treturn Response(response)\nclass ListTodoNotes(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tnotes = TodoNote.objects.all().order_by('-id')\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tnotes = notes.filter(project__slug=project)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tnotes = TodoNote.objects.all().order_by('-id')\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tnotes = notes.filter(project__slug=project)\n\t\ttarget_id = req.query_params.get('target_id')\n\t\ttodo_id = req.query_params.get('todo_id')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tnotes",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tnotes = TodoNote.objects.all().order_by('-id')\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tnotes = notes.filter(project__slug=project)\n\t\ttarget_id = req.query_params.get('target_id')\n\t\ttodo_id = req.query_params.get('todo_id')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif target_id:\n\t\t\tnotes = notes.filter(scan_history__in=ScanHistory.objects.filter(domain__id=target_id))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tnotes = notes.filter(project__slug=project)\n\t\ttarget_id = req.query_params.get('target_id')\n\t\ttodo_id = req.query_params.get('todo_id')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif target_id:\n\t\t\tnotes = notes.filter(scan_history__in=ScanHistory.objects.filter(domain__id=target_id))\n\t\telif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tnotes = notes.filter(project__slug=project)\n\t\ttarget_id = req.query_params.get('target_id')\n\t\ttodo_id = req.query_params.get('todo_id')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif target_id:\n\t\t\tnotes = notes.filter(scan_history__in=ScanHistory.objects.filter(domain__id=target_id))\n\t\telif scan_id:\n\t\t\tnotes = notes.filter(scan_history__id=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnotes",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnotes = notes.filter(project__slug=project)\n\t\ttarget_id = req.query_params.get('target_id')\n\t\ttodo_id = req.query_params.get('todo_id')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif target_id:\n\t\t\tnotes = notes.filter(scan_history__in=ScanHistory.objects.filter(domain__id=target_id))\n\t\telif scan_id:\n\t\t\tnotes = notes.filter(scan_history__id=scan_id)\n\t\tif todo_id:\n\t\t\tnotes = notes.filter(id=todo_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\ttodo_id = req.query_params.get('todo_id')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif target_id:\n\t\t\tnotes = notes.filter(scan_history__in=ScanHistory.objects.filter(domain__id=target_id))\n\t\telif scan_id:\n\t\t\tnotes = notes.filter(scan_history__id=scan_id)\n\t\tif todo_id:\n\t\t\tnotes = notes.filter(id=todo_id)\n\t\tif subdomain_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttodo_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttodo_id = req.query_params.get('todo_id')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif target_id:\n\t\t\tnotes = notes.filter(scan_history__in=ScanHistory.objects.filter(domain__id=target_id))\n\t\telif scan_id:\n\t\t\tnotes = notes.filter(scan_history__id=scan_id)\n\t\tif todo_id:\n\t\t\tnotes = notes.filter(id=todo_id)\n\t\tif subdomain_id:\n\t\t\tnotes = notes.filter(subdomain__id=subdomain_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tif target_id:\n\t\t\tnotes = notes.filter(scan_history__in=ScanHistory.objects.filter(domain__id=target_id))\n\t\telif scan_id:\n\t\t\tnotes = notes.filter(scan_history__id=scan_id)\n\t\tif todo_id:\n\t\t\tnotes = notes.filter(id=todo_id)\n\t\tif subdomain_id:\n\t\t\tnotes = notes.filter(subdomain__id=subdomain_id)\n\t\tnotes = ReconNoteSerializer(notes, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnotes",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnotes = notes.filter(scan_history__in=ScanHistory.objects.filter(domain__id=target_id))\n\t\telif scan_id:\n\t\t\tnotes = notes.filter(scan_history__id=scan_id)\n\t\tif todo_id:\n\t\t\tnotes = notes.filter(id=todo_id)\n\t\tif subdomain_id:\n\t\t\tnotes = notes.filter(subdomain__id=subdomain_id)\n\t\tnotes = ReconNoteSerializer(notes, many=True)\n\t\treturn Response({'notes': notes.data})\nclass ListScanHistory(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnotes",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnotes = notes.filter(scan_history__id=scan_id)\n\t\tif todo_id:\n\t\t\tnotes = notes.filter(id=todo_id)\n\t\tif subdomain_id:\n\t\t\tnotes = notes.filter(subdomain__id=subdomain_id)\n\t\tnotes = ReconNoteSerializer(notes, many=True)\n\t\treturn Response({'notes': notes.data})\nclass ListScanHistory(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnotes",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnotes = notes.filter(id=todo_id)\n\t\tif subdomain_id:\n\t\t\tnotes = notes.filter(subdomain__id=subdomain_id)\n\t\tnotes = ReconNoteSerializer(notes, many=True)\n\t\treturn Response({'notes': notes.data})\nclass ListScanHistory(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_history = ScanHistory.objects.all().order_by('-start_scan_date')\n\t\tproject = req.query_params.get('project')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tnotes",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tnotes = notes.filter(subdomain__id=subdomain_id)\n\t\tnotes = ReconNoteSerializer(notes, many=True)\n\t\treturn Response({'notes': notes.data})\nclass ListScanHistory(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_history = ScanHistory.objects.all().order_by('-start_scan_date')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tscan_history = scan_history.filter(domain__project__slug=project)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tnotes",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tnotes = ReconNoteSerializer(notes, many=True)\n\t\treturn Response({'notes': notes.data})\nclass ListScanHistory(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_history = ScanHistory.objects.all().order_by('-start_scan_date')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tscan_history = scan_history.filter(domain__project__slug=project)\n\t\tscan_history = ScanHistorySerializer(scan_history, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_history = ScanHistory.objects.all().order_by('-start_scan_date')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tscan_history = scan_history.filter(domain__project__slug=project)\n\t\tscan_history = ScanHistorySerializer(scan_history, many=True)\n\t\treturn Response(scan_history.data)\nclass ListEngines(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_history = ScanHistory.objects.all().order_by('-start_scan_date')\n\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tscan_history = scan_history.filter(domain__project__slug=project)\n\t\tscan_history = ScanHistorySerializer(scan_history, many=True)\n\t\treturn Response(scan_history.data)\nclass ListEngines(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tengines = EngineType.objects.order_by('engine_name').all()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject = req.query_params.get('project')\n\t\tif project:\n\t\t\tscan_history = scan_history.filter(domain__project__slug=project)\n\t\tscan_history = ScanHistorySerializer(scan_history, many=True)\n\t\treturn Response(scan_history.data)\nclass ListEngines(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tengines = EngineType.objects.order_by('engine_name').all()\n\t\tengine_serializer = EngineSerializer(engines, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tscan_history = scan_history.filter(domain__project__slug=project)\n\t\tscan_history = ScanHistorySerializer(scan_history, many=True)\n\t\treturn Response(scan_history.data)\nclass ListEngines(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tengines = EngineType.objects.order_by('engine_name').all()\n\t\tengine_serializer = EngineSerializer(engines, many=True)\n\t\treturn Response({'engines': engine_serializer.data})\nclass ListOrganizations(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_history = ScanHistorySerializer(scan_history, many=True)\n\t\treturn Response(scan_history.data)\nclass ListEngines(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tengines = EngineType.objects.order_by('engine_name').all()\n\t\tengine_serializer = EngineSerializer(engines, many=True)\n\t\treturn Response({'engines': engine_serializer.data})\nclass ListOrganizations(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tengines = EngineType.objects.order_by('engine_name').all()\n\t\tengine_serializer = EngineSerializer(engines, many=True)\n\t\treturn Response({'engines': engine_serializer.data})\nclass ListOrganizations(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganizations = Organization.objects.all()\n\t\torganization_serializer = OrganizationSerializer(organizations, many=True)\n\t\treturn Response({'organizations': organization_serializer.data})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tengines",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tengines = EngineType.objects.order_by('engine_name').all()\n\t\tengine_serializer = EngineSerializer(engines, many=True)\n\t\treturn Response({'engines': engine_serializer.data})\nclass ListOrganizations(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganizations = Organization.objects.all()\n\t\torganization_serializer = OrganizationSerializer(organizations, many=True)\n\t\treturn Response({'organizations': organization_serializer.data})\nclass ListTargetsInOrganization(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tengine_serializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tengine_serializer = EngineSerializer(engines, many=True)\n\t\treturn Response({'engines': engine_serializer.data})\nclass ListOrganizations(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganizations = Organization.objects.all()\n\t\torganization_serializer = OrganizationSerializer(organizations, many=True)\n\t\treturn Response({'organizations': organization_serializer.data})\nclass ListTargetsInOrganization(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\torganizations = Organization.objects.all()\n\t\torganization_serializer = OrganizationSerializer(organizations, many=True)\n\t\treturn Response({'organizations': organization_serializer.data})\nclass ListTargetsInOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganization_id = req.query_params.get('organization_id')\n\t\torganization = Organization.objects.filter(id=organization_id)\n\t\ttargets = Domain.objects.filter(domains__in=organization)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\torganizations",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\torganizations = Organization.objects.all()\n\t\torganization_serializer = OrganizationSerializer(organizations, many=True)\n\t\treturn Response({'organizations': organization_serializer.data})\nclass ListTargetsInOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganization_id = req.query_params.get('organization_id')\n\t\torganization = Organization.objects.filter(id=organization_id)\n\t\ttargets = Domain.objects.filter(domains__in=organization)\n\t\torganization_serializer = OrganizationSerializer(organization, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\torganization_serializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\torganization_serializer = OrganizationSerializer(organizations, many=True)\n\t\treturn Response({'organizations': organization_serializer.data})\nclass ListTargetsInOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\torganization_id = req.query_params.get('organization_id')\n\t\torganization = Organization.objects.filter(id=organization_id)\n\t\ttargets = Domain.objects.filter(domains__in=organization)\n\t\torganization_serializer = OrganizationSerializer(organization, many=True)\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\torganization_id = req.query_params.get('organization_id')\n\t\torganization = Organization.objects.filter(id=organization_id)\n\t\ttargets = Domain.objects.filter(domains__in=organization)\n\t\torganization_serializer = OrganizationSerializer(organization, many=True)\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'organization': organization_serializer.data, 'domains': targets_serializer.data})\nclass ListTargetsWithoutOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\torganization_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\torganization_id = req.query_params.get('organization_id')\n\t\torganization = Organization.objects.filter(id=organization_id)\n\t\ttargets = Domain.objects.filter(domains__in=organization)\n\t\torganization_serializer = OrganizationSerializer(organization, many=True)\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'organization': organization_serializer.data, 'domains': targets_serializer.data})\nclass ListTargetsWithoutOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\ttargets = Domain.objects.exclude(domains__in=Organization.objects.all())",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\torganization",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\torganization = Organization.objects.filter(id=organization_id)\n\t\ttargets = Domain.objects.filter(domains__in=organization)\n\t\torganization_serializer = OrganizationSerializer(organization, many=True)\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'organization': organization_serializer.data, 'domains': targets_serializer.data})\nclass ListTargetsWithoutOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\ttargets = Domain.objects.exclude(domains__in=Organization.objects.all())\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttargets",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttargets = Domain.objects.filter(domains__in=organization)\n\t\torganization_serializer = OrganizationSerializer(organization, many=True)\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'organization': organization_serializer.data, 'domains': targets_serializer.data})\nclass ListTargetsWithoutOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\ttargets = Domain.objects.exclude(domains__in=Organization.objects.all())\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'domains': targets_serializer.data})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\torganization_serializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\torganization_serializer = OrganizationSerializer(organization, many=True)\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'organization': organization_serializer.data, 'domains': targets_serializer.data})\nclass ListTargetsWithoutOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\ttargets = Domain.objects.exclude(domains__in=Organization.objects.all())\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'domains': targets_serializer.data})\nclass VisualiseData(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttargets_serializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'organization': organization_serializer.data, 'domains': targets_serializer.data})\nclass ListTargetsWithoutOrganization(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\ttargets = Domain.objects.exclude(domains__in=Organization.objects.all())\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'domains': targets_serializer.data})\nclass VisualiseData(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\ttargets = Domain.objects.exclude(domains__in=Organization.objects.all())\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'domains': targets_serializer.data})\nclass VisualiseData(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tmitch_data = ScanHistory.objects.filter(id=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttargets",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttargets = Domain.objects.exclude(domains__in=Organization.objects.all())\n\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'domains': targets_serializer.data})\nclass VisualiseData(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tmitch_data = ScanHistory.objects.filter(id=scan_id)\n\t\t\tserializer = VisualiseDataSerializer(mitch_data, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttargets_serializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttargets_serializer = OrganizationTargetsSerializer(targets, many=True)\n\t\treturn Response({'domains': targets_serializer.data})\nclass VisualiseData(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tmitch_data = ScanHistory.objects.filter(id=scan_id)\n\t\t\tserializer = VisualiseDataSerializer(mitch_data, many=True)\n\t\t\treturn Response(serializer.data)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tmitch_data = ScanHistory.objects.filter(id=scan_id)\n\t\t\tserializer = VisualiseDataSerializer(mitch_data, many=True)\n\t\t\treturn Response(serializer.data)\n\t\telse:\n\t\t\treturn Response()\nclass ListTechnology(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tmitch_data = ScanHistory.objects.filter(id=scan_id)\n\t\t\tserializer = VisualiseDataSerializer(mitch_data, many=True)\n\t\t\treturn Response(serializer.data)\n\t\telse:\n\t\t\treturn Response()\nclass ListTechnology(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tmitch_data",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tmitch_data = ScanHistory.objects.filter(id=scan_id)\n\t\t\tserializer = VisualiseDataSerializer(mitch_data, many=True)\n\t\t\treturn Response(serializer.data)\n\t\telse:\n\t\t\treturn Response()\nclass ListTechnology(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = VisualiseDataSerializer(mitch_data, many=True)\n\t\t\treturn Response(serializer.data)\n\t\telse:\n\t\t\treturn Response()\nclass ListTechnology(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif target_id:\n\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')\n\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif target_id:\n\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')\n\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\n\t\telif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\tif target_id:\n\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')\n\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\n\t\telif scan_id:\n\t\t\ttech = Technology.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttech",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')\n\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\n\t\telif scan_id:\n\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.filter(\n\t\t\t\t\tscan_history__id=scan_id)).annotate(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\n\t\telif scan_id:\n\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.filter(\n\t\t\t\t\tscan_history__id=scan_id)).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')\n\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttech",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.filter(\n\t\t\t\t\tscan_history__id=scan_id)).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')\n\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\n\t\telse:\n\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.all()).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\n\t\telse:\n\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.all()).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')\n\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\nclass ListDorkTypes(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttech",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttech = Technology.objects.filter(\n\t\t\t\ttechnologies__in=Subdomain.objects.all()).annotate(\n\t\t\t\tcount=Count('name')).order_by('-count')\n\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\nclass ListDorkTypes(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = TechnologyCountSerializer(tech, many=True)\n\t\t\treturn Response({\"technologies\": serializer.data})\nclass ListDorkTypes(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id)\n\t\t\t).values('type').annotate(count=Count('type')).order_by('-count')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id)\n\t\t\t).values('type').annotate(count=Count('type')).order_by('-count')\n\t\t\tserializer = DorkCountSerializer(dork, many=True)\n\t\t\treturn Response({\"dorks\": serializer.data})\n\t\telse:\n\t\t\tdork = Dork.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id)\n\t\t\t).values('type').annotate(count=Count('type')).order_by('-count')\n\t\t\tserializer = DorkCountSerializer(dork, many=True)\n\t\t\treturn Response({\"dorks\": serializer.data})\n\t\telse:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdork",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id)\n\t\t\t).values('type').annotate(count=Count('type')).order_by('-count')\n\t\t\tserializer = DorkCountSerializer(dork, many=True)\n\t\t\treturn Response({\"dorks\": serializer.data})\n\t\telse:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all()\n\t\t\t).values('type').annotate(count=Count('type')).order_by('-count')\n\t\t\tserializer = DorkCountSerializer(dork, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = DorkCountSerializer(dork, many=True)\n\t\t\treturn Response({\"dorks\": serializer.data})\n\t\telse:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all()\n\t\t\t).values('type').annotate(count=Count('type')).order_by('-count')\n\t\t\tserializer = DorkCountSerializer(dork, many=True)\n\t\t\treturn Response({\"dorks\": serializer.data})\nclass ListEmails(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdork",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all()\n\t\t\t).values('type').annotate(count=Count('type')).order_by('-count')\n\t\t\tserializer = DorkCountSerializer(dork, many=True)\n\t\t\treturn Response({\"dorks\": serializer.data})\nclass ListEmails(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = DorkCountSerializer(dork, many=True)\n\t\t\treturn Response({\"dorks\": serializer.data})\nclass ListEmails(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\temail = Email.objects.filter(\n\t\t\t\temails__in=ScanHistory.objects.filter(id=scan_id)).order_by('password')\n\t\t\tserializer = EmailSerializer(email, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\temail = Email.objects.filter(\n\t\t\t\temails__in=ScanHistory.objects.filter(id=scan_id)).order_by('password')\n\t\t\tserializer = EmailSerializer(email, many=True)\n\t\t\treturn Response({\"emails\": serializer.data})\nclass ListDorks(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\temail = Email.objects.filter(\n\t\t\t\temails__in=ScanHistory.objects.filter(id=scan_id)).order_by('password')\n\t\t\tserializer = EmailSerializer(email, many=True)\n\t\t\treturn Response({\"emails\": serializer.data})\nclass ListDorks(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\temail",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\temail = Email.objects.filter(\n\t\t\t\temails__in=ScanHistory.objects.filter(id=scan_id)).order_by('password')\n\t\t\tserializer = EmailSerializer(email, many=True)\n\t\t\treturn Response({\"emails\": serializer.data})\nclass ListDorks(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttype = req.query_params.get('type')\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = EmailSerializer(email, many=True)\n\t\t\treturn Response({\"emails\": serializer.data})\nclass ListDorks(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttype = req.query_params.get('type')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttype = req.query_params.get('type')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id))\n\t\telse:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all())\n\t\tif scan_id and type:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\ttype = req.query_params.get('type')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id))\n\t\telse:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all())\n\t\tif scan_id and type:\n\t\t\tdork = dork.filter(type=type)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttype",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttype = req.query_params.get('type')\n\t\tif scan_id:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id))\n\t\telse:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all())\n\t\tif scan_id and type:\n\t\t\tdork = dork.filter(type=type)\n\t\tserializer = DorkSerializer(dork, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdork",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.filter(id=scan_id))\n\t\telse:\n\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all())\n\t\tif scan_id and type:\n\t\t\tdork = dork.filter(type=type)\n\t\tserializer = DorkSerializer(dork, many=True)\n\t\tgrouped_res = {}\n\t\tfor item in serializer.data:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdork",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdork = Dork.objects.filter(\n\t\t\t\tdorks__in=ScanHistory.objects.all())\n\t\tif scan_id and type:\n\t\t\tdork = dork.filter(type=type)\n\t\tserializer = DorkSerializer(dork, many=True)\n\t\tgrouped_res = {}\n\t\tfor item in serializer.data:\n\t\t\titem_type = item['type']\n\t\t\tif item_type not in grouped_res:\n\t\t\t\tgrouped_res[item_type] = []",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdork",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdork = dork.filter(type=type)\n\t\tserializer = DorkSerializer(dork, many=True)\n\t\tgrouped_res = {}\n\t\tfor item in serializer.data:\n\t\t\titem_type = item['type']\n\t\t\tif item_type not in grouped_res:\n\t\t\t\tgrouped_res[item_type] = []\n\t\t\tgrouped_res[item_type].append(item)\n\t\treturn Response({\"dorks\": grouped_res})\nclass ListEmployees(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tserializer = DorkSerializer(dork, many=True)\n\t\tgrouped_res = {}\n\t\tfor item in serializer.data:\n\t\t\titem_type = item['type']\n\t\t\tif item_type not in grouped_res:\n\t\t\t\tgrouped_res[item_type] = []\n\t\t\tgrouped_res[item_type].append(item)\n\t\treturn Response({\"dorks\": grouped_res})\nclass ListEmployees(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tgrouped_res",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tgrouped_res = {}\n\t\tfor item in serializer.data:\n\t\t\titem_type = item['type']\n\t\t\tif item_type not in grouped_res:\n\t\t\t\tgrouped_res[item_type] = []\n\t\t\tgrouped_res[item_type].append(item)\n\t\treturn Response({\"dorks\": grouped_res})\nclass ListEmployees(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\titem_type",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\titem_type = item['type']\n\t\t\tif item_type not in grouped_res:\n\t\t\t\tgrouped_res[item_type] = []\n\t\t\tgrouped_res[item_type].append(item)\n\t\treturn Response({\"dorks\": grouped_res})\nclass ListEmployees(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tgrouped_res[item_type]",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tgrouped_res[item_type] = []\n\t\t\tgrouped_res[item_type].append(item)\n\t\treturn Response({\"dorks\": grouped_res})\nclass ListEmployees(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\temployee = Employee.objects.filter(\n\t\t\t\temployees__in=ScanHistory.objects.filter(id=scan_id))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\temployee = Employee.objects.filter(\n\t\t\t\temployees__in=ScanHistory.objects.filter(id=scan_id))\n\t\t\tserializer = EmployeeSerializer(employee, many=True)\n\t\t\treturn Response({\"employees\": serializer.data})\nclass ListPorts(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\temployee = Employee.objects.filter(\n\t\t\t\temployees__in=ScanHistory.objects.filter(id=scan_id))\n\t\t\tserializer = EmployeeSerializer(employee, many=True)\n\t\t\treturn Response({\"employees\": serializer.data})\nclass ListPorts(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\temployee",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\temployee = Employee.objects.filter(\n\t\t\t\temployees__in=ScanHistory.objects.filter(id=scan_id))\n\t\t\tserializer = EmployeeSerializer(employee, many=True)\n\t\t\treturn Response({\"employees\": serializer.data})\nclass ListPorts(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = EmployeeSerializer(employee, many=True)\n\t\t\treturn Response({\"employees\": serializer.data})\nclass ListPorts(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tif target_id:\n\t\t\tport = Port.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tif target_id:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\t\ttarget_domain__id=target_id))).distinct()\n\t\telif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tif target_id:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\t\ttarget_domain__id=target_id))).distinct()\n\t\telif scan_id:\n\t\t\tport = Port.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tif target_id:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\t\ttarget_domain__id=target_id))).distinct()\n\t\telif scan_id:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tip_address",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tip_address = req.query_params.get('ip_address')\n\t\tif target_id:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\t\ttarget_domain__id=target_id))).distinct()\n\t\telif scan_id:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tport",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\t\ttarget_domain__id=target_id))).distinct()\n\t\telif scan_id:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\t\tscan_history__id=scan_id))).distinct()\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tport",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\t\tscan_history__id=scan_id))).distinct()\n\t\telse:\n\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.all())).distinct()\n\t\tif ip_address:\n\t\t\tport = port.filter(ports__address=ip_address).distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tport",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tport = Port.objects.filter(\n\t\t\t\tports__in=IpAddress.objects.filter(\n\t\t\t\t\tip_addresses__in=Subdomain.objects.all())).distinct()\n\t\tif ip_address:\n\t\t\tport = port.filter(ports__address=ip_address).distinct()\n\t\tserializer = PortSerializer(port, many=True)\n\t\treturn Response({\"ports\": serializer.data})\nclass ListSubdomains(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tport",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tport = port.filter(ports__address=ip_address).distinct()\n\t\tserializer = PortSerializer(port, many=True)\n\t\treturn Response({\"ports\": serializer.data})\nclass ListSubdomains(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tserializer = PortSerializer(port, many=True)\n\t\treturn Response({\"ports\": serializer.data})\nclass ListSubdomains(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tport = req.query_params.get('port')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tport = req.query_params.get('port')\n\t\ttech = req.query_params.get('tech')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()\n\t\tif scan_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tproject = req.query_params.get('project')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tport = req.query_params.get('port')\n\t\ttech = req.query_params.get('tech')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()\n\t\tif scan_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')\n\t\telif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject = req.query_params.get('project')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tport = req.query_params.get('port')\n\t\ttech = req.query_params.get('tech')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()\n\t\tif scan_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id).distinct('name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tport = req.query_params.get('port')\n\t\ttech = req.query_params.get('tech')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()\n\t\tif scan_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id).distinct('name')\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tip_address",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tip_address = req.query_params.get('ip_address')\n\t\tport = req.query_params.get('port')\n\t\ttech = req.query_params.get('tech')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()\n\t\tif scan_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id).distinct('name')\n\t\telse:\n\t\t\tsubdomain_query = subdomains.all().distinct('name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tport",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tport = req.query_params.get('port')\n\t\ttech = req.query_params.get('tech')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()\n\t\tif scan_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id).distinct('name')\n\t\telse:\n\t\t\tsubdomain_query = subdomains.all().distinct('name')\n\t\tif ip_address:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttech",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttech = req.query_params.get('tech')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()\n\t\tif scan_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id).distinct('name')\n\t\telse:\n\t\t\tsubdomain_query = subdomains.all().distinct('name')\n\t\tif ip_address:\n\t\t\tsubdomain_query = subdomain_query.filter(ip_addresses__address=ip_address)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project) if project else Subdomain.objects.all()\n\t\tif scan_id:\n\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id).distinct('name')\n\t\telse:\n\t\t\tsubdomain_query = subdomains.all().distinct('name')\n\t\tif ip_address:\n\t\t\tsubdomain_query = subdomain_query.filter(ip_addresses__address=ip_address)\n\t\tif tech:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomains.filter(scan_history__id=scan_id).distinct('name')\n\t\telif target_id:\n\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id).distinct('name')\n\t\telse:\n\t\t\tsubdomain_query = subdomains.all().distinct('name')\n\t\tif ip_address:\n\t\t\tsubdomain_query = subdomain_query.filter(ip_addresses__address=ip_address)\n\t\tif tech:\n\t\t\tsubdomain_query = subdomain_query.filter(technologies__name=tech)\n\t\tif port:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomains.filter(target_domain__id=target_id).distinct('name')\n\t\telse:\n\t\t\tsubdomain_query = subdomains.all().distinct('name')\n\t\tif ip_address:\n\t\t\tsubdomain_query = subdomain_query.filter(ip_addresses__address=ip_address)\n\t\tif tech:\n\t\t\tsubdomain_query = subdomain_query.filter(technologies__name=tech)\n\t\tif port:\n\t\t\tsubdomain_query = subdomain_query.filter(\n\t\t\t\tip_addresses__in=IpAddress.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomains.all().distinct('name')\n\t\tif ip_address:\n\t\t\tsubdomain_query = subdomain_query.filter(ip_addresses__address=ip_address)\n\t\tif tech:\n\t\t\tsubdomain_query = subdomain_query.filter(technologies__name=tech)\n\t\tif port:\n\t\t\tsubdomain_query = subdomain_query.filter(\n\t\t\t\tip_addresses__in=IpAddress.objects.filter(\n\t\t\t\t\tports__in=Port.objects.filter(\n\t\t\t\t\t\tnumber=port)))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomain_query.filter(ip_addresses__address=ip_address)\n\t\tif tech:\n\t\t\tsubdomain_query = subdomain_query.filter(technologies__name=tech)\n\t\tif port:\n\t\t\tsubdomain_query = subdomain_query.filter(\n\t\t\t\tip_addresses__in=IpAddress.objects.filter(\n\t\t\t\t\tports__in=Port.objects.filter(\n\t\t\t\t\t\tnumber=port)))\n\t\tif 'only_important' in req.query_params:\n\t\t\tsubdomain_query = subdomain_query.filter(is_important=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomain_query.filter(technologies__name=tech)\n\t\tif port:\n\t\t\tsubdomain_query = subdomain_query.filter(\n\t\t\t\tip_addresses__in=IpAddress.objects.filter(\n\t\t\t\t\tports__in=Port.objects.filter(\n\t\t\t\t\t\tnumber=port)))\n\t\tif 'only_important' in req.query_params:\n\t\t\tsubdomain_query = subdomain_query.filter(is_important=True)\n\t\tif 'no_lookup_interesting' in req.query_params:\n\t\t\tserializer = OnlySubdomainNameSerializer(subdomain_query, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomain_query.filter(\n\t\t\t\tip_addresses__in=IpAddress.objects.filter(\n\t\t\t\t\tports__in=Port.objects.filter(\n\t\t\t\t\t\tnumber=port)))\n\t\tif 'only_important' in req.query_params:\n\t\t\tsubdomain_query = subdomain_query.filter(is_important=True)\n\t\tif 'no_lookup_interesting' in req.query_params:\n\t\t\tserializer = OnlySubdomainNameSerializer(subdomain_query, many=True)\n\t\telse:\n\t\t\tserializer = SubdomainSerializer(subdomain_query, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomain_query = subdomain_query.filter(is_important=True)\n\t\tif 'no_lookup_interesting' in req.query_params:\n\t\t\tserializer = OnlySubdomainNameSerializer(subdomain_query, many=True)\n\t\telse:\n\t\t\tserializer = SubdomainSerializer(subdomain_query, many=True)\n\t\treturn Response({\"subdomains\": serializer.data})\n\tdef post(self, req):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_ids = data.get('subdomain_ids')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = OnlySubdomainNameSerializer(subdomain_query, many=True)\n\t\telse:\n\t\t\tserializer = SubdomainSerializer(subdomain_query, many=True)\n\t\treturn Response({\"subdomains\": serializer.data})\n\tdef post(self, req):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_ids = data.get('subdomain_ids')\n\t\tsubdomain_names = []\n\t\tfor id in subdomain_ids:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = SubdomainSerializer(subdomain_query, many=True)\n\t\treturn Response({\"subdomains\": serializer.data})\n\tdef post(self, req):\n\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_ids = data.get('subdomain_ids')\n\t\tsubdomain_names = []\n\t\tfor id in subdomain_ids:\n\t\t\tsubdomain_names.append(Subdomain.objects.get(id=id).name)\n\t\tif subdomain_names:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tdata = req.data\n\t\tsubdomain_ids = data.get('subdomain_ids')\n\t\tsubdomain_names = []\n\t\tfor id in subdomain_ids:\n\t\t\tsubdomain_names.append(Subdomain.objects.get(id=id).name)\n\t\tif subdomain_names:\n\t\t\treturn Response({'status': True, \"results\": subdomain_names})\n\t\treturn Response({'status': False})\nclass ListOsintUsers(APIView):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdata = req.data\n\t\tsubdomain_ids = data.get('subdomain_ids')\n\t\tsubdomain_names = []\n\t\tfor id in subdomain_ids:\n\t\t\tsubdomain_names.append(Subdomain.objects.get(id=id).name)\n\t\tif subdomain_names:\n\t\t\treturn Response({'status': True, \"results\": subdomain_names})\n\t\treturn Response({'status': False})\nclass ListOsintUsers(APIView):\n\tdef get(self, request, format=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_ids",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_ids = data.get('subdomain_ids')\n\t\tsubdomain_names = []\n\t\tfor id in subdomain_ids:\n\t\t\tsubdomain_names.append(Subdomain.objects.get(id=id).name)\n\t\tif subdomain_names:\n\t\t\treturn Response({'status': True, \"results\": subdomain_names})\n\t\treturn Response({'status': False})\nclass ListOsintUsers(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_names",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_names = []\n\t\tfor id in subdomain_ids:\n\t\t\tsubdomain_names.append(Subdomain.objects.get(id=id).name)\n\t\tif subdomain_names:\n\t\t\treturn Response({'status': True, \"results\": subdomain_names})\n\t\treturn Response({'status': False})\nclass ListOsintUsers(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).exclude(author__isnull=True).values('author').distinct()\n\t\t\tserializer = MetafinderUserSerializer(documents, many=True)\n\t\t\treturn Response({\"users\": serializer.data})\nclass ListMetadata(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).exclude(author__isnull=True).values('author').distinct()\n\t\t\tserializer = MetafinderUserSerializer(documents, many=True)\n\t\t\treturn Response({\"users\": serializer.data})\nclass ListMetadata(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdocuments",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).exclude(author__isnull=True).values('author').distinct()\n\t\t\tserializer = MetafinderUserSerializer(documents, many=True)\n\t\t\treturn Response({\"users\": serializer.data})\nclass ListMetadata(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).distinct()\n\t\t\tserializer = MetafinderDocumentSerializer(documents, many=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = MetafinderUserSerializer(documents, many=True)\n\t\t\treturn Response({\"users\": serializer.data})\nclass ListMetadata(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).distinct()\n\t\t\tserializer = MetafinderDocumentSerializer(documents, many=True)\n\t\t\treturn Response({\"metadata\": serializer.data})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).distinct()\n\t\t\tserializer = MetafinderDocumentSerializer(documents, many=True)\n\t\t\treturn Response({\"metadata\": serializer.data})\nclass ListIPs(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).distinct()\n\t\t\tserializer = MetafinderDocumentSerializer(documents, many=True)\n\t\t\treturn Response({\"metadata\": serializer.data})\nclass ListIPs(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdocuments",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tdocuments = MetaFinderDocument.objects.filter(scan_history__id=scan_id).distinct()\n\t\t\tserializer = MetafinderDocumentSerializer(documents, many=True)\n\t\t\treturn Response({\"metadata\": serializer.data})\nclass ListIPs(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tport = req.query_params.get('port')\n\t\tif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tserializer = MetafinderDocumentSerializer(documents, many=True)\n\t\t\treturn Response({\"metadata\": serializer.data})\nclass ListIPs(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tport = req.query_params.get('port')\n\t\tif target_id:\n\t\t\tips = IpAddress.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tport = req.query_params.get('port')\n\t\tif target_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).distinct()\n\t\telif scan_id:\n\t\t\tips = IpAddress.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tport = req.query_params.get('port')\n\t\tif target_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).distinct()\n\t\telif scan_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\tport = req.query_params.get('port')\n\t\tif target_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).distinct()\n\t\telif scan_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\tscan_history__id=scan_id)).distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tport",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tport = req.query_params.get('port')\n\t\tif target_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).distinct()\n\t\telif scan_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\tscan_history__id=scan_id)).distinct()\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tips",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\ttarget_domain__id=target_id)).distinct()\n\t\telif scan_id:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\tscan_history__id=scan_id)).distinct()\n\t\telse:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.all()).distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tips",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.filter(\n\t\t\t\t\tscan_history__id=scan_id)).distinct()\n\t\telse:\n\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.all()).distinct()\n\t\tif port:\n\t\t\tips = ips.filter(\n\t\t\t\tports__in=Port.objects.filter(\n\t\t\t\t\tnumber=port)).distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tips",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tips = IpAddress.objects.filter(\n\t\t\t\tip_addresses__in=Subdomain.objects.all()).distinct()\n\t\tif port:\n\t\t\tips = ips.filter(\n\t\t\t\tports__in=Port.objects.filter(\n\t\t\t\t\tnumber=port)).distinct()\n\t\tserializer = IpSerializer(ips, many=True)\n\t\treturn Response({\"ips\": serializer.data})\nclass IpAddressViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tips",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tips = ips.filter(\n\t\t\t\tports__in=Port.objects.filter(\n\t\t\t\t\tnumber=port)).distinct()\n\t\tserializer = IpSerializer(ips, many=True)\n\t\treturn Response({\"ips\": serializer.data})\nclass IpAddressViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = IpSubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tserializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tserializer = IpSerializer(ips, many=True)\n\t\treturn Response({\"ips\": serializer.data})\nclass IpAddressViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = IpSubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tself.queryset = Subdomain.objects.filter(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Subdomain.objects.none()\n\tserializer_class = IpSubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tself.queryset = Subdomain.objects.filter(\n\t\t\t\tscan_history__id=scan_id).exclude(\n\t\t\t\tip_addresses__isnull=True).distinct()\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = IpSubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tself.queryset = Subdomain.objects.filter(\n\t\t\t\tscan_history__id=scan_id).exclude(\n\t\t\t\tip_addresses__isnull=True).distinct()\n\t\telse:\n\t\t\tself.serializer_class = IpSerializer",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tself.queryset = Subdomain.objects.filter(\n\t\t\t\tscan_history__id=scan_id).exclude(\n\t\t\t\tip_addresses__isnull=True).distinct()\n\t\telse:\n\t\t\tself.serializer_class = IpSerializer\n\t\t\tself.queryset = IpAddress.objects.all()\n\t\treturn self.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tself.queryset = Subdomain.objects.filter(\n\t\t\t\tscan_history__id=scan_id).exclude(\n\t\t\t\tip_addresses__isnull=True).distinct()\n\t\telse:\n\t\t\tself.serializer_class = IpSerializer\n\t\t\tself.queryset = IpAddress.objects.all()\n\t\treturn self.queryset\n\tdef paginate_queryset(self, queryset, view=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = Subdomain.objects.filter(\n\t\t\t\tscan_history__id=scan_id).exclude(\n\t\t\t\tip_addresses__isnull=True).distinct()\n\t\telse:\n\t\t\tself.serializer_class = IpSerializer\n\t\t\tself.queryset = IpAddress.objects.all()\n\t\treturn self.queryset\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:\n\t\t\treturn None",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.serializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.serializer_class = IpSerializer\n\t\t\tself.queryset = IpAddress.objects.all()\n\t\treturn self.queryset\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:\n\t\t\treturn None\n\t\treturn self.paginator.paginate_queryset(\n\t\t\tqueryset, self.request, view=self)\nclass SubdomainsViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = IpAddress.objects.all()\n\t\treturn self.queryset\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:\n\t\t\treturn None\n\t\treturn self.paginator.paginate_queryset(\n\t\t\tqueryset, self.request, view=self)\nclass SubdomainsViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainSerializer",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tif 'only_screenshot' in self.request.query_params:\n\t\t\t\treturn (\n\t\t\t\t\tSubdomain.objects\n\t\t\t\t\t.filter(scan_history__id=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tif 'only_screenshot' in self.request.query_params:\n\t\t\t\treturn (\n\t\t\t\t\tSubdomain.objects\n\t\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t\t.exclude(screenshot_path__isnull=True))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tif 'only_screenshot' in self.request.query_params:\n\t\t\t\treturn (\n\t\t\t\t\tSubdomain.objects\n\t\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t\t.exclude(screenshot_path__isnull=True))\n\t\t\treturn Subdomain.objects.filter(scan_history=scan_id)\n\tdef paginate_queryset(self, queryset, view=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tif scan_id:\n\t\t\tif 'only_screenshot' in self.request.query_params:\n\t\t\t\treturn (\n\t\t\t\t\tSubdomain.objects\n\t\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t\t.exclude(screenshot_path__isnull=True))\n\t\t\treturn Subdomain.objects.filter(scan_history=scan_id)\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_discovery",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_discovery = True and the status of the last scan has to be\n\t\tsuccessful and calculate difference\n\t'''\n\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainChangesSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id)[0].domain.id",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainChangesSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id)[0].domain.id\n\t\tscan_history_query = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = SubdomainChangesSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id)[0].domain.id\n\t\tscan_history_query = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['subdomain_discovery'])",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id)[0].domain.id\n\t\tscan_history_query = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['subdomain_discovery'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.exclude(Q(scan_status=-1) | Q(scan_status=1))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id)[0].domain.id\n\t\tscan_history_query = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['subdomain_discovery'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.exclude(Q(scan_status=-1) | Q(scan_status=1))\n\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tchanges",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id)[0].domain.id\n\t\tscan_history_query = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['subdomain_discovery'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.exclude(Q(scan_status=-1) | Q(scan_status=1))\n\t\t)\n\t\tif scan_history_query.count() > 1:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain_id = ScanHistory.objects.filter(id=scan_id)[0].domain.id\n\t\tscan_history_query = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['subdomain_discovery'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.exclude(Q(scan_status=-1) | Q(scan_status=1))\n\t\t)\n\t\tif scan_history_query.count() > 1:\n\t\t\tlast_scan = scan_history_query.order_by('-start_scan_date')[1]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_history_query = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['subdomain_discovery'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.exclude(Q(scan_status=-1) | Q(scan_status=1))\n\t\t)\n\t\tif scan_history_query.count() > 1:\n\t\t\tlast_scan = scan_history_query.order_by('-start_scan_date')[1]\n\t\t\tscanned_host_q1 = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlast_scan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlast_scan = scan_history_query.order_by('-start_scan_date')[1]\n\t\t\tscanned_host_q1 = (\n\t\t\t\tSubdomain.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.values('name')\n\t\t\t)\n\t\t\tscanned_host_q2 = (\n\t\t\t\tSubdomain.objects\n\t\t\t\t.filter(scan_history__id=last_scan.id)\n\t\t\t\t.values('name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tscanned_host_q1",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tscanned_host_q1 = (\n\t\t\t\tSubdomain.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.values('name')\n\t\t\t)\n\t\t\tscanned_host_q2 = (\n\t\t\t\tSubdomain.objects\n\t\t\t\t.filter(scan_history__id=last_scan.id)\n\t\t\t\t.values('name')\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tscanned_host_q2",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tscanned_host_q2 = (\n\t\t\t\tSubdomain.objects\n\t\t\t\t.filter(scan_history__id=last_scan.id)\n\t\t\t\t.values('name')\n\t\t\t)\n\t\t\tadded_subdomain = scanned_host_q1.difference(scanned_host_q2)\n\t\t\tremoved_subdomains = scanned_host_q2.difference(scanned_host_q1)\n\t\t\tif changes == 'added':\n\t\t\t\treturn (\n\t\t\t\t\tSubdomain.objects",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tadded_subdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tadded_subdomain = scanned_host_q1.difference(scanned_host_q2)\n\t\t\tremoved_subdomains = scanned_host_q2.difference(scanned_host_q1)\n\t\t\tif changes == 'added':\n\t\t\t\treturn (\n\t\t\t\t\tSubdomain.objects\n\t\t\t\t\t.filter(scan_history=scan_id)\n\t\t\t\t\t.filter(name__in=added_subdomain)\n\t\t\t\t\t.annotate(\n\t\t\t\t\t\tchange=Value('added', output_field=CharField())\n\t\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tremoved_subdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tremoved_subdomains = scanned_host_q2.difference(scanned_host_q1)\n\t\t\tif changes == 'added':\n\t\t\t\treturn (\n\t\t\t\t\tSubdomain.objects\n\t\t\t\t\t.filter(scan_history=scan_id)\n\t\t\t\t\t.filter(name__in=added_subdomain)\n\t\t\t\t\t.annotate(\n\t\t\t\t\t\tchange=Value('added', output_field=CharField())\n\t\t\t\t\t)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tadded_subdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tadded_subdomain = (\n\t\t\t\t\tSubdomain.objects\n\t\t\t\t\t.filter(scan_history=scan_id)\n\t\t\t\t\t.filter(name__in=added_subdomain)\n\t\t\t\t\t.annotate(\n\t\t\t\t\t\tchange=Value('added', output_field=CharField())\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\tremoved_subdomains = (\n\t\t\t\t\tSubdomain.objects",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tremoved_subdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tremoved_subdomains = (\n\t\t\t\t\tSubdomain.objects\n\t\t\t\t\t.filter(scan_history=last_scan)\n\t\t\t\t\t.filter(name__in=removed_subdomains)\n\t\t\t\t\t.annotate(\n\t\t\t\t\t\tchange=Value('removed', output_field=CharField())\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\tchanges = added_subdomain.union(removed_subdomains)\n\t\t\t\treturn changes",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tchanges",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tchanges = added_subdomain.union(removed_subdomains)\n\t\t\t\treturn changes\n\t\treturn self.queryset\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:\n\t\t\treturn None\n\t\treturn self.paginator.paginate_queryset(\n\t\t\tqueryset, self.request, view=self)\nclass EndPointChangesViewSet(viewsets.ModelViewSet):\n\t'''",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndPointChangesSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id).first().domain.id\n\t\tscan_history = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = EndPointChangesSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id).first().domain.id\n\t\tscan_history = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['fetch_url'])",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id).first().domain.id\n\t\tscan_history = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['fetch_url'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.filter(scan_status=2)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id).first().domain.id\n\t\tscan_history = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['fetch_url'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.filter(scan_status=2)\n\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tchanges",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tchanges = req.query_params.get('changes')\n\t\tdomain_id = ScanHistory.objects.filter(id=scan_id).first().domain.id\n\t\tscan_history = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['fetch_url'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.filter(scan_status=2)\n\t\t)\n\t\tif scan_history.count() > 1:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain_id = ScanHistory.objects.filter(id=scan_id).first().domain.id\n\t\tscan_history = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['fetch_url'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.filter(scan_status=2)\n\t\t)\n\t\tif scan_history.count() > 1:\n\t\t\tlast_scan = scan_history.order_by('-start_scan_date')[1]",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_history",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_history = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(domain=domain_id)\n\t\t\t.filter(tasks__overlap=['fetch_url'])\n\t\t\t.filter(id__lte=scan_id)\n\t\t\t.filter(scan_status=2)\n\t\t)\n\t\tif scan_history.count() > 1:\n\t\t\tlast_scan = scan_history.order_by('-start_scan_date')[1]\n\t\t\tscanned_host_q1 = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlast_scan",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlast_scan = scan_history.order_by('-start_scan_date')[1]\n\t\t\tscanned_host_q1 = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.values('http_url')\n\t\t\t)\n\t\t\tscanned_host_q2 = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=last_scan.id)\n\t\t\t\t.values('http_url')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tscanned_host_q1",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tscanned_host_q1 = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.values('http_url')\n\t\t\t)\n\t\t\tscanned_host_q2 = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=last_scan.id)\n\t\t\t\t.values('http_url')\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tscanned_host_q2",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tscanned_host_q2 = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=last_scan.id)\n\t\t\t\t.values('http_url')\n\t\t\t)\n\t\t\tadded_endpoints = scanned_host_q1.difference(scanned_host_q2)\n\t\t\tremoved_endpoints = scanned_host_q2.difference(scanned_host_q1)\n\t\t\tif changes == 'added':\n\t\t\t\treturn (\n\t\t\t\t\tEndPoint.objects",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tadded_endpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tadded_endpoints = scanned_host_q1.difference(scanned_host_q2)\n\t\t\tremoved_endpoints = scanned_host_q2.difference(scanned_host_q1)\n\t\t\tif changes == 'added':\n\t\t\t\treturn (\n\t\t\t\t\tEndPoint.objects\n\t\t\t\t\t.filter(scan_history=scan_id)\n\t\t\t\t\t.filter(http_url__in=added_endpoints)\n\t\t\t\t\t.annotate(change=Value('added', output_field=CharField()))\n\t\t\t\t)\n\t\t\telif changes == 'removed':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tremoved_endpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tremoved_endpoints = scanned_host_q2.difference(scanned_host_q1)\n\t\t\tif changes == 'added':\n\t\t\t\treturn (\n\t\t\t\t\tEndPoint.objects\n\t\t\t\t\t.filter(scan_history=scan_id)\n\t\t\t\t\t.filter(http_url__in=added_endpoints)\n\t\t\t\t\t.annotate(change=Value('added', output_field=CharField()))\n\t\t\t\t)\n\t\t\telif changes == 'removed':\n\t\t\t\treturn (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tadded_endpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tadded_endpoints = (\n\t\t\t\t\tEndPoint.objects\n\t\t\t\t\t.filter(scan_history=scan_id)\n\t\t\t\t\t.filter(http_url__in=added_endpoints)\n\t\t\t\t\t.annotate(change=Value('added', output_field=CharField()))\n\t\t\t\t)\n\t\t\t\tremoved_endpoints = (\n\t\t\t\t\tEndPoint.objects\n\t\t\t\t\t.filter(scan_history=last_scan)\n\t\t\t\t\t.filter(http_url__in=removed_endpoints)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tremoved_endpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tremoved_endpoints = (\n\t\t\t\t\tEndPoint.objects\n\t\t\t\t\t.filter(scan_history=last_scan)\n\t\t\t\t\t.filter(http_url__in=removed_endpoints)\n\t\t\t\t\t.annotate(change=Value('removed', output_field=CharField()))\n\t\t\t\t)\n\t\t\t\tchanges = added_endpoints.union(removed_endpoints)\n\t\t\t\treturn changes\n\t\treturn self.queryset\n\tdef paginate_queryset(self, queryset, view=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tchanges",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tchanges = added_endpoints.union(removed_endpoints)\n\t\t\t\treturn changes\n\t\treturn self.queryset\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:\n\t\t\treturn None\n\t\treturn self.paginator.paginate_queryset(\n\t\t\tqueryset, self.request, view=self)\nclass InterestingSubdomainViewSet(viewsets.ModelViewSet):\n\tqueryset = Subdomain.objects.none()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')\n\t\tif 'only_subdomains' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingSubdomainSerializer\n\t\tif scan_id:\n\t\t\tself.queryset = get_interesting_subdomains(scan_history=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')\n\t\tif 'only_subdomains' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingSubdomainSerializer\n\t\tif scan_id:\n\t\t\tself.queryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')\n\t\tif 'only_subdomains' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingSubdomainSerializer\n\t\tif scan_id:\n\t\t\tself.queryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tself.queryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tdomain_id = req.query_params.get('target_id')\n\t\tif 'only_subdomains' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingSubdomainSerializer\n\t\tif scan_id:\n\t\t\tself.queryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tself.queryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tself.queryset = get_interesting_subdomains()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain_id = req.query_params.get('target_id')\n\t\tif 'only_subdomains' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingSubdomainSerializer\n\t\tif scan_id:\n\t\t\tself.queryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tself.queryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tself.queryset = get_interesting_subdomains()\n\t\treturn self.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.serializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.serializer_class = InterestingSubdomainSerializer\n\t\tif scan_id:\n\t\t\tself.queryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tself.queryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tself.queryset = get_interesting_subdomains()\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = get_interesting_subdomains(scan_history=scan_id)\n\t\telif domain_id:\n\t\t\tself.queryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tself.queryset = get_interesting_subdomains()\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = get_interesting_subdomains(domain_id=domain_id)\n\t\telse:\n\t\t\tself.queryset = get_interesting_subdomains()\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = get_interesting_subdomains()\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'name'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '2':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsearch_value",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '2':\n\t\t\torder_col = 'http_status'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '2':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '3':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_direction",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '2':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '3':\n\t\t\torder_col = 'content_length'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '2':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '3':\n\t\t\torder_col = 'content_length'\n\t\tif _order_direction == 'desc':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'name'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '2':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '3':\n\t\t\torder_col = 'content_length'\n\t\tif _order_direction == 'desc':\n\t\t\torder_col = f'-{order_col}'\n\t\tif search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'page_title'\n\t\telif _order_col == '2':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '3':\n\t\t\torder_col = 'content_length'\n\t\tif _order_direction == 'desc':\n\t\t\torder_col = f'-{order_col}'\n\t\tif search_value:\n\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'http_status'\n\t\telif _order_col == '3':\n\t\t\torder_col = 'content_length'\n\t\tif _order_direction == 'desc':\n\t\t\torder_col = f'-{order_col}'\n\t\tif search_value:\n\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |\n\t\t\t\tQ(page_title__icontains=search_value) |\n\t\t\t\tQ(http_status__icontains=search_value)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'content_length'\n\t\tif _order_direction == 'desc':\n\t\t\torder_col = f'-{order_col}'\n\t\tif search_value:\n\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |\n\t\t\t\tQ(page_title__icontains=search_value) |\n\t\t\t\tQ(http_status__icontains=search_value)\n\t\t\t)\n\t\treturn qs.order_by(order_col)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = f'-{order_col}'\n\t\tif search_value:\n\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |\n\t\t\t\tQ(page_title__icontains=search_value) |\n\t\t\t\tQ(http_status__icontains=search_value)\n\t\t\t)\n\t\treturn qs.order_by(order_col)\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = self.queryset.filter(\n\t\t\t\tQ(name__icontains=search_value) |\n\t\t\t\tQ(page_title__icontains=search_value) |\n\t\t\t\tQ(http_status__icontains=search_value)\n\t\t\t)\n\t\treturn qs.order_by(order_col)\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:\n\t\t\treturn None\n\t\treturn self.paginator.paginate_queryset(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif 'only_endpoints' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingEndPointSerializer\n\t\tif scan_id:\n\t\t\treturn get_interesting_endpoints(scan_history=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif 'only_endpoints' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingEndPointSerializer\n\t\tif scan_id:\n\t\t\treturn get_interesting_endpoints(scan_history=scan_id)\n\t\telif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif 'only_endpoints' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingEndPointSerializer\n\t\tif scan_id:\n\t\t\treturn get_interesting_endpoints(scan_history=scan_id)\n\t\telif target_id:\n\t\t\treturn get_interesting_endpoints(target=target_id)\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tif 'only_endpoints' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingEndPointSerializer\n\t\tif scan_id:\n\t\t\treturn get_interesting_endpoints(scan_history=scan_id)\n\t\telif target_id:\n\t\t\treturn get_interesting_endpoints(target=target_id)\n\t\telse:\n\t\t\treturn get_interesting_endpoints()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\tif 'only_endpoints' in self.request.query_params:\n\t\t\tself.serializer_class = InterestingEndPointSerializer\n\t\tif scan_id:\n\t\t\treturn get_interesting_endpoints(scan_history=scan_id)\n\t\telif target_id:\n\t\t\treturn get_interesting_endpoints(target=target_id)\n\t\telse:\n\t\t\treturn get_interesting_endpoints()\n\tdef paginate_queryset(self, queryset, view=None):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.serializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.serializer_class = InterestingEndPointSerializer\n\t\tif scan_id:\n\t\t\treturn get_interesting_endpoints(scan_history=scan_id)\n\t\telif target_id:\n\t\t\treturn get_interesting_endpoints(target=target_id)\n\t\telse:\n\t\t\treturn get_interesting_endpoints()\n\tdef paginate_queryset(self, queryset, view=None):\n\t\tif 'no_page' in self.request.query_params:\n\t\t\treturn None",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Subdomain.objects.none()\n\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tname = req.query_params.get('name')\n\t\tproject = req.query_params.get('project')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = SubdomainSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tname = req.query_params.get('name')\n\t\tproject = req.query_params.get('project')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tname = req.query_params.get('name')\n\t\tproject = req.query_params.get('project')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)\n\t\tif 'is_important' in req.query_params:\n\t\t\tsubdomains = subdomains.filter(is_important=True)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tname = req.query_params.get('name')\n\t\tproject = req.query_params.get('project')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)\n\t\tif 'is_important' in req.query_params:\n\t\t\tsubdomains = subdomains.filter(is_important=True)\n\t\tif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tname = req.query_params.get('name')\n\t\tproject = req.query_params.get('project')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)\n\t\tif 'is_important' in req.query_params:\n\t\t\tsubdomains = subdomains.filter(is_important=True)\n\t\tif target_id:\n\t\t\tself.queryset = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\turl_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\turl_query = req.query_params.get('query_param')\n\t\tip_address = req.query_params.get('ip_address')\n\t\tname = req.query_params.get('name')\n\t\tproject = req.query_params.get('project')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)\n\t\tif 'is_important' in req.query_params:\n\t\t\tsubdomains = subdomains.filter(is_important=True)\n\t\tif target_id:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tip_address",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tip_address = req.query_params.get('ip_address')\n\t\tname = req.query_params.get('name')\n\t\tproject = req.query_params.get('project')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)\n\t\tif 'is_important' in req.query_params:\n\t\t\tsubdomains = subdomains.filter(is_important=True)\n\t\tif target_id:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(target_domain__id=target_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tname",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tname = req.query_params.get('name')\n\t\tproject = req.query_params.get('project')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)\n\t\tif 'is_important' in req.query_params:\n\t\t\tsubdomains = subdomains.filter(is_important=True)\n\t\tif target_id:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject = req.query_params.get('project')\n\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)\n\t\tif 'is_important' in req.query_params:\n\t\t\tsubdomains = subdomains.filter(is_important=True)\n\t\tif target_id:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomains = Subdomain.objects.filter(target_domain__project__slug=project)\n\t\tif 'is_important' in req.query_params:\n\t\t\tsubdomains = subdomains.filter(is_important=True)\n\t\tif target_id:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telif url_query:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomains = subdomains.filter(is_important=True)\n\t\tif target_id:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telif url_query:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telif url_query:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(Q(target_domain__name=url_query))\n\t\t\t\t.distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(Q(target_domain__name=url_query))\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telif scan_id:\n\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = (\n\t\t\t\tsubdomains\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telse:\n\t\t\tself.queryset = subdomains.distinct()\n\t\tif 'only_directory' in req.query_params:\n\t\t\tself.queryset = self.queryset.exclude(directories__isnull=True)\n\t\tif ip_address:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = subdomains.distinct()\n\t\tif 'only_directory' in req.query_params:\n\t\t\tself.queryset = self.queryset.exclude(directories__isnull=True)\n\t\tif ip_address:\n\t\t\tself.queryset = self.queryset.filter(ip_addresses__address__icontains=ip_address)\n\t\tif name:\n\t\t\tself.queryset = self.queryset.filter(name=name)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = self.queryset.exclude(directories__isnull=True)\n\t\tif ip_address:\n\t\t\tself.queryset = self.queryset.filter(ip_addresses__address__icontains=ip_address)\n\t\tif name:\n\t\t\tself.queryset = self.queryset.filter(name=name)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = self.queryset.filter(ip_addresses__address__icontains=ip_address)\n\t\tif name:\n\t\t\tself.queryset = self.queryset.filter(name=name)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.queryset = self.queryset.filter(name=name)\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'checked'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'checked'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '4':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsearch_value",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'checked'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '4':\n\t\t\torder_col = 'http_status'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'checked'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '4':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '5':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_direction",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'checked'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '4':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '5':\n\t\t\torder_col = 'page_title'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\torder_col = 'content_length'\n\t\tif _order_col == '0':\n\t\t\torder_col = 'checked'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '4':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '5':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '8':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'checked'\n\t\telif _order_col == '1':\n\t\t\torder_col = 'name'\n\t\telif _order_col == '4':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '5':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '8':\n\t\t\torder_col = 'content_length'\n\t\telif _order_col == '10':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'name'\n\t\telif _order_col == '4':\n\t\t\torder_col = 'http_status'\n\t\telif _order_col == '5':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '8':\n\t\t\torder_col = 'content_length'\n\t\telif _order_col == '10':\n\t\t\torder_col = 'response_time'\n\t\tif _order_direction == 'desc':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'http_status'\n\t\telif _order_col == '5':\n\t\t\torder_col = 'page_title'\n\t\telif _order_col == '8':\n\t\t\torder_col = 'content_length'\n\t\telif _order_col == '10':\n\t\t\torder_col = 'response_time'\n\t\tif _order_direction == 'desc':\n\t\t\torder_col = f'-{order_col}'\n\t\t# if the search query is separated by = means, it is a specific lookup",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'page_title'\n\t\telif _order_col == '8':\n\t\t\torder_col = 'content_length'\n\t\telif _order_col == '10':\n\t\t\torder_col = 'response_time'\n\t\tif _order_direction == 'desc':\n\t\t\torder_col = f'-{order_col}'\n\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t# divide the search query into two half and lookup\n\t\tif search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'content_length'\n\t\telif _order_col == '10':\n\t\t\torder_col = 'response_time'\n\t\tif _order_direction == 'desc':\n\t\t\torder_col = f'-{order_col}'\n\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t# divide the search query into two half and lookup\n\t\tif search_value:\n\t\t\toperators = ['=', '&', '|', '>', '<', '!']\n\t\t\tif any(x in search_value for x in operators):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'response_time'\n\t\tif _order_direction == 'desc':\n\t\t\torder_col = f'-{order_col}'\n\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t# divide the search query into two half and lookup\n\t\tif search_value:\n\t\t\toperators = ['=', '&', '|', '>', '<', '!']\n\t\t\tif any(x in search_value for x in operators):\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = f'-{order_col}'\n\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t# divide the search query into two half and lookup\n\t\tif search_value:\n\t\t\toperators = ['=', '&', '|', '>', '<', '!']\n\t\t\tif any(x in search_value for x in operators):\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\toperators",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\toperators = ['=', '&', '|', '>', '<', '!']\n\t\t\tif any(x in search_value for x in operators):\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:\n\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tcomplex_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:\n\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:\n\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\treturn qs.order_by(order_col)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tcomplex_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\treturn qs.order_by(order_col)\n\tdef general_lookup(self, search_value):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\treturn qs.order_by(order_col)\n\tdef general_lookup(self, search_value):\n\t\tqs = self.queryset.filter(\n\t\t\tQ(name__icontains=search_value) |\n\t\t\tQ(cname__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\treturn qs.order_by(order_col)\n\tdef general_lookup(self, search_value):\n\t\tqs = self.queryset.filter(\n\t\t\tQ(name__icontains=search_value) |\n\t\t\tQ(cname__icontains=search_value) |\n\t\t\tQ(http_status__icontains=search_value) |\n\t\t\tQ(page_title__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.general_lookup(search_value)\n\t\treturn qs.order_by(order_col)\n\tdef general_lookup(self, search_value):\n\t\tqs = self.queryset.filter(\n\t\t\tQ(name__icontains=search_value) |\n\t\t\tQ(cname__icontains=search_value) |\n\t\t\tQ(http_status__icontains=search_value) |\n\t\t\tQ(page_title__icontains=search_value) |\n\t\t\tQ(http_url__icontains=search_value) |\n\t\t\tQ(technologies__name__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter(\n\t\t\tQ(name__icontains=search_value) |\n\t\t\tQ(cname__icontains=search_value) |\n\t\t\tQ(http_status__icontains=search_value) |\n\t\t\tQ(page_title__icontains=search_value) |\n\t\t\tQ(http_url__icontains=search_value) |\n\t\t\tQ(technologies__name__icontains=search_value) |\n\t\t\tQ(webserver__icontains=search_value) |\n\t\t\tQ(ip_addresses__address__icontains=search_value) |\n\t\t\tQ(ip_addresses__ports__number__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = qs | self.queryset.filter(\n\t\t\t\tQ(directories__directory_files__name__icontains=search_value)\n\t\t\t)\n\t\treturn qs\n\tdef special_lookup(self, search_value):\n\t\tqs = self.queryset.filter()\n\t\tif '=' in search_value:\n\t\t\tsearch_param = search_value.split(\"=\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter()\n\t\tif '=' in search_value:\n\t\t\tsearch_param = search_value.split(\"=\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.filter(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.filter(page_title__icontains=content)\n\t\t\telif 'http_url' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"=\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.filter(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.filter(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=content)\n\t\t\telif 'content_type' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttitle",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.filter(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.filter(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = self.queryset.filter(content_type__icontains=content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tcontent",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.filter(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.filter(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = self.queryset.filter(content_type__icontains=content)\n\t\t\telif 'cname' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.filter(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = self.queryset.filter(content_type__icontains=content)\n\t\t\telif 'cname' in title:\n\t\t\t\tqs = self.queryset.filter(cname__icontains=content)\n\t\t\telif 'webserver' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = self.queryset.filter(content_type__icontains=content)\n\t\t\telif 'cname' in title:\n\t\t\t\tqs = self.queryset.filter(cname__icontains=content)\n\t\t\telif 'webserver' in title:\n\t\t\t\tqs = self.queryset.filter(webserver__icontains=content)\n\t\t\telif 'ip_addresses' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = self.queryset.filter(content_type__icontains=content)\n\t\t\telif 'cname' in title:\n\t\t\t\tqs = self.queryset.filter(cname__icontains=content)\n\t\t\telif 'webserver' in title:\n\t\t\t\tqs = self.queryset.filter(webserver__icontains=content)\n\t\t\telif 'ip_addresses' in title:\n\t\t\t\tqs = self.queryset.filter(\n\t\t\t\t\tip_addresses__address__icontains=content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(content_type__icontains=content)\n\t\t\telif 'cname' in title:\n\t\t\t\tqs = self.queryset.filter(cname__icontains=content)\n\t\t\telif 'webserver' in title:\n\t\t\t\tqs = self.queryset.filter(webserver__icontains=content)\n\t\t\telif 'ip_addresses' in title:\n\t\t\t\tqs = self.queryset.filter(\n\t\t\t\t\tip_addresses__address__icontains=content)\n\t\t\telif 'is_important' in title:\n\t\t\t\tif 'true' in content.lower():",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(cname__icontains=content)\n\t\t\telif 'webserver' in title:\n\t\t\t\tqs = self.queryset.filter(webserver__icontains=content)\n\t\t\telif 'ip_addresses' in title:\n\t\t\t\tqs = self.queryset.filter(\n\t\t\t\t\tip_addresses__address__icontains=content)\n\t\t\telif 'is_important' in title:\n\t\t\t\tif 'true' in content.lower():\n\t\t\t\t\tqs = self.queryset.filter(is_important=True)\n\t\t\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(webserver__icontains=content)\n\t\t\telif 'ip_addresses' in title:\n\t\t\t\tqs = self.queryset.filter(\n\t\t\t\t\tip_addresses__address__icontains=content)\n\t\t\telif 'is_important' in title:\n\t\t\t\tif 'true' in content.lower():\n\t\t\t\t\tqs = self.queryset.filter(is_important=True)\n\t\t\t\telse:\n\t\t\t\t\tqs = self.queryset.filter(is_important=False)\n\t\t\telif 'port' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(\n\t\t\t\t\tip_addresses__address__icontains=content)\n\t\t\telif 'is_important' in title:\n\t\t\t\tif 'true' in content.lower():\n\t\t\t\t\tqs = self.queryset.filter(is_important=True)\n\t\t\t\telse:\n\t\t\t\t\tqs = self.queryset.filter(is_important=False)\n\t\t\telif 'port' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(is_important=True)\n\t\t\t\telse:\n\t\t\t\t\tqs = self.queryset.filter(is_important=False)\n\t\t\telif 'port' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(ip_addresses__ports__number__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(ip_addresses__ports__service_name__icontains=content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(is_important=False)\n\t\t\telif 'port' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(ip_addresses__ports__number__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(ip_addresses__ports__service_name__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(ip_addresses__ports__number__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(ip_addresses__ports__service_name__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(ip_addresses__ports__description__icontains=content)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(technologies__name__icontains=content)\n\t\t\t\t)\n\t\t\telif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_http_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '>' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_http_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '>' in search_value:\n\t\t\tsearch_param = search_value.split(\">\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '>' in search_value:\n\t\t\tsearch_param = search_value.split(\">\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\">\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttitle",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tcontent",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_val",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(http_status__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_val",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:\n\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(content_length__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:\n\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttitle",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tcontent",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_val",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '!' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_val",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_val = int(content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '!' in search_value:\n\t\t\tsearch_param = search_value.split(\"!\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.exclude(name__icontains=content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(content_length__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '!' in search_value:\n\t\t\tsearch_param = search_value.split(\"!\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.exclude(name__icontains=content)\n\t\t\telif 'page_title' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"!\")\n\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.exclude(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.exclude(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.exclude(http_url__icontains=content)\n\t\t\telif 'content_type' in title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\ttitle",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\ttitle = search_param[0].lower().strip()\n\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.exclude(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.exclude(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.exclude(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tcontent",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tcontent = search_param[1].lower().strip()\n\t\t\tif 'name' in title:\n\t\t\t\tqs = self.queryset.exclude(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.exclude(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.exclude(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.exclude(name__icontains=content)\n\t\t\telif 'page_title' in title:\n\t\t\t\tqs = self.queryset.exclude(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.exclude(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(content_type__icontains=content)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.exclude(page_title__icontains=content)\n\t\t\telif 'http_url' in title:\n\t\t\t\tqs = self.queryset.exclude(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(content_type__icontains=content)\n\t\t\t\t)\n\t\t\telif 'cname' in title:\n\t\t\t\tqs = self.queryset.exclude(cname__icontains=content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.exclude(http_url__icontains=content)\n\t\t\telif 'content_type' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(content_type__icontains=content)\n\t\t\t\t)\n\t\t\telif 'cname' in title:\n\t\t\t\tqs = self.queryset.exclude(cname__icontains=content)\n\t\t\telif 'webserver' in title:\n\t\t\t\tqs = self.queryset.exclude(webserver__icontains=content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(content_type__icontains=content)\n\t\t\t\t)\n\t\t\telif 'cname' in title:\n\t\t\t\tqs = self.queryset.exclude(cname__icontains=content)\n\t\t\telif 'webserver' in title:\n\t\t\t\tqs = self.queryset.exclude(webserver__icontains=content)\n\t\t\telif 'ip_addresses' in title:\n\t\t\t\tqs = self.queryset.exclude(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.exclude(cname__icontains=content)\n\t\t\telif 'webserver' in title:\n\t\t\t\tqs = self.queryset.exclude(webserver__icontains=content)\n\t\t\telif 'ip_addresses' in title:\n\t\t\t\tqs = self.queryset.exclude(\n\t\t\t\t\tip_addresses__address__icontains=content)\n\t\t\telif 'port' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(ip_addresses__ports__number__icontains=content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.exclude(webserver__icontains=content)\n\t\t\telif 'ip_addresses' in title:\n\t\t\t\tqs = self.queryset.exclude(\n\t\t\t\t\tip_addresses__address__icontains=content)\n\t\t\telif 'port' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(ip_addresses__ports__number__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.exclude(\n\t\t\t\t\tip_addresses__address__icontains=content)\n\t\t\telif 'port' in title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(ip_addresses__ports__number__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(ip_addresses__ports__service_name__icontains=content)\n\t\t\t\t\t|",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(ip_addresses__ports__number__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(ip_addresses__ports__service_name__icontains=content)\n\t\t\t\t\t|\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(ip_addresses__ports__description__icontains=content)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(technologies__name__icontains=content)\n\t\t\t\t)\n\t\t\telif 'http_status' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.exclude(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_http_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.exclude(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.exclude(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.exclude(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.exclude(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_http_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_http_status = int(content)\n\t\t\t\t\tqs = self.queryset.exclude(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs\nclass ListActivityLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.exclude(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs\nclass ListActivityLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tactivity_id = req.query_params.get('activity_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tactivity_id = req.query_params.get('activity_id')\n\t\tself.queryset = Command.objects.filter(activity__id=activity_id)\n\t\treturn self.queryset\nclass ListScanLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tactivity_id = req.query_params.get('activity_id')\n\t\tself.queryset = Command.objects.filter(activity__id=activity_id)\n\t\treturn self.queryset\nclass ListScanLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tactivity_id = req.query_params.get('activity_id')\n\t\tself.queryset = Command.objects.filter(activity__id=activity_id)\n\t\treturn self.queryset\nclass ListScanLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tactivity_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tactivity_id = req.query_params.get('activity_id')\n\t\tself.queryset = Command.objects.filter(activity__id=activity_id)\n\t\treturn self.queryset\nclass ListScanLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tself.queryset = Command.objects.filter(scan_history__id=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tself.queryset = Command.objects.filter(activity__id=activity_id)\n\t\treturn self.queryset\nclass ListScanLogsViewSet(viewsets.ModelViewSet):\n\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tself.queryset = Command.objects.filter(scan_history__id=scan_id)\n\t\treturn self.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = CommandSerializer\n\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tself.queryset = Command.objects.filter(scan_history__id=scan_id)\n\t\treturn self.queryset\nclass ListEndpoints(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Command.objects.none()\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tself.queryset = Command.objects.filter(scan_history__id=scan_id)\n\t\treturn self.queryset\nclass ListEndpoints(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\tself.queryset = Command.objects.filter(scan_history__id=scan_id)\n\t\treturn self.queryset\nclass ListEndpoints(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tsubdomain_name = req.query_params.get('subdomain_name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\tself.queryset = Command.objects.filter(scan_history__id=scan_id)\n\t\treturn self.queryset\nclass ListEndpoints(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tsubdomain_name = req.query_params.get('subdomain_name')\n\t\tpattern = req.query_params.get('pattern')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tself.queryset = Command.objects.filter(scan_history__id=scan_id)\n\t\treturn self.queryset\nclass ListEndpoints(APIView):\n\tdef get(self, request, format=None):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tsubdomain_name = req.query_params.get('subdomain_name')\n\t\tpattern = req.query_params.get('pattern')\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tsubdomain_name = req.query_params.get('subdomain_name')\n\t\tpattern = req.query_params.get('pattern')\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_id')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tsubdomain_name = req.query_params.get('subdomain_name')\n\t\tpattern = req.query_params.get('pattern')\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t)\n\t\telif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\tsubdomain_name = req.query_params.get('subdomain_name')\n\t\tpattern = req.query_params.get('pattern')\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t)\n\t\telif target_id:\n\t\t\tendpoints = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_name = req.query_params.get('subdomain_name')\n\t\tpattern = req.query_params.get('pattern')\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t)\n\t\telif target_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tpattern",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tpattern = req.query_params.get('pattern')\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t)\n\t\telif target_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(target_domain__id=target_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t)\n\t\telif target_id:\n\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = (\n\t\t\t\tEndPoint.objects\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telse:\n\t\t\tendpoints = EndPoint.objects.all()\n\t\tif subdomain_name:\n\t\t\tendpoints = endpoints.filter(subdomain__name=subdomain_name)\n\t\tif pattern:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = EndPoint.objects.all()\n\t\tif subdomain_name:\n\t\t\tendpoints = endpoints.filter(subdomain__name=subdomain_name)\n\t\tif pattern:\n\t\t\tendpoints = endpoints.filter(matched_gf_patterns__icontains=pattern)\n\t\tif 'only_urls' in req.query_params:\n\t\t\tendpoints_serializer = EndpointOnlyURLsSerializer(endpoints, many=True)\n\t\telse:\n\t\t\tendpoints_serializer = EndpointSerializer(endpoints, many=True)\n\t\treturn Response({'endpoints': endpoints_serializer.data})",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = endpoints.filter(subdomain__name=subdomain_name)\n\t\tif pattern:\n\t\t\tendpoints = endpoints.filter(matched_gf_patterns__icontains=pattern)\n\t\tif 'only_urls' in req.query_params:\n\t\t\tendpoints_serializer = EndpointOnlyURLsSerializer(endpoints, many=True)\n\t\telse:\n\t\t\tendpoints_serializer = EndpointSerializer(endpoints, many=True)\n\t\treturn Response({'endpoints': endpoints_serializer.data})\nclass EndPointViewSet(viewsets.ModelViewSet):\n\tqueryset = EndPoint.objects.none()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = endpoints.filter(matched_gf_patterns__icontains=pattern)\n\t\tif 'only_urls' in req.query_params:\n\t\t\tendpoints_serializer = EndpointOnlyURLsSerializer(endpoints, many=True)\n\t\telse:\n\t\t\tendpoints_serializer = EndpointSerializer(endpoints, many=True)\n\t\treturn Response({'endpoints': endpoints_serializer.data})\nclass EndPointViewSet(viewsets.ModelViewSet):\n\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints_serializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints_serializer = EndpointOnlyURLsSerializer(endpoints, many=True)\n\t\telse:\n\t\t\tendpoints_serializer = EndpointSerializer(endpoints, many=True)\n\t\treturn Response({'endpoints': endpoints_serializer.data})\nclass EndPointViewSet(viewsets.ModelViewSet):\n\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints_serializer",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints_serializer = EndpointSerializer(endpoints, many=True)\n\t\treturn Response({'endpoints': endpoints_serializer.data})\nclass EndPointViewSet(viewsets.ModelViewSet):\n\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = EndPoint.objects.none()\n\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tproject = req.query_params.get('project')\n\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = EndpointSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tproject = req.query_params.get('project')\n\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n\t\tgf_tag = req.query_params.get(",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tproject = req.query_params.get('project')\n\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n\t\tgf_tag = req.query_params.get(\n\t\t\t'gf_tag') if 'gf_tag' in req.query_params else None\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tproject = req.query_params.get('project')\n\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n\t\tgf_tag = req.query_params.get(\n\t\t\t'gf_tag') if 'gf_tag' in req.query_params else None\n\t\tif scan_id:\n\t\t\tendpoints = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\turl_query = req.query_params.get('query_param')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tproject = req.query_params.get('project')\n\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n\t\tgf_tag = req.query_params.get(\n\t\t\t'gf_tag') if 'gf_tag' in req.query_params else None\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tendpoints_obj",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\turl_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\turl_query = req.query_params.get('query_param')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tproject = req.query_params.get('project')\n\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n\t\tgf_tag = req.query_params.get(\n\t\t\t'gf_tag') if 'gf_tag' in req.query_params else None\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tendpoints_obj\n\t\t\t\t.filter(scan_history__id=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tproject = req.query_params.get('project')\n\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n\t\tgf_tag = req.query_params.get(\n\t\t\t'gf_tag') if 'gf_tag' in req.query_params else None\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tendpoints_obj\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tproject",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tproject = req.query_params.get('project')\n\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n\t\tgf_tag = req.query_params.get(\n\t\t\t'gf_tag') if 'gf_tag' in req.query_params else None\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tendpoints_obj\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()\n\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tendpoints_obj",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tendpoints_obj = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n\t\tgf_tag = req.query_params.get(\n\t\t\t'gf_tag') if 'gf_tag' in req.query_params else None\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tendpoints_obj\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tgf_tag",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tgf_tag = req.query_params.get(\n\t\t\t'gf_tag') if 'gf_tag' in req.query_params else None\n\t\tif scan_id:\n\t\t\tendpoints = (\n\t\t\t\tendpoints_obj\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telse:\n\t\t\tendpoints = endpoints_obj.distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = (\n\t\t\t\tendpoints_obj\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telse:\n\t\t\tendpoints = endpoints_obj.distinct()\n\t\tif url_query:\n\t\t\tendpoints = (\n\t\t\t\tendpoints",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = endpoints_obj.distinct()\n\t\tif url_query:\n\t\t\tendpoints = (\n\t\t\t\tendpoints\n\t\t\t\t.filter(Q(target_domain__name=url_query))\n\t\t\t\t.distinct()\n\t\t\t)\n\t\tif gf_tag:\n\t\t\tendpoints = endpoints.filter(matched_gf_patterns__icontains=gf_tag)\n\t\tif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = (\n\t\t\t\tendpoints\n\t\t\t\t.filter(Q(target_domain__name=url_query))\n\t\t\t\t.distinct()\n\t\t\t)\n\t\tif gf_tag:\n\t\t\tendpoints = endpoints.filter(matched_gf_patterns__icontains=gf_tag)\n\t\tif target_id:\n\t\t\tendpoints = endpoints.filter(target_domain__id=target_id)\n\t\tif subdomain_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = endpoints.filter(matched_gf_patterns__icontains=gf_tag)\n\t\tif target_id:\n\t\t\tendpoints = endpoints.filter(target_domain__id=target_id)\n\t\tif subdomain_id:\n\t\t\tendpoints = endpoints.filter(subdomain__id=subdomain_id)\n\t\tif 'only_urls' in req.query_params:\n\t\t\tself.serializer_class = EndpointOnlyURLsSerializer\n\t\t# Filter status code 404 and 0\n\t\t# endpoints = (\n\t\t# \tendpoints",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = endpoints.filter(target_domain__id=target_id)\n\t\tif subdomain_id:\n\t\t\tendpoints = endpoints.filter(subdomain__id=subdomain_id)\n\t\tif 'only_urls' in req.query_params:\n\t\t\tself.serializer_class = EndpointOnlyURLsSerializer\n\t\t# Filter status code 404 and 0\n\t\t# endpoints = (\n\t\t# \tendpoints\n\t\t# \t.exclude(http_status=0)\n\t\t# \t.exclude(http_status=None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tendpoints = endpoints.filter(subdomain__id=subdomain_id)\n\t\tif 'only_urls' in req.query_params:\n\t\t\tself.serializer_class = EndpointOnlyURLsSerializer\n\t\t# Filter status code 404 and 0\n\t\t# endpoints = (\n\t\t# \tendpoints\n\t\t# \t.exclude(http_status=0)\n\t\t# \t.exclude(http_status=None)\n\t\t# \t.exclude(http_status=404)\n\t\t# )",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.serializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tself.serializer_class = EndpointOnlyURLsSerializer\n\t\t# Filter status code 404 and 0\n\t\t# endpoints = (\n\t\t# \tendpoints\n\t\t# \t.exclude(http_status=0)\n\t\t# \t.exclude(http_status=None)\n\t\t# \t.exclude(http_status=404)\n\t\t# )\n\t\tself.queryset = endpoints\n\t\treturn self.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tself.queryset = endpoints\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'content_length'\n\t\t\tif _order_col == '1':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'content_length'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '2':\n\t\t\t\torder_col = 'http_status'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsearch_value",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'content_length'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '2':\n\t\t\t\torder_col = 'http_status'\n\t\t\telif _order_col == '3':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'content_length'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '2':\n\t\t\t\torder_col = 'http_status'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'page_title'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_direction",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'content_length'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '2':\n\t\t\t\torder_col = 'http_status'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'page_title'\n\t\t\telif _order_col == '4':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'content_length'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '2':\n\t\t\t\torder_col = 'http_status'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'page_title'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'matched_gf_patterns'\n\t\t\telif _order_col == '5':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '2':\n\t\t\t\torder_col = 'http_status'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'page_title'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'matched_gf_patterns'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'content_type'\n\t\t\telif _order_col == '6':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'http_status'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'page_title'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'matched_gf_patterns'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'content_type'\n\t\t\telif _order_col == '6':\n\t\t\t\torder_col = 'content_length'\n\t\t\telif _order_col == '7':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'page_title'\n\t\t\telif _order_col == '4':\n\t\t\t\torder_col = 'matched_gf_patterns'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'content_type'\n\t\t\telif _order_col == '6':\n\t\t\t\torder_col = 'content_length'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'techs'\n\t\t\telif _order_col == '8':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'matched_gf_patterns'\n\t\t\telif _order_col == '5':\n\t\t\t\torder_col = 'content_type'\n\t\t\telif _order_col == '6':\n\t\t\t\torder_col = 'content_length'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'techs'\n\t\t\telif _order_col == '8':\n\t\t\t\torder_col = 'webserver'\n\t\t\telif _order_col == '9':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'content_type'\n\t\t\telif _order_col == '6':\n\t\t\t\torder_col = 'content_length'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'techs'\n\t\t\telif _order_col == '8':\n\t\t\t\torder_col = 'webserver'\n\t\t\telif _order_col == '9':\n\t\t\t\torder_col = 'response_time'\n\t\t\tif _order_direction == 'desc':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'content_length'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'techs'\n\t\t\telif _order_col == '8':\n\t\t\t\torder_col = 'webserver'\n\t\t\telif _order_col == '9':\n\t\t\t\torder_col = 'response_time'\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'techs'\n\t\t\telif _order_col == '8':\n\t\t\t\torder_col = 'webserver'\n\t\t\telif _order_col == '9':\n\t\t\t\torder_col = 'response_time'\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t\t# divide the search query into two half and lookup\n\t\t\tif '=' in search_value or '&' in search_value or '|' in search_value or '>' in search_value or '<' in search_value or '!' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'webserver'\n\t\t\telif _order_col == '9':\n\t\t\t\torder_col = 'response_time'\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t\t# divide the search query into two half and lookup\n\t\t\tif '=' in search_value or '&' in search_value or '|' in search_value or '>' in search_value or '<' in search_value or '!' in search_value:\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'response_time'\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t\t# divide the search query into two half and lookup\n\t\t\tif '=' in search_value or '&' in search_value or '|' in search_value or '>' in search_value or '<' in search_value or '!' in search_value:\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t\t# divide the search query into two half and lookup\n\t\t\tif '=' in search_value or '&' in search_value or '|' in search_value or '>' in search_value or '<' in search_value or '!' in search_value:\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tcomplex_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:\n\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:\n\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tcomplex_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs\n\tdef general_lookup(self, search_value):\n\t\treturn \\\n\t\t\tself.queryset.filter(Q(http_url__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs\n\tdef general_lookup(self, search_value):\n\t\treturn \\\n\t\t\tself.queryset.filter(Q(http_url__icontains=search_value) |\n\t\t\t\t\t\t\t\t Q(page_title__icontains=search_value) |\n\t\t\t\t\t\t\t\t Q(http_status__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs\n\tdef general_lookup(self, search_value):\n\t\treturn \\\n\t\t\tself.queryset.filter(Q(http_url__icontains=search_value) |\n\t\t\t\t\t\t\t\t Q(page_title__icontains=search_value) |\n\t\t\t\t\t\t\t\t Q(http_status__icontains=search_value) |\n\t\t\t\t\t\t\t\t Q(content_type__icontains=search_value) |\n\t\t\t\t\t\t\t\t Q(webserver__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter()\n\t\tif '=' in search_value:\n\t\t\tsearch_param = search_value.split(\"=\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=lookup_content)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"=\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=lookup_content)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(page_title__icontains=lookup_content)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=lookup_content)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(page_title__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'content_type' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = self.queryset.filter(http_url__icontains=lookup_content)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(page_title__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'content_type' in lookup_title:\n\t\t\t\tqs = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(http_url__icontains=lookup_content)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(page_title__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'content_type' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(content_type__icontains=lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(page_title__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'content_type' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(content_type__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'webserver' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(content_type__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'webserver' in lookup_title:\n\t\t\t\tqs = self.queryset.filter(webserver__icontains=lookup_content)\n\t\t\telif 'technology' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(techs__name__icontains=lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.queryset.filter(webserver__icontains=lookup_content)\n\t\t\telif 'technology' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(techs__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'gf_pattern' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(matched_gf_patterns__icontains=lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(techs__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'gf_pattern' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(matched_gf_patterns__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'http_status' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(matched_gf_patterns__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_http_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '>' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_http_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '>' in search_value:\n\t\t\tsearch_param = search_value.split(\">\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '>' in search_value:\n\t\t\tsearch_param = search_value.split(\">\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\">\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = (\n\t\t\t\t\t\tself.queryset\n\t\t\t\t\t\t.filter(http_status__gt=int_val)\n\t\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = (\n\t\t\t\t\t\tself.queryset\n\t\t\t\t\t\t.filter(http_status__gt=int_val)\n\t\t\t\t\t)\n\t\t\t\texcept Exception as e:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = (\n\t\t\t\t\t\tself.queryset\n\t\t\t\t\t\t.filter(http_status__gt=int_val)\n\t\t\t\t\t)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_val",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = (\n\t\t\t\t\t\tself.queryset\n\t\t\t\t\t\t.filter(http_status__gt=int_val)\n\t\t\t\t\t)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = (\n\t\t\t\t\t\tself.queryset\n\t\t\t\t\t\t.filter(http_status__gt=int_val)\n\t\t\t\t\t)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__gt=int_val)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_val",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:\n\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(content_length__gt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:\n\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_val",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(http_status__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '!' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_val",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_val = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(content_length__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '!' in search_value:\n\t\t\tsearch_param = search_value.split(\"!\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(content_length__lt=int_val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '!' in search_value:\n\t\t\tsearch_param = search_value.split(\"!\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"!\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(http_url__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(http_url__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'http_url' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(http_url__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(page_title__icontains=lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(http_url__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'page_title' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(page_title__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'content_type' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(page_title__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'content_type' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(content_type__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'webserver' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(content_type__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'webserver' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(webserver__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'technology' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(webserver__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'technology' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(techs__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'gf_pattern' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(techs__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'gf_pattern' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(matched_gf_patterns__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'http_status' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(matched_gf_patterns__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'http_status' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.exclude(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_http_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.exclude(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.exclude(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.exclude(http_status=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\t\telif 'content_length' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.exclude(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tint_http_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tint_http_status = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.exclude(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs\nclass DirectoryViewSet(viewsets.ModelViewSet):\n\tqueryset = DirectoryFile.objects.none()\n\tserializer_class = DirectoryFileSerializer\n\tdef get_queryset(self):\n\t\treq = self.request",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.exclude(content_length=int_http_status)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs\nclass DirectoryViewSet(viewsets.ModelViewSet):\n\tqueryset = DirectoryFile.objects.none()\n\tserializer_class = DirectoryFileSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = DirectoryFile.objects.none()\n\tserializer_class = DirectoryFileSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomains = None\n\t\tif not (scan_id or subdomain_id):\n\t\t\treturn Response({\n\t\t\t\t'status': False,",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = DirectoryFileSerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomains = None\n\t\tif not (scan_id or subdomain_id):\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'Scan id or subdomain id must be provided.'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomains = None\n\t\tif not (scan_id or subdomain_id):\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'Scan id or subdomain id must be provided.'\n\t\t\t})\n\t\telif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_history')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomains = None\n\t\tif not (scan_id or subdomain_id):\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'Scan id or subdomain id must be provided.'\n\t\t\t})\n\t\telif scan_id:\n\t\t\tsubdomains = Subdomain.objects.filter(scan_history__id=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomains = None\n\t\tif not (scan_id or subdomain_id):\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'Scan id or subdomain id must be provided.'\n\t\t\t})\n\t\telif scan_id:\n\t\t\tsubdomains = Subdomain.objects.filter(scan_history__id=scan_id)\n\t\telif subdomain_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomains = None\n\t\tif not (scan_id or subdomain_id):\n\t\t\treturn Response({\n\t\t\t\t'status': False,\n\t\t\t\t'message': 'Scan id or subdomain id must be provided.'\n\t\t\t})\n\t\telif scan_id:\n\t\t\tsubdomains = Subdomain.objects.filter(scan_history__id=scan_id)\n\t\telif subdomain_id:\n\t\t\tsubdomains = Subdomain.objects.filter(id=subdomain_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomains = Subdomain.objects.filter(scan_history__id=scan_id)\n\t\telif subdomain_id:\n\t\t\tsubdomains = Subdomain.objects.filter(id=subdomain_id)\n\t\tdirs_scans = DirectoryScan.objects.filter(directories__in=subdomains)\n\t\tqs = (\n\t\t\tDirectoryFile.objects\n\t\t\t.filter(directory_files__in=dirs_scans)\n\t\t\t.distinct()\n\t\t)\n\t\tself.queryset = qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomains = Subdomain.objects.filter(id=subdomain_id)\n\t\tdirs_scans = DirectoryScan.objects.filter(directories__in=subdomains)\n\t\tqs = (\n\t\t\tDirectoryFile.objects\n\t\t\t.filter(directory_files__in=dirs_scans)\n\t\t\t.distinct()\n\t\t)\n\t\tself.queryset = qs\n\t\treturn self.queryset\nclass VulnerabilityViewSet(viewsets.ModelViewSet):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdirs_scans",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdirs_scans = DirectoryScan.objects.filter(directories__in=subdomains)\n\t\tqs = (\n\t\t\tDirectoryFile.objects\n\t\t\t.filter(directory_files__in=dirs_scans)\n\t\t\t.distinct()\n\t\t)\n\t\tself.queryset = qs\n\t\treturn self.queryset\nclass VulnerabilityViewSet(viewsets.ModelViewSet):\n\tqueryset = Vulnerability.objects.none()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = (\n\t\t\tDirectoryFile.objects\n\t\t\t.filter(directory_files__in=dirs_scans)\n\t\t\t.distinct()\n\t\t)\n\t\tself.queryset = qs\n\t\treturn self.queryset\nclass VulnerabilityViewSet(viewsets.ModelViewSet):\n\tqueryset = Vulnerability.objects.none()\n\tserializer_class = VulnerabilitySerializer",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tself.queryset = qs\n\t\treturn self.queryset\nclass VulnerabilityViewSet(viewsets.ModelViewSet):\n\tqueryset = Vulnerability.objects.none()\n\tserializer_class = VulnerabilitySerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tdomain = req.query_params.get('domain')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tqueryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tqueryset = Vulnerability.objects.none()\n\tserializer_class = VulnerabilitySerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tdomain = req.query_params.get('domain')\n\t\tseverity = req.query_params.get('severity')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomain_name = req.query_params.get('subdomain')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer_class",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\tserializer_class = VulnerabilitySerializer\n\tdef get_queryset(self):\n\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tdomain = req.query_params.get('domain')\n\t\tseverity = req.query_params.get('severity')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomain_name = req.query_params.get('subdomain')\n\t\tvulnerability_name = req.query_params.get('vulnerability_name')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\treq",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\treq = self.request\n\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tdomain = req.query_params.get('domain')\n\t\tseverity = req.query_params.get('severity')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomain_name = req.query_params.get('subdomain')\n\t\tvulnerability_name = req.query_params.get('vulnerability_name')\n\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tscan_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tscan_id = req.query_params.get('scan_history')\n\t\ttarget_id = req.query_params.get('target_id')\n\t\tdomain = req.query_params.get('domain')\n\t\tseverity = req.query_params.get('severity')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomain_name = req.query_params.get('subdomain')\n\t\tvulnerability_name = req.query_params.get('vulnerability_name')\n\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:\n\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\ttarget_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\ttarget_id = req.query_params.get('target_id')\n\t\tdomain = req.query_params.get('domain')\n\t\tseverity = req.query_params.get('severity')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomain_name = req.query_params.get('subdomain')\n\t\tvulnerability_name = req.query_params.get('vulnerability_name')\n\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:\n\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)\n\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tdomain = req.query_params.get('domain')\n\t\tseverity = req.query_params.get('severity')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomain_name = req.query_params.get('subdomain')\n\t\tvulnerability_name = req.query_params.get('vulnerability_name')\n\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:\n\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)\n\t\telse:\n\t\t\tvulnerabilities = Vulnerability.objects.all()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tseverity",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tseverity = req.query_params.get('severity')\n\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomain_name = req.query_params.get('subdomain')\n\t\tvulnerability_name = req.query_params.get('vulnerability_name')\n\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:\n\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)\n\t\telse:\n\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\tif scan_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_id",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_id = req.query_params.get('subdomain_id')\n\t\tsubdomain_name = req.query_params.get('subdomain')\n\t\tvulnerability_name = req.query_params.get('vulnerability_name')\n\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:\n\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)\n\t\telse:\n\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\tif scan_id:\n\t\t\tqs = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsubdomain_name = req.query_params.get('subdomain')\n\t\tvulnerability_name = req.query_params.get('vulnerability_name')\n\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:\n\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)\n\t\telse:\n\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\tif scan_id:\n\t\t\tqs = (\n\t\t\t\tvulnerabilities",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability_name",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tvulnerability_name = req.query_params.get('vulnerability_name')\n\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:\n\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)\n\t\telse:\n\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\tif scan_id:\n\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(scan_history__id=scan_id)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tslug",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tslug = self.request.GET.get('project', None)\n\t\tif slug:\n\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)\n\t\telse:\n\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\tif scan_id:\n\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tvulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tvulnerabilities = Vulnerability.objects.filter(scan_history__domain__project__slug=slug)\n\t\telse:\n\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\tif scan_id:\n\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telif target_id:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tvulnerabilities",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tvulnerabilities = Vulnerability.objects.all()\n\t\tif scan_id:\n\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telif target_id:\n\t\t\tqs = (\n\t\t\t\tvulnerabilities",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(scan_history__id=scan_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telif target_id:\n\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(target_domain__id=target_id)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telif subdomain_name:\n\t\t\tsubdomains = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(subdomain__in=subdomains)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsubdomains = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(subdomain__in=subdomains)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telse:\n\t\t\tqs = vulnerabilities.distinct()\n\t\tif domain:\n\t\t\tqs = qs.filter(Q(target_domain__name=domain)).distinct()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = (\n\t\t\t\tvulnerabilities\n\t\t\t\t.filter(subdomain__in=subdomains)\n\t\t\t\t.distinct()\n\t\t\t)\n\t\telse:\n\t\t\tqs = vulnerabilities.distinct()\n\t\tif domain:\n\t\t\tqs = qs.filter(Q(target_domain__name=domain)).distinct()\n\t\tif vulnerability_name:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = vulnerabilities.distinct()\n\t\tif domain:\n\t\t\tqs = qs.filter(Q(target_domain__name=domain)).distinct()\n\t\tif vulnerability_name:\n\t\t\tqs = qs.filter(Q(name=vulnerability_name)).distinct()\n\t\tif severity:\n\t\t\tqs = qs.filter(severity=severity)\n\t\tif subdomain_id:\n\t\t\tqs = qs.filter(subdomain__id=subdomain_id)\n\t\tself.queryset = qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = qs.filter(Q(target_domain__name=domain)).distinct()\n\t\tif vulnerability_name:\n\t\t\tqs = qs.filter(Q(name=vulnerability_name)).distinct()\n\t\tif severity:\n\t\t\tqs = qs.filter(severity=severity)\n\t\tif subdomain_id:\n\t\t\tqs = qs.filter(subdomain__id=subdomain_id)\n\t\tself.queryset = qs\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = qs.filter(Q(name=vulnerability_name)).distinct()\n\t\tif severity:\n\t\t\tqs = qs.filter(severity=severity)\n\t\tif subdomain_id:\n\t\t\tqs = qs.filter(subdomain__id=subdomain_id)\n\t\tself.queryset = qs\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = qs.filter(severity=severity)\n\t\tif subdomain_id:\n\t\t\tqs = qs.filter(subdomain__id=subdomain_id)\n\t\tself.queryset = qs\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tqs = qs.filter(subdomain__id=subdomain_id)\n\t\tself.queryset = qs\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'severity'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tself.queryset",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tself.queryset = qs\n\t\treturn self.queryset\n\tdef filter_queryset(self, qs):\n\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'severity'\n\t\t\tif _order_col == '1':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter()\n\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'severity'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'source'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'name'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tsearch_value",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tsearch_value = self.request.GET.get(u'search[value]', None)\n\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'severity'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'source'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '7':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_col = self.request.GET.get(u'order[0][column]', None)\n\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'severity'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'source'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'severity'",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t_order_direction",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t_order_direction = self.request.GET.get(u'order[0][dir]', None)\n\t\tif search_value or _order_col or _order_direction:\n\t\t\torder_col = 'severity'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'source'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'severity'\n\t\t\telif _order_col == '11':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\torder_col = 'severity'\n\t\t\tif _order_col == '1':\n\t\t\t\torder_col = 'source'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'severity'\n\t\t\telif _order_col == '11':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '15':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'source'\n\t\t\telif _order_col == '3':\n\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'severity'\n\t\t\telif _order_col == '11':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '15':\n\t\t\t\torder_col = 'open_status'\n\t\t\tif _order_direction == 'desc':",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'name'\n\t\t\telif _order_col == '7':\n\t\t\t\torder_col = 'severity'\n\t\t\telif _order_col == '11':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '15':\n\t\t\t\torder_col = 'open_status'\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'severity'\n\t\t\telif _order_col == '11':\n\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '15':\n\t\t\t\torder_col = 'open_status'\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t\t# divide the search query into two half and lookup\n\t\t\toperators = ['=', '&', '|', '>', '<', '!']",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'http_url'\n\t\t\telif _order_col == '15':\n\t\t\t\torder_col = 'open_status'\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t\t# divide the search query into two half and lookup\n\t\t\toperators = ['=', '&', '|', '>', '<', '!']\n\t\t\tif any(x in search_value for x in operators):\n\t\t\t\tif '&' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = 'open_status'\n\t\t\tif _order_direction == 'desc':\n\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t\t# divide the search query into two half and lookup\n\t\t\toperators = ['=', '&', '|', '>', '<', '!']\n\t\t\tif any(x in search_value for x in operators):\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torder_col",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\torder_col = f'-{order_col}'\n\t\t\t# if the search query is separated by = means, it is a specific lookup\n\t\t\t# divide the search query into two half and lookup\n\t\t\toperators = ['=', '&', '|', '>', '<', '!']\n\t\t\tif any(x in search_value for x in operators):\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\toperators",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\toperators = ['=', '&', '|', '>', '<', '!']\n\t\t\tif any(x in search_value for x in operators):\n\t\t\t\tif '&' in search_value:\n\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:\n\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tcomplex_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tcomplex_query = search_value.split('&')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:\n\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\t\t\tqs = qs & self.special_lookup(query.strip())\n\t\t\t\telif '|' in search_value:\n\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = Subdomain.objects.none()\n\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tcomplex_query",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tcomplex_query = search_value.split('|')\n\t\t\t\t\tfor query in complex_query:\n\t\t\t\t\t\tif query.strip():\n\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs.order_by('-severity')",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\t\t\tqs = self.special_lookup(query.strip()) | qs\n\t\t\t\telse:\n\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs.order_by('-severity')\n\tdef general_lookup(self, search_value):\n\t\tqs = (\n\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.special_lookup(search_value)\n\t\t\telse:\n\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs.order_by('-severity')\n\tdef general_lookup(self, search_value):\n\t\tqs = (\n\t\t\tself.queryset\n\t\t\t.filter(Q(http_url__icontains=search_value) |\n\t\t\t\t\tQ(target_domain__name__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = self.general_lookup(search_value)\n\t\t\treturn qs.order_by(order_col)\n\t\treturn qs.order_by('-severity')\n\tdef general_lookup(self, search_value):\n\t\tqs = (\n\t\t\tself.queryset\n\t\t\t.filter(Q(http_url__icontains=search_value) |\n\t\t\t\t\tQ(target_domain__name__icontains=search_value) |\n\t\t\t\t\tQ(template__icontains=search_value) |\n\t\t\t\t\tQ(template_id__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = (\n\t\t\tself.queryset\n\t\t\t.filter(Q(http_url__icontains=search_value) |\n\t\t\t\t\tQ(target_domain__name__icontains=search_value) |\n\t\t\t\t\tQ(template__icontains=search_value) |\n\t\t\t\t\tQ(template_id__icontains=search_value) |\n\t\t\t\t\tQ(name__icontains=search_value) |\n\t\t\t\t\tQ(severity__icontains=search_value) |\n\t\t\t\t\tQ(description__icontains=search_value) |\n\t\t\t\t\tQ(extracted_results__icontains=search_value) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\tqs = self.queryset.filter()\n\t\tif '=' in search_value:\n\t\t\tsearch_param = search_value.split(\"=\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'severity' in lookup_title:\n\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_content, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(severity=severity_value)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"=\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'severity' in lookup_title:\n\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_content, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'severity' in lookup_title:\n\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_content, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:\n\t\t\t\tqs = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'severity' in lookup_title:\n\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_content, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tseverity_value",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_content, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(name__icontains=lookup_content)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'http_url' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'http_url' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(http_url__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'template' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(http_url__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'template' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(template__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'template_id' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(template__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'template_id' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(template_id__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cve_id' in lookup_title or 'cve' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(template_id__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cve_id' in lookup_title or 'cve' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(cve_ids__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cwe_id' in lookup_title or 'cwe' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(cve_ids__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cwe_id' in lookup_title or 'cwe' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(cwe_ids__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cvss_metrics' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(cwe_ids__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cvss_metrics' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(cvss_metrics__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cvss_score' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(cvss_metrics__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cvss_score' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(cvss_score__exact=lookup_content)\n\t\t\t\t)\n\t\t\telif 'type' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(cvss_score__exact=lookup_content)\n\t\t\t\t)\n\t\t\telif 'type' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(type__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'tag' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(type__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'tag' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(tags__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'status' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(tags__name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'status' in lookup_title:\n\t\t\t\topen_status = lookup_content == 'open'\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(open_status=open_status)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\topen_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\topen_status = lookup_content == 'open'\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(open_status=open_status)\n\t\t\t\t)\n\t\t\telif 'description' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(Q(description__icontains=lookup_content) |\n\t\t\t\t\t\t\tQ(template__icontains=lookup_content) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(open_status=open_status)\n\t\t\t\t)\n\t\t\telif 'description' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(Q(description__icontains=lookup_content) |\n\t\t\t\t\t\t\tQ(template__icontains=lookup_content) |\n\t\t\t\t\t\t\tQ(extracted_results__icontains=lookup_content))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.filter(Q(description__icontains=lookup_content) |\n\t\t\t\t\t\t\tQ(template__icontains=lookup_content) |\n\t\t\t\t\t\t\tQ(extracted_results__icontains=lookup_content))\n\t\t\t\t)\n\t\telif '!' in search_value:\n\t\t\tsearch_param = search_value.split(\"!\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"!\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'severity' in lookup_title:\n\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_title, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'severity' in lookup_title:\n\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_title, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:\n\t\t\t\tqs = (",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'severity' in lookup_title:\n\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_title, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tseverity_value",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tseverity_value = NUCLEI_SEVERITY_MAP.get(lookup_title, -1)\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(name__icontains=lookup_content)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(severity=severity_value)\n\t\t\t\t)\n\t\t\telif 'name' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'http_url' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(name__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'http_url' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(http_url__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'template' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(http_url__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'template' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(template__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'template_id' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(template__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'template_id' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(template_id__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cve_id' in lookup_title or 'cve' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(template_id__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cve_id' in lookup_title or 'cve' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(cve_ids__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cwe_id' in lookup_title or 'cwe' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(cve_ids__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cwe_id' in lookup_title or 'cwe' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(cwe_ids__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cvss_metrics' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(cwe_ids__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cvss_metrics' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(cvss_metrics__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cvss_score' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(cvss_metrics__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'cvss_score' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(cvss_score__exact=lookup_content)\n\t\t\t\t)\n\t\t\telif 'type' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(cvss_score__exact=lookup_content)\n\t\t\t\t)\n\t\t\telif 'type' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(type__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'tag' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(type__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'tag' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(tags__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'status' in lookup_title:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(tags__icontains=lookup_content)\n\t\t\t\t)\n\t\t\telif 'status' in lookup_title:\n\t\t\t\topen_status = lookup_content == 'open'\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(open_status=open_status)\n\t\t\t\t)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\topen_status",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\topen_status = lookup_content == 'open'\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(open_status=open_status)\n\t\t\t\t)\n\t\t\telif 'description' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(Q(description__icontains=lookup_content) |\n\t\t\t\t\t\t\t Q(template__icontains=lookup_content) |",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(open_status=open_status)\n\t\t\t\t)\n\t\t\telif 'description' in lookup_title:\n\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(Q(description__icontains=lookup_content) |\n\t\t\t\t\t\t\t Q(template__icontains=lookup_content) |\n\t\t\t\t\t\t\t Q(extracted_results__icontains=lookup_content))",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\tqs = (\n\t\t\t\t\tself.queryset\n\t\t\t\t\t.exclude(Q(description__icontains=lookup_content) |\n\t\t\t\t\t\t\t Q(template__icontains=lookup_content) |\n\t\t\t\t\t\t\t Q(extracted_results__icontains=lookup_content))\n\t\t\t\t)\n\t\telif '>' in search_value:\n\t\t\tsearch_param = search_value.split(\">\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\">\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'cvss_score' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tval = float(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(cvss_score__gt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'cvss_score' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tval = float(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(cvss_score__gt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:\n\t\t\tsearch_param = search_value.split(\"<\")",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'cvss_score' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tval = float(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(cvss_score__gt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:\n\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\tlookup_title = search_param[0].lower().strip()",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tval",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tval = float(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(cvss_score__gt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:\n\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'cvss_score' in lookup_title:\n\t\t\t\ttry:",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(cvss_score__gt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\telif '<' in search_value:\n\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'cvss_score' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tval = int(lookup_content)",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tsearch_param",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tsearch_param = search_value.split(\"<\")\n\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'cvss_score' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tval = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(cvss_score__lt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_title",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_title = search_param[0].lower().strip()\n\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'cvss_score' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tval = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(cvss_score__lt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_content",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\tlookup_content = search_param[1].lower().strip()\n\t\t\tif 'cvss_score' in lookup_title:\n\t\t\t\ttry:\n\t\t\t\t\tval = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(cvss_score__lt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tval",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tval = int(lookup_content)\n\t\t\t\t\tqs = self.queryset.filter(cvss_score__lt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tqs",
        "kind": 5,
        "importPath": "web.api.views",
        "description": "web.api.views",
        "peekOfCode": "\t\t\t\t\tqs = self.queryset.filter(cvss_score__lt=val)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tprint(e)\n\t\treturn qs",
        "detail": "web.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "web.dashboard.migrations.0001_initial",
        "description": "web.dashboard.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='NetlasAPIKey',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('key', models.CharField(max_length=500)),",
        "detail": "web.dashboard.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "web.dashboard.migrations.0002_chaosapikey_hackeroneapikey_inappnotification_userpreferences",
        "description": "web.dashboard.migrations.0002_chaosapikey_hackeroneapikey_inappnotification_userpreferences",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('dashboard', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ChaosAPIKey',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),",
        "detail": "web.dashboard.migrations.0002_chaosapikey_hackeroneapikey_inappnotification_userpreferences",
        "documentation": {}
    },
    {
        "label": "DashboardConfig",
        "kind": 6,
        "importPath": "web.dashboard.apps",
        "description": "web.dashboard.apps",
        "peekOfCode": "class DashboardConfig(AppConfig):\n    name = 'dashboard'",
        "detail": "web.dashboard.apps",
        "documentation": {}
    },
    {
        "label": "SearchHistory",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class SearchHistory(models.Model):\n\tquery = models.CharField(max_length=1000)\n\tdef __str__(self):\n\t\treturn self.query\nclass Project(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tslug = models.SlugField(unique=True)\n\tinsert_date = models.DateTimeField()\n\tdef __str__(self):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class Project(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tslug = models.SlugField(unique=True)\n\tinsert_date = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn self.slug\nclass OpenAiAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "OpenAiAPIKey",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class OpenAiAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass OllamaSettings(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tselected_model = models.CharField(max_length=500)\n\tuse_ollama = models.BooleanField(default=True)\n\tdef __str__(self):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "OllamaSettings",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class OllamaSettings(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tselected_model = models.CharField(max_length=500)\n\tuse_ollama = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn self.selected_model\nclass NetlasAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "NetlasAPIKey",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class NetlasAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass ChaosAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "ChaosAPIKey",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class ChaosAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass HackerOneAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tusername = models.CharField(max_length=500)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "HackerOneAPIKey",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class HackerOneAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tusername = models.CharField(max_length=500)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.username\nclass InAppNotification(models.Model):\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=True)\n\tnotification_type = models.CharField(max_length=10, choices=NOTIFICATION_TYPES, default='system')\n\tstatus = models.CharField(max_length=10, choices=NOTIFICATION_STATUS_TYPES, default='info')",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "InAppNotification",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class InAppNotification(models.Model):\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=True)\n\tnotification_type = models.CharField(max_length=10, choices=NOTIFICATION_TYPES, default='system')\n\tstatus = models.CharField(max_length=10, choices=NOTIFICATION_STATUS_TYPES, default='info')\n\ttitle = models.CharField(max_length=255)\n\tdescription = models.TextField()\n\ticon = models.CharField(max_length=50) # mdi icon class name\n\tis_read = models.BooleanField(default=False)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "UserPreferences",
        "kind": 6,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "class UserPreferences(models.Model):\n\tuser = models.OneToOneField(User, on_delete=models.CASCADE)\n\tbug_bounty_mode = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn f\"{self.user.username}'s preferences\"",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tquery",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tquery = models.CharField(max_length=1000)\n\tdef __str__(self):\n\t\treturn self.query\nclass Project(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tslug = models.SlugField(unique=True)\n\tinsert_date = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn self.slug",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tslug = models.SlugField(unique=True)\n\tinsert_date = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn self.slug\nclass OpenAiAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tname = models.CharField(max_length=500)\n\tslug = models.SlugField(unique=True)\n\tinsert_date = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn self.slug\nclass OpenAiAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tslug",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tslug = models.SlugField(unique=True)\n\tinsert_date = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn self.slug\nclass OpenAiAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass OllamaSettings(models.Model):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tinsert_date",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tinsert_date = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn self.slug\nclass OpenAiAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass OllamaSettings(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass OllamaSettings(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tselected_model = models.CharField(max_length=500)\n\tuse_ollama = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn self.selected_model",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tkey",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass OllamaSettings(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tselected_model = models.CharField(max_length=500)\n\tuse_ollama = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn self.selected_model\nclass NetlasAPIKey(models.Model):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tselected_model = models.CharField(max_length=500)\n\tuse_ollama = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn self.selected_model\nclass NetlasAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tselected_model",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tselected_model = models.CharField(max_length=500)\n\tuse_ollama = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn self.selected_model\nclass NetlasAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass ChaosAPIKey(models.Model):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tuse_ollama",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tuse_ollama = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn self.selected_model\nclass NetlasAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass ChaosAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass ChaosAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass HackerOneAPIKey(models.Model):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tkey",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass ChaosAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass HackerOneAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass HackerOneAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tusername = models.CharField(max_length=500)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.username",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tkey",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.key\nclass HackerOneAPIKey(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tusername = models.CharField(max_length=500)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.username\nclass InAppNotification(models.Model):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tusername = models.CharField(max_length=500)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.username\nclass InAppNotification(models.Model):\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=True)\n\tnotification_type = models.CharField(max_length=10, choices=NOTIFICATION_TYPES, default='system')\n\tstatus = models.CharField(max_length=10, choices=NOTIFICATION_STATUS_TYPES, default='info')\n\ttitle = models.CharField(max_length=255)",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tusername",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tusername = models.CharField(max_length=500)\n\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.username\nclass InAppNotification(models.Model):\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=True)\n\tnotification_type = models.CharField(max_length=10, choices=NOTIFICATION_TYPES, default='system')\n\tstatus = models.CharField(max_length=10, choices=NOTIFICATION_STATUS_TYPES, default='info')\n\ttitle = models.CharField(max_length=255)\n\tdescription = models.TextField()",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tkey",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tkey = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.username\nclass InAppNotification(models.Model):\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=True)\n\tnotification_type = models.CharField(max_length=10, choices=NOTIFICATION_TYPES, default='system')\n\tstatus = models.CharField(max_length=10, choices=NOTIFICATION_STATUS_TYPES, default='info')\n\ttitle = models.CharField(max_length=255)\n\tdescription = models.TextField()\n\ticon = models.CharField(max_length=50) # mdi icon class name",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tproject",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=True)\n\tnotification_type = models.CharField(max_length=10, choices=NOTIFICATION_TYPES, default='system')\n\tstatus = models.CharField(max_length=10, choices=NOTIFICATION_STATUS_TYPES, default='info')\n\ttitle = models.CharField(max_length=255)\n\tdescription = models.TextField()\n\ticon = models.CharField(max_length=50) # mdi icon class name\n\tis_read = models.BooleanField(default=False)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tnotification_type",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tnotification_type = models.CharField(max_length=10, choices=NOTIFICATION_TYPES, default='system')\n\tstatus = models.CharField(max_length=10, choices=NOTIFICATION_STATUS_TYPES, default='info')\n\ttitle = models.CharField(max_length=255)\n\tdescription = models.TextField()\n\ticon = models.CharField(max_length=50) # mdi icon class name\n\tis_read = models.BooleanField(default=False)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=10, choices=NOTIFICATION_STATUS_TYPES, default='info')\n\ttitle = models.CharField(max_length=255)\n\tdescription = models.TextField()\n\ticon = models.CharField(max_length=50) # mdi icon class name\n\tis_read = models.BooleanField(default=False)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:\n\t\tordering = ['-created_at']",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\ttitle = models.CharField(max_length=255)\n\tdescription = models.TextField()\n\ticon = models.CharField(max_length=50) # mdi icon class name\n\tis_read = models.BooleanField(default=False)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:\n\t\tordering = ['-created_at']\n\tdef __str__(self):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tdescription = models.TextField()\n\ticon = models.CharField(max_length=50) # mdi icon class name\n\tis_read = models.BooleanField(default=False)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:\n\t\tordering = ['-created_at']\n\tdef __str__(self):\n\t\tif self.notification_type == 'system':",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\ticon",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\ticon = models.CharField(max_length=50) # mdi icon class name\n\tis_read = models.BooleanField(default=False)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:\n\t\tordering = ['-created_at']\n\tdef __str__(self):\n\t\tif self.notification_type == 'system':\n\t\t\treturn f\"System wide notif: {self.title}\"",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tis_read",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tis_read = models.BooleanField(default=False)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:\n\t\tordering = ['-created_at']\n\tdef __str__(self):\n\t\tif self.notification_type == 'system':\n\t\t\treturn f\"System wide notif: {self.title}\"\n\t\telse:",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tcreated_at",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:\n\t\tordering = ['-created_at']\n\tdef __str__(self):\n\t\tif self.notification_type == 'system':\n\t\t\treturn f\"System wide notif: {self.title}\"\n\t\telse:\n\t\t\treturn f\"Project wide notif: {self.project.name}: {self.title}\"",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tredirect_link",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tredirect_link = models.URLField(max_length=255, blank=True, null=True)\n\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:\n\t\tordering = ['-created_at']\n\tdef __str__(self):\n\t\tif self.notification_type == 'system':\n\t\t\treturn f\"System wide notif: {self.title}\"\n\t\telse:\n\t\t\treturn f\"Project wide notif: {self.project.name}: {self.title}\"\n\t@property",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\topen_in_new_tab",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\topen_in_new_tab = models.BooleanField(default=False)\n\tclass Meta:\n\t\tordering = ['-created_at']\n\tdef __str__(self):\n\t\tif self.notification_type == 'system':\n\t\t\treturn f\"System wide notif: {self.title}\"\n\t\telse:\n\t\t\treturn f\"Project wide notif: {self.project.name}: {self.title}\"\n\t@property\n\tdef is_system_wide(self):",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\t\tordering",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\t\tordering = ['-created_at']\n\tdef __str__(self):\n\t\tif self.notification_type == 'system':\n\t\t\treturn f\"System wide notif: {self.title}\"\n\t\telse:\n\t\t\treturn f\"Project wide notif: {self.project.name}: {self.title}\"\n\t@property\n\tdef is_system_wide(self):\n\t\t# property to determine if the notification is system wide or project specific\n\t\treturn self.notification_type == 'system'",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tuser",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tuser = models.OneToOneField(User, on_delete=models.CASCADE)\n\tbug_bounty_mode = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn f\"{self.user.username}'s preferences\"",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "\tbug_bounty_mode",
        "kind": 5,
        "importPath": "web.dashboard.models",
        "description": "web.dashboard.models",
        "peekOfCode": "\tbug_bounty_mode = models.BooleanField(default=True)\n\tdef __str__(self):\n\t\treturn f\"{self.user.username}'s preferences\"",
        "detail": "web.dashboard.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web.dashboard.urls",
        "description": "web.dashboard.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        '',\n        views.onboarding,\n        name='onboarding'),\n    path(\n        '<slug:slug>/dashboard/',\n        views.index,\n        name='dashboardIndex'),\n    path(",
        "detail": "web.dashboard.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def index(request, slug):\n    try:\n        project = Project.objects.get(slug=slug)\n    except Exception as e:\n        # if project not found redirect to 404\n        return HttpResponseRedirect(reverse('four_oh_four'))\n    domains = Domain.objects.filter(project=project)\n    subdomains = Subdomain.objects.filter(scan_history__domain__project__slug=project)\n    endpoints = EndPoint.objects.filter(scan_history__domain__project__slug=project)\n    scan_histories = ScanHistory.objects.filter(domain__project=project)",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def profile(request, slug):\n    if request.method == 'POST':\n        form = PasswordChangeForm(request.user, request.POST)\n        if form.is_valid():\n            user = form.save()\n            update_session_auth_hash(request, user)\n            messages.success(\n                request,\n                'Your password was successfully changed!')\n            return redirect('profile')",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "admin_interface",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def admin_interface(request, slug):\n    UserModel = get_user_model()\n    users = UserModel.objects.all().order_by('date_joined')\n    return render(\n        request,\n        'dashboard/admin.html',\n        {\n            'users': users\n        }\n    )",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "admin_interface_update",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def admin_interface_update(request, slug):\n    mode = request.GET.get('mode')\n    user_id = request.GET.get('user')\n    if user_id:\n        UserModel = get_user_model()\n        user = UserModel.objects.get(id=user_id)\n    if request.method == 'GET':\n        if mode == 'change_status':\n            user.is_active = not user.is_active\n            user.save()",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "on_user_logged_out",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def on_user_logged_out(sender, request, **kwargs):\n    messages.add_message(\n        request,\n        messages.INFO,\n        'You have been successfully logged out. Thank you ' +\n        'for using reNgine.')\n@receiver(user_logged_in)\ndef on_user_logged_in(sender, request, **kwargs):\n    messages.add_message(\n        request,",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "on_user_logged_in",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def on_user_logged_in(sender, request, **kwargs):\n    messages.add_message(\n        request,\n        messages.INFO,\n        'Hi @' +\n        request.user.username +\n        ' welcome back!')\ndef search(request, slug):\n    return render(request, 'dashboard/search.html')\ndef four_oh_four(request):",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def search(request, slug):\n    return render(request, 'dashboard/search.html')\ndef four_oh_four(request):\n    return render(request, '404.html')\ndef projects(request, slug):\n    context = {}\n    context['projects'] = Project.objects.all()\n    return render(request, 'dashboard/projects.html', context)\ndef delete_project(request, id):\n    obj = get_object_or_404(Project, id=id)",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "four_oh_four",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def four_oh_four(request):\n    return render(request, '404.html')\ndef projects(request, slug):\n    context = {}\n    context['projects'] = Project.objects.all()\n    return render(request, 'dashboard/projects.html', context)\ndef delete_project(request, id):\n    obj = get_object_or_404(Project, id=id)\n    if request.method == \"POST\":\n        obj.delete()",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "projects",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def projects(request, slug):\n    context = {}\n    context['projects'] = Project.objects.all()\n    return render(request, 'dashboard/projects.html', context)\ndef delete_project(request, id):\n    obj = get_object_or_404(Project, id=id)\n    if request.method == \"POST\":\n        obj.delete()\n        responseData = {\n            'status': 'true'",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "delete_project",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def delete_project(request, id):\n    obj = get_object_or_404(Project, id=id)\n    if request.method == \"POST\":\n        obj.delete()\n        responseData = {\n            'status': 'true'\n        }\n        messages.add_message(\n            request,\n            messages.INFO,",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "onboarding",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def onboarding(request):\n    context = {}\n    error = ''\n    # check is any projects exists, then redirect to project list else onboarding\n    project = Project.objects.first()\n    if project:\n        slug = project.slug\n        return HttpResponseRedirect(reverse('dashboardIndex', kwargs={'slug': slug}))\n    if request.method == \"POST\":\n        project_name = request.POST.get('project_name')",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "list_bountyhub_programs",
        "kind": 2,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "def list_bountyhub_programs(request, slug):\n    context = {}\n    # get parameter to device which platform is being requested\n    platform = request.GET.get('platform') or 'hackerone'\n    context['platform'] = platform.capitalize()\n    return render(request, 'dashboard/bountyhub_programs.html', context)",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.dashboard.views",
        "description": "web.dashboard.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef index(request, slug):\n    try:\n        project = Project.objects.get(slug=slug)\n    except Exception as e:\n        # if project not found redirect to 404\n        return HttpResponseRedirect(reverse('four_oh_four'))\n    domains = Domain.objects.filter(project=project)\n    subdomains = Subdomain.objects.filter(scan_history__domain__project__slug=project)\n    endpoints = EndPoint.objects.filter(scan_history__domain__project__slug=project)",
        "detail": "web.dashboard.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "web.recon_note.migrations.0001_initial",
        "description": "web.recon_note.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('startScan', '0001_initial'),\n        ('dashboard', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TodoNote',\n            fields=[",
        "detail": "web.recon_note.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ReconNoteConfig",
        "kind": 6,
        "importPath": "web.recon_note.apps",
        "description": "web.recon_note.apps",
        "peekOfCode": "class ReconNoteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'recon_note'",
        "detail": "web.recon_note.apps",
        "documentation": {}
    },
    {
        "label": "TodoNote",
        "kind": 6,
        "importPath": "web.recon_note.models",
        "description": "web.recon_note.models",
        "peekOfCode": "class TodoNote(models.Model):\n    id = models.AutoField(primary_key=True)\n    title = models.CharField(max_length=1000, null=True, blank=True)\n    description = models.TextField(null=True, blank=True)\n    scan_history = models.ForeignKey(\n        ScanHistory,\n        on_delete=models.CASCADE,\n        null=True,\n        blank=True\n    )",
        "detail": "web.recon_note.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web.recon_note.urls",
        "description": "web.recon_note.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        '<slug:slug>/list_note',\n        views.list_note,\n        name='list_note'),\n    path(\n        'flip_todo_status',\n        views.flip_todo_status,\n        name='flip_todo_status'),\n    path(",
        "detail": "web.recon_note.urls",
        "documentation": {}
    },
    {
        "label": "list_note",
        "kind": 2,
        "importPath": "web.recon_note.views",
        "description": "web.recon_note.views",
        "peekOfCode": "def list_note(request, slug):\n    context = {}\n    context['recon_note_active'] = 'active'\n    return render(request, 'note/index.html', context)\ndef flip_todo_status(request):\n    if request.method == \"POST\":\n        body_unicode = request.body.decode('utf-8')\n        body = json.loads(body_unicode)\n        note = TodoNote.objects.get(id=body['id'])\n        note.is_done = not note.is_done",
        "detail": "web.recon_note.views",
        "documentation": {}
    },
    {
        "label": "flip_todo_status",
        "kind": 2,
        "importPath": "web.recon_note.views",
        "description": "web.recon_note.views",
        "peekOfCode": "def flip_todo_status(request):\n    if request.method == \"POST\":\n        body_unicode = request.body.decode('utf-8')\n        body = json.loads(body_unicode)\n        note = TodoNote.objects.get(id=body['id'])\n        note.is_done = not note.is_done\n        note.save()\n    return JsonResponse({'status': True})\ndef flip_important_status(request):\n    if request.method == \"POST\":",
        "detail": "web.recon_note.views",
        "documentation": {}
    },
    {
        "label": "flip_important_status",
        "kind": 2,
        "importPath": "web.recon_note.views",
        "description": "web.recon_note.views",
        "peekOfCode": "def flip_important_status(request):\n    if request.method == \"POST\":\n        body_unicode = request.body.decode('utf-8')\n        body = json.loads(body_unicode)\n        note = TodoNote.objects.get(id=body['id'])\n        note.is_important = not note.is_important\n        note.save()\n    return JsonResponse({'status': True})\ndef delete_note(request):\n    if request.method == \"POST\":",
        "detail": "web.recon_note.views",
        "documentation": {}
    },
    {
        "label": "delete_note",
        "kind": 2,
        "importPath": "web.recon_note.views",
        "description": "web.recon_note.views",
        "peekOfCode": "def delete_note(request):\n    if request.method == \"POST\":\n        body_unicode = request.body.decode('utf-8')\n        body = json.loads(body_unicode)\n        TodoNote.objects.filter(id=body['id']).delete()\n    return JsonResponse({'status': True})",
        "detail": "web.recon_note.views",
        "documentation": {}
    },
    {
        "label": "config_loggers",
        "kind": 2,
        "importPath": "web.reNgine.celery",
        "description": "web.reNgine.celery",
        "peekOfCode": "def config_loggers(*args, **kwargs):\n    from logging.config import dictConfig\n    dictConfig(app.conf['LOGGING'])",
        "detail": "web.reNgine.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web.reNgine.celery",
        "description": "web.reNgine.celery",
        "peekOfCode": "app = Celery('reNgine')\napp.config_from_object('django.conf:settings', namespace='CELERY')\napp.autodiscover_tasks()\n@setup_logging.connect()\ndef config_loggers(*args, **kwargs):\n    from logging.config import dictConfig\n    dictConfig(app.conf['LOGGING'])",
        "detail": "web.reNgine.celery",
        "documentation": {}
    },
    {
        "label": "RengineRequest",
        "kind": 6,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "class RengineRequest(Request):\n\tsuccess_msg = ''\n\tretry_msg = ''\nclass RengineTask(Task):\n\t\"\"\"A Celery task that is tracked by reNgine. Save task output files and\n\ttracebacks to RENGINE_RESULTS.\n\tThe custom task meta-options are toggleable through environment variables:\n\tRENGINE_RECORD_ENABLED:\n\t- Create / update ScanActivity object to track statuses.\n\t- Send notifications before and after each task (start / end).",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "RengineTask",
        "kind": 6,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "class RengineTask(Task):\n\t\"\"\"A Celery task that is tracked by reNgine. Save task output files and\n\ttracebacks to RENGINE_RESULTS.\n\tThe custom task meta-options are toggleable through environment variables:\n\tRENGINE_RECORD_ENABLED:\n\t- Create / update ScanActivity object to track statuses.\n\t- Send notifications before and after each task (start / end).\n\t- Send traceback file to reNgine's Discord channel if an exception happened.\n\tRENGINE_CACHE_ENABLED:\n\t- Get result from cache if it exists.",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "logger = get_task_logger(__name__)\ncache = None\nif 'CELERY_BROKER' in os.environ:\n\tcache = Redis.from_url(os.environ['CELERY_BROKER'])\nclass RengineRequest(Request):\n\tsuccess_msg = ''\n\tretry_msg = ''\nclass RengineTask(Task):\n\t\"\"\"A Celery task that is tracked by reNgine. Save task output files and\n\ttracebacks to RENGINE_RESULTS.",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "cache = None\nif 'CELERY_BROKER' in os.environ:\n\tcache = Redis.from_url(os.environ['CELERY_BROKER'])\nclass RengineRequest(Request):\n\tsuccess_msg = ''\n\tretry_msg = ''\nclass RengineTask(Task):\n\t\"\"\"A Celery task that is tracked by reNgine. Save task output files and\n\ttracebacks to RENGINE_RESULTS.\n\tThe custom task meta-options are toggleable through environment variables:",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\tcache",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\tcache = Redis.from_url(os.environ['CELERY_BROKER'])\nclass RengineRequest(Request):\n\tsuccess_msg = ''\n\tretry_msg = ''\nclass RengineTask(Task):\n\t\"\"\"A Celery task that is tracked by reNgine. Save task output files and\n\ttracebacks to RENGINE_RESULTS.\n\tThe custom task meta-options are toggleable through environment variables:\n\tRENGINE_RECORD_ENABLED:\n\t- Create / update ScanActivity object to track statuses.",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\tsuccess_msg",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\tsuccess_msg = ''\n\tretry_msg = ''\nclass RengineTask(Task):\n\t\"\"\"A Celery task that is tracked by reNgine. Save task output files and\n\ttracebacks to RENGINE_RESULTS.\n\tThe custom task meta-options are toggleable through environment variables:\n\tRENGINE_RECORD_ENABLED:\n\t- Create / update ScanActivity object to track statuses.\n\t- Send notifications before and after each task (start / end).\n\t- Send traceback file to reNgine's Discord channel if an exception happened.",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\tretry_msg",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\tretry_msg = ''\nclass RengineTask(Task):\n\t\"\"\"A Celery task that is tracked by reNgine. Save task output files and\n\ttracebacks to RENGINE_RESULTS.\n\tThe custom task meta-options are toggleable through environment variables:\n\tRENGINE_RECORD_ENABLED:\n\t- Create / update ScanActivity object to track statuses.\n\t- Send notifications before and after each task (start / end).\n\t- Send traceback file to reNgine's Discord channel if an exception happened.\n\tRENGINE_CACHE_ENABLED:",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\tRequest",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\tRequest = RengineRequest\n\t@property\n\tdef status_str(self):\n\t\treturn CELERY_TASK_STATUS_MAP.get(self.status)\n\tdef __call__(self, *args, **kwargs):\n\t\tself.result = None\n\t\tself.error = None\n\t\tself.traceback = None\n\t\tself.output_path = None\n\t\tself.status = RUNNING_TASK",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.result",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.result = None\n\t\tself.error = None\n\t\tself.traceback = None\n\t\tself.output_path = None\n\t\tself.status = RUNNING_TASK\n\t\t# Get task info\n\t\tself.task_name = self.name.split('.')[-1]\n\t\tself.description = kwargs.get('description') or ' '.join(self.task_name.split('_')).capitalize()\n\t\tlogger = get_task_logger(self.task_name)\n\t\t# Get reNgine context",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.error",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.error = None\n\t\tself.traceback = None\n\t\tself.output_path = None\n\t\tself.status = RUNNING_TASK\n\t\t# Get task info\n\t\tself.task_name = self.name.split('.')[-1]\n\t\tself.description = kwargs.get('description') or ' '.join(self.task_name.split('_')).capitalize()\n\t\tlogger = get_task_logger(self.task_name)\n\t\t# Get reNgine context\n\t\tctx = kwargs.get('ctx', {})",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.traceback",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.traceback = None\n\t\tself.output_path = None\n\t\tself.status = RUNNING_TASK\n\t\t# Get task info\n\t\tself.task_name = self.name.split('.')[-1]\n\t\tself.description = kwargs.get('description') or ' '.join(self.task_name.split('_')).capitalize()\n\t\tlogger = get_task_logger(self.task_name)\n\t\t# Get reNgine context\n\t\tctx = kwargs.get('ctx', {})\n\t\tself.track = ctx.pop('track', True)",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.output_path",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.output_path = None\n\t\tself.status = RUNNING_TASK\n\t\t# Get task info\n\t\tself.task_name = self.name.split('.')[-1]\n\t\tself.description = kwargs.get('description') or ' '.join(self.task_name.split('_')).capitalize()\n\t\tlogger = get_task_logger(self.task_name)\n\t\t# Get reNgine context\n\t\tctx = kwargs.get('ctx', {})\n\t\tself.track = ctx.pop('track', True)\n\t\tself.scan_id = ctx.get('scan_history_id')",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.status",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.status = RUNNING_TASK\n\t\t# Get task info\n\t\tself.task_name = self.name.split('.')[-1]\n\t\tself.description = kwargs.get('description') or ' '.join(self.task_name.split('_')).capitalize()\n\t\tlogger = get_task_logger(self.task_name)\n\t\t# Get reNgine context\n\t\tctx = kwargs.get('ctx', {})\n\t\tself.track = ctx.pop('track', True)\n\t\tself.scan_id = ctx.get('scan_history_id')\n\t\tself.subscan_id = ctx.get('subscan_id')",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.task_name",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.task_name = self.name.split('.')[-1]\n\t\tself.description = kwargs.get('description') or ' '.join(self.task_name.split('_')).capitalize()\n\t\tlogger = get_task_logger(self.task_name)\n\t\t# Get reNgine context\n\t\tctx = kwargs.get('ctx', {})\n\t\tself.track = ctx.pop('track', True)\n\t\tself.scan_id = ctx.get('scan_history_id')\n\t\tself.subscan_id = ctx.get('subscan_id')\n\t\tself.engine_id = ctx.get('engine_id')\n\t\tself.filename = ctx.get('filename')",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.description",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.description = kwargs.get('description') or ' '.join(self.task_name.split('_')).capitalize()\n\t\tlogger = get_task_logger(self.task_name)\n\t\t# Get reNgine context\n\t\tctx = kwargs.get('ctx', {})\n\t\tself.track = ctx.pop('track', True)\n\t\tself.scan_id = ctx.get('scan_history_id')\n\t\tself.subscan_id = ctx.get('subscan_id')\n\t\tself.engine_id = ctx.get('engine_id')\n\t\tself.filename = ctx.get('filename')\n\t\tself.starting_point_path = ctx.get('starting_point_path', '')",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tlogger",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tlogger = get_task_logger(self.task_name)\n\t\t# Get reNgine context\n\t\tctx = kwargs.get('ctx', {})\n\t\tself.track = ctx.pop('track', True)\n\t\tself.scan_id = ctx.get('scan_history_id')\n\t\tself.subscan_id = ctx.get('subscan_id')\n\t\tself.engine_id = ctx.get('engine_id')\n\t\tself.filename = ctx.get('filename')\n\t\tself.starting_point_path = ctx.get('starting_point_path', '')\n\t\tself.excluded_paths = ctx.get('excluded_paths', [])",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tctx",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tctx = kwargs.get('ctx', {})\n\t\tself.track = ctx.pop('track', True)\n\t\tself.scan_id = ctx.get('scan_history_id')\n\t\tself.subscan_id = ctx.get('subscan_id')\n\t\tself.engine_id = ctx.get('engine_id')\n\t\tself.filename = ctx.get('filename')\n\t\tself.starting_point_path = ctx.get('starting_point_path', '')\n\t\tself.excluded_paths = ctx.get('excluded_paths', [])\n\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.track",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.track = ctx.pop('track', True)\n\t\tself.scan_id = ctx.get('scan_history_id')\n\t\tself.subscan_id = ctx.get('subscan_id')\n\t\tself.engine_id = ctx.get('engine_id')\n\t\tself.filename = ctx.get('filename')\n\t\tself.starting_point_path = ctx.get('starting_point_path', '')\n\t\tself.excluded_paths = ctx.get('excluded_paths', [])\n\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.scan_id",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.scan_id = ctx.get('scan_history_id')\n\t\tself.subscan_id = ctx.get('subscan_id')\n\t\tself.engine_id = ctx.get('engine_id')\n\t\tself.filename = ctx.get('filename')\n\t\tself.starting_point_path = ctx.get('starting_point_path', '')\n\t\tself.excluded_paths = ctx.get('excluded_paths', [])\n\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.subscan_id",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.subscan_id = ctx.get('subscan_id')\n\t\tself.engine_id = ctx.get('engine_id')\n\t\tself.filename = ctx.get('filename')\n\t\tself.starting_point_path = ctx.get('starting_point_path', '')\n\t\tself.excluded_paths = ctx.get('excluded_paths', [])\n\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.engine_id",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.engine_id = ctx.get('engine_id')\n\t\tself.filename = ctx.get('filename')\n\t\tself.starting_point_path = ctx.get('starting_point_path', '')\n\t\tself.excluded_paths = ctx.get('excluded_paths', [])\n\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.filename",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.filename = ctx.get('filename')\n\t\tself.starting_point_path = ctx.get('starting_point_path', '')\n\t\tself.excluded_paths = ctx.get('excluded_paths', [])\n\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.starting_point_path",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.starting_point_path = ctx.get('starting_point_path', '')\n\t\tself.excluded_paths = ctx.get('excluded_paths', [])\n\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.excluded_paths",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.excluded_paths = ctx.get('excluded_paths', [])\n\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.results_dir",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.results_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.yaml_configuration",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.yaml_configuration = ctx.get('yaml_configuration', {})\n\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.out_of_scope_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.out_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.history_file",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.history_file = f'{self.results_dir}/commands.txt'\n\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.scan",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.scan = ScanHistory.objects.filter(pk=self.scan_id).first()\n\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set\n\t\tif not self.filename:",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.subscan",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.subscan = SubScan.objects.filter(pk=self.subscan_id).first()\n\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set\n\t\tif not self.filename:\n\t\t\tself.filename = get_output_file_name(",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.engine",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.engine = EngineType.objects.filter(pk=self.engine_id).first()\n\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set\n\t\tif not self.filename:\n\t\t\tself.filename = get_output_file_name(\n\t\t\t\tself.scan_id,",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.domain",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.domain = self.scan.domain if self.scan else None\n\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set\n\t\tif not self.filename:\n\t\t\tself.filename = get_output_file_name(\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id,",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.domain_id",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.domain_id = self.domain.id if self.domain else None\n\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set\n\t\tif not self.filename:\n\t\t\tself.filename = get_output_file_name(\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id,\n\t\t\t\tf'{self.task_name}.txt')",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.subdomain",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.subdomain = self.subscan.subdomain if self.subscan else None\n\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set\n\t\tif not self.filename:\n\t\t\tself.filename = get_output_file_name(\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id,\n\t\t\t\tf'{self.task_name}.txt')\n\t\t\tif self.task_name == 'screenshot':",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.subdomain_id",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.subdomain_id = self.subdomain.id if self.subdomain else None\n\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set\n\t\tif not self.filename:\n\t\t\tself.filename = get_output_file_name(\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id,\n\t\t\t\tf'{self.task_name}.txt')\n\t\t\tif self.task_name == 'screenshot':\n\t\t\t\tself.filename = 'Requests.csv'",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.activity_id",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.activity_id = None\n\t\t# Set file self.task_name if not already set\n\t\tif not self.filename:\n\t\t\tself.filename = get_output_file_name(\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id,\n\t\t\t\tf'{self.task_name}.txt')\n\t\t\tif self.task_name == 'screenshot':\n\t\t\t\tself.filename = 'Requests.csv'\n\t\tself.output_path = f'{self.results_dir}/{self.filename}'",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.filename",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.filename = get_output_file_name(\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id,\n\t\t\t\tf'{self.task_name}.txt')\n\t\t\tif self.task_name == 'screenshot':\n\t\t\t\tself.filename = 'Requests.csv'\n\t\tself.output_path = f'{self.results_dir}/{self.filename}'\n\t\tif RENGINE_RECORD_ENABLED:\n\t\t\tif self.engine: # task not in engine.tasks, skip it.\n\t\t\t\t# create a rule for tasks that has to run parallel like dalfox",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.filename",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\t\tself.filename = 'Requests.csv'\n\t\tself.output_path = f'{self.results_dir}/{self.filename}'\n\t\tif RENGINE_RECORD_ENABLED:\n\t\t\tif self.engine: # task not in engine.tasks, skip it.\n\t\t\t\t# create a rule for tasks that has to run parallel like dalfox\n\t\t\t\t# xss scan but not necessarily part of main task rather part like\n\t\t\t\t# dalfox scan being part of vulnerability task\n\t\t\t\tdependent_tasks = {\n\t\t\t\t\t'dalfox_xss_scan': 'vulnerability_scan',\n\t\t\t\t\t'crlfuzz': 'vulnerability_scan',",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.output_path",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.output_path = f'{self.results_dir}/{self.filename}'\n\t\tif RENGINE_RECORD_ENABLED:\n\t\t\tif self.engine: # task not in engine.tasks, skip it.\n\t\t\t\t# create a rule for tasks that has to run parallel like dalfox\n\t\t\t\t# xss scan but not necessarily part of main task rather part like\n\t\t\t\t# dalfox scan being part of vulnerability task\n\t\t\t\tdependent_tasks = {\n\t\t\t\t\t'dalfox_xss_scan': 'vulnerability_scan',\n\t\t\t\t\t'crlfuzz': 'vulnerability_scan',\n\t\t\t\t\t'nuclei_scan': 'vulnerability_scan',",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdependent_tasks",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\t\tdependent_tasks = {\n\t\t\t\t\t'dalfox_xss_scan': 'vulnerability_scan',\n\t\t\t\t\t'crlfuzz': 'vulnerability_scan',\n\t\t\t\t\t'nuclei_scan': 'vulnerability_scan',\n\t\t\t\t\t'nuclei_individual_severity_module': 'vulnerability_scan',\n\t\t\t\t\t's3scanner': 'vulnerability_scan',\n\t\t\t\t}\n\t\t\t\tif self.track and self.task_name not in self.engine.tasks and dependent_tasks.get(self.task_name) not in self.engine.tasks:\n\t\t\t\t\tlogger.debug(f'Task {self.name} is not part of engine \"{self.engine.engine_name}\" tasks. Skipping.')\n\t\t\t\t\treturn",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\trecord_key",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\trecord_key = get_task_cache_key(self.name, *args, **kwargs)\n\t\t\tresult = cache.get(record_key)\n\t\t\tif result and result != b'null':\n\t\t\t\tself.status = SUCCESS_TASK\n\t\t\t\tif RENGINE_RECORD_ENABLED and self.track:\n\t\t\t\t\tlogger.warning(f'Task {self.task_name} status is SUCCESS (CACHED)')\n\t\t\t\t\tself.update_scan_activity()\n\t\t\t\treturn json.loads(result)\n\t\t# Execute task, catch exceptions and update ScanActivity object after\n\t\t# task has finished running.",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tresult",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tresult = cache.get(record_key)\n\t\t\tif result and result != b'null':\n\t\t\t\tself.status = SUCCESS_TASK\n\t\t\t\tif RENGINE_RECORD_ENABLED and self.track:\n\t\t\t\t\tlogger.warning(f'Task {self.task_name} status is SUCCESS (CACHED)')\n\t\t\t\t\tself.update_scan_activity()\n\t\t\t\treturn json.loads(result)\n\t\t# Execute task, catch exceptions and update ScanActivity object after\n\t\t# task has finished running.\n\t\ttry:",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.status",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\t\tself.status = SUCCESS_TASK\n\t\t\t\tif RENGINE_RECORD_ENABLED and self.track:\n\t\t\t\t\tlogger.warning(f'Task {self.task_name} status is SUCCESS (CACHED)')\n\t\t\t\t\tself.update_scan_activity()\n\t\t\t\treturn json.loads(result)\n\t\t# Execute task, catch exceptions and update ScanActivity object after\n\t\t# task has finished running.\n\t\ttry:\n\t\t\tself.result = self.run(*args, **kwargs)\n\t\t\tself.status = SUCCESS_TASK",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.result",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.result = self.run(*args, **kwargs)\n\t\t\tself.status = SUCCESS_TASK\n\t\texcept Exception as exc:\n\t\t\tself.status = FAILED_TASK\n\t\t\tself.error = repr(exc)\n\t\t\tself.traceback = fmt_traceback(exc)\n\t\t\tself.result = self.traceback\n\t\t\tself.output_path = get_traceback_path(\n\t\t\t\tself.task_name,\n\t\t\t\tself.results_dir,",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.status",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.status = SUCCESS_TASK\n\t\texcept Exception as exc:\n\t\t\tself.status = FAILED_TASK\n\t\t\tself.error = repr(exc)\n\t\t\tself.traceback = fmt_traceback(exc)\n\t\t\tself.result = self.traceback\n\t\t\tself.output_path = get_traceback_path(\n\t\t\t\tself.task_name,\n\t\t\t\tself.results_dir,\n\t\t\t\tself.scan_id,",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.status",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.status = FAILED_TASK\n\t\t\tself.error = repr(exc)\n\t\t\tself.traceback = fmt_traceback(exc)\n\t\t\tself.result = self.traceback\n\t\t\tself.output_path = get_traceback_path(\n\t\t\t\tself.task_name,\n\t\t\t\tself.results_dir,\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id)\n\t\t\tos.makedirs(os.path.dirname(self.output_path), exist_ok=True)",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.error",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.error = repr(exc)\n\t\t\tself.traceback = fmt_traceback(exc)\n\t\t\tself.result = self.traceback\n\t\t\tself.output_path = get_traceback_path(\n\t\t\t\tself.task_name,\n\t\t\t\tself.results_dir,\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id)\n\t\t\tos.makedirs(os.path.dirname(self.output_path), exist_ok=True)\n\t\t\tif RENGINE_RAISE_ON_ERROR:",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.traceback",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.traceback = fmt_traceback(exc)\n\t\t\tself.result = self.traceback\n\t\t\tself.output_path = get_traceback_path(\n\t\t\t\tself.task_name,\n\t\t\t\tself.results_dir,\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id)\n\t\t\tos.makedirs(os.path.dirname(self.output_path), exist_ok=True)\n\t\t\tif RENGINE_RAISE_ON_ERROR:\n\t\t\t\traise exc",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.result",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.result = self.traceback\n\t\t\tself.output_path = get_traceback_path(\n\t\t\t\tself.task_name,\n\t\t\t\tself.results_dir,\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id)\n\t\t\tos.makedirs(os.path.dirname(self.output_path), exist_ok=True)\n\t\t\tif RENGINE_RAISE_ON_ERROR:\n\t\t\t\traise exc\n\t\t\tlogger.exception(exc)",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.output_path",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.output_path = get_traceback_path(\n\t\t\t\tself.task_name,\n\t\t\t\tself.results_dir,\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id)\n\t\t\tos.makedirs(os.path.dirname(self.output_path), exist_ok=True)\n\t\t\tif RENGINE_RAISE_ON_ERROR:\n\t\t\t\traise exc\n\t\t\tlogger.exception(exc)\n\t\tfinally:",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmsg",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\t\tmsg = f'Task {self.task_name} status is {self.status_str}'\n\t\t\t\tmsg += f' | Error: {self.error}' if self.error else ''\n\t\t\t\tlogger.warning(msg)\n\t\t\t\tself.update_scan_activity()\n\t\t# Set task result in cache if task was successful\n\t\tif RENGINE_CACHE_ENABLED and self.status == SUCCESS_TASK and result:\n\t\t\tcache.set(record_key, json.dumps(result))\n\t\t\tcache.expire(record_key, 600) # 10mn cache\n\t\treturn self.result\n\tdef write_results(self):",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tis_json_results",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tis_json_results = isinstance(self.result, dict) or isinstance(self.result, list)\n\t\tif not self.output_path:\n\t\t\treturn False\n\t\tif not os.path.exists(self.output_path):\n\t\t\twith open(self.output_path, 'w') as f:\n\t\t\t\tif is_json_results:\n\t\t\t\t\tjson.dump(self.result, f, indent=4)\n\t\t\t\telse:\n\t\t\t\t\tf.write(self.result)\n\t\t\tlogger.warning(f'Wrote {self.task_name} results to {self.output_path}')",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tcelery_id",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tcelery_id = self.request.id\n\t\tself.activity = ScanActivity(\n\t\t\tname=self.task_name,\n\t\t\ttitle=self.description,\n\t\t\ttime=timezone.now(),\n\t\t\tstatus=RUNNING_TASK,\n\t\t\tcelery_id=celery_id)\n\t\tself.activity.save()\n\t\tself.activity_id = self.activity.id\n\t\tif self.scan:",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.activity",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.activity = ScanActivity(\n\t\t\tname=self.task_name,\n\t\t\ttitle=self.description,\n\t\t\ttime=timezone.now(),\n\t\t\tstatus=RUNNING_TASK,\n\t\t\tcelery_id=celery_id)\n\t\tself.activity.save()\n\t\tself.activity_id = self.activity.id\n\t\tif self.scan:\n\t\t\tself.activity.scan_of = self.scan",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.activity_id",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.activity_id = self.activity.id\n\t\tif self.scan:\n\t\t\tself.activity.scan_of = self.scan\n\t\t\tself.activity.save()\n\t\t\tself.scan.celery_ids.append(celery_id)\n\t\t\tself.scan.save()\n\t\tif self.subscan:\n\t\t\tself.subscan.celery_ids.append(celery_id)\n\t\t\tself.subscan.save()\n\t\t# Send notification",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.activity.scan_of",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\tself.activity.scan_of = self.scan\n\t\t\tself.activity.save()\n\t\t\tself.scan.celery_ids.append(celery_id)\n\t\t\tself.scan.save()\n\t\tif self.subscan:\n\t\t\tself.subscan.celery_ids.append(celery_id)\n\t\t\tself.subscan.save()\n\t\t# Send notification\n\t\tself.notify()\n\tdef update_scan_activity(self):",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\terror_message",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\terror_message = self.error\n\t\tif self.error and len(self.error) > 300:\n\t\t\terror_message = self.error[:288] + '...[trimmed]'\n\t\tself.activity.status = self.status\n\t\tself.activity.error_message = error_message\n\t\tself.activity.traceback = self.traceback\n\t\tself.activity.time = timezone.now()\n\t\tself.activity.save()\n\t\tself.notify()\n\tdef notify(self, name=None, severity=None, fields={}, add_meta_info=True):",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\t\terror_message",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\t\terror_message = self.error[:288] + '...[trimmed]'\n\t\tself.activity.status = self.status\n\t\tself.activity.error_message = error_message\n\t\tself.activity.traceback = self.traceback\n\t\tself.activity.time = timezone.now()\n\t\tself.activity.save()\n\t\tself.notify()\n\tdef notify(self, name=None, severity=None, fields={}, add_meta_info=True):\n\t\t# Import here to avoid Celery circular import and be able to use `delay`\n\t\tfrom reNgine.tasks import send_task_notif",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.activity.status",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.activity.status = self.status\n\t\tself.activity.error_message = error_message\n\t\tself.activity.traceback = self.traceback\n\t\tself.activity.time = timezone.now()\n\t\tself.activity.save()\n\t\tself.notify()\n\tdef notify(self, name=None, severity=None, fields={}, add_meta_info=True):\n\t\t# Import here to avoid Celery circular import and be able to use `delay`\n\t\tfrom reNgine.tasks import send_task_notif\n\t\treturn send_task_notif.delay(",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.activity.error_message",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.activity.error_message = error_message\n\t\tself.activity.traceback = self.traceback\n\t\tself.activity.time = timezone.now()\n\t\tself.activity.save()\n\t\tself.notify()\n\tdef notify(self, name=None, severity=None, fields={}, add_meta_info=True):\n\t\t# Import here to avoid Celery circular import and be able to use `delay`\n\t\tfrom reNgine.tasks import send_task_notif\n\t\treturn send_task_notif.delay(\n\t\t\tname or self.task_name,",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.activity.traceback",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.activity.traceback = self.traceback\n\t\tself.activity.time = timezone.now()\n\t\tself.activity.save()\n\t\tself.notify()\n\tdef notify(self, name=None, severity=None, fields={}, add_meta_info=True):\n\t\t# Import here to avoid Celery circular import and be able to use `delay`\n\t\tfrom reNgine.tasks import send_task_notif\n\t\treturn send_task_notif.delay(\n\t\t\tname or self.task_name,\n\t\t\tstatus=self.status_str,",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "\t\tself.activity.time",
        "kind": 5,
        "importPath": "web.reNgine.celery_custom_task",
        "description": "web.reNgine.celery_custom_task",
        "peekOfCode": "\t\tself.activity.time = timezone.now()\n\t\tself.activity.save()\n\t\tself.notify()\n\tdef notify(self, name=None, severity=None, fields={}, add_meta_info=True):\n\t\t# Import here to avoid Celery circular import and be able to use `delay`\n\t\tfrom reNgine.tasks import send_task_notif\n\t\treturn send_task_notif.delay(\n\t\t\tname or self.task_name,\n\t\t\tstatus=self.status_str,\n\t\t\tresult=self.result,",
        "detail": "web.reNgine.celery_custom_task",
        "documentation": {}
    },
    {
        "label": "generate_subdomain_chart_by_http_status",
        "kind": 2,
        "importPath": "web.reNgine.charts",
        "description": "web.reNgine.charts",
        "peekOfCode": "def generate_subdomain_chart_by_http_status(subdomains):\n    \"\"\"\n    Generates a donut chart using plotly for the subdomains based on the http status.\n    Includes label, count, and percentage inside the chart segments and in the legend.\n    Args:\n        subdomains: QuerySet of subdomains.\n    Returns:\n        Image as base64 encoded string.\n    \"\"\"\n    http_statuses = (",
        "detail": "web.reNgine.charts",
        "documentation": {}
    },
    {
        "label": "get_color_by_severity",
        "kind": 2,
        "importPath": "web.reNgine.charts",
        "description": "web.reNgine.charts",
        "peekOfCode": "def get_color_by_severity(severity_int):\n    \"\"\"\n    Returns a color based on the severity level using a modern color scheme.\n    \"\"\"\n    color_map = {\n        4: '#FF4D6A',\n        3: '#FF9F43',\n        2: '#FFCA3A',\n        1: '#4ADE80',\n        0: '#4ECDC4',",
        "detail": "web.reNgine.charts",
        "documentation": {}
    },
    {
        "label": "generate_vulnerability_chart_by_severity",
        "kind": 2,
        "importPath": "web.reNgine.charts",
        "description": "web.reNgine.charts",
        "peekOfCode": "def generate_vulnerability_chart_by_severity(vulnerabilities):\n    \"\"\"\n    Generates a donut chart using plotly for the vulnerabilities based on the severity.\n    Args:\n        vulnerabilities: QuerySet of Vulnerability objects.\n    Returns:\n        Image as base64 encoded string.\n    \"\"\"\n    severity_counts = (\n        vulnerabilities",
        "detail": "web.reNgine.charts",
        "documentation": {}
    },
    {
        "label": "generate_color",
        "kind": 2,
        "importPath": "web.reNgine.charts",
        "description": "web.reNgine.charts",
        "peekOfCode": "def generate_color(base_color, offset):\n    r, g, b = int(base_color[1:3], 16), int(base_color[3:5], 16), int(base_color[5:7], 16)\n    factor = 1 + (offset * 0.03)\n    r, g, b = [min(255, int(c * factor)) for c in (r, g, b)]\n    return f\"#{r:02x}{g:02x}{b:02x}\"\ndef get_color_by_http_status(http_status):\n    \"\"\"\n        Returns the color based on the http status.\n        Args:\n            http_status: HTTP status code.",
        "detail": "web.reNgine.charts",
        "documentation": {}
    },
    {
        "label": "get_color_by_http_status",
        "kind": 2,
        "importPath": "web.reNgine.charts",
        "description": "web.reNgine.charts",
        "peekOfCode": "def get_color_by_http_status(http_status):\n    \"\"\"\n        Returns the color based on the http status.\n        Args:\n            http_status: HTTP status code.\n        Returns:\n            Color code.\n    \"\"\"\n    status = int(http_status)\n    colors = {",
        "detail": "web.reNgine.charts",
        "documentation": {}
    },
    {
        "label": "dump_custom_scan_engines",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def dump_custom_scan_engines(results_dir):\n\t\"\"\"Dump custom scan engines to YAML files.\n\tArgs:\n\t\tresults_dir (str): Results directory (will be created if non-existent).\n\t\"\"\"\n\tcustom_engines = EngineType.objects.filter(default_engine=False)\n\tif not os.path.exists(results_dir):\n\t\tos.makedirs(results_dir, exist_ok=True)\n\tfor engine in custom_engines:\n\t\twith open(os.path.join(results_dir, f\"{engine.engine_name}.yaml\"), 'w') as f:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "load_custom_scan_engines",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def load_custom_scan_engines(results_dir):\n\t\"\"\"Load custom scan engines from YAML files. The filename without .yaml will\n\tbe used as the engine name.\n\tArgs:\n\t\tresults_dir (str): Results directory containing engines configs.\n\t\"\"\"\n\tconfig_paths = [\n\t\tf for f in os.listdir(results_dir)\n\t\tif os.path.isfile(os.path.join(results_dir, f)) and f.endswith('.yaml')\n\t]",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_lookup_keywords",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_lookup_keywords():\n\t\"\"\"Get lookup keywords from InterestingLookupModel.\n\tReturns:\n\t\tlist: Lookup keywords.\n\t\"\"\"\n\tlookup_model = InterestingLookupModel.objects.first()\n\tlookup_obj = InterestingLookupModel.objects.filter(custom_type=True).order_by('-id').first()\n\tcustom_lookup_keywords = []\n\tdefault_lookup_keywords = []\n\tif lookup_model:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_subdomains",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_subdomains(write_filepath=None, exclude_subdomains=False, ctx={}):\n\t\"\"\"Get Subdomain objects from DB.\n\tArgs:\n\t\twrite_filepath (str): Write info back to a file.\n\t\texclude_subdomains (bool): Exclude subdomains, only return subdomain matching domain.\n\t\tctx (dict): ctx\n\tReturns:\n\t\tlist: List of subdomains matching query.\n\t\"\"\"\n\tdomain_id = ctx.get('domain_id')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_new_added_subdomain",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_new_added_subdomain(scan_id, domain_id):\n\t\"\"\"Find domains added during the last scan.\n\tArgs:\n\t\tscan_id (int): startScan.models.ScanHistory ID.\n\t\tdomain_id (int): startScan.models.Domain ID.\n\tReturns:\n\t\tdjango.models.querysets.QuerySet: query of newly added subdomains.\n\t\"\"\"\n\tscan = (\n\t\tScanHistory.objects",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_removed_subdomain",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_removed_subdomain(scan_id, domain_id):\n\t\"\"\"Find domains removed during the last scan.\n\tArgs:\n\t\tscan_id (int): startScan.models.ScanHistory ID.\n\t\tdomain_id (int): startScan.models.Domain ID.\n\tReturns:\n\t\tdjango.models.querysets.QuerySet: query of newly added subdomains.\n\t\"\"\"\n\tscan_history = (\n\t\tScanHistory.objects",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_interesting_subdomains",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_interesting_subdomains(scan_history=None, domain_id=None):\n\t\"\"\"Get Subdomain objects matching InterestingLookupModel conditions.\n\tArgs:\n\t\tscan_history (startScan.models.ScanHistory, optional): Scan history.\n\t\tdomain_id (int, optional): Domain id.\n\tReturns:\n\t\tdjango.db.Q: QuerySet object.\n\t\"\"\"\n\tlookup_keywords = get_lookup_keywords()\n\tlookup_obj = (",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_http_urls",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_http_urls(\n\t\tis_alive=False,\n\t\tis_uncrawled=False,\n\t\tstrict=False,\n\t\tignore_files=False,\n\t\twrite_filepath=None,\n\t\texclude_subdomains=False,\n\t\tget_only_default_urls=False,\n\t\tctx={}):\n\t\"\"\"Get HTTP urls from EndPoint objects in DB. Support filtering out on a",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_interesting_endpoints",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_interesting_endpoints(scan_history=None, target=None):\n\t\"\"\"Get EndPoint objects matching InterestingLookupModel conditions.\n\tArgs:\n\t\tscan_history (startScan.models.ScanHistory): Scan history.\n\t\ttarget (str): Domain id.\n\tReturns:\n\t\tdjango.db.Q: QuerySet object.\n\t\"\"\"\n\tlookup_keywords = get_lookup_keywords()\n\tlookup_obj = InterestingLookupModel.objects.filter(custom_type=True).order_by('-id').first()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_subdomain_from_url",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_subdomain_from_url(url):\n\t\"\"\"Get subdomain from HTTP URL.\n\tArgs:\n\t\turl (str): HTTP URL.\n\tReturns:\n\t\tstr: Subdomain name.\n\t\"\"\"\n\t# Check if the URL has a scheme. If not, add a temporary one to prevent empty netloc.\n\tif \"://\" not in url:\n\t\turl = \"http://\" + url",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_domain_from_subdomain",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_domain_from_subdomain(subdomain):\n\t\"\"\"Get domain from subdomain.\n\tArgs:\n\t\tsubdomain (str): Subdomain name.\n\tReturns:\n\t\tstr: Domain name.\n\t\"\"\"\n\t# ext = tldextract.extract(subdomain)\n\t# return '.'.join(ext[1:3])\n\tif not validators.domain(subdomain):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "sanitize_url",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def sanitize_url(http_url):\n\t\"\"\"Removes HTTP ports 80 and 443 from HTTP URL because it's ugly.\n\tArgs:\n\t\thttp_url (str): Input HTTP URL.\n\tReturns:\n\t\tstr: Stripped HTTP URL.\n\t\"\"\"\n\t# Check if the URL has a scheme. If not, add a temporary one to prevent empty netloc.\n\tif \"://\" not in http_url:\n\t\thttp_url = \"http://\" + http_url",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "extract_path_from_url",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def extract_path_from_url(url):\n\tparsed_url = urlparse(url)\n\t# Reconstruct the URL without scheme and netloc\n\treconstructed_url = parsed_url.path\n\tif reconstructed_url.startswith('/'):\n\t\treconstructed_url = reconstructed_url[1:]  # Remove the first slash\n\tif parsed_url.params:\n\t\treconstructed_url += ';' + parsed_url.params\n\tif parsed_url.query:\n\t\treconstructed_url += '?' + parsed_url.query",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_random_proxy",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_random_proxy():\n\t\"\"\"Get a random proxy from the list of proxies input by user in the UI.\n\tReturns:\n\t\tstr: Proxy name or '' if no proxy defined in db or use_proxy is False.\n\t\"\"\"\n\tif not Proxy.objects.all().exists():\n\t\treturn ''\n\tproxy = Proxy.objects.first()\n\tif not proxy.use_proxy:\n\t\treturn ''",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "remove_ansi_escape_sequences",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def remove_ansi_escape_sequences(text):\n\t# Regular expression to match ANSI escape sequences\n\tansi_escape_pattern = r'\\x1b\\[.*?m'\n\t# Use re.sub() to replace the ANSI escape sequences with an empty string\n\tplain_text = re.sub(ansi_escape_pattern, '', text)\n\treturn plain_text\ndef get_cms_details(url):\n\t\"\"\"Get CMS details using cmseek.py.\n\tArgs:\n\t\turl (str): HTTP URL.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_cms_details",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_cms_details(url):\n\t\"\"\"Get CMS details using cmseek.py.\n\tArgs:\n\t\turl (str): HTTP URL.\n\tReturns:\n\t\tdict: Response.\n\t\"\"\"\n\t# this function will fetch cms details using cms_detector\n\tresponse = {}\n\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py --random-agent --batch --follow-redirect -u {url}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "send_telegram_message",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def send_telegram_message(message):\n\t\"\"\"Send Telegram message.\n\tArgs:\n\t\tmessage (str): Message.\n\t\"\"\"\n\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_telegram and\n\t\tnotif.telegram_bot_token and",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "send_slack_message",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def send_slack_message(message):\n\t\"\"\"Send Slack message.\n\tArgs:\n\t\tmessage (str): Message.\n\t\"\"\"\n\theaders = {'content-type': 'application/json'}\n\tmessage = {'text': message}\n\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "send_lark_message",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def send_lark_message(message):\n\t\"\"\"Send lark message.\n\tArgs:\n\t\tmessage (str): Message.\n\t\"\"\"\n\theaders = {'content-type': 'application/json'}\n\tmessage = {\"msg_type\":\"interactive\",\"card\":{\"elements\":[{\"tag\":\"div\",\"text\":{\"content\":message,\"tag\":\"lark_md\"}}]}}\n\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "send_discord_message",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def send_discord_message(\n\t\tmessage,\n\t\ttitle='',\n\t\tseverity=None,\n\t\turl=None,\n\t\tfiles=None,\n\t\tfields={},\n\t\tfields_append=[]):\n\t\"\"\"Send Discord message.\n\tIf title and fields are specified, ignore the 'message' and create a Discord",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "enrich_notification",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def enrich_notification(message, scan_history_id, subscan_id):\n\t\"\"\"Add scan id / subscan id to notification message.\n\tArgs:\n\t\tmessage (str): Original notification message.\n\t\tscan_history_id (int): Scan history id.\n\t\tsubscan_id (int): Subscan id.\n\tReturns:\n\t\tstr: Message.\n\t\"\"\"\n\tif scan_history_id is not None:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_scan_title",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_scan_title(scan_id, subscan_id=None, task_name=None):\n\treturn f'Subscan #{subscan_id} summary' if subscan_id else f'Scan #{scan_id} summary'\ndef get_scan_url(scan_id=None, subscan_id=None):\n\tif scan_id:\n\t\treturn f'https://{DOMAIN_NAME}/scan/detail/{scan_id}'\n\treturn None\ndef get_scan_fields(engine, scan, subscan=None, status='RUNNING', tasks=[]):\n\tscan_obj = subscan if subscan else scan\n\tif subscan:\n\t\ttasks_h = f'`{subscan.type}`'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_scan_url",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_scan_url(scan_id=None, subscan_id=None):\n\tif scan_id:\n\t\treturn f'https://{DOMAIN_NAME}/scan/detail/{scan_id}'\n\treturn None\ndef get_scan_fields(engine, scan, subscan=None, status='RUNNING', tasks=[]):\n\tscan_obj = subscan if subscan else scan\n\tif subscan:\n\t\ttasks_h = f'`{subscan.type}`'\n\t\thost = subscan.subdomain.name\n\t\tscan_obj = subscan",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_scan_fields",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_scan_fields(engine, scan, subscan=None, status='RUNNING', tasks=[]):\n\tscan_obj = subscan if subscan else scan\n\tif subscan:\n\t\ttasks_h = f'`{subscan.type}`'\n\t\thost = subscan.subdomain.name\n\t\tscan_obj = subscan\n\telse:\n\t\ttasks_h = '• ' + '\\n• '.join(f'`{task.name}`' for task in tasks) if tasks else ''\n\t\thost = scan.domain.name\n\t\tscan_obj = scan",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_task_title",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_task_title(task_name, scan_id=None, subscan_id=None):\n\tif scan_id:\n\t\tprefix = f'#{scan_id}'\n\t\tif subscan_id:\n\t\t\tprefix += f'-#{subscan_id}'\n\t\treturn f'`{prefix}` - `{task_name}`'\n\treturn f'`{task_name}` [unbound]'\ndef get_task_header_message(name, scan_history_id, subscan_id):\n\tmsg = f'`{name}` [#{scan_history_id}'\n\tif subscan_id:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_task_header_message",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_task_header_message(name, scan_history_id, subscan_id):\n\tmsg = f'`{name}` [#{scan_history_id}'\n\tif subscan_id:\n\t\tmsg += f'_#{subscan_id}]'\n\tmsg += 'status'\n\treturn msg\ndef get_task_cache_key(func_name, *args, **kwargs):\n\targs_str = '_'.join([str(arg) for arg in args])\n\tkwargs_str = '_'.join([f'{k}={v}' for k, v in kwargs.items() if k not in RENGINE_TASK_IGNORE_CACHE_KWARGS])\n\treturn f'{func_name}__{args_str}__{kwargs_str}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_task_cache_key",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_task_cache_key(func_name, *args, **kwargs):\n\targs_str = '_'.join([str(arg) for arg in args])\n\tkwargs_str = '_'.join([f'{k}={v}' for k, v in kwargs.items() if k not in RENGINE_TASK_IGNORE_CACHE_KWARGS])\n\treturn f'{func_name}__{args_str}__{kwargs_str}'\ndef get_output_file_name(scan_history_id, subscan_id, filename):\n\ttitle = f'#{scan_history_id}'\n\tif subscan_id:\n\t\ttitle += f'-{subscan_id}'\n\ttitle += f'_{filename}'\n\treturn title",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_output_file_name",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_output_file_name(scan_history_id, subscan_id, filename):\n\ttitle = f'#{scan_history_id}'\n\tif subscan_id:\n\t\ttitle += f'-{subscan_id}'\n\ttitle += f'_{filename}'\n\treturn title\ndef get_traceback_path(task_name, results_dir, scan_history_id=None, subscan_id=None):\n\tpath = results_dir\n\tif scan_history_id:\n\t\tpath += f'/#{scan_history_id}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_traceback_path",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_traceback_path(task_name, results_dir, scan_history_id=None, subscan_id=None):\n\tpath = results_dir\n\tif scan_history_id:\n\t\tpath += f'/#{scan_history_id}'\n\t\tif subscan_id:\n\t\t\tpath += f'-#{subscan_id}'\n\tpath += f'-{task_name}.txt'\n\treturn path\ndef fmt_traceback(exc):\n\treturn '\\n'.join(traceback.format_exception(None, exc, exc.__traceback__))",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "fmt_traceback",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def fmt_traceback(exc):\n\treturn '\\n'.join(traceback.format_exception(None, exc, exc.__traceback__))\n#--------------#\n# CLI BUILDERS #\n#--------------#\ndef _build_cmd(cmd, options, flags, sep=\" \"):\n\tfor k,v in options.items():\n\t\tif not v:\n\t\t\tcontinue\n\t\tcmd += f\" {k}{sep}{v}\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_nmap_cmd",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_nmap_cmd(\n\t\tinput_file,\n\t\tcmd=None,\n\t\thost=None,\n\t\tports=None,\n\t\toutput_file=None,\n\t\tscript=None,\n\t\tscript_args=None,\n\t\tmax_rate=None,\n\t\tservice_detection=True,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "xml2json",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def xml2json(xml):\n\twith open(xml) as xml_file:\n\t\txml_content = xml_file.read()\n\treturn xmltodict.parse(xml_content)\ndef reverse_whois(lookup_keyword):\n\tdomains = []\n\t'''\n\t\tThis function will use viewdns to fetch reverse whois info\n\t\tInput: lookup keyword like email or registrar name\n\t\tReturns a list of domains as string.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "reverse_whois",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def reverse_whois(lookup_keyword):\n\tdomains = []\n\t'''\n\t\tThis function will use viewdns to fetch reverse whois info\n\t\tInput: lookup keyword like email or registrar name\n\t\tReturns a list of domains as string.\n\t'''\n\tlogger.info(f'Querying reverse whois for {lookup_keyword}')\n\turl = f\"https://viewdns.info:443/reversewhois/?q={lookup_keyword}\"\n\theaders = {",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_domain_historical_ip_address",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_domain_historical_ip_address(domain):\n\tips = []\n\t'''\n\t\tThis function will use viewdns to fetch historical IP address\n\t\tfor a domain\n\t'''\n\tlogger.info(f'Fetching historical IP address for domain {domain}')\n\turl = f\"https://viewdns.info/iphistory/?domain={domain}\"\n\theaders = {\n\t\t\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"104\\\"\",",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_open_ai_key",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_open_ai_key():\n\topenai_key = OpenAiAPIKey.objects.all()\n\treturn openai_key[0] if openai_key else None\ndef get_netlas_key():\n\tnetlas_key = NetlasAPIKey.objects.all()\n\treturn netlas_key[0] if netlas_key else None\ndef get_chaos_key():\n\tchaos_key = ChaosAPIKey.objects.all()\n\treturn chaos_key[0] if chaos_key else None\ndef get_hackerone_key_username():",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_netlas_key",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_netlas_key():\n\tnetlas_key = NetlasAPIKey.objects.all()\n\treturn netlas_key[0] if netlas_key else None\ndef get_chaos_key():\n\tchaos_key = ChaosAPIKey.objects.all()\n\treturn chaos_key[0] if chaos_key else None\ndef get_hackerone_key_username():\n\t\"\"\"\n\t\tGet the HackerOne API key username from the database.\n\t\tReturns: a tuple of the username and api key",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_chaos_key",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_chaos_key():\n\tchaos_key = ChaosAPIKey.objects.all()\n\treturn chaos_key[0] if chaos_key else None\ndef get_hackerone_key_username():\n\t\"\"\"\n\t\tGet the HackerOne API key username from the database.\n\t\tReturns: a tuple of the username and api key\n\t\"\"\"\n\thackerone_key = HackerOneAPIKey.objects.all()\n\treturn (hackerone_key[0].username, hackerone_key[0].key) if hackerone_key else None",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_hackerone_key_username",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_hackerone_key_username():\n\t\"\"\"\n\t\tGet the HackerOne API key username from the database.\n\t\tReturns: a tuple of the username and api key\n\t\"\"\"\n\thackerone_key = HackerOneAPIKey.objects.all()\n\treturn (hackerone_key[0].username, hackerone_key[0].key) if hackerone_key else None\ndef parse_llm_vulnerability_report(report):\n\treport = report.replace('**', '')\n\tdata = {}",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "parse_llm_vulnerability_report",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def parse_llm_vulnerability_report(report):\n\treport = report.replace('**', '')\n\tdata = {}\n\tsections = re.split(r'\\n(?=(?:Description|Impact|Remediation|References):)', report.strip())\n\ttry:\n\t\tfor section in sections:\n\t\t\tif not section.strip():\n\t\t\t\tcontinue\n\t\t\tsection_title, content = re.split(r':\\n', section.strip(), maxsplit=1)\n\t\t\tif section_title == 'Description':",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "create_scan_object",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def create_scan_object(host_id, engine_id, initiated_by_id=None):\n\t'''\n\tcreate task with pending status so that celery task will execute when\n\tthreads are free\n\tArgs:\n\t\thost_id: int: id of Domain model\n\t\tengine_id: int: id of EngineType model\n\t\tinitiated_by_id: int : id of User model (Optional)\n\t'''\n\t# get current time",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_port_service_description",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_port_service_description(port):\n\t\"\"\"\n\t\tRetrieves the standard service name and description for a given port \n\t\tnumber using whatportis and the builtin socket library as fallback.\n\t\tArgs:\n\t\t\tport (int or str): The port number to look up. \n\t\t\t\tCan be an integer or a string representation of an integer.\n\t\tReturns:\n\t\t\tdict: A dictionary containing the service name and description for the port number.\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "update_or_create_port",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def update_or_create_port(port_number, service_name=None, description=None):\n\t\"\"\"\n\t\tUpdates or creates a new Port object with the provided information to \n\t\tavoid storing duplicate entries when service or description information is updated.\n\t\tArgs:\n\t\t\tport_number (int): The port number to update or create.\n\t\t\tservice_name (str, optional): The name of the service associated with the port.\n\t\t\tdescription (str, optional): A description of the service associated with the port.\n\t\tReturns:\n\t\t\tTuple: A tuple containing the Port object and a boolean indicating whether the object was created.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "exclude_urls_by_patterns",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def exclude_urls_by_patterns(exclude_paths, urls):\n\t\"\"\"\n\t\tFilter out URLs based on a list of exclusion patterns provided from user\n\t\tArgs:\n\t\t\texclude_patterns (list of str): A list of patterns to exclude. \n\t\t\tThese can be plain path or regex.\n\t\t\turls (list of str): A list of URLs to filter from.\n\t\tReturns:\n\t\t\tlist of str: A new list containing URLs that don't match any exclusion pattern.\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_domain_info_from_db",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_domain_info_from_db(target):\n\t\"\"\"\n\t\tRetrieves the Domain object from the database using the target domain name.\n\t\tArgs:\n\t\t\ttarget (str): The domain name to search for.\n\t\tReturns:\n\t\t\tDomain: The Domain object if found, otherwise None.\n\t\"\"\"\n\ttry:\n\t\tdomain = Domain.objects.get(name=target)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "extract_domain_info",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def extract_domain_info(domain):\n\t\"\"\"\n\t\tExtract domain info from the domain_info_db.\n\t\tArgs:\n\t\t\tdomain: Domain object\n\t\tReturns:\n\t\t\tDottedDict: The domain info object.\n\t\"\"\"\n\tif not domain:\n\t\treturn DottedDict()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "format_whois_response",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def format_whois_response(domain_info):\n\t\"\"\"\n\t\tFormat the domain info for the whois response.\n\t\tArgs:\n\t\t\tdomain_info (DottedDict): The domain info object.\n\t\tReturns:\n\t\t\tdict: The formatted whois response.\t\n\t\"\"\"\n\treturn {\n\t\t'status': True,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "parse_whois_data",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def parse_whois_data(domain_info, whois_data):\n\t\"\"\"Parse WHOIS data and update domain_info.\"\"\"\n\twhois = whois_data.get('whois', {})\n\tdns = whois_data.get('dns', {})\n\t# Parse basic domain information\n\tdomain_info.update({\n\t\t'created': whois.get('created_date', None),\n\t\t'expires': whois.get('expiration_date', None),\n\t\t'updated': whois.get('updated_date', None),\n\t\t'whois_server': whois.get('whois_server', None),",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "parse_registrar_info",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def parse_registrar_info(domain_info, registrar):\n\t\"\"\"Parse registrar information.\"\"\"\n\tdomain_info.update({\n\t\t'registrar_name': registrar.get('name', None),\n\t\t'registrar_email': registrar.get('email', None),\n\t\t'registrar_phone': registrar.get('phone', None),\n\t\t'registrar_url': registrar.get('url', None),\n\t})\ndef parse_registration_info(domain_info, registration, role):\n\t\"\"\"Parse registration information for registrant, admin, and tech contacts.\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "parse_registration_info",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def parse_registration_info(domain_info, registration, role):\n\t\"\"\"Parse registration information for registrant, admin, and tech contacts.\"\"\"\n\trole_prefix = role if role != 'administrative' else 'admin'\n\tdomain_info.update({\n\t\tf'{role_prefix}_{key}': value\n\t\tfor key, value in registration.items()\n\t\tif key in ['name', 'id', 'organization', 'street', 'city', 'province', 'postal_code', 'country', 'phone', 'fax']\n\t})\n\t# Handle email separately to apply regex\n\temail = registration.get('email')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "parse_dns_records",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def parse_dns_records(domain_info, dns):\n\t\"\"\"Parse DNS records.\"\"\"\n\tdomain_info.update({\n\t\t'mx_records': dns.get('mx', []),\n\t\t'txt_records': dns.get('txt', []),\n\t\t'a_records': dns.get('a', []),\n\t\t'ns_records': dns.get('ns', []),\n\t})\ndef save_domain_info_to_db(target, domain_info):\n\t\"\"\"Save domain info to the database.\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "save_domain_info_to_db",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def save_domain_info_to_db(target, domain_info):\n\t\"\"\"Save domain info to the database.\"\"\"\n\tif Domain.objects.filter(name=target).exists():\n\t\tdomain, _ = Domain.objects.get_or_create(name=target)\n\t\t# Create or update DomainInfo\n\t\tdomain_info_obj, created = DomainInfo.objects.get_or_create(domain=domain)\n\t\t# Update basic domain information\n\t\tdomain_info_obj.dnssec = domain_info.get('dnssec', False)\n\t\tdomain_info_obj.created = domain_info.get('created')\n\t\tdomain_info_obj.updated = domain_info.get('updated')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "create_inappnotification",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def create_inappnotification(\n\t\ttitle,\n\t\tdescription,\n\t\tnotification_type=SYSTEM_LEVEL_NOTIFICATION,\n\t\tproject_slug=None,\n\t\ticon=\"mdi-bell\",\n\t\tis_read=False,\n\t\tstatus='info',\n\t\tredirect_link=None,\n\t\topen_in_new_tab=False",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_ip_info",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_ip_info(ip_address):\n\tis_ipv4 = bool(validators.ipv4(ip_address))\n\tis_ipv6 = bool(validators.ipv6(ip_address))\n\tip_data = None\n\tif is_ipv4:\n\t\tip_data = ipaddress.IPv4Address(ip_address)\n\telif is_ipv6:\n\t\tip_data = ipaddress.IPv6Address(ip_address)\n\telse:\n\t\treturn None",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "get_ips_from_cidr_range",
        "kind": 2,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "def get_ips_from_cidr_range(target):\n\ttry:\n\t\treturn [str(ip) for ip in ipaddress.IPv4Network(target, False)]\n\texcept Exception as e:\n\t\tlogger.error(f'{target} is not a valid CIDR range. Skipping.')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "logger = get_task_logger(__name__)\nDISCORD_WEBHOOKS_CACHE = redis.Redis.from_url(CELERY_BROKER_URL)\n#------------------#\n# EngineType utils #\n#------------------#\ndef dump_custom_scan_engines(results_dir):\n\t\"\"\"Dump custom scan engines to YAML files.\n\tArgs:\n\t\tresults_dir (str): Results directory (will be created if non-existent).\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "DISCORD_WEBHOOKS_CACHE",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "DISCORD_WEBHOOKS_CACHE = redis.Redis.from_url(CELERY_BROKER_URL)\n#------------------#\n# EngineType utils #\n#------------------#\ndef dump_custom_scan_engines(results_dir):\n\t\"\"\"Dump custom scan engines to YAML files.\n\tArgs:\n\t\tresults_dir (str): Results directory (will be created if non-existent).\n\t\"\"\"\n\tcustom_engines = EngineType.objects.filter(default_engine=False)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcustom_engines",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcustom_engines = EngineType.objects.filter(default_engine=False)\n\tif not os.path.exists(results_dir):\n\t\tos.makedirs(results_dir, exist_ok=True)\n\tfor engine in custom_engines:\n\t\twith open(os.path.join(results_dir, f\"{engine.engine_name}.yaml\"), 'w') as f:\n\t\t\tf.write(engine.yaml_configuration)\ndef load_custom_scan_engines(results_dir):\n\t\"\"\"Load custom scan engines from YAML files. The filename without .yaml will\n\tbe used as the engine name.\n\tArgs:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tconfig_paths",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tconfig_paths = [\n\t\tf for f in os.listdir(results_dir)\n\t\tif os.path.isfile(os.path.join(results_dir, f)) and f.endswith('.yaml')\n\t]\n\tfor path in config_paths:\n\t\tengine_name = os.path.splitext(os.path.basename(path))[0]\n\t\tfull_path = os.path.join(results_dir, path)\n\t\twith open(full_path, 'r') as f:\n\t\t\tyaml_configuration = f.read()\n\t\tengine, _ = EngineType.objects.get_or_create(engine_name=engine_name)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tengine_name",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tengine_name = os.path.splitext(os.path.basename(path))[0]\n\t\tfull_path = os.path.join(results_dir, path)\n\t\twith open(full_path, 'r') as f:\n\t\t\tyaml_configuration = f.read()\n\t\tengine, _ = EngineType.objects.get_or_create(engine_name=engine_name)\n\t\tengine.yaml_configuration = yaml_configuration\n\t\tengine.save()\n#--------------------------------#\n# InterestingLookupModel queries #\n#--------------------------------#",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tfull_path",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tfull_path = os.path.join(results_dir, path)\n\t\twith open(full_path, 'r') as f:\n\t\t\tyaml_configuration = f.read()\n\t\tengine, _ = EngineType.objects.get_or_create(engine_name=engine_name)\n\t\tengine.yaml_configuration = yaml_configuration\n\t\tengine.save()\n#--------------------------------#\n# InterestingLookupModel queries #\n#--------------------------------#\ndef get_lookup_keywords():",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tyaml_configuration",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tyaml_configuration = f.read()\n\t\tengine, _ = EngineType.objects.get_or_create(engine_name=engine_name)\n\t\tengine.yaml_configuration = yaml_configuration\n\t\tengine.save()\n#--------------------------------#\n# InterestingLookupModel queries #\n#--------------------------------#\ndef get_lookup_keywords():\n\t\"\"\"Get lookup keywords from InterestingLookupModel.\n\tReturns:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tengine.yaml_configuration",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tengine.yaml_configuration = yaml_configuration\n\t\tengine.save()\n#--------------------------------#\n# InterestingLookupModel queries #\n#--------------------------------#\ndef get_lookup_keywords():\n\t\"\"\"Get lookup keywords from InterestingLookupModel.\n\tReturns:\n\t\tlist: Lookup keywords.\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlookup_model",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlookup_model = InterestingLookupModel.objects.first()\n\tlookup_obj = InterestingLookupModel.objects.filter(custom_type=True).order_by('-id').first()\n\tcustom_lookup_keywords = []\n\tdefault_lookup_keywords = []\n\tif lookup_model:\n\t\tdefault_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_model.keywords.split(',')]\n\tif lookup_obj:\n\t\tcustom_lookup_keywords = [",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlookup_obj",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlookup_obj = InterestingLookupModel.objects.filter(custom_type=True).order_by('-id').first()\n\tcustom_lookup_keywords = []\n\tdefault_lookup_keywords = []\n\tif lookup_model:\n\t\tdefault_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_model.keywords.split(',')]\n\tif lookup_obj:\n\t\tcustom_lookup_keywords = [\n\t\t\tkey.strip()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcustom_lookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcustom_lookup_keywords = []\n\tdefault_lookup_keywords = []\n\tif lookup_model:\n\t\tdefault_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_model.keywords.split(',')]\n\tif lookup_obj:\n\t\tcustom_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_obj.keywords.split(',')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdefault_lookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdefault_lookup_keywords = []\n\tif lookup_model:\n\t\tdefault_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_model.keywords.split(',')]\n\tif lookup_obj:\n\t\tcustom_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_obj.keywords.split(',')\n\t\t]",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdefault_lookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdefault_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_model.keywords.split(',')]\n\tif lookup_obj:\n\t\tcustom_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_obj.keywords.split(',')\n\t\t]\n\tlookup_keywords = default_lookup_keywords + custom_lookup_keywords\n\tlookup_keywords = list(filter(None, lookup_keywords)) # remove empty strings from list",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tcustom_lookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tcustom_lookup_keywords = [\n\t\t\tkey.strip()\n\t\t\tfor key in lookup_obj.keywords.split(',')\n\t\t]\n\tlookup_keywords = default_lookup_keywords + custom_lookup_keywords\n\tlookup_keywords = list(filter(None, lookup_keywords)) # remove empty strings from list\n\treturn lookup_keywords\n#-------------------#\n# SubDomain queries #\n#-------------------#",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlookup_keywords = default_lookup_keywords + custom_lookup_keywords\n\tlookup_keywords = list(filter(None, lookup_keywords)) # remove empty strings from list\n\treturn lookup_keywords\n#-------------------#\n# SubDomain queries #\n#-------------------#\ndef get_subdomains(write_filepath=None, exclude_subdomains=False, ctx={}):\n\t\"\"\"Get Subdomain objects from DB.\n\tArgs:\n\t\twrite_filepath (str): Write info back to a file.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlookup_keywords = list(filter(None, lookup_keywords)) # remove empty strings from list\n\treturn lookup_keywords\n#-------------------#\n# SubDomain queries #\n#-------------------#\ndef get_subdomains(write_filepath=None, exclude_subdomains=False, ctx={}):\n\t\"\"\"Get Subdomain objects from DB.\n\tArgs:\n\t\twrite_filepath (str): Write info back to a file.\n\t\texclude_subdomains (bool): Exclude subdomains, only return subdomain matching domain.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain_id",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain_id = ctx.get('domain_id')\n\tscan_id = ctx.get('scan_history_id')\n\tsubdomain_id = ctx.get('subdomain_id')\n\texclude_subdomains = ctx.get('exclude_subdomains', False)\n\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = Subdomain.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan_id",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan_id = ctx.get('scan_history_id')\n\tsubdomain_id = ctx.get('subdomain_id')\n\texclude_subdomains = ctx.get('exclude_subdomains', False)\n\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = Subdomain.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_id",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tsubdomain_id = ctx.get('subdomain_id')\n\texclude_subdomains = ctx.get('exclude_subdomains', False)\n\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = Subdomain.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\texclude_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\texclude_subdomains = ctx.get('exclude_subdomains', False)\n\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = Subdomain.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_filter",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = Subdomain.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(pk=subdomain_id)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = Subdomain.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(pk=subdomain_id)\n\telif domain and exclude_subdomains:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = Subdomain.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(pk=subdomain_id)\n\telif domain and exclude_subdomains:\n\t\tquery = query.filter(name=domain.name)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tquery = Subdomain.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(pk=subdomain_id)\n\telif domain and exclude_subdomains:\n\t\tquery = query.filter(name=domain.name)\n\tsubdomain_query = query.distinct('name').order_by('name')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(pk=subdomain_id)\n\telif domain and exclude_subdomains:\n\t\tquery = query.filter(name=domain.name)\n\tsubdomain_query = query.distinct('name').order_by('name')\n\tsubdomains = [\n\t\tsubdomain.name",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(pk=subdomain_id)\n\telif domain and exclude_subdomains:\n\t\tquery = query.filter(name=domain.name)\n\tsubdomain_query = query.distinct('name').order_by('name')\n\tsubdomains = [\n\t\tsubdomain.name\n\t\tfor subdomain in subdomain_query.all()\n\t\tif subdomain.name",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(pk=subdomain_id)\n\telif domain and exclude_subdomains:\n\t\tquery = query.filter(name=domain.name)\n\tsubdomain_query = query.distinct('name').order_by('name')\n\tsubdomains = [\n\t\tsubdomain.name\n\t\tfor subdomain in subdomain_query.all()\n\t\tif subdomain.name\n\t]\n\tif not subdomains:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(name=domain.name)\n\tsubdomain_query = query.distinct('name').order_by('name')\n\tsubdomains = [\n\t\tsubdomain.name\n\t\tfor subdomain in subdomain_query.all()\n\t\tif subdomain.name\n\t]\n\tif not subdomains:\n\t\tlogger.error('No subdomains were found in query !')\n\tif url_filter:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tsubdomain_query = query.distinct('name').order_by('name')\n\tsubdomains = [\n\t\tsubdomain.name\n\t\tfor subdomain in subdomain_query.all()\n\t\tif subdomain.name\n\t]\n\tif not subdomains:\n\t\tlogger.error('No subdomains were found in query !')\n\tif url_filter:\n\t\tsubdomains = [f'{subdomain}/{url_filter}' for subdomain in subdomains]",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tsubdomains",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tsubdomains = [\n\t\tsubdomain.name\n\t\tfor subdomain in subdomain_query.all()\n\t\tif subdomain.name\n\t]\n\tif not subdomains:\n\t\tlogger.error('No subdomains were found in query !')\n\tif url_filter:\n\t\tsubdomains = [f'{subdomain}/{url_filter}' for subdomain in subdomains]\n\tif write_filepath:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomains",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tsubdomains = [f'{subdomain}/{url_filter}' for subdomain in subdomains]\n\tif write_filepath:\n\t\twith open(write_filepath, 'w') as f:\n\t\t\tf.write('\\n'.join(subdomains))\n\treturn subdomains\ndef get_new_added_subdomain(scan_id, domain_id):\n\t\"\"\"Find domains added during the last scan.\n\tArgs:\n\t\tscan_id (int): startScan.models.ScanHistory ID.\n\t\tdomain_id (int): startScan.models.Domain ID.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan = (\n\t\tScanHistory.objects\n\t\t.filter(domain=domain_id)\n\t\t.filter(tasks__overlap=['subdomain_discovery'])\n\t\t.filter(id__lte=scan_id)\n\t)\n\tif not scan.count() > 1:\n\t\treturn\n\tlast_scan = scan.order_by('-start_scan_date')[1]\n\tscanned_host_q1 = (",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlast_scan",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlast_scan = scan.order_by('-start_scan_date')[1]\n\tscanned_host_q1 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=scan_id)\n\t\t.values('name')\n\t)\n\tscanned_host_q2 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=last_scan.id)\n\t\t.values('name')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscanned_host_q1",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscanned_host_q1 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=scan_id)\n\t\t.values('name')\n\t)\n\tscanned_host_q2 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=last_scan.id)\n\t\t.values('name')\n\t)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscanned_host_q2",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscanned_host_q2 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=last_scan.id)\n\t\t.values('name')\n\t)\n\tadded_subdomain = scanned_host_q1.difference(scanned_host_q2)\n\treturn (\n\t\tSubdomain.objects\n\t\t.filter(scan_history=scan_id)\n\t\t.filter(name__in=added_subdomain)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tadded_subdomain",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tadded_subdomain = scanned_host_q1.difference(scanned_host_q2)\n\treturn (\n\t\tSubdomain.objects\n\t\t.filter(scan_history=scan_id)\n\t\t.filter(name__in=added_subdomain)\n\t)\ndef get_removed_subdomain(scan_id, domain_id):\n\t\"\"\"Find domains removed during the last scan.\n\tArgs:\n\t\tscan_id (int): startScan.models.ScanHistory ID.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan_history = (\n\t\tScanHistory.objects\n\t\t.filter(domain=domain_id)\n\t\t.filter(tasks__overlap=['subdomain_discovery'])\n\t\t.filter(id__lte=scan_id)\n\t)\n\tif not scan_history.count() > 1:\n\t\treturn\n\tlast_scan = scan_history.order_by('-start_scan_date')[1]\n\tscanned_host_q1 = (",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlast_scan",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlast_scan = scan_history.order_by('-start_scan_date')[1]\n\tscanned_host_q1 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=scan_id)\n\t\t.values('name')\n\t)\n\tscanned_host_q2 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=last_scan.id)\n\t\t.values('name')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscanned_host_q1",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscanned_host_q1 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=scan_id)\n\t\t.values('name')\n\t)\n\tscanned_host_q2 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=last_scan.id)\n\t\t.values('name')\n\t)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscanned_host_q2",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscanned_host_q2 = (\n\t\tSubdomain.objects\n\t\t.filter(scan_history__id=last_scan.id)\n\t\t.values('name')\n\t)\n\tremoved_subdomains = scanned_host_q2.difference(scanned_host_q1)\n\treturn (\n\t\tSubdomain.objects\n\t\t.filter(scan_history=last_scan)\n\t\t.filter(name__in=removed_subdomains)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tremoved_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tremoved_subdomains = scanned_host_q2.difference(scanned_host_q1)\n\treturn (\n\t\tSubdomain.objects\n\t\t.filter(scan_history=last_scan)\n\t\t.filter(name__in=removed_subdomains)\n\t)\ndef get_interesting_subdomains(scan_history=None, domain_id=None):\n\t\"\"\"Get Subdomain objects matching InterestingLookupModel conditions.\n\tArgs:\n\t\tscan_history (startScan.models.ScanHistory, optional): Scan history.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlookup_keywords = get_lookup_keywords()\n\tlookup_obj = (\n\t\tInterestingLookupModel.objects\n\t\t.filter(custom_type=True)\n\t\t.order_by('-id').first())\n\tif not lookup_obj:\n\t\treturn Subdomain.objects.none()\n\turl_lookup = lookup_obj.url_lookup\n\ttitle_lookup = lookup_obj.title_lookup\n\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlookup_obj",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlookup_obj = (\n\t\tInterestingLookupModel.objects\n\t\t.filter(custom_type=True)\n\t\t.order_by('-id').first())\n\tif not lookup_obj:\n\t\treturn Subdomain.objects.none()\n\turl_lookup = lookup_obj.url_lookup\n\ttitle_lookup = lookup_obj.title_lookup\n\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_lookup",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_lookup = lookup_obj.url_lookup\n\ttitle_lookup = lookup_obj.title_lookup\n\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id\n\tquery = Subdomain.objects\n\tif domain_id:\n\t\tquery = query.filter(target_domain__id=domain_id)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttitle_lookup",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttitle_lookup = lookup_obj.title_lookup\n\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id\n\tquery = Subdomain.objects\n\tif domain_id:\n\t\tquery = query.filter(target_domain__id=domain_id)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcondition_200_http_lookup",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id\n\tquery = Subdomain.objects\n\tif domain_id:\n\t\tquery = query.filter(target_domain__id=domain_id)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:\n\t\tquery = query.filter(http_status__exact=200)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tquery = Subdomain.objects\n\tif domain_id:\n\t\tquery = query.filter(target_domain__id=domain_id)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:\n\t\tquery = query.filter(http_status__exact=200)\n\t# Build subdomain lookup / page title lookup queries\n\turl_lookup_query = Q()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(target_domain__id=domain_id)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:\n\t\tquery = query.filter(http_status__exact=200)\n\t# Build subdomain lookup / page title lookup queries\n\turl_lookup_query = Q()\n\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:\n\t\tquery = query.filter(http_status__exact=200)\n\t# Build subdomain lookup / page title lookup queries\n\turl_lookup_query = Q()\n\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:\n\t\tif url_lookup:\n\t\t\turl_lookup_query |= Q(name__icontains=key)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(http_status__exact=200)\n\t# Build subdomain lookup / page title lookup queries\n\turl_lookup_query = Q()\n\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:\n\t\tif url_lookup:\n\t\t\turl_lookup_query |= Q(name__icontains=key)\n\t\tif title_lookup:\n\t\t\ttitle_lookup_query |= Q(page_title__iregex=f\"\\\\y{key}\\\\y\")\n\t# Filter on url / title queries",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_lookup_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_lookup_query = Q()\n\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:\n\t\tif url_lookup:\n\t\t\turl_lookup_query |= Q(name__icontains=key)\n\t\tif title_lookup:\n\t\t\ttitle_lookup_query |= Q(page_title__iregex=f\"\\\\y{key}\\\\y\")\n\t# Filter on url / title queries\n\turl_lookup_query = query.filter(url_lookup_query)\n\ttitle_lookup_query = query.filter(title_lookup_query)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttitle_lookup_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:\n\t\tif url_lookup:\n\t\t\turl_lookup_query |= Q(name__icontains=key)\n\t\tif title_lookup:\n\t\t\ttitle_lookup_query |= Q(page_title__iregex=f\"\\\\y{key}\\\\y\")\n\t# Filter on url / title queries\n\turl_lookup_query = query.filter(url_lookup_query)\n\ttitle_lookup_query = query.filter(title_lookup_query)\n\t# Return OR query",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_lookup_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_lookup_query = query.filter(url_lookup_query)\n\ttitle_lookup_query = query.filter(title_lookup_query)\n\t# Return OR query\n\treturn url_lookup_query | title_lookup_query\n#------------------#\n# EndPoint queries #\n#------------------#\ndef get_http_urls(\n\t\tis_alive=False,\n\t\tis_uncrawled=False,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttitle_lookup_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttitle_lookup_query = query.filter(title_lookup_query)\n\t# Return OR query\n\treturn url_lookup_query | title_lookup_query\n#------------------#\n# EndPoint queries #\n#------------------#\ndef get_http_urls(\n\t\tis_alive=False,\n\t\tis_uncrawled=False,\n\t\tstrict=False,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain_id",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain_id = ctx.get('domain_id')\n\tscan_id = ctx.get('scan_history_id')\n\tsubdomain_id = ctx.get('subdomain_id')\n\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = EndPoint.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan_id",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan_id = ctx.get('scan_history_id')\n\tsubdomain_id = ctx.get('subdomain_id')\n\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = EndPoint.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_id",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tsubdomain_id = ctx.get('subdomain_id')\n\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = EndPoint.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_filter",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_filter = ctx.get('url_filter', '')\n\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = EndPoint.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(subdomain__id=subdomain_id)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain = Domain.objects.filter(pk=domain_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = EndPoint.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(subdomain__id=subdomain_id)\n\telif exclude_subdomains and domain:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tquery = EndPoint.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(subdomain__id=subdomain_id)\n\telif exclude_subdomains and domain:\n\t\tquery = query.filter(http_url=domain.http_url)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tquery = EndPoint.objects\n\tif domain:\n\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(subdomain__id=subdomain_id)\n\telif exclude_subdomains and domain:\n\t\tquery = query.filter(http_url=domain.http_url)\n\tif get_only_default_urls:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(target_domain=domain)\n\tif scan:\n\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(subdomain__id=subdomain_id)\n\telif exclude_subdomains and domain:\n\t\tquery = query.filter(http_url=domain.http_url)\n\tif get_only_default_urls:\n\t\tquery = query.filter(is_default=True)\n\t# If is_uncrawled is True, select only endpoints that have not been crawled",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(scan_history=scan)\n\tif subdomain_id:\n\t\tquery = query.filter(subdomain__id=subdomain_id)\n\telif exclude_subdomains and domain:\n\t\tquery = query.filter(http_url=domain.http_url)\n\tif get_only_default_urls:\n\t\tquery = query.filter(is_default=True)\n\t# If is_uncrawled is True, select only endpoints that have not been crawled\n\t# yet (no status)\n\tif is_uncrawled:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(subdomain__id=subdomain_id)\n\telif exclude_subdomains and domain:\n\t\tquery = query.filter(http_url=domain.http_url)\n\tif get_only_default_urls:\n\t\tquery = query.filter(is_default=True)\n\t# If is_uncrawled is True, select only endpoints that have not been crawled\n\t# yet (no status)\n\tif is_uncrawled:\n\t\tquery = query.filter(http_status__isnull=True)\n\t# If a path is passed, select only endpoints that contains it",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(http_url=domain.http_url)\n\tif get_only_default_urls:\n\t\tquery = query.filter(is_default=True)\n\t# If is_uncrawled is True, select only endpoints that have not been crawled\n\t# yet (no status)\n\tif is_uncrawled:\n\t\tquery = query.filter(http_status__isnull=True)\n\t# If a path is passed, select only endpoints that contains it\n\tif url_filter and domain:\n\t\turl = f'{domain.name}{url_filter}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(is_default=True)\n\t# If is_uncrawled is True, select only endpoints that have not been crawled\n\t# yet (no status)\n\tif is_uncrawled:\n\t\tquery = query.filter(http_status__isnull=True)\n\t# If a path is passed, select only endpoints that contains it\n\tif url_filter and domain:\n\t\turl = f'{domain.name}{url_filter}'\n\t\tif strict:\n\t\t\tquery = query.filter(http_url=url)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(http_status__isnull=True)\n\t# If a path is passed, select only endpoints that contains it\n\tif url_filter and domain:\n\t\turl = f'{domain.name}{url_filter}'\n\t\tif strict:\n\t\t\tquery = query.filter(http_url=url)\n\t\telse:\n\t\t\tquery = query.filter(http_url__contains=url)\n\t# Select distinct endpoints and order\n\tendpoints = query.distinct('http_url').order_by('http_url').all()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\turl = f'{domain.name}{url_filter}'\n\t\tif strict:\n\t\t\tquery = query.filter(http_url=url)\n\t\telse:\n\t\t\tquery = query.filter(http_url__contains=url)\n\t# Select distinct endpoints and order\n\tendpoints = query.distinct('http_url').order_by('http_url').all()\n\t# If is_alive is True, select only endpoints that are alive\n\tif is_alive:\n\t\tendpoints = [e for e in endpoints if e.is_alive]",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tquery = query.filter(http_url=url)\n\t\telse:\n\t\t\tquery = query.filter(http_url__contains=url)\n\t# Select distinct endpoints and order\n\tendpoints = query.distinct('http_url').order_by('http_url').all()\n\t# If is_alive is True, select only endpoints that are alive\n\tif is_alive:\n\t\tendpoints = [e for e in endpoints if e.is_alive]\n\t# Grab only http_url from endpoint objects\n\tendpoints = [e.http_url for e in endpoints if is_valid_url(e.http_url)]",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tquery = query.filter(http_url__contains=url)\n\t# Select distinct endpoints and order\n\tendpoints = query.distinct('http_url').order_by('http_url').all()\n\t# If is_alive is True, select only endpoints that are alive\n\tif is_alive:\n\t\tendpoints = [e for e in endpoints if e.is_alive]\n\t# Grab only http_url from endpoint objects\n\tendpoints = [e.http_url for e in endpoints if is_valid_url(e.http_url)]\n\tif ignore_files: # ignore all files\n\t\textensions_path = f'{RENGINE_HOME}/fixtures/extensions.txt'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tendpoints = query.distinct('http_url').order_by('http_url').all()\n\t# If is_alive is True, select only endpoints that are alive\n\tif is_alive:\n\t\tendpoints = [e for e in endpoints if e.is_alive]\n\t# Grab only http_url from endpoint objects\n\tendpoints = [e.http_url for e in endpoints if is_valid_url(e.http_url)]\n\tif ignore_files: # ignore all files\n\t\textensions_path = f'{RENGINE_HOME}/fixtures/extensions.txt'\n\t\twith open(extensions_path, 'r') as f:\n\t\t\textensions = tuple(f.strip() for f in f.readlines())",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tendpoints = [e for e in endpoints if e.is_alive]\n\t# Grab only http_url from endpoint objects\n\tendpoints = [e.http_url for e in endpoints if is_valid_url(e.http_url)]\n\tif ignore_files: # ignore all files\n\t\textensions_path = f'{RENGINE_HOME}/fixtures/extensions.txt'\n\t\twith open(extensions_path, 'r') as f:\n\t\t\textensions = tuple(f.strip() for f in f.readlines())\n\t\tendpoints = [e for e in endpoints if not urlparse(e).path.endswith(extensions)]\n\tif not endpoints:\n\t\tlogger.error(f'No endpoints were found in query !')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tendpoints = [e.http_url for e in endpoints if is_valid_url(e.http_url)]\n\tif ignore_files: # ignore all files\n\t\textensions_path = f'{RENGINE_HOME}/fixtures/extensions.txt'\n\t\twith open(extensions_path, 'r') as f:\n\t\t\textensions = tuple(f.strip() for f in f.readlines())\n\t\tendpoints = [e for e in endpoints if not urlparse(e).path.endswith(extensions)]\n\tif not endpoints:\n\t\tlogger.error(f'No endpoints were found in query !')\n\tif write_filepath:\n\t\twith open(write_filepath, 'w') as f:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\textensions_path",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\textensions_path = f'{RENGINE_HOME}/fixtures/extensions.txt'\n\t\twith open(extensions_path, 'r') as f:\n\t\t\textensions = tuple(f.strip() for f in f.readlines())\n\t\tendpoints = [e for e in endpoints if not urlparse(e).path.endswith(extensions)]\n\tif not endpoints:\n\t\tlogger.error(f'No endpoints were found in query !')\n\tif write_filepath:\n\t\twith open(write_filepath, 'w') as f:\n\t\t\tf.write('\\n'.join(endpoints))\n\treturn endpoints",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\textensions",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\textensions = tuple(f.strip() for f in f.readlines())\n\t\tendpoints = [e for e in endpoints if not urlparse(e).path.endswith(extensions)]\n\tif not endpoints:\n\t\tlogger.error(f'No endpoints were found in query !')\n\tif write_filepath:\n\t\twith open(write_filepath, 'w') as f:\n\t\t\tf.write('\\n'.join(endpoints))\n\treturn endpoints\ndef get_interesting_endpoints(scan_history=None, target=None):\n\t\"\"\"Get EndPoint objects matching InterestingLookupModel conditions.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tendpoints = [e for e in endpoints if not urlparse(e).path.endswith(extensions)]\n\tif not endpoints:\n\t\tlogger.error(f'No endpoints were found in query !')\n\tif write_filepath:\n\t\twith open(write_filepath, 'w') as f:\n\t\t\tf.write('\\n'.join(endpoints))\n\treturn endpoints\ndef get_interesting_endpoints(scan_history=None, target=None):\n\t\"\"\"Get EndPoint objects matching InterestingLookupModel conditions.\n\tArgs:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlookup_keywords = get_lookup_keywords()\n\tlookup_obj = InterestingLookupModel.objects.filter(custom_type=True).order_by('-id').first()\n\tif not lookup_obj:\n\t\treturn EndPoint.objects.none()\n\turl_lookup = lookup_obj.url_lookup\n\ttitle_lookup = lookup_obj.title_lookup\n\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id\n\tquery = EndPoint.objects\n\tif target:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tlookup_obj",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tlookup_obj = InterestingLookupModel.objects.filter(custom_type=True).order_by('-id').first()\n\tif not lookup_obj:\n\t\treturn EndPoint.objects.none()\n\turl_lookup = lookup_obj.url_lookup\n\ttitle_lookup = lookup_obj.title_lookup\n\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id\n\tquery = EndPoint.objects\n\tif target:\n\t\tquery = query.filter(target_domain__id=target)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_lookup",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_lookup = lookup_obj.url_lookup\n\ttitle_lookup = lookup_obj.title_lookup\n\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id\n\tquery = EndPoint.objects\n\tif target:\n\t\tquery = query.filter(target_domain__id=target)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttitle_lookup",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttitle_lookup = lookup_obj.title_lookup\n\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id\n\tquery = EndPoint.objects\n\tif target:\n\t\tquery = query.filter(target_domain__id=target)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcondition_200_http_lookup",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcondition_200_http_lookup = lookup_obj.condition_200_http_lookup\n\t# Filter on domain_id, scan_history_id\n\tquery = EndPoint.objects\n\tif target:\n\t\tquery = query.filter(target_domain__id=target)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:\n\t\tquery = query.filter(http_status__exact=200)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tquery = EndPoint.objects\n\tif target:\n\t\tquery = query.filter(target_domain__id=target)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:\n\t\tquery = query.filter(http_status__exact=200)\n\t# Build subdomain lookup / page title lookup queries\n\turl_lookup_query = Q()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(target_domain__id=target)\n\telif scan_history:\n\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:\n\t\tquery = query.filter(http_status__exact=200)\n\t# Build subdomain lookup / page title lookup queries\n\turl_lookup_query = Q()\n\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(scan_history__id=scan_history)\n\t# Filter on HTTP status code 200\n\tif condition_200_http_lookup:\n\t\tquery = query.filter(http_status__exact=200)\n\t# Build subdomain lookup / page title lookup queries\n\turl_lookup_query = Q()\n\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:\n\t\tif url_lookup:\n\t\t\turl_lookup_query |= Q(http_url__icontains=key)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tquery",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tquery = query.filter(http_status__exact=200)\n\t# Build subdomain lookup / page title lookup queries\n\turl_lookup_query = Q()\n\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:\n\t\tif url_lookup:\n\t\t\turl_lookup_query |= Q(http_url__icontains=key)\n\t\tif title_lookup:\n\t\t\ttitle_lookup_query |= Q(page_title__iregex=f\"\\\\y{key}\\\\y\")\n\t# Filter on url / title queries",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_lookup_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_lookup_query = Q()\n\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:\n\t\tif url_lookup:\n\t\t\turl_lookup_query |= Q(http_url__icontains=key)\n\t\tif title_lookup:\n\t\t\ttitle_lookup_query |= Q(page_title__iregex=f\"\\\\y{key}\\\\y\")\n\t# Filter on url / title queries\n\turl_lookup_query = query.filter(url_lookup_query)\n\ttitle_lookup_query = query.filter(title_lookup_query)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttitle_lookup_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttitle_lookup_query = Q()\n\tfor key in lookup_keywords:\n\t\tif url_lookup:\n\t\t\turl_lookup_query |= Q(http_url__icontains=key)\n\t\tif title_lookup:\n\t\t\ttitle_lookup_query |= Q(page_title__iregex=f\"\\\\y{key}\\\\y\")\n\t# Filter on url / title queries\n\turl_lookup_query = query.filter(url_lookup_query)\n\ttitle_lookup_query = query.filter(title_lookup_query)\n\t# Return OR query",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_lookup_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_lookup_query = query.filter(url_lookup_query)\n\ttitle_lookup_query = query.filter(title_lookup_query)\n\t# Return OR query\n\treturn url_lookup_query | title_lookup_query\n#-----------#\n# URL utils #\n#-----------#\ndef get_subdomain_from_url(url):\n\t\"\"\"Get subdomain from HTTP URL.\n\tArgs:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttitle_lookup_query",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttitle_lookup_query = query.filter(title_lookup_query)\n\t# Return OR query\n\treturn url_lookup_query | title_lookup_query\n#-----------#\n# URL utils #\n#-----------#\ndef get_subdomain_from_url(url):\n\t\"\"\"Get subdomain from HTTP URL.\n\tArgs:\n\t\turl (str): HTTP URL.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\turl = \"http://\" + url\n\turl_obj = urlparse(url.strip())\n\treturn url_obj.netloc.split(':')[0]\ndef get_domain_from_subdomain(subdomain):\n\t\"\"\"Get domain from subdomain.\n\tArgs:\n\t\tsubdomain (str): Subdomain name.\n\tReturns:\n\t\tstr: Domain name.\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl_obj",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl_obj = urlparse(url.strip())\n\treturn url_obj.netloc.split(':')[0]\ndef get_domain_from_subdomain(subdomain):\n\t\"\"\"Get domain from subdomain.\n\tArgs:\n\t\tsubdomain (str): Subdomain name.\n\tReturns:\n\t\tstr: Domain name.\n\t\"\"\"\n\t# ext = tldextract.extract(subdomain)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\textracted",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\textracted = tldextract.extract(subdomain)\n\t# if tldextract recognized the tld then its the final result\n\tif extracted.suffix:\n\t\tdomain = f\"{extracted.domain}.{extracted.suffix}\"\n\telse:\n\t\t# Fallback method for unknown TLDs, like .clouds or .local etc\n\t\tparts = subdomain.split('.')\n\t\tif len(parts) >= 2:\n\t\t\tdomain = '.'.join(parts[-2:])\n\t\telse:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain = f\"{extracted.domain}.{extracted.suffix}\"\n\telse:\n\t\t# Fallback method for unknown TLDs, like .clouds or .local etc\n\t\tparts = subdomain.split('.')\n\t\tif len(parts) >= 2:\n\t\t\tdomain = '.'.join(parts[-2:])\n\t\telse:\n\t\t\treturn None\n\t# Validate the domain before returning\n\treturn domain if validators.domain(domain) else None",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tparts",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tparts = subdomain.split('.')\n\t\tif len(parts) >= 2:\n\t\t\tdomain = '.'.join(parts[-2:])\n\t\telse:\n\t\t\treturn None\n\t# Validate the domain before returning\n\treturn domain if validators.domain(domain) else None\ndef sanitize_url(http_url):\n\t\"\"\"Removes HTTP ports 80 and 443 from HTTP URL because it's ugly.\n\tArgs:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tdomain = '.'.join(parts[-2:])\n\t\telse:\n\t\t\treturn None\n\t# Validate the domain before returning\n\treturn domain if validators.domain(domain) else None\ndef sanitize_url(http_url):\n\t\"\"\"Removes HTTP ports 80 and 443 from HTTP URL because it's ugly.\n\tArgs:\n\t\thttp_url (str): Input HTTP URL.\n\tReturns:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\thttp_url = \"http://\" + http_url\n\turl = urlparse(http_url)\n\tif url.netloc.endswith(':80'):\n\t\turl = url._replace(netloc=url.netloc.replace(':80', ''))\n\telif url.netloc.endswith(':443'):\n\t\turl = url._replace(scheme=url.scheme.replace('http', 'https'))\n\t\turl = url._replace(netloc=url.netloc.replace(':443', ''))\n\treturn url.geturl().rstrip('/')\ndef extract_path_from_url(url):\n\tparsed_url = urlparse(url)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl = urlparse(http_url)\n\tif url.netloc.endswith(':80'):\n\t\turl = url._replace(netloc=url.netloc.replace(':80', ''))\n\telif url.netloc.endswith(':443'):\n\t\turl = url._replace(scheme=url.scheme.replace('http', 'https'))\n\t\turl = url._replace(netloc=url.netloc.replace(':443', ''))\n\treturn url.geturl().rstrip('/')\ndef extract_path_from_url(url):\n\tparsed_url = urlparse(url)\n\t# Reconstruct the URL without scheme and netloc",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\turl = url._replace(netloc=url.netloc.replace(':80', ''))\n\telif url.netloc.endswith(':443'):\n\t\turl = url._replace(scheme=url.scheme.replace('http', 'https'))\n\t\turl = url._replace(netloc=url.netloc.replace(':443', ''))\n\treturn url.geturl().rstrip('/')\ndef extract_path_from_url(url):\n\tparsed_url = urlparse(url)\n\t# Reconstruct the URL without scheme and netloc\n\treconstructed_url = parsed_url.path\n\tif reconstructed_url.startswith('/'):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\turl = url._replace(scheme=url.scheme.replace('http', 'https'))\n\t\turl = url._replace(netloc=url.netloc.replace(':443', ''))\n\treturn url.geturl().rstrip('/')\ndef extract_path_from_url(url):\n\tparsed_url = urlparse(url)\n\t# Reconstruct the URL without scheme and netloc\n\treconstructed_url = parsed_url.path\n\tif reconstructed_url.startswith('/'):\n\t\treconstructed_url = reconstructed_url[1:]  # Remove the first slash\n\tif parsed_url.params:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\turl = url._replace(netloc=url.netloc.replace(':443', ''))\n\treturn url.geturl().rstrip('/')\ndef extract_path_from_url(url):\n\tparsed_url = urlparse(url)\n\t# Reconstruct the URL without scheme and netloc\n\treconstructed_url = parsed_url.path\n\tif reconstructed_url.startswith('/'):\n\t\treconstructed_url = reconstructed_url[1:]  # Remove the first slash\n\tif parsed_url.params:\n\t\treconstructed_url += ';' + parsed_url.params",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tparsed_url",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tparsed_url = urlparse(url)\n\t# Reconstruct the URL without scheme and netloc\n\treconstructed_url = parsed_url.path\n\tif reconstructed_url.startswith('/'):\n\t\treconstructed_url = reconstructed_url[1:]  # Remove the first slash\n\tif parsed_url.params:\n\t\treconstructed_url += ';' + parsed_url.params\n\tif parsed_url.query:\n\t\treconstructed_url += '?' + parsed_url.query\n\tif parsed_url.fragment:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\treconstructed_url",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\treconstructed_url = parsed_url.path\n\tif reconstructed_url.startswith('/'):\n\t\treconstructed_url = reconstructed_url[1:]  # Remove the first slash\n\tif parsed_url.params:\n\t\treconstructed_url += ';' + parsed_url.params\n\tif parsed_url.query:\n\t\treconstructed_url += '?' + parsed_url.query\n\tif parsed_url.fragment:\n\t\treconstructed_url += '#' + parsed_url.fragment\n\treturn reconstructed_url",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\treconstructed_url",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\treconstructed_url = reconstructed_url[1:]  # Remove the first slash\n\tif parsed_url.params:\n\t\treconstructed_url += ';' + parsed_url.params\n\tif parsed_url.query:\n\t\treconstructed_url += '?' + parsed_url.query\n\tif parsed_url.fragment:\n\t\treconstructed_url += '#' + parsed_url.fragment\n\treturn reconstructed_url\n#-------#\n# Utils #",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tproxy = Proxy.objects.first()\n\tif not proxy.use_proxy:\n\t\treturn ''\n\tproxy_name = random.choice(proxy.proxies.splitlines())\n\tlogger.warning('Using proxy: ' + proxy_name)\n\t# os.environ['HTTP_PROXY'] = proxy_name\n\t# os.environ['HTTPS_PROXY'] = proxy_name\n\treturn proxy_name\ndef remove_ansi_escape_sequences(text):\n\t# Regular expression to match ANSI escape sequences",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tproxy_name",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tproxy_name = random.choice(proxy.proxies.splitlines())\n\tlogger.warning('Using proxy: ' + proxy_name)\n\t# os.environ['HTTP_PROXY'] = proxy_name\n\t# os.environ['HTTPS_PROXY'] = proxy_name\n\treturn proxy_name\ndef remove_ansi_escape_sequences(text):\n\t# Regular expression to match ANSI escape sequences\n\tansi_escape_pattern = r'\\x1b\\[.*?m'\n\t# Use re.sub() to replace the ANSI escape sequences with an empty string\n\tplain_text = re.sub(ansi_escape_pattern, '', text)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tansi_escape_pattern",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tansi_escape_pattern = r'\\x1b\\[.*?m'\n\t# Use re.sub() to replace the ANSI escape sequences with an empty string\n\tplain_text = re.sub(ansi_escape_pattern, '', text)\n\treturn plain_text\ndef get_cms_details(url):\n\t\"\"\"Get CMS details using cmseek.py.\n\tArgs:\n\t\turl (str): HTTP URL.\n\tReturns:\n\t\tdict: Response.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tplain_text",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tplain_text = re.sub(ansi_escape_pattern, '', text)\n\treturn plain_text\ndef get_cms_details(url):\n\t\"\"\"Get CMS details using cmseek.py.\n\tArgs:\n\t\turl (str): HTTP URL.\n\tReturns:\n\t\tdict: Response.\n\t\"\"\"\n\t# this function will fetch cms details using cms_detector",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tresponse = {}\n\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py --random-agent --batch --follow-redirect -u {url}'\n\tos.system(cms_detector_command)\n\tresponse['status'] = False\n\tresponse['message'] = 'Could not detect CMS!'\n\tparsed_url = urlparse(url)\n\tdomain_name = parsed_url.hostname\n\tport = parsed_url.port\n\tfind_dir = domain_name\n\tif port:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcms_detector_command",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcms_detector_command = f'python3 /usr/src/github/CMSeeK/cmseek.py --random-agent --batch --follow-redirect -u {url}'\n\tos.system(cms_detector_command)\n\tresponse['status'] = False\n\tresponse['message'] = 'Could not detect CMS!'\n\tparsed_url = urlparse(url)\n\tdomain_name = parsed_url.hostname\n\tport = parsed_url.port\n\tfind_dir = domain_name\n\tif port:\n\t\tfind_dir += f'_{port}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tresponse['status']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tresponse['status'] = False\n\tresponse['message'] = 'Could not detect CMS!'\n\tparsed_url = urlparse(url)\n\tdomain_name = parsed_url.hostname\n\tport = parsed_url.port\n\tfind_dir = domain_name\n\tif port:\n\t\tfind_dir += f'_{port}'\n\t# subdomain may also have port number, and is stored in dir as _port\n\tcms_dir_path =  f'/usr/src/github/CMSeeK/Result/{find_dir}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tresponse['message']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tresponse['message'] = 'Could not detect CMS!'\n\tparsed_url = urlparse(url)\n\tdomain_name = parsed_url.hostname\n\tport = parsed_url.port\n\tfind_dir = domain_name\n\tif port:\n\t\tfind_dir += f'_{port}'\n\t# subdomain may also have port number, and is stored in dir as _port\n\tcms_dir_path =  f'/usr/src/github/CMSeeK/Result/{find_dir}'\n\tcms_json_path =  cms_dir_path + '/cms.json'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tparsed_url",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tparsed_url = urlparse(url)\n\tdomain_name = parsed_url.hostname\n\tport = parsed_url.port\n\tfind_dir = domain_name\n\tif port:\n\t\tfind_dir += f'_{port}'\n\t# subdomain may also have port number, and is stored in dir as _port\n\tcms_dir_path =  f'/usr/src/github/CMSeeK/Result/{find_dir}'\n\tcms_json_path =  cms_dir_path + '/cms.json'\n\tif os.path.isfile(cms_json_path):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain_name = parsed_url.hostname\n\tport = parsed_url.port\n\tfind_dir = domain_name\n\tif port:\n\t\tfind_dir += f'_{port}'\n\t# subdomain may also have port number, and is stored in dir as _port\n\tcms_dir_path =  f'/usr/src/github/CMSeeK/Result/{find_dir}'\n\tcms_json_path =  cms_dir_path + '/cms.json'\n\tif os.path.isfile(cms_json_path):\n\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tport",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tport = parsed_url.port\n\tfind_dir = domain_name\n\tif port:\n\t\tfind_dir += f'_{port}'\n\t# subdomain may also have port number, and is stored in dir as _port\n\tcms_dir_path =  f'/usr/src/github/CMSeeK/Result/{find_dir}'\n\tcms_json_path =  cms_dir_path + '/cms.json'\n\tif os.path.isfile(cms_json_path):\n\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\tif not cms_file_content.get('cms_id'):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tfind_dir",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tfind_dir = domain_name\n\tif port:\n\t\tfind_dir += f'_{port}'\n\t# subdomain may also have port number, and is stored in dir as _port\n\tcms_dir_path =  f'/usr/src/github/CMSeeK/Result/{find_dir}'\n\tcms_json_path =  cms_dir_path + '/cms.json'\n\tif os.path.isfile(cms_json_path):\n\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\tif not cms_file_content.get('cms_id'):\n\t\t\treturn response",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcms_dir_path",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcms_dir_path =  f'/usr/src/github/CMSeeK/Result/{find_dir}'\n\tcms_json_path =  cms_dir_path + '/cms.json'\n\tif os.path.isfile(cms_json_path):\n\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\tif not cms_file_content.get('cms_id'):\n\t\t\treturn response\n\t\tresponse = {}\n\t\tresponse = cms_file_content\n\t\tresponse['status'] = True\n\t\t# remove cms dir path",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcms_json_path",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcms_json_path =  cms_dir_path + '/cms.json'\n\tif os.path.isfile(cms_json_path):\n\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\tif not cms_file_content.get('cms_id'):\n\t\t\treturn response\n\t\tresponse = {}\n\t\tresponse = cms_file_content\n\t\tresponse['status'] = True\n\t\t# remove cms dir path\n\t\ttry:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tcms_file_content",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tcms_file_content = json.loads(open(cms_json_path, 'r').read())\n\t\tif not cms_file_content.get('cms_id'):\n\t\t\treturn response\n\t\tresponse = {}\n\t\tresponse = cms_file_content\n\t\tresponse['status'] = True\n\t\t# remove cms dir path\n\t\ttry:\n\t\t\tshutil.rmtree(cms_dir_path)\n\t\texcept Exception as e:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tresponse = {}\n\t\tresponse = cms_file_content\n\t\tresponse['status'] = True\n\t\t# remove cms dir path\n\t\ttry:\n\t\t\tshutil.rmtree(cms_dir_path)\n\t\texcept Exception as e:\n\t\t\tlogger.error(e)\n\treturn response\n#--------------------#",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tresponse = cms_file_content\n\t\tresponse['status'] = True\n\t\t# remove cms dir path\n\t\ttry:\n\t\t\tshutil.rmtree(cms_dir_path)\n\t\texcept Exception as e:\n\t\t\tlogger.error(e)\n\treturn response\n#--------------------#\n# NOTIFICATION UTILS #",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tresponse['status']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tresponse['status'] = True\n\t\t# remove cms dir path\n\t\ttry:\n\t\t\tshutil.rmtree(cms_dir_path)\n\t\texcept Exception as e:\n\t\t\tlogger.error(e)\n\treturn response\n#--------------------#\n# NOTIFICATION UTILS #\n#--------------------#",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_telegram and\n\t\tnotif.telegram_bot_token and\n\t\tnotif.telegram_bot_chat_id)\n\tif not do_send:\n\t\treturn\n\ttelegram_bot_token = notif.telegram_bot_token\n\ttelegram_bot_chat_id = notif.telegram_bot_chat_id",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdo_send",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_telegram and\n\t\tnotif.telegram_bot_token and\n\t\tnotif.telegram_bot_chat_id)\n\tif not do_send:\n\t\treturn\n\ttelegram_bot_token = notif.telegram_bot_token\n\ttelegram_bot_chat_id = notif.telegram_bot_chat_id\n\tsend_url = f'https://api.telegram.org/bot{telegram_bot_token}/sendMessage?chat_id={telegram_bot_chat_id}&parse_mode=Markdown&text={message}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttelegram_bot_token",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttelegram_bot_token = notif.telegram_bot_token\n\ttelegram_bot_chat_id = notif.telegram_bot_chat_id\n\tsend_url = f'https://api.telegram.org/bot{telegram_bot_token}/sendMessage?chat_id={telegram_bot_chat_id}&parse_mode=Markdown&text={message}'\n\trequests.get(send_url)\ndef send_slack_message(message):\n\t\"\"\"Send Slack message.\n\tArgs:\n\t\tmessage (str): Message.\n\t\"\"\"\n\theaders = {'content-type': 'application/json'}",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttelegram_bot_chat_id",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttelegram_bot_chat_id = notif.telegram_bot_chat_id\n\tsend_url = f'https://api.telegram.org/bot{telegram_bot_token}/sendMessage?chat_id={telegram_bot_chat_id}&parse_mode=Markdown&text={message}'\n\trequests.get(send_url)\ndef send_slack_message(message):\n\t\"\"\"Send Slack message.\n\tArgs:\n\t\tmessage (str): Message.\n\t\"\"\"\n\theaders = {'content-type': 'application/json'}\n\tmessage = {'text': message}",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tsend_url",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tsend_url = f'https://api.telegram.org/bot{telegram_bot_token}/sendMessage?chat_id={telegram_bot_chat_id}&parse_mode=Markdown&text={message}'\n\trequests.get(send_url)\ndef send_slack_message(message):\n\t\"\"\"Send Slack message.\n\tArgs:\n\t\tmessage (str): Message.\n\t\"\"\"\n\theaders = {'content-type': 'application/json'}\n\tmessage = {'text': message}\n\tnotif = Notification.objects.first()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\theaders",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\theaders = {'content-type': 'application/json'}\n\tmessage = {'text': message}\n\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_slack and\n\t\tnotif.slack_hook_url)\n\tif not do_send:\n\t\treturn\n\thook_url = notif.slack_hook_url",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tmessage",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tmessage = {'text': message}\n\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_slack and\n\t\tnotif.slack_hook_url)\n\tif not do_send:\n\t\treturn\n\thook_url = notif.slack_hook_url\n\trequests.post(url=hook_url, data=json.dumps(message), headers=headers)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_slack and\n\t\tnotif.slack_hook_url)\n\tif not do_send:\n\t\treturn\n\thook_url = notif.slack_hook_url\n\trequests.post(url=hook_url, data=json.dumps(message), headers=headers)\ndef send_lark_message(message):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdo_send",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_slack and\n\t\tnotif.slack_hook_url)\n\tif not do_send:\n\t\treturn\n\thook_url = notif.slack_hook_url\n\trequests.post(url=hook_url, data=json.dumps(message), headers=headers)\ndef send_lark_message(message):\n\t\"\"\"Send lark message.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\thook_url",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\thook_url = notif.slack_hook_url\n\trequests.post(url=hook_url, data=json.dumps(message), headers=headers)\ndef send_lark_message(message):\n\t\"\"\"Send lark message.\n\tArgs:\n\t\tmessage (str): Message.\n\t\"\"\"\n\theaders = {'content-type': 'application/json'}\n\tmessage = {\"msg_type\":\"interactive\",\"card\":{\"elements\":[{\"tag\":\"div\",\"text\":{\"content\":message,\"tag\":\"lark_md\"}}]}}\n\tnotif = Notification.objects.first()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\theaders",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\theaders = {'content-type': 'application/json'}\n\tmessage = {\"msg_type\":\"interactive\",\"card\":{\"elements\":[{\"tag\":\"div\",\"text\":{\"content\":message,\"tag\":\"lark_md\"}}]}}\n\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_lark and\n\t\tnotif.lark_hook_url)\n\tif not do_send:\n\t\treturn\n\thook_url = notif.lark_hook_url",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tmessage",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tmessage = {\"msg_type\":\"interactive\",\"card\":{\"elements\":[{\"tag\":\"div\",\"text\":{\"content\":message,\"tag\":\"lark_md\"}}]}}\n\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_lark and\n\t\tnotif.lark_hook_url)\n\tif not do_send:\n\t\treturn\n\thook_url = notif.lark_hook_url\n\trequests.post(url=hook_url, data=json.dumps(message), headers=headers)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_lark and\n\t\tnotif.lark_hook_url)\n\tif not do_send:\n\t\treturn\n\thook_url = notif.lark_hook_url\n\trequests.post(url=hook_url, data=json.dumps(message), headers=headers)\ndef send_discord_message(",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdo_send",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdo_send = (\n\t\tnotif and\n\t\tnotif.send_to_lark and\n\t\tnotif.lark_hook_url)\n\tif not do_send:\n\t\treturn\n\thook_url = notif.lark_hook_url\n\trequests.post(url=hook_url, data=json.dumps(message), headers=headers)\ndef send_discord_message(\n\t\tmessage,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\thook_url",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\thook_url = notif.lark_hook_url\n\trequests.post(url=hook_url, data=json.dumps(message), headers=headers)\ndef send_discord_message(\n\t\tmessage,\n\t\ttitle='',\n\t\tseverity=None,\n\t\turl=None,\n\t\tfiles=None,\n\t\tfields={},\n\t\tfields_append=[]):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tif not (notif and notif.send_to_discord and notif.discord_hook_url):\n\t\treturn False\n\t# If fields and title, use an embed\n\tuse_discord_embed = fields and title\n\tif use_discord_embed:\n\t\tmessage = '' # no need for message in embeds\n\t# Check for cached response in cache, using title as key\n\tcached_response = DISCORD_WEBHOOKS_CACHE.get(title) if title else None\n\tif cached_response:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tuse_discord_embed",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tuse_discord_embed = fields and title\n\tif use_discord_embed:\n\t\tmessage = '' # no need for message in embeds\n\t# Check for cached response in cache, using title as key\n\tcached_response = DISCORD_WEBHOOKS_CACHE.get(title) if title else None\n\tif cached_response:\n\t\tcached_response = pickle.loads(cached_response)\n\t# Get existing webhook if found in cache\n\tcached_webhook = DISCORD_WEBHOOKS_CACHE.get(title + '_webhook') if title else None\n\tif cached_webhook:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tmessage",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tmessage = '' # no need for message in embeds\n\t# Check for cached response in cache, using title as key\n\tcached_response = DISCORD_WEBHOOKS_CACHE.get(title) if title else None\n\tif cached_response:\n\t\tcached_response = pickle.loads(cached_response)\n\t# Get existing webhook if found in cache\n\tcached_webhook = DISCORD_WEBHOOKS_CACHE.get(title + '_webhook') if title else None\n\tif cached_webhook:\n\t\twebhook = pickle.loads(cached_webhook)\n\t\twebhook.remove_embeds()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcached_response",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcached_response = DISCORD_WEBHOOKS_CACHE.get(title) if title else None\n\tif cached_response:\n\t\tcached_response = pickle.loads(cached_response)\n\t# Get existing webhook if found in cache\n\tcached_webhook = DISCORD_WEBHOOKS_CACHE.get(title + '_webhook') if title else None\n\tif cached_webhook:\n\t\twebhook = pickle.loads(cached_webhook)\n\t\twebhook.remove_embeds()\n\telse:\n\t\twebhook = DiscordWebhook(",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tcached_response",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tcached_response = pickle.loads(cached_response)\n\t# Get existing webhook if found in cache\n\tcached_webhook = DISCORD_WEBHOOKS_CACHE.get(title + '_webhook') if title else None\n\tif cached_webhook:\n\t\twebhook = pickle.loads(cached_webhook)\n\t\twebhook.remove_embeds()\n\telse:\n\t\twebhook = DiscordWebhook(\n\t\t\turl=notif.discord_hook_url,\n\t\t\trate_limit_retry=False,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcached_webhook",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcached_webhook = DISCORD_WEBHOOKS_CACHE.get(title + '_webhook') if title else None\n\tif cached_webhook:\n\t\twebhook = pickle.loads(cached_webhook)\n\t\twebhook.remove_embeds()\n\telse:\n\t\twebhook = DiscordWebhook(\n\t\t\turl=notif.discord_hook_url,\n\t\t\trate_limit_retry=False,\n\t\t\tcontent=message)\n\t# Get existing embed if found in cache",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\twebhook",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\twebhook = pickle.loads(cached_webhook)\n\t\twebhook.remove_embeds()\n\telse:\n\t\twebhook = DiscordWebhook(\n\t\t\turl=notif.discord_hook_url,\n\t\t\trate_limit_retry=False,\n\t\t\tcontent=message)\n\t# Get existing embed if found in cache\n\tembed = None\n\tcached_embed = DISCORD_WEBHOOKS_CACHE.get(title + '_embed') if title else None",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\twebhook",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\twebhook = DiscordWebhook(\n\t\t\turl=notif.discord_hook_url,\n\t\t\trate_limit_retry=False,\n\t\t\tcontent=message)\n\t# Get existing embed if found in cache\n\tembed = None\n\tcached_embed = DISCORD_WEBHOOKS_CACHE.get(title + '_embed') if title else None\n\tif cached_embed:\n\t\tembed = pickle.loads(cached_embed)\n\telif use_discord_embed:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tembed",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tembed = None\n\tcached_embed = DISCORD_WEBHOOKS_CACHE.get(title + '_embed') if title else None\n\tif cached_embed:\n\t\tembed = pickle.loads(cached_embed)\n\telif use_discord_embed:\n\t\tembed = DiscordEmbed(title=title)\n\t# Set embed fields\n\tif embed:\n\t\tif url:\n\t\t\tembed.set_url(url)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcached_embed",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcached_embed = DISCORD_WEBHOOKS_CACHE.get(title + '_embed') if title else None\n\tif cached_embed:\n\t\tembed = pickle.loads(cached_embed)\n\telif use_discord_embed:\n\t\tembed = DiscordEmbed(title=title)\n\t# Set embed fields\n\tif embed:\n\t\tif url:\n\t\t\tembed.set_url(url)\n\t\tif severity:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tembed",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tembed = pickle.loads(cached_embed)\n\telif use_discord_embed:\n\t\tembed = DiscordEmbed(title=title)\n\t# Set embed fields\n\tif embed:\n\t\tif url:\n\t\t\tembed.set_url(url)\n\t\tif severity:\n\t\t\tembed.set_color(DISCORD_SEVERITY_COLORS[severity])\n\t\tembed.set_description(message)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tembed",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tembed = DiscordEmbed(title=title)\n\t# Set embed fields\n\tif embed:\n\t\tif url:\n\t\t\tembed.set_url(url)\n\t\tif severity:\n\t\t\tembed.set_color(DISCORD_SEVERITY_COLORS[severity])\n\t\tembed.set_description(message)\n\t\tembed.set_timestamp()\n\t\texisting_fields_dict = {field['name']: field['value'] for field in embed.fields}",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\texisting_fields_dict",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\texisting_fields_dict = {field['name']: field['value'] for field in embed.fields}\n\t\tlogger.debug(''.join([f'\\n\\t{k}: {v}' for k, v in fields.items()]))\n\t\tfor name, value in fields.items():\n\t\t\tif not value: # cannot send empty field values to Discord [error 400]\n\t\t\t\tcontinue\n\t\t\tvalue = str(value)\n\t\t\tnew_field = {'name': name, 'value': value, 'inline': False}\n\t\t\t# If field already existed in previous embed, update it.\n\t\t\tif name in existing_fields_dict.keys():\n\t\t\t\tfield = [f for f in embed.fields if f['name'] == name][0]",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tvalue",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tvalue = str(value)\n\t\t\tnew_field = {'name': name, 'value': value, 'inline': False}\n\t\t\t# If field already existed in previous embed, update it.\n\t\t\tif name in existing_fields_dict.keys():\n\t\t\t\tfield = [f for f in embed.fields if f['name'] == name][0]\n\t\t\t\t# Append to existing field value\n\t\t\t\tif name in fields_append:\n\t\t\t\t\texisting_val = field['value']\n\t\t\t\t\texisting_val = str(existing_val)\n\t\t\t\t\tif value not in existing_val:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tnew_field",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tnew_field = {'name': name, 'value': value, 'inline': False}\n\t\t\t# If field already existed in previous embed, update it.\n\t\t\tif name in existing_fields_dict.keys():\n\t\t\t\tfield = [f for f in embed.fields if f['name'] == name][0]\n\t\t\t\t# Append to existing field value\n\t\t\t\tif name in fields_append:\n\t\t\t\t\texisting_val = field['value']\n\t\t\t\t\texisting_val = str(existing_val)\n\t\t\t\t\tif value not in existing_val:\n\t\t\t\t\t\tvalue = f'{existing_val}\\n{value}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfield",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tfield = [f for f in embed.fields if f['name'] == name][0]\n\t\t\t\t# Append to existing field value\n\t\t\t\tif name in fields_append:\n\t\t\t\t\texisting_val = field['value']\n\t\t\t\t\texisting_val = str(existing_val)\n\t\t\t\t\tif value not in existing_val:\n\t\t\t\t\t\tvalue = f'{existing_val}\\n{value}'\n\t\t\t\t\tif len(value) > 1024: # character limit for embed field\n\t\t\t\t\t\tvalue = value[0:1016] + '\\n[...]'\n\t\t\t\t# Update existing embed",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\texisting_val",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\t\texisting_val = field['value']\n\t\t\t\t\texisting_val = str(existing_val)\n\t\t\t\t\tif value not in existing_val:\n\t\t\t\t\t\tvalue = f'{existing_val}\\n{value}'\n\t\t\t\t\tif len(value) > 1024: # character limit for embed field\n\t\t\t\t\t\tvalue = value[0:1016] + '\\n[...]'\n\t\t\t\t# Update existing embed\n\t\t\t\tix = embed.fields.index(field)\n\t\t\t\tembed.fields[ix]['value'] = value\n\t\t\telse:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\texisting_val",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\t\texisting_val = str(existing_val)\n\t\t\t\t\tif value not in existing_val:\n\t\t\t\t\t\tvalue = f'{existing_val}\\n{value}'\n\t\t\t\t\tif len(value) > 1024: # character limit for embed field\n\t\t\t\t\t\tvalue = value[0:1016] + '\\n[...]'\n\t\t\t\t# Update existing embed\n\t\t\t\tix = embed.fields.index(field)\n\t\t\t\tembed.fields[ix]['value'] = value\n\t\t\telse:\n\t\t\t\tembed.add_embed_field(**new_field)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tvalue",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\t\t\tvalue = f'{existing_val}\\n{value}'\n\t\t\t\t\tif len(value) > 1024: # character limit for embed field\n\t\t\t\t\t\tvalue = value[0:1016] + '\\n[...]'\n\t\t\t\t# Update existing embed\n\t\t\t\tix = embed.fields.index(field)\n\t\t\t\tembed.fields[ix]['value'] = value\n\t\t\telse:\n\t\t\t\tembed.add_embed_field(**new_field)\n\t\twebhook.add_embed(embed)\n\t\t# Add webhook and embed objects to cache, so we can pick them up later",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tvalue",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\t\t\tvalue = value[0:1016] + '\\n[...]'\n\t\t\t\t# Update existing embed\n\t\t\t\tix = embed.fields.index(field)\n\t\t\t\tembed.fields[ix]['value'] = value\n\t\t\telse:\n\t\t\t\tembed.add_embed_field(**new_field)\n\t\twebhook.add_embed(embed)\n\t\t# Add webhook and embed objects to cache, so we can pick them up later\n\t\tDISCORD_WEBHOOKS_CACHE.set(title + '_webhook', pickle.dumps(webhook))\n\t\tDISCORD_WEBHOOKS_CACHE.set(title + '_embed', pickle.dumps(embed))",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tix",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tix = embed.fields.index(field)\n\t\t\t\tembed.fields[ix]['value'] = value\n\t\t\telse:\n\t\t\t\tembed.add_embed_field(**new_field)\n\t\twebhook.add_embed(embed)\n\t\t# Add webhook and embed objects to cache, so we can pick them up later\n\t\tDISCORD_WEBHOOKS_CACHE.set(title + '_webhook', pickle.dumps(webhook))\n\t\tDISCORD_WEBHOOKS_CACHE.set(title + '_embed', pickle.dumps(embed))\n\t# Add files to webhook\n\tif files:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tembed.fields[ix]['value']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tembed.fields[ix]['value'] = value\n\t\t\telse:\n\t\t\t\tembed.add_embed_field(**new_field)\n\t\twebhook.add_embed(embed)\n\t\t# Add webhook and embed objects to cache, so we can pick them up later\n\t\tDISCORD_WEBHOOKS_CACHE.set(title + '_webhook', pickle.dumps(webhook))\n\t\tDISCORD_WEBHOOKS_CACHE.set(title + '_embed', pickle.dumps(embed))\n\t# Add files to webhook\n\tif files:\n\t\tfor (path, name) in files:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcontent",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tcontent = f.read()\n\t\t\twebhook.add_file(content, name)\n\t# Edit webhook if it already existed, otherwise send new webhook\n\tif cached_response:\n\t\tresponse = webhook.edit(cached_response)\n\telse:\n\t\tresponse = webhook.execute()\n\t\tif use_discord_embed and response.status_code == 200:\n\t\t\tDISCORD_WEBHOOKS_CACHE.set(title, pickle.dumps(response))\n\t# Get status code",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tresponse = webhook.edit(cached_response)\n\telse:\n\t\tresponse = webhook.execute()\n\t\tif use_discord_embed and response.status_code == 200:\n\t\t\tDISCORD_WEBHOOKS_CACHE.set(title, pickle.dumps(response))\n\t# Get status code\n\tif response.status_code == 429:\n\t\terrors = json.loads(\n\t\t\tresponse.content.decode('utf-8'))\n\t\twh_sleep = (int(errors['retry_after']) / 1000) + 0.15",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tresponse = webhook.execute()\n\t\tif use_discord_embed and response.status_code == 200:\n\t\t\tDISCORD_WEBHOOKS_CACHE.set(title, pickle.dumps(response))\n\t# Get status code\n\tif response.status_code == 429:\n\t\terrors = json.loads(\n\t\t\tresponse.content.decode('utf-8'))\n\t\twh_sleep = (int(errors['retry_after']) / 1000) + 0.15\n\t\tsleep(wh_sleep)\n\t\tsend_discord_message(",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\terrors",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\terrors = json.loads(\n\t\t\tresponse.content.decode('utf-8'))\n\t\twh_sleep = (int(errors['retry_after']) / 1000) + 0.15\n\t\tsleep(wh_sleep)\n\t\tsend_discord_message(\n\t\t\t\tmessage,\n\t\t\t\ttitle,\n\t\t\t\tseverity,\n\t\t\t\turl,\n\t\t\t\tfiles,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\twh_sleep",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\twh_sleep = (int(errors['retry_after']) / 1000) + 0.15\n\t\tsleep(wh_sleep)\n\t\tsend_discord_message(\n\t\t\t\tmessage,\n\t\t\t\ttitle,\n\t\t\t\tseverity,\n\t\t\t\turl,\n\t\t\t\tfiles,\n\t\t\t\tfields,\n\t\t\t\tfields_append)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tmessage",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tmessage = f'`#{scan_history_id}_{subscan_id}`: {message}'\n\t\telse:\n\t\t\tmessage = f'`#{scan_history_id}`: {message}'\n\treturn message\ndef get_scan_title(scan_id, subscan_id=None, task_name=None):\n\treturn f'Subscan #{subscan_id} summary' if subscan_id else f'Scan #{scan_id} summary'\ndef get_scan_url(scan_id=None, subscan_id=None):\n\tif scan_id:\n\t\treturn f'https://{DOMAIN_NAME}/scan/detail/{scan_id}'\n\treturn None",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tmessage",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tmessage = f'`#{scan_history_id}`: {message}'\n\treturn message\ndef get_scan_title(scan_id, subscan_id=None, task_name=None):\n\treturn f'Subscan #{subscan_id} summary' if subscan_id else f'Scan #{scan_id} summary'\ndef get_scan_url(scan_id=None, subscan_id=None):\n\tif scan_id:\n\t\treturn f'https://{DOMAIN_NAME}/scan/detail/{scan_id}'\n\treturn None\ndef get_scan_fields(engine, scan, subscan=None, status='RUNNING', tasks=[]):\n\tscan_obj = subscan if subscan else scan",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan_obj",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan_obj = subscan if subscan else scan\n\tif subscan:\n\t\ttasks_h = f'`{subscan.type}`'\n\t\thost = subscan.subdomain.name\n\t\tscan_obj = subscan\n\telse:\n\t\ttasks_h = '• ' + '\\n• '.join(f'`{task.name}`' for task in tasks) if tasks else ''\n\t\thost = scan.domain.name\n\t\tscan_obj = scan\n\t# Find scan elapsed time",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\ttasks_h",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\ttasks_h = f'`{subscan.type}`'\n\t\thost = subscan.subdomain.name\n\t\tscan_obj = subscan\n\telse:\n\t\ttasks_h = '• ' + '\\n• '.join(f'`{task.name}`' for task in tasks) if tasks else ''\n\t\thost = scan.domain.name\n\t\tscan_obj = scan\n\t# Find scan elapsed time\n\tduration = None\n\tif scan_obj and status in ['ABORTED', 'FAILED', 'SUCCESS']:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\thost",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\thost = subscan.subdomain.name\n\t\tscan_obj = subscan\n\telse:\n\t\ttasks_h = '• ' + '\\n• '.join(f'`{task.name}`' for task in tasks) if tasks else ''\n\t\thost = scan.domain.name\n\t\tscan_obj = scan\n\t# Find scan elapsed time\n\tduration = None\n\tif scan_obj and status in ['ABORTED', 'FAILED', 'SUCCESS']:\n\t\ttd = scan_obj.stop_scan_date - scan_obj.start_scan_date",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tscan_obj",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tscan_obj = subscan\n\telse:\n\t\ttasks_h = '• ' + '\\n• '.join(f'`{task.name}`' for task in tasks) if tasks else ''\n\t\thost = scan.domain.name\n\t\tscan_obj = scan\n\t# Find scan elapsed time\n\tduration = None\n\tif scan_obj and status in ['ABORTED', 'FAILED', 'SUCCESS']:\n\t\ttd = scan_obj.stop_scan_date - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\ttasks_h",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\ttasks_h = '• ' + '\\n• '.join(f'`{task.name}`' for task in tasks) if tasks else ''\n\t\thost = scan.domain.name\n\t\tscan_obj = scan\n\t# Find scan elapsed time\n\tduration = None\n\tif scan_obj and status in ['ABORTED', 'FAILED', 'SUCCESS']:\n\t\ttd = scan_obj.stop_scan_date - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\telif scan_obj:\n\t\ttd = timezone.now() - scan_obj.start_scan_date",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\thost",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\thost = scan.domain.name\n\t\tscan_obj = scan\n\t# Find scan elapsed time\n\tduration = None\n\tif scan_obj and status in ['ABORTED', 'FAILED', 'SUCCESS']:\n\t\ttd = scan_obj.stop_scan_date - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\telif scan_obj:\n\t\ttd = timezone.now() - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tscan_obj",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tscan_obj = scan\n\t# Find scan elapsed time\n\tduration = None\n\tif scan_obj and status in ['ABORTED', 'FAILED', 'SUCCESS']:\n\t\ttd = scan_obj.stop_scan_date - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\telif scan_obj:\n\t\ttd = timezone.now() - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\t# Build fields",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tduration",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tduration = None\n\tif scan_obj and status in ['ABORTED', 'FAILED', 'SUCCESS']:\n\t\ttd = scan_obj.stop_scan_date - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\telif scan_obj:\n\t\ttd = timezone.now() - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\t# Build fields\n\turl = get_scan_url(scan.id)\n\tfields = {",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\ttd",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\ttd = scan_obj.stop_scan_date - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\telif scan_obj:\n\t\ttd = timezone.now() - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\t# Build fields\n\turl = get_scan_url(scan.id)\n\tfields = {\n\t\t'Status': f'**{status}**',\n\t\t'Engine': engine.engine_name,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tduration",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tduration = humanize.naturaldelta(td)\n\telif scan_obj:\n\t\ttd = timezone.now() - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\t# Build fields\n\turl = get_scan_url(scan.id)\n\tfields = {\n\t\t'Status': f'**{status}**',\n\t\t'Engine': engine.engine_name,\n\t\t'Scan ID': f'[#{scan.id}]({url})'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\ttd",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\ttd = timezone.now() - scan_obj.start_scan_date\n\t\tduration = humanize.naturaldelta(td)\n\t# Build fields\n\turl = get_scan_url(scan.id)\n\tfields = {\n\t\t'Status': f'**{status}**',\n\t\t'Engine': engine.engine_name,\n\t\t'Scan ID': f'[#{scan.id}]({url})'\n\t}\n\tif subscan:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tduration",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tduration = humanize.naturaldelta(td)\n\t# Build fields\n\turl = get_scan_url(scan.id)\n\tfields = {\n\t\t'Status': f'**{status}**',\n\t\t'Engine': engine.engine_name,\n\t\t'Scan ID': f'[#{scan.id}]({url})'\n\t}\n\tif subscan:\n\t\turl = get_scan_url(scan.id, subscan.id)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl = get_scan_url(scan.id)\n\tfields = {\n\t\t'Status': f'**{status}**',\n\t\t'Engine': engine.engine_name,\n\t\t'Scan ID': f'[#{scan.id}]({url})'\n\t}\n\tif subscan:\n\t\turl = get_scan_url(scan.id, subscan.id)\n\t\tfields['Subscan ID'] = f'[#{subscan.id}]({url})'\n\tif duration:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tfields = {\n\t\t'Status': f'**{status}**',\n\t\t'Engine': engine.engine_name,\n\t\t'Scan ID': f'[#{scan.id}]({url})'\n\t}\n\tif subscan:\n\t\turl = get_scan_url(scan.id, subscan.id)\n\t\tfields['Subscan ID'] = f'[#{subscan.id}]({url})'\n\tif duration:\n\t\tfields['Duration'] = duration",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\turl = get_scan_url(scan.id, subscan.id)\n\t\tfields['Subscan ID'] = f'[#{subscan.id}]({url})'\n\tif duration:\n\t\tfields['Duration'] = duration\n\tfields['Host'] = host\n\tif tasks:\n\t\tfields['Tasks'] = tasks_h\n\treturn fields\ndef get_task_title(task_name, scan_id=None, subscan_id=None):\n\tif scan_id:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tfields['Duration']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tfields['Duration'] = duration\n\tfields['Host'] = host\n\tif tasks:\n\t\tfields['Tasks'] = tasks_h\n\treturn fields\ndef get_task_title(task_name, scan_id=None, subscan_id=None):\n\tif scan_id:\n\t\tprefix = f'#{scan_id}'\n\t\tif subscan_id:\n\t\t\tprefix += f'-#{subscan_id}'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tfields['Host']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tfields['Host'] = host\n\tif tasks:\n\t\tfields['Tasks'] = tasks_h\n\treturn fields\ndef get_task_title(task_name, scan_id=None, subscan_id=None):\n\tif scan_id:\n\t\tprefix = f'#{scan_id}'\n\t\tif subscan_id:\n\t\t\tprefix += f'-#{subscan_id}'\n\t\treturn f'`{prefix}` - `{task_name}`'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tfields['Tasks']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tfields['Tasks'] = tasks_h\n\treturn fields\ndef get_task_title(task_name, scan_id=None, subscan_id=None):\n\tif scan_id:\n\t\tprefix = f'#{scan_id}'\n\t\tif subscan_id:\n\t\t\tprefix += f'-#{subscan_id}'\n\t\treturn f'`{prefix}` - `{task_name}`'\n\treturn f'`{task_name}` [unbound]'\ndef get_task_header_message(name, scan_history_id, subscan_id):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tprefix",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tprefix = f'#{scan_id}'\n\t\tif subscan_id:\n\t\t\tprefix += f'-#{subscan_id}'\n\t\treturn f'`{prefix}` - `{task_name}`'\n\treturn f'`{task_name}` [unbound]'\ndef get_task_header_message(name, scan_history_id, subscan_id):\n\tmsg = f'`{name}` [#{scan_history_id}'\n\tif subscan_id:\n\t\tmsg += f'_#{subscan_id}]'\n\tmsg += 'status'",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tmsg",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tmsg = f'`{name}` [#{scan_history_id}'\n\tif subscan_id:\n\t\tmsg += f'_#{subscan_id}]'\n\tmsg += 'status'\n\treturn msg\ndef get_task_cache_key(func_name, *args, **kwargs):\n\targs_str = '_'.join([str(arg) for arg in args])\n\tkwargs_str = '_'.join([f'{k}={v}' for k, v in kwargs.items() if k not in RENGINE_TASK_IGNORE_CACHE_KWARGS])\n\treturn f'{func_name}__{args_str}__{kwargs_str}'\ndef get_output_file_name(scan_history_id, subscan_id, filename):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\targs_str",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\targs_str = '_'.join([str(arg) for arg in args])\n\tkwargs_str = '_'.join([f'{k}={v}' for k, v in kwargs.items() if k not in RENGINE_TASK_IGNORE_CACHE_KWARGS])\n\treturn f'{func_name}__{args_str}__{kwargs_str}'\ndef get_output_file_name(scan_history_id, subscan_id, filename):\n\ttitle = f'#{scan_history_id}'\n\tif subscan_id:\n\t\ttitle += f'-{subscan_id}'\n\ttitle += f'_{filename}'\n\treturn title\ndef get_traceback_path(task_name, results_dir, scan_history_id=None, subscan_id=None):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tkwargs_str",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tkwargs_str = '_'.join([f'{k}={v}' for k, v in kwargs.items() if k not in RENGINE_TASK_IGNORE_CACHE_KWARGS])\n\treturn f'{func_name}__{args_str}__{kwargs_str}'\ndef get_output_file_name(scan_history_id, subscan_id, filename):\n\ttitle = f'#{scan_history_id}'\n\tif subscan_id:\n\t\ttitle += f'-{subscan_id}'\n\ttitle += f'_{filename}'\n\treturn title\ndef get_traceback_path(task_name, results_dir, scan_history_id=None, subscan_id=None):\n\tpath = results_dir",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttitle = f'#{scan_history_id}'\n\tif subscan_id:\n\t\ttitle += f'-{subscan_id}'\n\ttitle += f'_{filename}'\n\treturn title\ndef get_traceback_path(task_name, results_dir, scan_history_id=None, subscan_id=None):\n\tpath = results_dir\n\tif scan_history_id:\n\t\tpath += f'/#{scan_history_id}'\n\t\tif subscan_id:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tpath",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tpath = results_dir\n\tif scan_history_id:\n\t\tpath += f'/#{scan_history_id}'\n\t\tif subscan_id:\n\t\t\tpath += f'-#{subscan_id}'\n\tpath += f'-{task_name}.txt'\n\treturn path\ndef fmt_traceback(exc):\n\treturn '\\n'.join(traceback.format_exception(None, exc, exc.__traceback__))\n#--------------#",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tcmd = 'nmap'\n\toptions = {\n\t\t\"-sV\": service_detection,\n\t\t\"-p\": ports,\n\t\t\"--script\": script,\n\t\t\"--script-args\": script_args,\n\t\t\"--max-rate\": max_rate,\n\t\t\"-oX\": output_file\n\t}\n\tcmd = _build_cmd(cmd, options, flags)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\toptions",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\toptions = {\n\t\t\"-sV\": service_detection,\n\t\t\"-p\": ports,\n\t\t\"--script\": script,\n\t\t\"--script-args\": script_args,\n\t\t\"--max-rate\": max_rate,\n\t\t\"-oX\": output_file\n\t}\n\tcmd = _build_cmd(cmd, options, flags)\n\tif not input_file:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcmd = _build_cmd(cmd, options, flags)\n\tif not input_file:\n\t\tcmd += f\" {host}\" if host else \"\"\n\telse:\n\t\tcmd += f\" -iL {input_file}\"\n\treturn cmd\ndef xml2json(xml):\n\twith open(xml) as xml_file:\n\t\txml_content = xml_file.read()\n\treturn xmltodict.parse(xml_content)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\txml_content",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\txml_content = xml_file.read()\n\treturn xmltodict.parse(xml_content)\ndef reverse_whois(lookup_keyword):\n\tdomains = []\n\t'''\n\t\tThis function will use viewdns to fetch reverse whois info\n\t\tInput: lookup keyword like email or registrar name\n\t\tReturns a list of domains as string.\n\t'''\n\tlogger.info(f'Querying reverse whois for {lookup_keyword}')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomains",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomains = []\n\t'''\n\t\tThis function will use viewdns to fetch reverse whois info\n\t\tInput: lookup keyword like email or registrar name\n\t\tReturns a list of domains as string.\n\t'''\n\tlogger.info(f'Querying reverse whois for {lookup_keyword}')\n\turl = f\"https://viewdns.info:443/reversewhois/?q={lookup_keyword}\"\n\theaders = {\n\t\t\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"104\\\"\",",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl = f\"https://viewdns.info:443/reversewhois/?q={lookup_keyword}\"\n\theaders = {\n\t\t\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"104\\\"\",\n\t\t\"Sec-Ch-Ua-Mobile\": \"?0\",\n\t\t\"Sec-Ch-Ua-Platform\": \"\\\"Linux\\\"\",\n\t\t\"Upgrade-Insecure-Requests\": \"1\",\n\t\t\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36\",\n\t\t\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n\t\t\"Sec-Fetch-Site\": \"same-origin\",\n\t\t\"Sec-Fetch-Mode\": \"navigate\",",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\theaders",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\theaders = {\n\t\t\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"104\\\"\",\n\t\t\"Sec-Ch-Ua-Mobile\": \"?0\",\n\t\t\"Sec-Ch-Ua-Platform\": \"\\\"Linux\\\"\",\n\t\t\"Upgrade-Insecure-Requests\": \"1\",\n\t\t\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36\",\n\t\t\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n\t\t\"Sec-Fetch-Site\": \"same-origin\",\n\t\t\"Sec-Fetch-Mode\": \"navigate\",\n\t\t\"Sec-Fetch-User\": \"?1\",",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tresponse = requests.get(url, headers=headers)\n\tsoup = BeautifulSoup(response.content, 'lxml')\n\ttable = soup.find(\"table\", {\"border\" : \"1\"})\n\ttry:\n\t\tfor row in table or []:\n\t\t\tdom = row.findAll('td')[0].getText()\n\t\t\t# created_on = row.findAll('td')[1].getText() TODO: add this in 3.0\n\t\t\tif dom == 'Domain Name':\n\t\t\t\tcontinue\n\t\t\tdomains.append(dom)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tsoup",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tsoup = BeautifulSoup(response.content, 'lxml')\n\ttable = soup.find(\"table\", {\"border\" : \"1\"})\n\ttry:\n\t\tfor row in table or []:\n\t\t\tdom = row.findAll('td')[0].getText()\n\t\t\t# created_on = row.findAll('td')[1].getText() TODO: add this in 3.0\n\t\t\tif dom == 'Domain Name':\n\t\t\t\tcontinue\n\t\t\tdomains.append(dom)\n\texcept Exception as e:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttable",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttable = soup.find(\"table\", {\"border\" : \"1\"})\n\ttry:\n\t\tfor row in table or []:\n\t\t\tdom = row.findAll('td')[0].getText()\n\t\t\t# created_on = row.findAll('td')[1].getText() TODO: add this in 3.0\n\t\t\tif dom == 'Domain Name':\n\t\t\t\tcontinue\n\t\t\tdomains.append(dom)\n\texcept Exception as e:\n\t\tlogger.error(f'Error while fetching reverse whois info: {e}')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tdom",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tdom = row.findAll('td')[0].getText()\n\t\t\t# created_on = row.findAll('td')[1].getText() TODO: add this in 3.0\n\t\t\tif dom == 'Domain Name':\n\t\t\t\tcontinue\n\t\t\tdomains.append(dom)\n\texcept Exception as e:\n\t\tlogger.error(f'Error while fetching reverse whois info: {e}')\n\treturn domains\ndef get_domain_historical_ip_address(domain):\n\tips = []",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tips",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tips = []\n\t'''\n\t\tThis function will use viewdns to fetch historical IP address\n\t\tfor a domain\n\t'''\n\tlogger.info(f'Fetching historical IP address for domain {domain}')\n\turl = f\"https://viewdns.info/iphistory/?domain={domain}\"\n\theaders = {\n\t\t\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"104\\\"\",\n\t\t\"Sec-Ch-Ua-Mobile\": \"?0\",",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\turl = f\"https://viewdns.info/iphistory/?domain={domain}\"\n\theaders = {\n\t\t\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"104\\\"\",\n\t\t\"Sec-Ch-Ua-Mobile\": \"?0\",\n\t\t\"Sec-Ch-Ua-Platform\": \"\\\"Linux\\\"\",\n\t\t\"Upgrade-Insecure-Requests\": \"1\",\n\t\t\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36\",\n\t\t\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n\t\t\"Sec-Fetch-Site\": \"same-origin\",\n\t\t\"Sec-Fetch-Mode\": \"navigate\",",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\theaders",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\theaders = {\n\t\t\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"104\\\"\",\n\t\t\"Sec-Ch-Ua-Mobile\": \"?0\",\n\t\t\"Sec-Ch-Ua-Platform\": \"\\\"Linux\\\"\",\n\t\t\"Upgrade-Insecure-Requests\": \"1\",\n\t\t\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36\",\n\t\t\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n\t\t\"Sec-Fetch-Site\": \"same-origin\",\n\t\t\"Sec-Fetch-Mode\": \"navigate\",\n\t\t\"Sec-Fetch-User\": \"?1\",",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tresponse = requests.get(url, headers=headers)\n\tsoup = BeautifulSoup(response.content, 'lxml')\n\ttable = soup.find(\"table\", {\"border\" : \"1\"})\t\t\t\t\t   \n\tfor row in table or []:\n\t\tip = row.findAll('td')[0].getText()\n\t\tlocation = row.findAll('td')[1].getText()\n\t\towner = row.findAll('td')[2].getText()\n\t\tlast_seen = row.findAll('td')[2].getText()\n\t\tif ip == 'IP Address':\n\t\t\tcontinue",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tsoup",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tsoup = BeautifulSoup(response.content, 'lxml')\n\ttable = soup.find(\"table\", {\"border\" : \"1\"})\t\t\t\t\t   \n\tfor row in table or []:\n\t\tip = row.findAll('td')[0].getText()\n\t\tlocation = row.findAll('td')[1].getText()\n\t\towner = row.findAll('td')[2].getText()\n\t\tlast_seen = row.findAll('td')[2].getText()\n\t\tif ip == 'IP Address':\n\t\t\tcontinue\n\t\tips.append(",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\ttable",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\ttable = soup.find(\"table\", {\"border\" : \"1\"})\t\t\t\t\t   \n\tfor row in table or []:\n\t\tip = row.findAll('td')[0].getText()\n\t\tlocation = row.findAll('td')[1].getText()\n\t\towner = row.findAll('td')[2].getText()\n\t\tlast_seen = row.findAll('td')[2].getText()\n\t\tif ip == 'IP Address':\n\t\t\tcontinue\n\t\tips.append(\n\t\t\t{",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tip",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tip = row.findAll('td')[0].getText()\n\t\tlocation = row.findAll('td')[1].getText()\n\t\towner = row.findAll('td')[2].getText()\n\t\tlast_seen = row.findAll('td')[2].getText()\n\t\tif ip == 'IP Address':\n\t\t\tcontinue\n\t\tips.append(\n\t\t\t{\n\t\t\t\t'ip': ip,\n\t\t\t\t'location': location,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tlocation",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tlocation = row.findAll('td')[1].getText()\n\t\towner = row.findAll('td')[2].getText()\n\t\tlast_seen = row.findAll('td')[2].getText()\n\t\tif ip == 'IP Address':\n\t\t\tcontinue\n\t\tips.append(\n\t\t\t{\n\t\t\t\t'ip': ip,\n\t\t\t\t'location': location,\n\t\t\t\t'owner': owner,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\towner",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\towner = row.findAll('td')[2].getText()\n\t\tlast_seen = row.findAll('td')[2].getText()\n\t\tif ip == 'IP Address':\n\t\t\tcontinue\n\t\tips.append(\n\t\t\t{\n\t\t\t\t'ip': ip,\n\t\t\t\t'location': location,\n\t\t\t\t'owner': owner,\n\t\t\t\t'last_seen': last_seen,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tlast_seen",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tlast_seen = row.findAll('td')[2].getText()\n\t\tif ip == 'IP Address':\n\t\t\tcontinue\n\t\tips.append(\n\t\t\t{\n\t\t\t\t'ip': ip,\n\t\t\t\t'location': location,\n\t\t\t\t'owner': owner,\n\t\t\t\t'last_seen': last_seen,\n\t\t\t}",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\topenai_key",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\topenai_key = OpenAiAPIKey.objects.all()\n\treturn openai_key[0] if openai_key else None\ndef get_netlas_key():\n\tnetlas_key = NetlasAPIKey.objects.all()\n\treturn netlas_key[0] if netlas_key else None\ndef get_chaos_key():\n\tchaos_key = ChaosAPIKey.objects.all()\n\treturn chaos_key[0] if chaos_key else None\ndef get_hackerone_key_username():\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tnetlas_key",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tnetlas_key = NetlasAPIKey.objects.all()\n\treturn netlas_key[0] if netlas_key else None\ndef get_chaos_key():\n\tchaos_key = ChaosAPIKey.objects.all()\n\treturn chaos_key[0] if chaos_key else None\ndef get_hackerone_key_username():\n\t\"\"\"\n\t\tGet the HackerOne API key username from the database.\n\t\tReturns: a tuple of the username and api key\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tchaos_key",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tchaos_key = ChaosAPIKey.objects.all()\n\treturn chaos_key[0] if chaos_key else None\ndef get_hackerone_key_username():\n\t\"\"\"\n\t\tGet the HackerOne API key username from the database.\n\t\tReturns: a tuple of the username and api key\n\t\"\"\"\n\thackerone_key = HackerOneAPIKey.objects.all()\n\treturn (hackerone_key[0].username, hackerone_key[0].key) if hackerone_key else None\ndef parse_llm_vulnerability_report(report):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\thackerone_key",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\thackerone_key = HackerOneAPIKey.objects.all()\n\treturn (hackerone_key[0].username, hackerone_key[0].key) if hackerone_key else None\ndef parse_llm_vulnerability_report(report):\n\treport = report.replace('**', '')\n\tdata = {}\n\tsections = re.split(r'\\n(?=(?:Description|Impact|Remediation|References):)', report.strip())\n\ttry:\n\t\tfor section in sections:\n\t\t\tif not section.strip():\n\t\t\t\tcontinue",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\treport",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\treport = report.replace('**', '')\n\tdata = {}\n\tsections = re.split(r'\\n(?=(?:Description|Impact|Remediation|References):)', report.strip())\n\ttry:\n\t\tfor section in sections:\n\t\t\tif not section.strip():\n\t\t\t\tcontinue\n\t\t\tsection_title, content = re.split(r':\\n', section.strip(), maxsplit=1)\n\t\t\tif section_title == 'Description':\n\t\t\t\tdata['description'] = content.strip()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdata = {}\n\tsections = re.split(r'\\n(?=(?:Description|Impact|Remediation|References):)', report.strip())\n\ttry:\n\t\tfor section in sections:\n\t\t\tif not section.strip():\n\t\t\t\tcontinue\n\t\t\tsection_title, content = re.split(r':\\n', section.strip(), maxsplit=1)\n\t\t\tif section_title == 'Description':\n\t\t\t\tdata['description'] = content.strip()\n\t\t\telif section_title == 'Impact':",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tsections",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tsections = re.split(r'\\n(?=(?:Description|Impact|Remediation|References):)', report.strip())\n\ttry:\n\t\tfor section in sections:\n\t\t\tif not section.strip():\n\t\t\t\tcontinue\n\t\t\tsection_title, content = re.split(r':\\n', section.strip(), maxsplit=1)\n\t\t\tif section_title == 'Description':\n\t\t\t\tdata['description'] = content.strip()\n\t\t\telif section_title == 'Impact':\n\t\t\t\tdata['impact'] = content.strip()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata['description']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tdata['description'] = content.strip()\n\t\t\telif section_title == 'Impact':\n\t\t\t\tdata['impact'] = content.strip()\n\t\t\telif section_title == 'Remediation':\n\t\t\t\tdata['remediation'] = content.strip()\n\t\t\telif section_title == 'References':\n\t\t\t\tdata['references'] = [ref.strip() for ref in content.split('\\n') if ref.strip()]\n\texcept Exception as e:\n\t\treturn data\n\treturn data",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata['impact']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tdata['impact'] = content.strip()\n\t\t\telif section_title == 'Remediation':\n\t\t\t\tdata['remediation'] = content.strip()\n\t\t\telif section_title == 'References':\n\t\t\t\tdata['references'] = [ref.strip() for ref in content.split('\\n') if ref.strip()]\n\texcept Exception as e:\n\t\treturn data\n\treturn data\ndef create_scan_object(host_id, engine_id, initiated_by_id=None):\n\t'''",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata['remediation']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tdata['remediation'] = content.strip()\n\t\t\telif section_title == 'References':\n\t\t\t\tdata['references'] = [ref.strip() for ref in content.split('\\n') if ref.strip()]\n\texcept Exception as e:\n\t\treturn data\n\treturn data\ndef create_scan_object(host_id, engine_id, initiated_by_id=None):\n\t'''\n\tcreate task with pending status so that celery task will execute when\n\tthreads are free",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata['references']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tdata['references'] = [ref.strip() for ref in content.split('\\n') if ref.strip()]\n\texcept Exception as e:\n\t\treturn data\n\treturn data\ndef create_scan_object(host_id, engine_id, initiated_by_id=None):\n\t'''\n\tcreate task with pending status so that celery task will execute when\n\tthreads are free\n\tArgs:\n\t\thost_id: int: id of Domain model",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcurrent_scan_time",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcurrent_scan_time = timezone.now()\n\t# fetch engine and domain object\n\tengine = EngineType.objects.get(pk=engine_id)\n\tdomain = Domain.objects.get(pk=host_id)\n\tscan = ScanHistory()\n\tscan.scan_status = INITIATED_TASK\n\tscan.domain = domain\n\tscan.scan_type = engine\n\tscan.start_scan_date = current_scan_time\n\tif initiated_by_id:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tengine",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tengine = EngineType.objects.get(pk=engine_id)\n\tdomain = Domain.objects.get(pk=host_id)\n\tscan = ScanHistory()\n\tscan.scan_status = INITIATED_TASK\n\tscan.domain = domain\n\tscan.scan_type = engine\n\tscan.start_scan_date = current_scan_time\n\tif initiated_by_id:\n\t\tuser = User.objects.get(pk=initiated_by_id)\n\t\tscan.initiated_by = user",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain = Domain.objects.get(pk=host_id)\n\tscan = ScanHistory()\n\tscan.scan_status = INITIATED_TASK\n\tscan.domain = domain\n\tscan.scan_type = engine\n\tscan.start_scan_date = current_scan_time\n\tif initiated_by_id:\n\t\tuser = User.objects.get(pk=initiated_by_id)\n\t\tscan.initiated_by = user\n\tscan.save()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan = ScanHistory()\n\tscan.scan_status = INITIATED_TASK\n\tscan.domain = domain\n\tscan.scan_type = engine\n\tscan.start_scan_date = current_scan_time\n\tif initiated_by_id:\n\t\tuser = User.objects.get(pk=initiated_by_id)\n\t\tscan.initiated_by = user\n\tscan.save()\n\t# save last scan date for domain model",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan.scan_status",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan.scan_status = INITIATED_TASK\n\tscan.domain = domain\n\tscan.scan_type = engine\n\tscan.start_scan_date = current_scan_time\n\tif initiated_by_id:\n\t\tuser = User.objects.get(pk=initiated_by_id)\n\t\tscan.initiated_by = user\n\tscan.save()\n\t# save last scan date for domain model\n\tdomain.start_scan_date = current_scan_time",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan.domain",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan.domain = domain\n\tscan.scan_type = engine\n\tscan.start_scan_date = current_scan_time\n\tif initiated_by_id:\n\t\tuser = User.objects.get(pk=initiated_by_id)\n\t\tscan.initiated_by = user\n\tscan.save()\n\t# save last scan date for domain model\n\tdomain.start_scan_date = current_scan_time\n\tdomain.save()",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan.scan_type",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan.scan_type = engine\n\tscan.start_scan_date = current_scan_time\n\tif initiated_by_id:\n\t\tuser = User.objects.get(pk=initiated_by_id)\n\t\tscan.initiated_by = user\n\tscan.save()\n\t# save last scan date for domain model\n\tdomain.start_scan_date = current_scan_time\n\tdomain.save()\n\treturn scan.id",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tscan.start_scan_date",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tscan.start_scan_date = current_scan_time\n\tif initiated_by_id:\n\t\tuser = User.objects.get(pk=initiated_by_id)\n\t\tscan.initiated_by = user\n\tscan.save()\n\t# save last scan date for domain model\n\tdomain.start_scan_date = current_scan_time\n\tdomain.save()\n\treturn scan.id\ndef get_port_service_description(port):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tuser",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tuser = User.objects.get(pk=initiated_by_id)\n\t\tscan.initiated_by = user\n\tscan.save()\n\t# save last scan date for domain model\n\tdomain.start_scan_date = current_scan_time\n\tdomain.save()\n\treturn scan.id\ndef get_port_service_description(port):\n\t\"\"\"\n\t\tRetrieves the standard service name and description for a given port ",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tscan.initiated_by",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tscan.initiated_by = user\n\tscan.save()\n\t# save last scan date for domain model\n\tdomain.start_scan_date = current_scan_time\n\tdomain.save()\n\treturn scan.id\ndef get_port_service_description(port):\n\t\"\"\"\n\t\tRetrieves the standard service name and description for a given port \n\t\tnumber using whatportis and the builtin socket library as fallback.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain.start_scan_date",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain.start_scan_date = current_scan_time\n\tdomain.save()\n\treturn scan.id\ndef get_port_service_description(port):\n\t\"\"\"\n\t\tRetrieves the standard service name and description for a given port \n\t\tnumber using whatportis and the builtin socket library as fallback.\n\t\tArgs:\n\t\t\tport (int or str): The port number to look up. \n\t\t\t\tCan be an integer or a string representation of an integer.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tport",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tport = int(port)\n\t\twhatportis_result = whatportis.get_ports(str(port))\n\t\tif whatportis_result and whatportis_result[0].name:\n\t\t\treturn {\n\t\t\t\t\"service_name\": whatportis_result[0].name,\n\t\t\t\t\"description\": whatportis_result[0].description\n\t\t\t}\n\t\telse:\n\t\t\ttry:\n\t\t\t\tservice = socket.getservbyport(port)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\twhatportis_result",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\twhatportis_result = whatportis.get_ports(str(port))\n\t\tif whatportis_result and whatportis_result[0].name:\n\t\t\treturn {\n\t\t\t\t\"service_name\": whatportis_result[0].name,\n\t\t\t\t\"description\": whatportis_result[0].description\n\t\t\t}\n\t\telse:\n\t\t\ttry:\n\t\t\t\tservice = socket.getservbyport(port)\n\t\t\t\treturn {",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tservice",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\tservice = socket.getservbyport(port)\n\t\t\t\treturn {\n\t\t\t\t\t\"service_name\": service,\n\t\t\t\t\t\"description\": \"\" # Keep description blank when using socket\n\t\t\t\t}\n\t\t\texcept OSError:\n\t\t\t\t# If both whatportis and socket fail\n\t\t\t\treturn {\n\t\t\t\t\t\"service_name\": \"\",\n\t\t\t\t\t\"description\": \"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcreated",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcreated = False\n\ttry:\n\t\tport = Port.objects.get(number=port_number)\n\t\t# avoid updating None values in service and description if they already exist\n\t\tif service_name is not None and port.service_name != service_name:\n\t\t\tport.service_name = service_name\n\t\tif description is not None and port.description != description:\n\t\t\tport.description = description\n\t\tport.save()\t\n\texcept Port.DoesNotExist:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tport",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tport = Port.objects.get(number=port_number)\n\t\t# avoid updating None values in service and description if they already exist\n\t\tif service_name is not None and port.service_name != service_name:\n\t\t\tport.service_name = service_name\n\t\tif description is not None and port.description != description:\n\t\t\tport.description = description\n\t\tport.save()\t\n\texcept Port.DoesNotExist:\n\t\t# for cases if the port doesn't exist, create a new one\n\t\tport = Port.objects.create(",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tport.service_name",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tport.service_name = service_name\n\t\tif description is not None and port.description != description:\n\t\t\tport.description = description\n\t\tport.save()\t\n\texcept Port.DoesNotExist:\n\t\t# for cases if the port doesn't exist, create a new one\n\t\tport = Port.objects.create(\n\t\t\tnumber=port_number,\n\t\t\tservice_name=service_name,\n\t\t\tdescription=description",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tport.description",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tport.description = description\n\t\tport.save()\t\n\texcept Port.DoesNotExist:\n\t\t# for cases if the port doesn't exist, create a new one\n\t\tport = Port.objects.create(\n\t\t\tnumber=port_number,\n\t\t\tservice_name=service_name,\n\t\t\tdescription=description\n\t\t)\n\t\tcreated = True",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tport",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tport = Port.objects.create(\n\t\t\tnumber=port_number,\n\t\t\tservice_name=service_name,\n\t\t\tdescription=description\n\t\t)\n\t\tcreated = True\n\tfinally:\n\t\treturn port, created\ndef exclude_urls_by_patterns(exclude_paths, urls):\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tcreated",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tcreated = True\n\tfinally:\n\t\treturn port, created\ndef exclude_urls_by_patterns(exclude_paths, urls):\n\t\"\"\"\n\t\tFilter out URLs based on a list of exclusion patterns provided from user\n\t\tArgs:\n\t\t\texclude_patterns (list of str): A list of patterns to exclude. \n\t\t\tThese can be plain path or regex.\n\t\t\turls (list of str): A list of URLs to filter from.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tcompiled_patterns",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tcompiled_patterns = []\n\tfor path in exclude_paths:\n\t\t# treat each path as either regex or plain path\n\t\ttry:\n\t\t\traw_pattern = r\"{}\".format(path)\n\t\t\tcompiled_patterns.append(re.compile(raw_pattern))\n\t\texcept re.error:\n\t\t\tcompiled_patterns.append(path)\n\tfiltered_urls = []\n\tfor url in urls:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\traw_pattern",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\traw_pattern = r\"{}\".format(path)\n\t\t\tcompiled_patterns.append(re.compile(raw_pattern))\n\t\texcept re.error:\n\t\t\tcompiled_patterns.append(path)\n\tfiltered_urls = []\n\tfor url in urls:\n\t\texclude = False\n\t\tfor pattern in compiled_patterns:\n\t\t\tif isinstance(pattern, re.Pattern):\n\t\t\t\tif pattern.search(url):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tfiltered_urls",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tfiltered_urls = []\n\tfor url in urls:\n\t\texclude = False\n\t\tfor pattern in compiled_patterns:\n\t\t\tif isinstance(pattern, re.Pattern):\n\t\t\t\tif pattern.search(url):\n\t\t\t\t\texclude = True\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tif pattern in url: #if the word matches anywhere in url exclude",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\texclude",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\texclude = False\n\t\tfor pattern in compiled_patterns:\n\t\t\tif isinstance(pattern, re.Pattern):\n\t\t\t\tif pattern.search(url):\n\t\t\t\t\texclude = True\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tif pattern in url: #if the word matches anywhere in url exclude\n\t\t\t\t\texclude = True\n\t\t\t\t\tbreak",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\texclude",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\t\texclude = True\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tif pattern in url: #if the word matches anywhere in url exclude\n\t\t\t\t\texclude = True\n\t\t\t\t\tbreak\n\t\t# if none conditions matches then add the url to filtered urls\n\t\tif not exclude:\n\t\t\tfiltered_urls.append(url)\n\treturn filtered_urls",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\texclude",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\t\t\texclude = True\n\t\t\t\t\tbreak\n\t\t# if none conditions matches then add the url to filtered urls\n\t\tif not exclude:\n\t\t\tfiltered_urls.append(url)\n\treturn filtered_urls\ndef get_domain_info_from_db(target):\n\t\"\"\"\n\t\tRetrieves the Domain object from the database using the target domain name.\n\t\tArgs:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain = Domain.objects.get(name=target)\n\t\tif not domain.insert_date:\n\t\t\tdomain.insert_date = timezone.now()\n\t\t\tdomain.save()\n\t\treturn extract_domain_info(domain)\n\texcept Domain.DoesNotExist:\n\t\treturn None\ndef extract_domain_info(domain):\n\t\"\"\"\n\t\tExtract domain info from the domain_info_db.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tdomain.insert_date",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tdomain.insert_date = timezone.now()\n\t\t\tdomain.save()\n\t\treturn extract_domain_info(domain)\n\texcept Domain.DoesNotExist:\n\t\treturn None\ndef extract_domain_info(domain):\n\t\"\"\"\n\t\tExtract domain info from the domain_info_db.\n\t\tArgs:\n\t\t\tdomain: Domain object",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain_name = domain.name\n\tdomain_info_db = domain.domain_info\n\ttry:\n\t\tdomain_info = DottedDict({\n\t\t\t'dnssec': domain_info_db.dnssec,\n\t\t\t'created': domain_info_db.created,\n\t\t\t'updated': domain_info_db.updated,\n\t\t\t'expires': domain_info_db.expires,\n\t\t\t'geolocation_iso': domain_info_db.geolocation_iso,\n\t\t\t'status': [status.name for status in domain_info_db.status.all()],",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain_info_db",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain_info_db = domain.domain_info\n\ttry:\n\t\tdomain_info = DottedDict({\n\t\t\t'dnssec': domain_info_db.dnssec,\n\t\t\t'created': domain_info_db.created,\n\t\t\t'updated': domain_info_db.updated,\n\t\t\t'expires': domain_info_db.expires,\n\t\t\t'geolocation_iso': domain_info_db.geolocation_iso,\n\t\t\t'status': [status.name for status in domain_info_db.status.all()],\n\t\t\t'whois_server': domain_info_db.whois_server,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info = DottedDict({\n\t\t\t'dnssec': domain_info_db.dnssec,\n\t\t\t'created': domain_info_db.created,\n\t\t\t'updated': domain_info_db.updated,\n\t\t\t'expires': domain_info_db.expires,\n\t\t\t'geolocation_iso': domain_info_db.geolocation_iso,\n\t\t\t'status': [status.name for status in domain_info_db.status.all()],\n\t\t\t'whois_server': domain_info_db.whois_server,\n\t\t\t'ns_records': [ns.name for ns in domain_info_db.name_servers.all()],\n\t\t})",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tregistrar",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tregistrar = domain_info_db.registrar\n\t\tif registrar:\n\t\t\tdomain_info.update({\n\t\t\t\t'registrar_name': registrar.name,\n\t\t\t\t'registrar_phone': registrar.phone,\n\t\t\t\t'registrar_email': registrar.email,\n\t\t\t\t'registrar_url': registrar.url,\n\t\t\t})\n\t\t# Extract registration info (registrant, admin, tech)\n\t\tfor role in ['registrant', 'admin', 'tech']:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tregistration",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tregistration = getattr(domain_info_db, role)\n\t\t\tif registration:\n\t\t\t\tdomain_info.update({\n\t\t\t\t\tf'{role}_{key}': getattr(registration, key)\n\t\t\t\t\tfor key in ['name', 'id_str', 'organization', 'city', 'state', 'zip_code', \n\t\t\t\t\t\t\t\t'country', 'phone', 'fax', 'email', 'address']\n\t\t\t\t})\n\t\t# Extract DNS records\n\t\tdns_records = domain_info_db.dns_records.all()\n\t\tfor record_type in ['a', 'txt', 'mx']:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdns_records",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdns_records = domain_info_db.dns_records.all()\n\t\tfor record_type in ['a', 'txt', 'mx']:\n\t\t\tdomain_info[f'{record_type}_records'] = [\n\t\t\t\trecord.name for record in dns_records if record.type == record_type\n\t\t\t]\n\t\t# Extract related domains and TLDs\n\t\tdomain_info.update({\n\t\t\t'related_tlds': [domain.name for domain in domain_info_db.related_tlds.all()],\n\t\t\t'related_domains': [domain.name for domain in domain_info_db.related_domains.all()],\n\t\t})",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tdomain_info[f'{record_type}_records']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tdomain_info[f'{record_type}_records'] = [\n\t\t\t\trecord.name for record in dns_records if record.type == record_type\n\t\t\t]\n\t\t# Extract related domains and TLDs\n\t\tdomain_info.update({\n\t\t\t'related_tlds': [domain.name for domain in domain_info_db.related_tlds.all()],\n\t\t\t'related_domains': [domain.name for domain in domain_info_db.related_domains.all()],\n\t\t})\n\t\t# Extract historical IPs\n\t\tdomain_info['historical_ips'] = [",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info['historical_ips']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info['historical_ips'] = [\n\t\t\t{\n\t\t\t\t'ip': ip.ip,\n\t\t\t\t'owner': ip.owner,\n\t\t\t\t'location': ip.location,\n\t\t\t\t'last_seen': ip.last_seen\n\t\t\t}\n\t\t\tfor ip in domain_info_db.historical_ips.all()\n\t\t]\n\t\tdomain_info['target'] = domain_name",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info['target']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info['target'] = domain_name\n\texcept Exception as e:\n\t\tlogger.error(f'Error while extracting domain info: {e}')\n\t\tdomain_info = DottedDict()\n\treturn domain_info\ndef format_whois_response(domain_info):\n\t\"\"\"\n\t\tFormat the domain info for the whois response.\n\t\tArgs:\n\t\t\tdomain_info (DottedDict): The domain info object.",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info = DottedDict()\n\treturn domain_info\ndef format_whois_response(domain_info):\n\t\"\"\"\n\t\tFormat the domain info for the whois response.\n\t\tArgs:\n\t\t\tdomain_info (DottedDict): The domain info object.\n\t\tReturns:\n\t\t\tdict: The formatted whois response.\t\n\t\"\"\"",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\twhois",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\twhois = whois_data.get('whois', {})\n\tdns = whois_data.get('dns', {})\n\t# Parse basic domain information\n\tdomain_info.update({\n\t\t'created': whois.get('created_date', None),\n\t\t'expires': whois.get('expiration_date', None),\n\t\t'updated': whois.get('updated_date', None),\n\t\t'whois_server': whois.get('whois_server', None),\n\t\t'dnssec': bool(whois.get('dnssec', False)),\n\t\t'status': whois.get('status', []),",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdns",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdns = whois_data.get('dns', {})\n\t# Parse basic domain information\n\tdomain_info.update({\n\t\t'created': whois.get('created_date', None),\n\t\t'expires': whois.get('expiration_date', None),\n\t\t'updated': whois.get('updated_date', None),\n\t\t'whois_server': whois.get('whois_server', None),\n\t\t'dnssec': bool(whois.get('dnssec', False)),\n\t\t'status': whois.get('status', []),\n\t})",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tdomain_info.ns_records",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tdomain_info.ns_records = dns.get('ns', [])\ndef parse_registrar_info(domain_info, registrar):\n\t\"\"\"Parse registrar information.\"\"\"\n\tdomain_info.update({\n\t\t'registrar_name': registrar.get('name', None),\n\t\t'registrar_email': registrar.get('email', None),\n\t\t'registrar_phone': registrar.get('phone', None),\n\t\t'registrar_url': registrar.get('url', None),\n\t})\ndef parse_registration_info(domain_info, registration, role):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\trole_prefix",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\trole_prefix = role if role != 'administrative' else 'admin'\n\tdomain_info.update({\n\t\tf'{role_prefix}_{key}': value\n\t\tfor key, value in registration.items()\n\t\tif key in ['name', 'id', 'organization', 'street', 'city', 'province', 'postal_code', 'country', 'phone', 'fax']\n\t})\n\t# Handle email separately to apply regex\n\temail = registration.get('email')\n\tif email:\n\t\temail_match = EMAIL_REGEX.search(str(email))",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\temail",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\temail = registration.get('email')\n\tif email:\n\t\temail_match = EMAIL_REGEX.search(str(email))\n\t\tdomain_info[f'{role_prefix}_email'] = email_match.group(0) if email_match else None\ndef parse_dns_records(domain_info, dns):\n\t\"\"\"Parse DNS records.\"\"\"\n\tdomain_info.update({\n\t\t'mx_records': dns.get('mx', []),\n\t\t'txt_records': dns.get('txt', []),\n\t\t'a_records': dns.get('a', []),",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\temail_match",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\temail_match = EMAIL_REGEX.search(str(email))\n\t\tdomain_info[f'{role_prefix}_email'] = email_match.group(0) if email_match else None\ndef parse_dns_records(domain_info, dns):\n\t\"\"\"Parse DNS records.\"\"\"\n\tdomain_info.update({\n\t\t'mx_records': dns.get('mx', []),\n\t\t'txt_records': dns.get('txt', []),\n\t\t'a_records': dns.get('a', []),\n\t\t'ns_records': dns.get('ns', []),\n\t})",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info[f'{role_prefix}_email']",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info[f'{role_prefix}_email'] = email_match.group(0) if email_match else None\ndef parse_dns_records(domain_info, dns):\n\t\"\"\"Parse DNS records.\"\"\"\n\tdomain_info.update({\n\t\t'mx_records': dns.get('mx', []),\n\t\t'txt_records': dns.get('txt', []),\n\t\t'a_records': dns.get('a', []),\n\t\t'ns_records': dns.get('ns', []),\n\t})\ndef save_domain_info_to_db(target, domain_info):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info_obj.dnssec",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info_obj.dnssec = domain_info.get('dnssec', False)\n\t\tdomain_info_obj.created = domain_info.get('created')\n\t\tdomain_info_obj.updated = domain_info.get('updated')\n\t\tdomain_info_obj.expires = domain_info.get('expires')\n\t\tdomain_info_obj.whois_server = domain_info.get('whois_server')\n\t\tdomain_info_obj.geolocation_iso = domain_info.get('registrant_country')\n\t\t# Save or update Registrar\n\t\tregistrar, _ = Registrar.objects.get_or_create(\n\t\t\tname=domain_info.get('registrar_name', ''),\n\t\t\tdefaults={",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info_obj.created",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info_obj.created = domain_info.get('created')\n\t\tdomain_info_obj.updated = domain_info.get('updated')\n\t\tdomain_info_obj.expires = domain_info.get('expires')\n\t\tdomain_info_obj.whois_server = domain_info.get('whois_server')\n\t\tdomain_info_obj.geolocation_iso = domain_info.get('registrant_country')\n\t\t# Save or update Registrar\n\t\tregistrar, _ = Registrar.objects.get_or_create(\n\t\t\tname=domain_info.get('registrar_name', ''),\n\t\t\tdefaults={\n\t\t\t\t'email': domain_info.get('registrar_email'),",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info_obj.updated",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info_obj.updated = domain_info.get('updated')\n\t\tdomain_info_obj.expires = domain_info.get('expires')\n\t\tdomain_info_obj.whois_server = domain_info.get('whois_server')\n\t\tdomain_info_obj.geolocation_iso = domain_info.get('registrant_country')\n\t\t# Save or update Registrar\n\t\tregistrar, _ = Registrar.objects.get_or_create(\n\t\t\tname=domain_info.get('registrar_name', ''),\n\t\t\tdefaults={\n\t\t\t\t'email': domain_info.get('registrar_email'),\n\t\t\t\t'phone': domain_info.get('registrar_phone'),",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info_obj.expires",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info_obj.expires = domain_info.get('expires')\n\t\tdomain_info_obj.whois_server = domain_info.get('whois_server')\n\t\tdomain_info_obj.geolocation_iso = domain_info.get('registrant_country')\n\t\t# Save or update Registrar\n\t\tregistrar, _ = Registrar.objects.get_or_create(\n\t\t\tname=domain_info.get('registrar_name', ''),\n\t\t\tdefaults={\n\t\t\t\t'email': domain_info.get('registrar_email'),\n\t\t\t\t'phone': domain_info.get('registrar_phone'),\n\t\t\t\t'url': domain_info.get('registrar_url'),",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info_obj.whois_server",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info_obj.whois_server = domain_info.get('whois_server')\n\t\tdomain_info_obj.geolocation_iso = domain_info.get('registrant_country')\n\t\t# Save or update Registrar\n\t\tregistrar, _ = Registrar.objects.get_or_create(\n\t\t\tname=domain_info.get('registrar_name', ''),\n\t\t\tdefaults={\n\t\t\t\t'email': domain_info.get('registrar_email'),\n\t\t\t\t'phone': domain_info.get('registrar_phone'),\n\t\t\t\t'url': domain_info.get('registrar_url'),\n\t\t\t}",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info_obj.geolocation_iso",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info_obj.geolocation_iso = domain_info.get('registrant_country')\n\t\t# Save or update Registrar\n\t\tregistrar, _ = Registrar.objects.get_or_create(\n\t\t\tname=domain_info.get('registrar_name', ''),\n\t\t\tdefaults={\n\t\t\t\t'email': domain_info.get('registrar_email'),\n\t\t\t\t'phone': domain_info.get('registrar_phone'),\n\t\t\t\t'url': domain_info.get('registrar_url'),\n\t\t\t}\n\t\t)",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info_obj.registrar",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain_info_obj.registrar = registrar\n\t\t# Save or update Registrations (registrant, admin, tech)\n\t\tfor role in ['registrant', 'admin', 'tech']:\n\t\t\tregistration, _ = DomainRegistration.objects.get_or_create(\n\t\t\t\tname=domain_info.get(f'{role}_name', ''),\n\t\t\t\tdefaults={\n\t\t\t\t\t'organization': domain_info.get(f'{role}_organization'),\n\t\t\t\t\t'address': domain_info.get(f'{role}_address'),\n\t\t\t\t\t'city': domain_info.get(f'{role}_city'),\n\t\t\t\t\t'state': domain_info.get(f'{role}_state'),",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tdomain.domain_info",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tdomain.domain_info = domain_info_obj\n\t\tdomain.save()\n\t\treturn domain_info_obj\ndef create_inappnotification(\n\t\ttitle,\n\t\tdescription,\n\t\tnotification_type=SYSTEM_LEVEL_NOTIFICATION,\n\t\tproject_slug=None,\n\t\ticon=\"mdi-bell\",\n\t\tis_read=False,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tproject",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tproject = None\n\tif notification_type == PROJECT_LEVEL_NOTIFICATION:\n\t\tif not project_slug:\n\t\t\traise ValueError(\"Project slug is required for project level notification\")\n\t\ttry:\n\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\texcept Project.DoesNotExist as e:\n\t\t\traise ValueError(f\"No project exists: {e}\")\n\tnotification = InAppNotification(\n\t\ttitle=title,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\t\tproject",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\t\tproject = Project.objects.get(slug=project_slug)\n\t\texcept Project.DoesNotExist as e:\n\t\t\traise ValueError(f\"No project exists: {e}\")\n\tnotification = InAppNotification(\n\t\ttitle=title,\n\t\tdescription=description,\n\t\tnotification_type=notification_type,\n\t\tproject=project,\n\t\ticon=icon,\n\t\tis_read=is_read,",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tnotification",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tnotification = InAppNotification(\n\t\ttitle=title,\n\t\tdescription=description,\n\t\tnotification_type=notification_type,\n\t\tproject=project,\n\t\ticon=icon,\n\t\tis_read=is_read,\n\t\tstatus=status,\n\t\tredirect_link=redirect_link,\n\t\topen_in_new_tab=open_in_new_tab",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tis_ipv4",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tis_ipv4 = bool(validators.ipv4(ip_address))\n\tis_ipv6 = bool(validators.ipv6(ip_address))\n\tip_data = None\n\tif is_ipv4:\n\t\tip_data = ipaddress.IPv4Address(ip_address)\n\telif is_ipv6:\n\t\tip_data = ipaddress.IPv6Address(ip_address)\n\telse:\n\t\treturn None\n\treturn ip_data",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tis_ipv6",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tis_ipv6 = bool(validators.ipv6(ip_address))\n\tip_data = None\n\tif is_ipv4:\n\t\tip_data = ipaddress.IPv4Address(ip_address)\n\telif is_ipv6:\n\t\tip_data = ipaddress.IPv6Address(ip_address)\n\telse:\n\t\treturn None\n\treturn ip_data\ndef get_ips_from_cidr_range(target):",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\tip_data",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\tip_data = None\n\tif is_ipv4:\n\t\tip_data = ipaddress.IPv4Address(ip_address)\n\telif is_ipv6:\n\t\tip_data = ipaddress.IPv6Address(ip_address)\n\telse:\n\t\treturn None\n\treturn ip_data\ndef get_ips_from_cidr_range(target):\n\ttry:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tip_data",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tip_data = ipaddress.IPv4Address(ip_address)\n\telif is_ipv6:\n\t\tip_data = ipaddress.IPv6Address(ip_address)\n\telse:\n\t\treturn None\n\treturn ip_data\ndef get_ips_from_cidr_range(target):\n\ttry:\n\t\treturn [str(ip) for ip in ipaddress.IPv4Network(target, False)]\n\texcept Exception as e:",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "\t\tip_data",
        "kind": 5,
        "importPath": "web.reNgine.common_func",
        "description": "web.reNgine.common_func",
        "peekOfCode": "\t\tip_data = ipaddress.IPv6Address(ip_address)\n\telse:\n\t\treturn None\n\treturn ip_data\ndef get_ips_from_cidr_range(target):\n\ttry:\n\t\treturn [str(ip) for ip in ipaddress.IPv4Network(target, False)]\n\texcept Exception as e:\n\t\tlogger.error(f'{target} is not a valid CIDR range. Skipping.')",
        "detail": "web.reNgine.common_func",
        "documentation": {}
    },
    {
        "label": "HistoricalIPSerializer",
        "kind": 6,
        "importPath": "web.reNgine.common_serializers",
        "description": "web.reNgine.common_serializers",
        "peekOfCode": "class HistoricalIPSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = HistoricalIP\n        fields = ['ip', 'location', 'owner', 'last_seen']\nclass RelatedDomainSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RelatedDomain\n        fields = '__all__'\nclass NameServersSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "web.reNgine.common_serializers",
        "documentation": {}
    },
    {
        "label": "RelatedDomainSerializer",
        "kind": 6,
        "importPath": "web.reNgine.common_serializers",
        "description": "web.reNgine.common_serializers",
        "peekOfCode": "class RelatedDomainSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RelatedDomain\n        fields = '__all__'\nclass NameServersSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NameServer\n        fields = ['name']\nclass DomainRegistrarSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "web.reNgine.common_serializers",
        "documentation": {}
    },
    {
        "label": "NameServersSerializer",
        "kind": 6,
        "importPath": "web.reNgine.common_serializers",
        "description": "web.reNgine.common_serializers",
        "peekOfCode": "class NameServersSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NameServer\n        fields = ['name']\nclass DomainRegistrarSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Registrar\n        fields = ['name', 'phone', 'email', 'url']\nclass DomainRegistrationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "web.reNgine.common_serializers",
        "documentation": {}
    },
    {
        "label": "DomainRegistrarSerializer",
        "kind": 6,
        "importPath": "web.reNgine.common_serializers",
        "description": "web.reNgine.common_serializers",
        "peekOfCode": "class DomainRegistrarSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Registrar\n        fields = ['name', 'phone', 'email', 'url']\nclass DomainRegistrationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DomainRegistration\n        fields = [\n            'name',\n            'organization',",
        "detail": "web.reNgine.common_serializers",
        "documentation": {}
    },
    {
        "label": "DomainRegistrationSerializer",
        "kind": 6,
        "importPath": "web.reNgine.common_serializers",
        "description": "web.reNgine.common_serializers",
        "peekOfCode": "class DomainRegistrationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DomainRegistration\n        fields = [\n            'name',\n            'organization',\n            'address',\n            'city',\n            'state',\n            'zip_code',",
        "detail": "web.reNgine.common_serializers",
        "documentation": {}
    },
    {
        "label": "DomainWhoisStatusSerializer",
        "kind": 6,
        "importPath": "web.reNgine.common_serializers",
        "description": "web.reNgine.common_serializers",
        "peekOfCode": "class DomainWhoisStatusSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = WhoisStatus\n        fields = ['name']\nclass DomainDNSRecordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DNSRecord\n        fields = ['name', 'type']",
        "detail": "web.reNgine.common_serializers",
        "documentation": {}
    },
    {
        "label": "DomainDNSRecordSerializer",
        "kind": 6,
        "importPath": "web.reNgine.common_serializers",
        "description": "web.reNgine.common_serializers",
        "peekOfCode": "class DomainDNSRecordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DNSRecord\n        fields = ['name', 'type']",
        "detail": "web.reNgine.common_serializers",
        "documentation": {}
    },
    {
        "label": "projects",
        "kind": 2,
        "importPath": "web.reNgine.context_processors",
        "description": "web.reNgine.context_processors",
        "peekOfCode": "def projects(request):\n    projects = Project.objects.all()\n    try:\n        slug = request.resolver_match.kwargs.get('slug')\n        project = Project.objects.get(slug=slug)\n    except Exception:\n        project = None\n    return {\n        'projects': projects,\n        'current_project': project",
        "detail": "web.reNgine.context_processors",
        "documentation": {}
    },
    {
        "label": "version_context",
        "kind": 2,
        "importPath": "web.reNgine.context_processors",
        "description": "web.reNgine.context_processors",
        "peekOfCode": "def version_context(request):\n    return {\n        'RENGINE_CURRENT_VERSION': settings.RENGINE_CURRENT_VERSION\n    }\ndef user_preferences(request):\n    if hasattr(request, 'user_preferences'):\n        return {'user_preferences': request.user_preferences}\n    return {}",
        "detail": "web.reNgine.context_processors",
        "documentation": {}
    },
    {
        "label": "user_preferences",
        "kind": 2,
        "importPath": "web.reNgine.context_processors",
        "description": "web.reNgine.context_processors",
        "peekOfCode": "def user_preferences(request):\n    if hasattr(request, 'user_preferences'):\n        return {'user_preferences': request.user_preferences}\n    return {}",
        "detail": "web.reNgine.context_processors",
        "documentation": {}
    },
    {
        "label": "bulk_import_targets",
        "kind": 2,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "def bulk_import_targets(\n\ttargets: list[dict], \n\tproject_slug: str, \n\torganization_name: str = None, \n\torg_description: str = None, \n\th1_team_handle: str = None):\n\t\"\"\" \n\t\tUsed to import targets in reNgine\n\t\tArgs:\n\t\t\ttargets (list[dict]): list of targets to import, [{'target': 'target1.com', 'description': 'desc1'}, ...]",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "remove_wildcard",
        "kind": 2,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "def remove_wildcard(input_string):\n\t\"\"\"\n\t\tRemove wildcard (*) from the beginning of the input string.\n\t\tIn future, we may find the meaning of wildcards and try to use in target configs such as out of scope etc\n\t\"\"\"\n\treturn re.sub(r'^\\*\\.', '', input_string)\ndef store_domain(domain_name, project, description, h1_team_handle):\n\t\"\"\"\n\t\tThis function is used to store domain in reNgine\n\t\"\"\"",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "store_domain",
        "kind": 2,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "def store_domain(domain_name, project, description, h1_team_handle):\n\t\"\"\"\n\t\tThis function is used to store domain in reNgine\n\t\"\"\"\n\texisting_domain = Domain.objects.filter(name=domain_name).first()\n\tif existing_domain:\n\t\tlogger.info(f'Domain {domain_name} already exists. skipping.')\n\t\treturn\n\tcurrent_time = timezone.now()\n\tnew_domain = Domain.objects.create(",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "store_url",
        "kind": 2,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "def store_url(url, project, description, h1_team_handle):\n\tparsed_url = urlparse(url)\n\thttp_url = parsed_url.geturl()\n\tdomain_name = parsed_url.netloc\n\tdomain = Domain.objects.filter(name=domain_name).first()\n\tif domain:\n\t\tlogger.info(f'Domain {domain_name} already exists. skipping...')\n\telse:\n\t\tdomain = Domain.objects.create(\n\t\t\tname=domain_name,",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "store_ip",
        "kind": 2,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "def store_ip(ip_address, project, description, h1_team_handle):\n\tdomain = Domain.objects.filter(name=ip_address).first()\n\tif domain:\n\t\tlogger.info(f'Domain {ip_address} already exists. skipping...')\n\telse:\n\t\tdomain = Domain.objects.create(\n\t\t\tname=ip_address,\n\t\t\tdescription=description,\n\t\t\th1_team_handle=h1_team_handle,\n\t\t\tproject=project,",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@transaction.atomic\ndef bulk_import_targets(\n\ttargets: list[dict], \n\tproject_slug: str, \n\torganization_name: str = None, \n\torg_description: str = None, \n\th1_team_handle: str = None):\n\t\"\"\" \n\t\tUsed to import targets in reNgine",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tnew_targets_imported",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tnew_targets_imported = False\n\tproject = Project.objects.get(slug=project_slug)\n\tall_targets = []\n\tfor target in targets:\n\t\tname = target.get('name', '').strip()\n\t\tdescription = target.get('description', '')\n\t\tif not name:\n\t\t\tlogger.warning(f\"Skipping target with empty name\")\n\t\t\tcontinue\n\t\tis_domain = validators.domain(name)",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tproject",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tproject = Project.objects.get(slug=project_slug)\n\tall_targets = []\n\tfor target in targets:\n\t\tname = target.get('name', '').strip()\n\t\tdescription = target.get('description', '')\n\t\tif not name:\n\t\t\tlogger.warning(f\"Skipping target with empty name\")\n\t\t\tcontinue\n\t\tis_domain = validators.domain(name)\n\t\tis_ip = validators.ipv4(name) or validators.ipv6(name)",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tall_targets",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tall_targets = []\n\tfor target in targets:\n\t\tname = target.get('name', '').strip()\n\t\tdescription = target.get('description', '')\n\t\tif not name:\n\t\t\tlogger.warning(f\"Skipping target with empty name\")\n\t\t\tcontinue\n\t\tis_domain = validators.domain(name)\n\t\tis_ip = validators.ipv4(name) or validators.ipv6(name)\n\t\tis_url = validators.url(name)",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\tname",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\tname = target.get('name', '').strip()\n\t\tdescription = target.get('description', '')\n\t\tif not name:\n\t\t\tlogger.warning(f\"Skipping target with empty name\")\n\t\t\tcontinue\n\t\tis_domain = validators.domain(name)\n\t\tis_ip = validators.ipv4(name) or validators.ipv6(name)\n\t\tis_url = validators.url(name)\n\t\tlogger.info(f'{name} | Domain? {is_domain} | IP? {is_ip} | URL? {is_url}')\n\t\tif is_domain:",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\tdescription = target.get('description', '')\n\t\tif not name:\n\t\t\tlogger.warning(f\"Skipping target with empty name\")\n\t\t\tcontinue\n\t\tis_domain = validators.domain(name)\n\t\tis_ip = validators.ipv4(name) or validators.ipv6(name)\n\t\tis_url = validators.url(name)\n\t\tlogger.info(f'{name} | Domain? {is_domain} | IP? {is_ip} | URL? {is_url}')\n\t\tif is_domain:\n\t\t\ttarget_obj = store_domain(name, project, description, h1_team_handle)",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\tis_domain",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\tis_domain = validators.domain(name)\n\t\tis_ip = validators.ipv4(name) or validators.ipv6(name)\n\t\tis_url = validators.url(name)\n\t\tlogger.info(f'{name} | Domain? {is_domain} | IP? {is_ip} | URL? {is_url}')\n\t\tif is_domain:\n\t\t\ttarget_obj = store_domain(name, project, description, h1_team_handle)\n\t\telif is_url:\n\t\t\ttarget_obj = store_url(name, project, description, h1_team_handle)\n\t\telif is_ip:\n\t\t\ttarget_obj = store_ip(name, project, description, h1_team_handle)",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\tis_ip",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\tis_ip = validators.ipv4(name) or validators.ipv6(name)\n\t\tis_url = validators.url(name)\n\t\tlogger.info(f'{name} | Domain? {is_domain} | IP? {is_ip} | URL? {is_url}')\n\t\tif is_domain:\n\t\t\ttarget_obj = store_domain(name, project, description, h1_team_handle)\n\t\telif is_url:\n\t\t\ttarget_obj = store_url(name, project, description, h1_team_handle)\n\t\telif is_ip:\n\t\t\ttarget_obj = store_ip(name, project, description, h1_team_handle)\n\t\telse:",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\tis_url",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\tis_url = validators.url(name)\n\t\tlogger.info(f'{name} | Domain? {is_domain} | IP? {is_ip} | URL? {is_url}')\n\t\tif is_domain:\n\t\t\ttarget_obj = store_domain(name, project, description, h1_team_handle)\n\t\telif is_url:\n\t\t\ttarget_obj = store_url(name, project, description, h1_team_handle)\n\t\telif is_ip:\n\t\t\ttarget_obj = store_ip(name, project, description, h1_team_handle)\n\t\telse:\n\t\t\tlogger.warning(f'{name} is not supported by reNgine')",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\ttarget_obj",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\t\ttarget_obj = store_domain(name, project, description, h1_team_handle)\n\t\telif is_url:\n\t\t\ttarget_obj = store_url(name, project, description, h1_team_handle)\n\t\telif is_ip:\n\t\t\ttarget_obj = store_ip(name, project, description, h1_team_handle)\n\t\telse:\n\t\t\tlogger.warning(f'{name} is not supported by reNgine')\n\t\t\tcontinue\n\t\tif target_obj:\n\t\t\tall_targets.append(target_obj)",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\ttarget_obj",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\t\ttarget_obj = store_url(name, project, description, h1_team_handle)\n\t\telif is_ip:\n\t\t\ttarget_obj = store_ip(name, project, description, h1_team_handle)\n\t\telse:\n\t\t\tlogger.warning(f'{name} is not supported by reNgine')\n\t\t\tcontinue\n\t\tif target_obj:\n\t\t\tall_targets.append(target_obj)\n\t\t\tnew_targets_imported = True\n\t\tif organization_name and all_targets:",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\ttarget_obj",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\t\ttarget_obj = store_ip(name, project, description, h1_team_handle)\n\t\telse:\n\t\t\tlogger.warning(f'{name} is not supported by reNgine')\n\t\t\tcontinue\n\t\tif target_obj:\n\t\t\tall_targets.append(target_obj)\n\t\t\tnew_targets_imported = True\n\t\tif organization_name and all_targets:\n\t\t\torg_name = organization_name.strip()\n\t\t\torg, created = Organization.objects.get_or_create(",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\tnew_targets_imported",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\t\tnew_targets_imported = True\n\t\tif organization_name and all_targets:\n\t\t\torg_name = organization_name.strip()\n\t\t\torg, created = Organization.objects.get_or_create(\n\t\t\t\tname=org_name,\n\t\t\t\tdefaults={\n\t\t\t\t\t'project': project,\n\t\t\t\t\t'description': org_description or '',\n\t\t\t\t\t'insert_date': timezone.now()\n\t\t\t\t}",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\torg_name",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\t\torg_name = organization_name.strip()\n\t\t\torg, created = Organization.objects.get_or_create(\n\t\t\t\tname=org_name,\n\t\t\t\tdefaults={\n\t\t\t\t\t'project': project,\n\t\t\t\t\t'description': org_description or '',\n\t\t\t\t\t'insert_date': timezone.now()\n\t\t\t\t}\n\t\t\t)\n\t\t\tif not created:",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torg.project",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\t\t\torg.project = project\n\t\t\t\tif org_description:\n\t\t\t\t\torg.description = org_description\n\t\t\t\tif org.insert_date is None:\n\t\t\t\t\torg.insert_date = timezone.now()\n\t\t\t\torg.save()\n\t\t\t# Associate all targets with the organization\n\t\t\tfor target in all_targets:\n\t\t\t\torg.domains.add(target)\n\t\t\tlogger.info(f\"{'Created' if created else 'Updated'} organization {org_name} with {len(all_targets)} targets\")",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\torg.description",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\t\t\t\torg.description = org_description\n\t\t\t\tif org.insert_date is None:\n\t\t\t\t\torg.insert_date = timezone.now()\n\t\t\t\torg.save()\n\t\t\t# Associate all targets with the organization\n\t\t\tfor target in all_targets:\n\t\t\t\torg.domains.add(target)\n\t\t\tlogger.info(f\"{'Created' if created else 'Updated'} organization {org_name} with {len(all_targets)} targets\")\n\treturn new_targets_imported\ndef remove_wildcard(input_string):",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\torg.insert_date",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\t\t\t\torg.insert_date = timezone.now()\n\t\t\t\torg.save()\n\t\t\t# Associate all targets with the organization\n\t\t\tfor target in all_targets:\n\t\t\t\torg.domains.add(target)\n\t\t\tlogger.info(f\"{'Created' if created else 'Updated'} organization {org_name} with {len(all_targets)} targets\")\n\treturn new_targets_imported\ndef remove_wildcard(input_string):\n\t\"\"\"\n\t\tRemove wildcard (*) from the beginning of the input string.",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\texisting_domain",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\texisting_domain = Domain.objects.filter(name=domain_name).first()\n\tif existing_domain:\n\t\tlogger.info(f'Domain {domain_name} already exists. skipping.')\n\t\treturn\n\tcurrent_time = timezone.now()\n\tnew_domain = Domain.objects.create(\n\t\tname=domain_name,\n\t\tdescription=description,\n\t\th1_team_handle=h1_team_handle,\n\t\tproject=project,",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tcurrent_time",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tcurrent_time = timezone.now()\n\tnew_domain = Domain.objects.create(\n\t\tname=domain_name,\n\t\tdescription=description,\n\t\th1_team_handle=h1_team_handle,\n\t\tproject=project,\n\t\tinsert_date=current_time\n\t)\n\tlogger.info(f'Added new domain {new_domain.name}')\n\treturn new_domain",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tnew_domain",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tnew_domain = Domain.objects.create(\n\t\tname=domain_name,\n\t\tdescription=description,\n\t\th1_team_handle=h1_team_handle,\n\t\tproject=project,\n\t\tinsert_date=current_time\n\t)\n\tlogger.info(f'Added new domain {new_domain.name}')\n\treturn new_domain\ndef store_url(url, project, description, h1_team_handle):",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tparsed_url",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tparsed_url = urlparse(url)\n\thttp_url = parsed_url.geturl()\n\tdomain_name = parsed_url.netloc\n\tdomain = Domain.objects.filter(name=domain_name).first()\n\tif domain:\n\t\tlogger.info(f'Domain {domain_name} already exists. skipping...')\n\telse:\n\t\tdomain = Domain.objects.create(\n\t\t\tname=domain_name,\n\t\t\tdescription=description,",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\thttp_url = parsed_url.geturl()\n\tdomain_name = parsed_url.netloc\n\tdomain = Domain.objects.filter(name=domain_name).first()\n\tif domain:\n\t\tlogger.info(f'Domain {domain_name} already exists. skipping...')\n\telse:\n\t\tdomain = Domain.objects.create(\n\t\t\tname=domain_name,\n\t\t\tdescription=description,\n\t\t\th1_team_handle=h1_team_handle,",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tdomain_name = parsed_url.netloc\n\tdomain = Domain.objects.filter(name=domain_name).first()\n\tif domain:\n\t\tlogger.info(f'Domain {domain_name} already exists. skipping...')\n\telse:\n\t\tdomain = Domain.objects.create(\n\t\t\tname=domain_name,\n\t\t\tdescription=description,\n\t\t\th1_team_handle=h1_team_handle,\n\t\t\tproject=project,",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tdomain = Domain.objects.filter(name=domain_name).first()\n\tif domain:\n\t\tlogger.info(f'Domain {domain_name} already exists. skipping...')\n\telse:\n\t\tdomain = Domain.objects.create(\n\t\t\tname=domain_name,\n\t\t\tdescription=description,\n\t\t\th1_team_handle=h1_team_handle,\n\t\t\tproject=project,\n\t\t\tinsert_date=timezone.now()",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\tdomain = Domain.objects.create(\n\t\t\tname=domain_name,\n\t\t\tdescription=description,\n\t\t\th1_team_handle=h1_team_handle,\n\t\t\tproject=project,\n\t\t\tinsert_date=timezone.now()\n\t\t)\n\t\tlogger.info(f'Added new domain {domain.name}')\n\tEndPoint.objects.get_or_create(\n\t\ttarget_domain=domain,",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tdomain = Domain.objects.filter(name=ip_address).first()\n\tif domain:\n\t\tlogger.info(f'Domain {ip_address} already exists. skipping...')\n\telse:\n\t\tdomain = Domain.objects.create(\n\t\t\tname=ip_address,\n\t\t\tdescription=description,\n\t\t\th1_team_handle=h1_team_handle,\n\t\t\tproject=project,\n\t\t\tinsert_date=timezone.now(),",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\t\tdomain = Domain.objects.create(\n\t\t\tname=ip_address,\n\t\t\tdescription=description,\n\t\t\th1_team_handle=h1_team_handle,\n\t\t\tproject=project,\n\t\t\tinsert_date=timezone.now(),\n\t\t\tip_address_cidr=ip_address\n\t\t)\n\t\tlogger.info(f'Added new domain {domain.name}')\n\tip_data = get_ip_info(ip_address)",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tip_data",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tip_data = get_ip_info(ip_address)\n\tip_data = get_ip_info(ip_address)\n\tip, created = IpAddress.objects.get_or_create(address=ip_address)\n\tip.reverse_pointer = ip_data.reverse_pointer\n\tip.is_private = ip_data.is_private\n\tip.version = ip_data.version\n\tip.save()\n\treturn domain",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tip_data",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tip_data = get_ip_info(ip_address)\n\tip, created = IpAddress.objects.get_or_create(address=ip_address)\n\tip.reverse_pointer = ip_data.reverse_pointer\n\tip.is_private = ip_data.is_private\n\tip.version = ip_data.version\n\tip.save()\n\treturn domain",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tip.reverse_pointer",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tip.reverse_pointer = ip_data.reverse_pointer\n\tip.is_private = ip_data.is_private\n\tip.version = ip_data.version\n\tip.save()\n\treturn domain",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tip.is_private",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tip.is_private = ip_data.is_private\n\tip.version = ip_data.version\n\tip.save()\n\treturn domain",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "\tip.version",
        "kind": 5,
        "importPath": "web.reNgine.database_utils",
        "description": "web.reNgine.database_utils",
        "peekOfCode": "\tip.version = ip_data.version\n\tip.save()\n\treturn domain",
        "detail": "web.reNgine.database_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "logger = logging.getLogger('django')\n###############################################################################\n# TOOLS DEFINITIONS\n###############################################################################\nEMAIL_REGEX = re.compile(r'[\\w\\.-]+@[\\w\\.-]+')\n###############################################################################\n# YAML CONFIG DEFINITIONS\n###############################################################################\nALL = 'all'\nAMASS_WORDLIST = 'amass_wordlist'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "EMAIL_REGEX",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "EMAIL_REGEX = re.compile(r'[\\w\\.-]+@[\\w\\.-]+')\n###############################################################################\n# YAML CONFIG DEFINITIONS\n###############################################################################\nALL = 'all'\nAMASS_WORDLIST = 'amass_wordlist'\nAUTO_CALIBRATION = 'auto_calibration'\nCUSTOM_HEADERS = 'custom_headers'\nCUSTOM_HEADER = 'custom_header'\nFETCH_GPT_REPORT = 'fetch_gpt_report'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ALL",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "ALL = 'all'\nAMASS_WORDLIST = 'amass_wordlist'\nAUTO_CALIBRATION = 'auto_calibration'\nCUSTOM_HEADERS = 'custom_headers'\nCUSTOM_HEADER = 'custom_header'\nFETCH_GPT_REPORT = 'fetch_gpt_report'\nRUN_NUCLEI = 'run_nuclei'\nRUN_CRLFUZZ = 'run_crlfuzz'\nRUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "AMASS_WORDLIST",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "AMASS_WORDLIST = 'amass_wordlist'\nAUTO_CALIBRATION = 'auto_calibration'\nCUSTOM_HEADERS = 'custom_headers'\nCUSTOM_HEADER = 'custom_header'\nFETCH_GPT_REPORT = 'fetch_gpt_report'\nRUN_NUCLEI = 'run_nuclei'\nRUN_CRLFUZZ = 'run_crlfuzz'\nRUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "AUTO_CALIBRATION",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "AUTO_CALIBRATION = 'auto_calibration'\nCUSTOM_HEADERS = 'custom_headers'\nCUSTOM_HEADER = 'custom_header'\nFETCH_GPT_REPORT = 'fetch_gpt_report'\nRUN_NUCLEI = 'run_nuclei'\nRUN_CRLFUZZ = 'run_crlfuzz'\nRUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "CUSTOM_HEADERS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "CUSTOM_HEADERS = 'custom_headers'\nCUSTOM_HEADER = 'custom_header'\nFETCH_GPT_REPORT = 'fetch_gpt_report'\nRUN_NUCLEI = 'run_nuclei'\nRUN_CRLFUZZ = 'run_crlfuzz'\nRUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "CUSTOM_HEADER",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "CUSTOM_HEADER = 'custom_header'\nFETCH_GPT_REPORT = 'fetch_gpt_report'\nRUN_NUCLEI = 'run_nuclei'\nRUN_CRLFUZZ = 'run_crlfuzz'\nRUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FETCH_GPT_REPORT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FETCH_GPT_REPORT = 'fetch_gpt_report'\nRUN_NUCLEI = 'run_nuclei'\nRUN_CRLFUZZ = 'run_crlfuzz'\nRUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RUN_NUCLEI",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RUN_NUCLEI = 'run_nuclei'\nRUN_CRLFUZZ = 'run_crlfuzz'\nRUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RUN_CRLFUZZ",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RUN_CRLFUZZ = 'run_crlfuzz'\nRUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RUN_DALFOX",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RUN_DALFOX = 'run_dalfox'\nRUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RUN_S3SCANNER",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RUN_S3SCANNER = 'run_s3scanner'\nDIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DIR_FILE_FUZZ",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DIR_FILE_FUZZ = 'dir_file_fuzz'\nFOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FOLLOW_REDIRECT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FOLLOW_REDIRECT = 'follow_redirect'\nEXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "EXTENSIONS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "EXTENSIONS = 'extensions'\nEXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "EXCLUDED_SUBDOMAINS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "EXCLUDED_SUBDOMAINS = 'exclude_subdomains'\nEXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "EXCLUDE_EXTENSIONS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "EXCLUDE_EXTENSIONS = 'exclude_extensions'\nEXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "EXCLUDE_TEXT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "EXCLUDE_TEXT = 'exclude_text'\nFETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FETCH_URL",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FETCH_URL = 'fetch_url'\nGF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "GF_PATTERNS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "GF_PATTERNS = 'gf_patterns'\nHTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "HTTP_CRAWL",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "HTTP_CRAWL = 'http_crawl'\nIGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "IGNORE_FILE_EXTENSION",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "IGNORE_FILE_EXTENSION = 'ignore_file_extensions'\nINTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "INTENSITY",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "INTENSITY = 'intensity'\nMATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "MATCH_HTTP_STATUS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "MATCH_HTTP_STATUS = 'match_http_status'\nMAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "MAX_TIME",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "MAX_TIME = 'max_time'\nNAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NAABU_EXCLUDE_PORTS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NAABU_EXCLUDE_PORTS = 'exclude_ports'\nNAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NAABU_EXCLUDE_SUBDOMAINS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NAABU_EXCLUDE_SUBDOMAINS = 'exclude_subdomains'\nENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ENABLE_NMAP",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "ENABLE_NMAP = 'enable_nmap'\nNMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NMAP_COMMAND",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NMAP_COMMAND = 'nmap_cmd'\nNMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NMAP_SCRIPT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NMAP_SCRIPT = 'nmap_script'\nNMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NMAP_SCRIPT_ARGS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NMAP_SCRIPT_ARGS = 'nmap_script_args'\nNAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NAABU_PASSIVE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NAABU_PASSIVE = 'passive'\nNAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NAABU_RATE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NAABU_RATE = 'rate'\nNUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_CUSTOM_TEMPLATE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_CUSTOM_TEMPLATE = 'custom_templates'\nNUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_TAGS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_TAGS = 'tags'\nNUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_TEMPLATE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_TEMPLATE = 'templates'\nNUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'\nPORTS = 'ports'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_SEVERITY",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_SEVERITY = 'severities'\nNUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'\nPORTS = 'ports'\nRECURSIVE = 'recursive'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_CONCURRENCY",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_CONCURRENCY = 'concurrency'\nOSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'\nPORTS = 'ports'\nRECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OSINT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OSINT = 'osint'\nOSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'\nPORTS = 'ports'\nRECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OSINT_DOCUMENTS_LIMIT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OSINT_DOCUMENTS_LIMIT = 'documents_limit'\nOSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'\nPORTS = 'ports'\nRECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OSINT_DISCOVER",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OSINT_DISCOVER = 'discover'\nOSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'\nPORTS = 'ports'\nRECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OSINT_DORK",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OSINT_DORK = 'dorks'\nOSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'\nPORTS = 'ports'\nRECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'\nSCREENSHOT = 'screenshot'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OSINT_CUSTOM_DORK",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OSINT_CUSTOM_DORK = 'custom_dorks'\nPORT = 'port'\nPORTS = 'ports'\nRECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'\nSCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PORT = 'port'\nPORTS = 'ports'\nRECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'\nSCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PORTS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PORTS = 'ports'\nRECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'\nSCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RECURSIVE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RECURSIVE = 'recursive'\nRECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'\nSCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RECURSIVE_LEVEL",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RECURSIVE_LEVEL = 'recursive_level'\nPORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'\nSCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'\nTIMEOUT = 'timeout'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PORT_SCAN",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PORT_SCAN = 'port_scan'\nRATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'\nSCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'\nTIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RATE_LIMIT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RATE_LIMIT = 'rate_limit'\nRETRIES = 'retries'\nSCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'\nTIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RETRIES",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RETRIES = 'retries'\nSCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'\nTIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "SCREENSHOT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "SCREENSHOT = 'screenshot'\nSUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'\nTIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "SUBDOMAIN_DISCOVERY",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "SUBDOMAIN_DISCOVERY = 'subdomain_discovery'\nSTOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'\nTIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "STOP_ON_ERROR",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "STOP_ON_ERROR = 'stop_on_error'\nENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'\nTIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ENABLE_HTTP_CRAWL",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "ENABLE_HTTP_CRAWL = 'enable_http_crawl'\nTHREADS = 'threads'\nTIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "THREADS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "THREADS = 'threads'\nTIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "TIMEOUT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "TIMEOUT = 'timeout'\nUSE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "USE_AMASS_CONFIG",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "USE_AMASS_CONFIG = 'use_amass_config'\nUSE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "USE_NAABU_CONFIG",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "USE_NAABU_CONFIG = 'use_naabu_config'\nUSE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "USE_NUCLEI_CONFIG",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "USE_NUCLEI_CONFIG = 'use_nuclei_config'\nUSE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'\nS3SCANNER = 's3scanner'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "USE_SUBFINDER_CONFIG",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "USE_SUBFINDER_CONFIG = 'use_subfinder_config'\nUSES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'\nS3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "USES_TOOLS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "USES_TOOLS = 'uses_tools'\nVULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'\nS3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'\nNMAP = 'nmap'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "VULNERABILITY_SCAN",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "VULNERABILITY_SCAN = 'vulnerability_scan'\nWAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'\nS3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'\nNMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "WAF_DETECTION",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "WAF_DETECTION = 'waf_detection'\nWORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'\nS3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'\nNMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "WORDLIST",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "WORDLIST = 'wordlist_name'\nREMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'\nS3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'\nNMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "REMOVE_DUPLICATE_ENDPOINTS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "REMOVE_DUPLICATE_ENDPOINTS = 'remove_duplicate_endpoints'\nDUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'\nS3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'\nNMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DUPLICATE_REMOVAL_FIELDS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DUPLICATE_REMOVAL_FIELDS = 'duplicate_fields'\nDALFOX = 'dalfox'\nS3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'\nNMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'\nDELAY = 'delay'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DALFOX",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DALFOX = 'dalfox'\nS3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'\nNMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'\nDELAY = 'delay'\nPROVIDERS = 'providers'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "S3SCANNER",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "S3SCANNER = 's3scanner'\nNUCLEI = 'nuclei'\nNMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'\nDELAY = 'delay'\nPROVIDERS = 'providers'\n###############################################################################",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI = 'nuclei'\nNMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'\nDELAY = 'delay'\nPROVIDERS = 'providers'\n###############################################################################\n# Scan DEFAULTS",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NMAP",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NMAP = 'nmap'\nCRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'\nDELAY = 'delay'\nPROVIDERS = 'providers'\n###############################################################################\n# Scan DEFAULTS\n###############################################################################",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "CRLFUZZ",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "CRLFUZZ = 'crlfuzz'\nWAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'\nDELAY = 'delay'\nPROVIDERS = 'providers'\n###############################################################################\n# Scan DEFAULTS\n###############################################################################\nLIVE_SCAN = 1",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "WAF_EVASION",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "WAF_EVASION = 'waf_evasion'\nBLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'\nDELAY = 'delay'\nPROVIDERS = 'providers'\n###############################################################################\n# Scan DEFAULTS\n###############################################################################\nLIVE_SCAN = 1\nSCHEDULED_SCAN = 0",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "BLIND_XSS_SERVER",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "BLIND_XSS_SERVER = 'blind_xss_server'\nUSER_AGENT = 'user_agent'\nDELAY = 'delay'\nPROVIDERS = 'providers'\n###############################################################################\n# Scan DEFAULTS\n###############################################################################\nLIVE_SCAN = 1\nSCHEDULED_SCAN = 0\nDEFAULT_SCAN_INTENSITY = 'normal'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "USER_AGENT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "USER_AGENT = 'user_agent'\nDELAY = 'delay'\nPROVIDERS = 'providers'\n###############################################################################\n# Scan DEFAULTS\n###############################################################################\nLIVE_SCAN = 1\nSCHEDULED_SCAN = 0\nDEFAULT_SCAN_INTENSITY = 'normal'\n###############################################################################",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DELAY",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DELAY = 'delay'\nPROVIDERS = 'providers'\n###############################################################################\n# Scan DEFAULTS\n###############################################################################\nLIVE_SCAN = 1\nSCHEDULED_SCAN = 0\nDEFAULT_SCAN_INTENSITY = 'normal'\n###############################################################################\n# Tools DEFAULTS",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PROVIDERS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PROVIDERS = 'providers'\n###############################################################################\n# Scan DEFAULTS\n###############################################################################\nLIVE_SCAN = 1\nSCHEDULED_SCAN = 0\nDEFAULT_SCAN_INTENSITY = 'normal'\n###############################################################################\n# Tools DEFAULTS\n###############################################################################",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "LIVE_SCAN",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "LIVE_SCAN = 1\nSCHEDULED_SCAN = 0\nDEFAULT_SCAN_INTENSITY = 'normal'\n###############################################################################\n# Tools DEFAULTS\n###############################################################################\n# amass\nAMASS_DEFAULT_WORDLIST_PATH = (\n    'wordlist/default_wordlist/deepmagic.com-prefixes-top50000.txt'\n)",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "SCHEDULED_SCAN",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "SCHEDULED_SCAN = 0\nDEFAULT_SCAN_INTENSITY = 'normal'\n###############################################################################\n# Tools DEFAULTS\n###############################################################################\n# amass\nAMASS_DEFAULT_WORDLIST_PATH = (\n    'wordlist/default_wordlist/deepmagic.com-prefixes-top50000.txt'\n)\n# dorks",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCAN_INTENSITY",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DEFAULT_SCAN_INTENSITY = 'normal'\n###############################################################################\n# Tools DEFAULTS\n###############################################################################\n# amass\nAMASS_DEFAULT_WORDLIST_PATH = (\n    'wordlist/default_wordlist/deepmagic.com-prefixes-top50000.txt'\n)\n# dorks\nDORKS_DEFAULT_NAMES = [",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "AMASS_DEFAULT_WORDLIST_PATH",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "AMASS_DEFAULT_WORDLIST_PATH = (\n    'wordlist/default_wordlist/deepmagic.com-prefixes-top50000.txt'\n)\n# dorks\nDORKS_DEFAULT_NAMES = [\n    'stackoverflow',\n    '3rdparty',\n    'social_media',\n    'project_management',\n    'code_sharing',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DORKS_DEFAULT_NAMES",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DORKS_DEFAULT_NAMES = [\n    'stackoverflow',\n    '3rdparty',\n    'social_media',\n    'project_management',\n    'code_sharing',\n    'config_files',\n    'jenkins',\n    'cloud_buckets',\n    'php_error',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FFUF_DEFAULT_WORDLIST_PATH",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FFUF_DEFAULT_WORDLIST_PATH = '/usr/src/wordlist/dicc.txt'\nFFUF_DEFAULT_MATCH_HTTP_STATUS = [200, 204]\nFFUF_DEFAULT_RECURSIVE_LEVEL = 2\nFFUF_DEFAULT_FOLLOW_REDIRECT = False\n# naabu\nNAABU_DEFAULT_PORTS = ['top-100']\n# nuclei\nNUCLEI_DEFAULT_TEMPLATES_PATH = '/root/nuclei-templates'\nNUCLEI_SEVERITY_MAP = {\n    'info': 0,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FFUF_DEFAULT_MATCH_HTTP_STATUS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FFUF_DEFAULT_MATCH_HTTP_STATUS = [200, 204]\nFFUF_DEFAULT_RECURSIVE_LEVEL = 2\nFFUF_DEFAULT_FOLLOW_REDIRECT = False\n# naabu\nNAABU_DEFAULT_PORTS = ['top-100']\n# nuclei\nNUCLEI_DEFAULT_TEMPLATES_PATH = '/root/nuclei-templates'\nNUCLEI_SEVERITY_MAP = {\n    'info': 0,\n    'low': 1,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FFUF_DEFAULT_RECURSIVE_LEVEL",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FFUF_DEFAULT_RECURSIVE_LEVEL = 2\nFFUF_DEFAULT_FOLLOW_REDIRECT = False\n# naabu\nNAABU_DEFAULT_PORTS = ['top-100']\n# nuclei\nNUCLEI_DEFAULT_TEMPLATES_PATH = '/root/nuclei-templates'\nNUCLEI_SEVERITY_MAP = {\n    'info': 0,\n    'low': 1,\n    'medium': 2,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FFUF_DEFAULT_FOLLOW_REDIRECT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FFUF_DEFAULT_FOLLOW_REDIRECT = False\n# naabu\nNAABU_DEFAULT_PORTS = ['top-100']\n# nuclei\nNUCLEI_DEFAULT_TEMPLATES_PATH = '/root/nuclei-templates'\nNUCLEI_SEVERITY_MAP = {\n    'info': 0,\n    'low': 1,\n    'medium': 2,\n    'high': 3,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NAABU_DEFAULT_PORTS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NAABU_DEFAULT_PORTS = ['top-100']\n# nuclei\nNUCLEI_DEFAULT_TEMPLATES_PATH = '/root/nuclei-templates'\nNUCLEI_SEVERITY_MAP = {\n    'info': 0,\n    'low': 1,\n    'medium': 2,\n    'high': 3,\n    'critical': 4,\n    'unknown': -1,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_DEFAULT_TEMPLATES_PATH",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_DEFAULT_TEMPLATES_PATH = '/root/nuclei-templates'\nNUCLEI_SEVERITY_MAP = {\n    'info': 0,\n    'low': 1,\n    'medium': 2,\n    'high': 3,\n    'critical': 4,\n    'unknown': -1,\n}\nNUCLEI_REVERSE_SEVERITY_MAP = {v: k for k, v in NUCLEI_SEVERITY_MAP.items()}",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_SEVERITY_MAP",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_SEVERITY_MAP = {\n    'info': 0,\n    'low': 1,\n    'medium': 2,\n    'high': 3,\n    'critical': 4,\n    'unknown': -1,\n}\nNUCLEI_REVERSE_SEVERITY_MAP = {v: k for k, v in NUCLEI_SEVERITY_MAP.items()}\nNUCLEI_DEFAULT_SEVERITIES = list(NUCLEI_SEVERITY_MAP.keys())",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_REVERSE_SEVERITY_MAP",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_REVERSE_SEVERITY_MAP = {v: k for k, v in NUCLEI_SEVERITY_MAP.items()}\nNUCLEI_DEFAULT_SEVERITIES = list(NUCLEI_SEVERITY_MAP.keys())\n# s3scanner\nS3SCANNER_DEFAULT_PROVIDERS = ['gcp', 'aws', 'digitalocean', 'dreamhost', 'linode']\n# dalfox\nDALFOX_SEVERITY_MAP = {\n    'Low': 1,\n    'Medium': 2,\n    'High': 3,\n    'unknown': -1,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NUCLEI_DEFAULT_SEVERITIES",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NUCLEI_DEFAULT_SEVERITIES = list(NUCLEI_SEVERITY_MAP.keys())\n# s3scanner\nS3SCANNER_DEFAULT_PROVIDERS = ['gcp', 'aws', 'digitalocean', 'dreamhost', 'linode']\n# dalfox\nDALFOX_SEVERITY_MAP = {\n    'Low': 1,\n    'Medium': 2,\n    'High': 3,\n    'unknown': -1,\n}",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "S3SCANNER_DEFAULT_PROVIDERS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "S3SCANNER_DEFAULT_PROVIDERS = ['gcp', 'aws', 'digitalocean', 'dreamhost', 'linode']\n# dalfox\nDALFOX_SEVERITY_MAP = {\n    'Low': 1,\n    'Medium': 2,\n    'High': 3,\n    'unknown': -1,\n}\n# osint\nOSINT_DEFAULT_LOOKUPS = ['emails', 'metainfo', 'employees']",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DALFOX_SEVERITY_MAP",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DALFOX_SEVERITY_MAP = {\n    'Low': 1,\n    'Medium': 2,\n    'High': 3,\n    'unknown': -1,\n}\n# osint\nOSINT_DEFAULT_LOOKUPS = ['emails', 'metainfo', 'employees']\nOSINT_DEFAULT_DORKS = [\n    'stackoverflow',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OSINT_DEFAULT_LOOKUPS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OSINT_DEFAULT_LOOKUPS = ['emails', 'metainfo', 'employees']\nOSINT_DEFAULT_DORKS = [\n    'stackoverflow',\n    '3rdparty',\n    'social_media',\n    'project_management',\n    'code_sharing',\n    'config_files',\n    'jenkins',\n    'wordpress_files',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OSINT_DEFAULT_DORKS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OSINT_DEFAULT_DORKS = [\n    'stackoverflow',\n    '3rdparty',\n    'social_media',\n    'project_management',\n    'code_sharing',\n    'config_files',\n    'jenkins',\n    'wordpress_files',\n    'cloud_buckets',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OSINT_DEFAULT_CONFIG",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OSINT_DEFAULT_CONFIG = {\n    'discover': OSINT_DEFAULT_LOOKUPS,\n    'dork': OSINT_DEFAULT_DORKS\n}\n# subdomain scan\nSUBDOMAIN_SCAN_DEFAULT_TOOLS = ['subfinder', 'ctfr', 'sublist3r', 'tlsx']\n# endpoints scan\nENDPOINT_SCAN_DEFAULT_TOOLS = ['gospider']\nENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS = ['content_length', 'page_title']\n###############################################################################",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "SUBDOMAIN_SCAN_DEFAULT_TOOLS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "SUBDOMAIN_SCAN_DEFAULT_TOOLS = ['subfinder', 'ctfr', 'sublist3r', 'tlsx']\n# endpoints scan\nENDPOINT_SCAN_DEFAULT_TOOLS = ['gospider']\nENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS = ['content_length', 'page_title']\n###############################################################################\n# Logger DEFINITIONS\n###############################################################################\nCONFIG_FILE_NOT_FOUND = 'Config file not found'\n###############################################################################\n# Preferences DEFINITIONS",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ENDPOINT_SCAN_DEFAULT_TOOLS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "ENDPOINT_SCAN_DEFAULT_TOOLS = ['gospider']\nENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS = ['content_length', 'page_title']\n###############################################################################\n# Logger DEFINITIONS\n###############################################################################\nCONFIG_FILE_NOT_FOUND = 'Config file not found'\n###############################################################################\n# Preferences DEFINITIONS\n###############################################################################\nSMALL = '100px'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "ENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS = ['content_length', 'page_title']\n###############################################################################\n# Logger DEFINITIONS\n###############################################################################\nCONFIG_FILE_NOT_FOUND = 'Config file not found'\n###############################################################################\n# Preferences DEFINITIONS\n###############################################################################\nSMALL = '100px'\nMEDIM = '200px'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "CONFIG_FILE_NOT_FOUND",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "CONFIG_FILE_NOT_FOUND = 'Config file not found'\n###############################################################################\n# Preferences DEFINITIONS\n###############################################################################\nSMALL = '100px'\nMEDIM = '200px'\nLARGE = '400px'\nXLARGE = '500px'\n# Discord message colors\nDISCORD_INFO_COLOR = '0xfbbc00' # yellow",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "SMALL",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "SMALL = '100px'\nMEDIM = '200px'\nLARGE = '400px'\nXLARGE = '500px'\n# Discord message colors\nDISCORD_INFO_COLOR = '0xfbbc00' # yellow\nDISCORD_WARNING_COLOR = '0xf75b00' # orange\nDISCORD_ERROR_COLOR = '0xf70000'\nDISCORD_SUCCESS_COLOR = '0x00ff78'\nDISCORD_SEVERITY_COLORS = {",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "MEDIM",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "MEDIM = '200px'\nLARGE = '400px'\nXLARGE = '500px'\n# Discord message colors\nDISCORD_INFO_COLOR = '0xfbbc00' # yellow\nDISCORD_WARNING_COLOR = '0xf75b00' # orange\nDISCORD_ERROR_COLOR = '0xf70000'\nDISCORD_SUCCESS_COLOR = '0x00ff78'\nDISCORD_SEVERITY_COLORS = {\n    'info': DISCORD_INFO_COLOR,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "LARGE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "LARGE = '400px'\nXLARGE = '500px'\n# Discord message colors\nDISCORD_INFO_COLOR = '0xfbbc00' # yellow\nDISCORD_WARNING_COLOR = '0xf75b00' # orange\nDISCORD_ERROR_COLOR = '0xf70000'\nDISCORD_SUCCESS_COLOR = '0x00ff78'\nDISCORD_SEVERITY_COLORS = {\n    'info': DISCORD_INFO_COLOR,\n    'warning': DISCORD_WARNING_COLOR,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "XLARGE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "XLARGE = '500px'\n# Discord message colors\nDISCORD_INFO_COLOR = '0xfbbc00' # yellow\nDISCORD_WARNING_COLOR = '0xf75b00' # orange\nDISCORD_ERROR_COLOR = '0xf70000'\nDISCORD_SUCCESS_COLOR = '0x00ff78'\nDISCORD_SEVERITY_COLORS = {\n    'info': DISCORD_INFO_COLOR,\n    'warning': DISCORD_WARNING_COLOR,\n    'error': DISCORD_ERROR_COLOR,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DISCORD_INFO_COLOR",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DISCORD_INFO_COLOR = '0xfbbc00' # yellow\nDISCORD_WARNING_COLOR = '0xf75b00' # orange\nDISCORD_ERROR_COLOR = '0xf70000'\nDISCORD_SUCCESS_COLOR = '0x00ff78'\nDISCORD_SEVERITY_COLORS = {\n    'info': DISCORD_INFO_COLOR,\n    'warning': DISCORD_WARNING_COLOR,\n    'error': DISCORD_ERROR_COLOR,\n    'aborted': DISCORD_ERROR_COLOR,\n    'success': DISCORD_SUCCESS_COLOR",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DISCORD_WARNING_COLOR",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DISCORD_WARNING_COLOR = '0xf75b00' # orange\nDISCORD_ERROR_COLOR = '0xf70000'\nDISCORD_SUCCESS_COLOR = '0x00ff78'\nDISCORD_SEVERITY_COLORS = {\n    'info': DISCORD_INFO_COLOR,\n    'warning': DISCORD_WARNING_COLOR,\n    'error': DISCORD_ERROR_COLOR,\n    'aborted': DISCORD_ERROR_COLOR,\n    'success': DISCORD_SUCCESS_COLOR\n}",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DISCORD_ERROR_COLOR",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DISCORD_ERROR_COLOR = '0xf70000'\nDISCORD_SUCCESS_COLOR = '0x00ff78'\nDISCORD_SEVERITY_COLORS = {\n    'info': DISCORD_INFO_COLOR,\n    'warning': DISCORD_WARNING_COLOR,\n    'error': DISCORD_ERROR_COLOR,\n    'aborted': DISCORD_ERROR_COLOR,\n    'success': DISCORD_SUCCESS_COLOR\n}\nSTATUS_TO_SEVERITIES = {",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DISCORD_SUCCESS_COLOR",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DISCORD_SUCCESS_COLOR = '0x00ff78'\nDISCORD_SEVERITY_COLORS = {\n    'info': DISCORD_INFO_COLOR,\n    'warning': DISCORD_WARNING_COLOR,\n    'error': DISCORD_ERROR_COLOR,\n    'aborted': DISCORD_ERROR_COLOR,\n    'success': DISCORD_SUCCESS_COLOR\n}\nSTATUS_TO_SEVERITIES = {\n    'RUNNING': 'info',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DISCORD_SEVERITY_COLORS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DISCORD_SEVERITY_COLORS = {\n    'info': DISCORD_INFO_COLOR,\n    'warning': DISCORD_WARNING_COLOR,\n    'error': DISCORD_ERROR_COLOR,\n    'aborted': DISCORD_ERROR_COLOR,\n    'success': DISCORD_SUCCESS_COLOR\n}\nSTATUS_TO_SEVERITIES = {\n    'RUNNING': 'info',\n    'SUCCESS': 'success',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "STATUS_TO_SEVERITIES",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "STATUS_TO_SEVERITIES = {\n    'RUNNING': 'info',\n    'SUCCESS': 'success',\n    'FAILED': 'error',\n    'ABORTED': 'error'\n}\n###############################################################################\n# Interesting Subdomain DEFINITIONS\n###############################################################################\nMATCHED_SUBDOMAIN = 'Subdomain'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "MATCHED_SUBDOMAIN",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "MATCHED_SUBDOMAIN = 'Subdomain'\nMATCHED_PAGE_TITLE = 'Page Title'\n###############################################################################\n# Celery Task Status CODES\n###############################################################################\nINITIATED_TASK = -1\nFAILED_TASK = 0\nRUNNING_TASK = 1\nSUCCESS_TASK = 2\nABORTED_TASK = 3",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "MATCHED_PAGE_TITLE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "MATCHED_PAGE_TITLE = 'Page Title'\n###############################################################################\n# Celery Task Status CODES\n###############################################################################\nINITIATED_TASK = -1\nFAILED_TASK = 0\nRUNNING_TASK = 1\nSUCCESS_TASK = 2\nABORTED_TASK = 3\nCELERY_TASK_STATUS_MAP = {",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "INITIATED_TASK",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "INITIATED_TASK = -1\nFAILED_TASK = 0\nRUNNING_TASK = 1\nSUCCESS_TASK = 2\nABORTED_TASK = 3\nCELERY_TASK_STATUS_MAP = {\n    INITIATED_TASK: 'INITITATED',\n    FAILED_TASK: 'FAILED',\n    RUNNING_TASK: 'RUNNING',\n    SUCCESS_TASK: 'SUCCESS',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FAILED_TASK",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FAILED_TASK = 0\nRUNNING_TASK = 1\nSUCCESS_TASK = 2\nABORTED_TASK = 3\nCELERY_TASK_STATUS_MAP = {\n    INITIATED_TASK: 'INITITATED',\n    FAILED_TASK: 'FAILED',\n    RUNNING_TASK: 'RUNNING',\n    SUCCESS_TASK: 'SUCCESS',\n    ABORTED_TASK: 'ABORTED'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "RUNNING_TASK",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "RUNNING_TASK = 1\nSUCCESS_TASK = 2\nABORTED_TASK = 3\nCELERY_TASK_STATUS_MAP = {\n    INITIATED_TASK: 'INITITATED',\n    FAILED_TASK: 'FAILED',\n    RUNNING_TASK: 'RUNNING',\n    SUCCESS_TASK: 'SUCCESS',\n    ABORTED_TASK: 'ABORTED'\n}",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "SUCCESS_TASK",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "SUCCESS_TASK = 2\nABORTED_TASK = 3\nCELERY_TASK_STATUS_MAP = {\n    INITIATED_TASK: 'INITITATED',\n    FAILED_TASK: 'FAILED',\n    RUNNING_TASK: 'RUNNING',\n    SUCCESS_TASK: 'SUCCESS',\n    ABORTED_TASK: 'ABORTED'\n}\nCELERY_TASK_STATUSES = (",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ABORTED_TASK",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "ABORTED_TASK = 3\nCELERY_TASK_STATUS_MAP = {\n    INITIATED_TASK: 'INITITATED',\n    FAILED_TASK: 'FAILED',\n    RUNNING_TASK: 'RUNNING',\n    SUCCESS_TASK: 'SUCCESS',\n    ABORTED_TASK: 'ABORTED'\n}\nCELERY_TASK_STATUSES = (\n    (INITIATED_TASK, INITIATED_TASK),",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_STATUS_MAP",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "CELERY_TASK_STATUS_MAP = {\n    INITIATED_TASK: 'INITITATED',\n    FAILED_TASK: 'FAILED',\n    RUNNING_TASK: 'RUNNING',\n    SUCCESS_TASK: 'SUCCESS',\n    ABORTED_TASK: 'ABORTED'\n}\nCELERY_TASK_STATUSES = (\n    (INITIATED_TASK, INITIATED_TASK),\n    (FAILED_TASK, FAILED_TASK),",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_STATUSES",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "CELERY_TASK_STATUSES = (\n    (INITIATED_TASK, INITIATED_TASK),\n    (FAILED_TASK, FAILED_TASK),\n    (RUNNING_TASK, RUNNING_TASK),\n    (SUCCESS_TASK, SUCCESS_TASK),\n    (ABORTED_TASK, ABORTED_TASK)\n)\nDYNAMIC_ID = -1\n###############################################################################\n# Uncommon Ports",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DYNAMIC_ID",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DYNAMIC_ID = -1\n###############################################################################\n# Uncommon Ports\n# Source: https://github.com/six2dez/reconftw/blob/main/reconftw.cfg\n###############################################################################\nUNCOMMON_WEB_PORTS = [\n    81,\n    300,\n    591,\n    593,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "UNCOMMON_WEB_PORTS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "UNCOMMON_WEB_PORTS = [\n    81,\n    300,\n    591,\n    593,\n    832,\n    981,\n    1010,\n    1311,\n    1099,",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "IGNORE_WHOIS_RELATED_KEYWORD",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "IGNORE_WHOIS_RELATED_KEYWORD = [\n    'Registration Private',\n    'Domains By Proxy Llc',\n    'Redacted For Privacy',\n    'Digital Privacy Corporation',\n    'Private Registrant',\n    'Domain Administrator',\n    'Administrator',\n]\n# Default FETCH URL params",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DEFAULT_IGNORE_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DEFAULT_IGNORE_FILE_EXTENSIONS = [\n    'png',\n    'jpg',\n    'jpeg',\n    'gif',\n    'mp4',\n    'mpeg',\n    'mp3',\n]\nDEFAULT_GF_PATTERNS = [",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GF_PATTERNS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DEFAULT_GF_PATTERNS = [\n    'debug_logic',\n    'idor',\n    'interestingEXT',\n    'interestingparams',\n    'interestingsubs',\n    'lfi',\n    'rce',\n    'redirect',\n    'sqli',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DIR_FILE_FUZZ_EXTENSIONS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DEFAULT_DIR_FILE_FUZZ_EXTENSIONS =  [\n    '.html',\n    '.php',\n    '.git',\n    '.yaml',\n    '.conf',\n    '.cnf',\n    '.config',\n    '.gz',\n    '.env',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DEFAULT_EXCLUDED_PATHS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DEFAULT_EXCLUDED_PATHS = [\n    # Static assets (using regex patterns)\n    '/static/.*',\n    '/assets/.*',\n    '/css/.*',\n    '/js/.*',\n    '/images/.*',\n    '/img/.*',\n    '/fonts/.*',\n    # File types (using regex patterns)",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PERM_MODIFY_SYSTEM_CONFIGURATIONS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PERM_MODIFY_SYSTEM_CONFIGURATIONS = 'modify_system_configurations'\nPERM_MODIFY_SCAN_CONFIGURATIONS = 'modify_scan_configurations'\nPERM_MODIFY_TARGETS = 'modify_targets'\nPERM_MODIFY_SCAN_RESULTS = 'modify_scan_results'\nPERM_MODIFY_WORDLISTS = 'modify_wordlists'\nPERM_MODIFY_INTERESTING_LOOKUP = 'modify_interesting_lookup'\nPERM_MODIFY_SCAN_REPORT = 'modify_scan_report'\nPERM_INITATE_SCANS_SUBSCANS = 'initiate_scans_subscans'\n# 404 page url\nFOUR_OH_FOUR_URL = '/404/'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PERM_MODIFY_SCAN_CONFIGURATIONS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PERM_MODIFY_SCAN_CONFIGURATIONS = 'modify_scan_configurations'\nPERM_MODIFY_TARGETS = 'modify_targets'\nPERM_MODIFY_SCAN_RESULTS = 'modify_scan_results'\nPERM_MODIFY_WORDLISTS = 'modify_wordlists'\nPERM_MODIFY_INTERESTING_LOOKUP = 'modify_interesting_lookup'\nPERM_MODIFY_SCAN_REPORT = 'modify_scan_report'\nPERM_INITATE_SCANS_SUBSCANS = 'initiate_scans_subscans'\n# 404 page url\nFOUR_OH_FOUR_URL = '/404/'\n###############################################################################",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PERM_MODIFY_TARGETS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PERM_MODIFY_TARGETS = 'modify_targets'\nPERM_MODIFY_SCAN_RESULTS = 'modify_scan_results'\nPERM_MODIFY_WORDLISTS = 'modify_wordlists'\nPERM_MODIFY_INTERESTING_LOOKUP = 'modify_interesting_lookup'\nPERM_MODIFY_SCAN_REPORT = 'modify_scan_report'\nPERM_INITATE_SCANS_SUBSCANS = 'initiate_scans_subscans'\n# 404 page url\nFOUR_OH_FOUR_URL = '/404/'\n###############################################################################\n# OLLAMA DEFINITIONS",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PERM_MODIFY_SCAN_RESULTS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PERM_MODIFY_SCAN_RESULTS = 'modify_scan_results'\nPERM_MODIFY_WORDLISTS = 'modify_wordlists'\nPERM_MODIFY_INTERESTING_LOOKUP = 'modify_interesting_lookup'\nPERM_MODIFY_SCAN_REPORT = 'modify_scan_report'\nPERM_INITATE_SCANS_SUBSCANS = 'initiate_scans_subscans'\n# 404 page url\nFOUR_OH_FOUR_URL = '/404/'\n###############################################################################\n# OLLAMA DEFINITIONS\n###############################################################################",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PERM_MODIFY_WORDLISTS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PERM_MODIFY_WORDLISTS = 'modify_wordlists'\nPERM_MODIFY_INTERESTING_LOOKUP = 'modify_interesting_lookup'\nPERM_MODIFY_SCAN_REPORT = 'modify_scan_report'\nPERM_INITATE_SCANS_SUBSCANS = 'initiate_scans_subscans'\n# 404 page url\nFOUR_OH_FOUR_URL = '/404/'\n###############################################################################\n# OLLAMA DEFINITIONS\n###############################################################################\nOLLAMA_INSTANCE = 'http://ollama:11434'",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PERM_MODIFY_INTERESTING_LOOKUP",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PERM_MODIFY_INTERESTING_LOOKUP = 'modify_interesting_lookup'\nPERM_MODIFY_SCAN_REPORT = 'modify_scan_report'\nPERM_INITATE_SCANS_SUBSCANS = 'initiate_scans_subscans'\n# 404 page url\nFOUR_OH_FOUR_URL = '/404/'\n###############################################################################\n# OLLAMA DEFINITIONS\n###############################################################################\nOLLAMA_INSTANCE = 'http://ollama:11434'\nDEFAULT_GPT_MODELS = [",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PERM_MODIFY_SCAN_REPORT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PERM_MODIFY_SCAN_REPORT = 'modify_scan_report'\nPERM_INITATE_SCANS_SUBSCANS = 'initiate_scans_subscans'\n# 404 page url\nFOUR_OH_FOUR_URL = '/404/'\n###############################################################################\n# OLLAMA DEFINITIONS\n###############################################################################\nOLLAMA_INSTANCE = 'http://ollama:11434'\nDEFAULT_GPT_MODELS = [\n    {",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PERM_INITATE_SCANS_SUBSCANS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PERM_INITATE_SCANS_SUBSCANS = 'initiate_scans_subscans'\n# 404 page url\nFOUR_OH_FOUR_URL = '/404/'\n###############################################################################\n# OLLAMA DEFINITIONS\n###############################################################################\nOLLAMA_INSTANCE = 'http://ollama:11434'\nDEFAULT_GPT_MODELS = [\n    {\n        'name': 'gpt-3',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "FOUR_OH_FOUR_URL",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "FOUR_OH_FOUR_URL = '/404/'\n###############################################################################\n# OLLAMA DEFINITIONS\n###############################################################################\nOLLAMA_INSTANCE = 'http://ollama:11434'\nDEFAULT_GPT_MODELS = [\n    {\n        'name': 'gpt-3',\n        'model': 'gpt-3',\n        'modified_at': '',",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "OLLAMA_INSTANCE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "OLLAMA_INSTANCE = 'http://ollama:11434'\nDEFAULT_GPT_MODELS = [\n    {\n        'name': 'gpt-3',\n        'model': 'gpt-3',\n        'modified_at': '',\n        'details': {\n            'family': 'GPT',\n            'parameter_size': '~175B',\n        }",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GPT_MODELS",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "DEFAULT_GPT_MODELS = [\n    {\n        'name': 'gpt-3',\n        'model': 'gpt-3',\n        'modified_at': '',\n        'details': {\n            'family': 'GPT',\n            'parameter_size': '~175B',\n        }\n    },",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "VULNERABILITY_DESCRIPTION_SYSTEM_MESSAGE",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "VULNERABILITY_DESCRIPTION_SYSTEM_MESSAGE = \"\"\"\nYou are an expert penetration tester who has just completed a comprehensive security assessment. Based on the provided vulnerability title, vulnerable URL, and vulnerability description, your task is to generate a detailed, technical penetration testing report in plain text format.\nYour task is to generate a detailed, technical penetration testing report. This report should offer an in-depth analysis of the discovered vulnerabilities, adhering to industry best practices and standards.\nThe output should adhere to the following structure:\nDescription:\nA comprehensive explanation of the vulnerability, including: Detailed technical analysis, Associated CVE IDs (if any), Related known vulnerabilities, Exploitation methods\nImpact:\nA thorough assessment of the vulnerability's potential impact on web applications, including: Data confidentiality breaches, System integrity compromises, Service availability disruptions, Potential for further exploitation\nRemediation:\nA prioritized list of specific, actionable steps to address the vulnerability, such as: Code modifications, Configuration changes, Security patch applications, Implementation of security controls",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT = \"\"\"\n    You are a highly skilled penetration tester who has recently completed a reconnaissance on a target.\n    As a penetration tester, you've conducted a thorough reconnaissance on a specific subdomain.\n    Based on the reconnaissance you will be given with a\n        - Subdomain Name\n        - Subdomain Page Title\n        - Open Ports if any detected\n        - HTTP Status\n        - Technologies Detected\n        - Content Type",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "GOFUZZ_EXEC_PATH",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "GOFUZZ_EXEC_PATH = '/usr/src/github/goofuzz/GooFuzz'\n# In App Notification Definitions\nSYSTEM_LEVEL_NOTIFICATION = 'system'\nPROJECT_LEVEL_NOTIFICATION = 'project'\nNOTIFICATION_TYPES = (\n    ('system', SYSTEM_LEVEL_NOTIFICATION),\n    ('project', PROJECT_LEVEL_NOTIFICATION),\n)\nNOTIFICATION_STATUS_TYPES = (\n    ('success', 'Success'),",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "SYSTEM_LEVEL_NOTIFICATION",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "SYSTEM_LEVEL_NOTIFICATION = 'system'\nPROJECT_LEVEL_NOTIFICATION = 'project'\nNOTIFICATION_TYPES = (\n    ('system', SYSTEM_LEVEL_NOTIFICATION),\n    ('project', PROJECT_LEVEL_NOTIFICATION),\n)\nNOTIFICATION_STATUS_TYPES = (\n    ('success', 'Success'),\n    ('info', 'Informational'),\n    ('warning', 'Warning'),",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "PROJECT_LEVEL_NOTIFICATION",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "PROJECT_LEVEL_NOTIFICATION = 'project'\nNOTIFICATION_TYPES = (\n    ('system', SYSTEM_LEVEL_NOTIFICATION),\n    ('project', PROJECT_LEVEL_NOTIFICATION),\n)\nNOTIFICATION_STATUS_TYPES = (\n    ('success', 'Success'),\n    ('info', 'Informational'),\n    ('warning', 'Warning'),\n    ('error', 'Error'),",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NOTIFICATION_TYPES",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NOTIFICATION_TYPES = (\n    ('system', SYSTEM_LEVEL_NOTIFICATION),\n    ('project', PROJECT_LEVEL_NOTIFICATION),\n)\nNOTIFICATION_STATUS_TYPES = (\n    ('success', 'Success'),\n    ('info', 'Informational'),\n    ('warning', 'Warning'),\n    ('error', 'Error'),\n)",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "NOTIFICATION_STATUS_TYPES",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "NOTIFICATION_STATUS_TYPES = (\n    ('success', 'Success'),\n    ('info', 'Informational'),\n    ('warning', 'Warning'),\n    ('error', 'Error'),\n)\n# Bountyhub Definitions\nHACKERONE_ALLOWED_ASSET_TYPES = [\"WILDCARD\", \"DOMAIN\", \"IP_ADDRESS\", \"URL\"]",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "HACKERONE_ALLOWED_ASSET_TYPES",
        "kind": 5,
        "importPath": "web.reNgine.definitions",
        "description": "web.reNgine.definitions",
        "peekOfCode": "HACKERONE_ALLOWED_ASSET_TYPES = [\"WILDCARD\", \"DOMAIN\", \"IP_ADDRESS\", \"URL\"]",
        "detail": "web.reNgine.definitions",
        "documentation": {}
    },
    {
        "label": "first_run",
        "kind": 2,
        "importPath": "web.reNgine.init",
        "description": "web.reNgine.init",
        "peekOfCode": "def first_run(secret_file, base_dir):\n    if 'RENGINE_SECRET_KEY' in os.environ:\n        secret_key = os.environ['RENGINE_SECRET_KEY']\n    elif os.path.isfile(secret_file):\n        secret_key = open(secret_file).read().strip()\n    else:\n        try:\n            secret_key = get_random()\n            secret = open(secret_file, 'w')\n            secret.write(secret_key)",
        "detail": "web.reNgine.init",
        "documentation": {}
    },
    {
        "label": "get_random",
        "kind": 2,
        "importPath": "web.reNgine.init",
        "description": "web.reNgine.init",
        "peekOfCode": "def get_random():\n    charlist = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'\n    return ''.join(secrets.choice(charlist) for _ in range(64))",
        "detail": "web.reNgine.init",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.reNgine.init",
        "description": "web.reNgine.init",
        "peekOfCode": "logger = logging.getLogger(__name__)\n'''\nBased on\nhttps://github.com/MobSF/Mobile-Security-Framework-MobSF/blob/master/MobSF/init.py\n'''\ndef first_run(secret_file, base_dir):\n    if 'RENGINE_SECRET_KEY' in os.environ:\n        secret_key = os.environ['RENGINE_SECRET_KEY']\n    elif os.path.isfile(secret_file):\n        secret_key = open(secret_file).read().strip()",
        "detail": "web.reNgine.init",
        "documentation": {}
    },
    {
        "label": "LLMVulnerabilityReportGenerator",
        "kind": 6,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "class LLMVulnerabilityReportGenerator:\n\tdef __init__(self, logger):\n\t\tselected_model = OllamaSettings.objects.first()\n\t\tself.model_name = selected_model.selected_model if selected_model else 'gpt-3.5-turbo'\n\t\tself.use_ollama = selected_model.use_ollama if selected_model else False\n\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_vulnerability_description(self, description):\n\t\t\"\"\"Generate Vulnerability Description using GPT.\n\t\tArgs:",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "LLMAttackSuggestionGenerator",
        "kind": 6,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "class LLMAttackSuggestionGenerator:\n\tdef __init__(self, logger):\n\t\tselected_model = OllamaSettings.objects.first()\n\t\tself.model_name = selected_model.selected_model if selected_model else 'gpt-3.5-turbo'\n\t\tself.use_ollama = selected_model.use_ollama if selected_model else False\n\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_attack_suggestion(self, user_input):\n\t\t'''\n\t\t\tuser_input (str): input for gpt",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tselected_model",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tselected_model = OllamaSettings.objects.first()\n\t\tself.model_name = selected_model.selected_model if selected_model else 'gpt-3.5-turbo'\n\t\tself.use_ollama = selected_model.use_ollama if selected_model else False\n\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_vulnerability_description(self, description):\n\t\t\"\"\"Generate Vulnerability Description using GPT.\n\t\tArgs:\n\t\t\tdescription (str): Vulnerability Description message to pass to GPT.\n\t\tReturns:",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tself.model_name",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tself.model_name = selected_model.selected_model if selected_model else 'gpt-3.5-turbo'\n\t\tself.use_ollama = selected_model.use_ollama if selected_model else False\n\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_vulnerability_description(self, description):\n\t\t\"\"\"Generate Vulnerability Description using GPT.\n\t\tArgs:\n\t\t\tdescription (str): Vulnerability Description message to pass to GPT.\n\t\tReturns:\n\t\t\t(dict) of {",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tself.use_ollama",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tself.use_ollama = selected_model.use_ollama if selected_model else False\n\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_vulnerability_description(self, description):\n\t\t\"\"\"Generate Vulnerability Description using GPT.\n\t\tArgs:\n\t\t\tdescription (str): Vulnerability Description message to pass to GPT.\n\t\tReturns:\n\t\t\t(dict) of {\n\t\t\t\t'description': (str)",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tself.openai_api_key",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_vulnerability_description(self, description):\n\t\t\"\"\"Generate Vulnerability Description using GPT.\n\t\tArgs:\n\t\t\tdescription (str): Vulnerability Description message to pass to GPT.\n\t\tReturns:\n\t\t\t(dict) of {\n\t\t\t\t'description': (str)\n\t\t\t\t'impact': (str),",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tself.logger",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tself.logger = logger\n\tdef get_vulnerability_description(self, description):\n\t\t\"\"\"Generate Vulnerability Description using GPT.\n\t\tArgs:\n\t\t\tdescription (str): Vulnerability Description message to pass to GPT.\n\t\tReturns:\n\t\t\t(dict) of {\n\t\t\t\t'description': (str)\n\t\t\t\t'impact': (str),\n\t\t\t\t'remediation': (str),",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\tprompt",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\tprompt = VULNERABILITY_DESCRIPTION_SYSTEM_MESSAGE + \"\\nUser: \" + description\n\t\t\tprompt = re.sub(r'\\t', '', prompt)\n\t\t\tself.logger.info(f\"Using Ollama for Vulnerability Description Generation\")\n\t\t\tllm = Ollama(\n\t\t\t\tbase_url=OLLAMA_INSTANCE, \n\t\t\t\tmodel=self.model_name\n\t\t\t)\n\t\t\tresponse_content = llm.invoke(prompt)\n\t\t\t# self.logger.info(response_content)\n\t\telse:",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\tprompt",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\tprompt = re.sub(r'\\t', '', prompt)\n\t\t\tself.logger.info(f\"Using Ollama for Vulnerability Description Generation\")\n\t\t\tllm = Ollama(\n\t\t\t\tbase_url=OLLAMA_INSTANCE, \n\t\t\t\tmodel=self.model_name\n\t\t\t)\n\t\t\tresponse_content = llm.invoke(prompt)\n\t\t\t# self.logger.info(response_content)\n\t\telse:\n\t\t\tself.logger.info(f'Using OpenAI API for Vulnerability Description Generation')",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\tllm",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\tllm = Ollama(\n\t\t\t\tbase_url=OLLAMA_INSTANCE, \n\t\t\t\tmodel=self.model_name\n\t\t\t)\n\t\t\tresponse_content = llm.invoke(prompt)\n\t\t\t# self.logger.info(response_content)\n\t\telse:\n\t\t\tself.logger.info(f'Using OpenAI API for Vulnerability Description Generation')\n\t\t\topenai_api_key = get_open_ai_key()\n\t\t\tif not openai_api_key:",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse_content",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\tresponse_content = llm.invoke(prompt)\n\t\t\t# self.logger.info(response_content)\n\t\telse:\n\t\t\tself.logger.info(f'Using OpenAI API for Vulnerability Description Generation')\n\t\t\topenai_api_key = get_open_ai_key()\n\t\t\tif not openai_api_key:\n\t\t\t\treturn {\n\t\t\t\t\t'status': False,\n\t\t\t\t\t'error': 'OpenAI API Key not set'\n\t\t\t\t}",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\topenai_api_key",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\topenai_api_key = get_open_ai_key()\n\t\t\tif not openai_api_key:\n\t\t\t\treturn {\n\t\t\t\t\t'status': False,\n\t\t\t\t\t'error': 'OpenAI API Key not set'\n\t\t\t\t}\n\t\t\ttry:\n\t\t\t\tprompt = re.sub(r'\\t', '', VULNERABILITY_DESCRIPTION_SYSTEM_MESSAGE)\n\t\t\t\topenai.api_key = openai_api_key\n\t\t\t\tgpt_response = openai.ChatCompletion.create(",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprompt",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\t\tprompt = re.sub(r'\\t', '', VULNERABILITY_DESCRIPTION_SYSTEM_MESSAGE)\n\t\t\t\topenai.api_key = openai_api_key\n\t\t\t\tgpt_response = openai.ChatCompletion.create(\n\t\t\t\tmodel=self.model_name,\n\t\t\t\tmessages=[\n\t\t\t\t\t\t{'role': 'system', 'content': prompt},\n\t\t\t\t\t\t{'role': 'user', 'content': description}\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\tresponse_content = gpt_response['choices'][0]['message']['content']",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\t\topenai.api_key",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\t\topenai.api_key = openai_api_key\n\t\t\t\tgpt_response = openai.ChatCompletion.create(\n\t\t\t\tmodel=self.model_name,\n\t\t\t\tmessages=[\n\t\t\t\t\t\t{'role': 'system', 'content': prompt},\n\t\t\t\t\t\t{'role': 'user', 'content': description}\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\tresponse_content = gpt_response['choices'][0]['message']['content']\n\t\t\texcept Exception as e:",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tgpt_response",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\t\tgpt_response = openai.ChatCompletion.create(\n\t\t\t\tmodel=self.model_name,\n\t\t\t\tmessages=[\n\t\t\t\t\t\t{'role': 'system', 'content': prompt},\n\t\t\t\t\t\t{'role': 'user', 'content': description}\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\tresponse_content = gpt_response['choices'][0]['message']['content']\n\t\t\texcept Exception as e:\n\t\t\t\treturn {",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse_content",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\t\tresponse_content = gpt_response['choices'][0]['message']['content']\n\t\t\texcept Exception as e:\n\t\t\t\treturn {\n\t\t\t\t\t'status': False,\n\t\t\t\t\t'error': str(e)\n\t\t\t\t}\n\t\tresponse = parse_llm_vulnerability_report(response_content)\n\t\tif not response:\n\t\t\treturn {\n\t\t\t\t'status': False,",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tresponse = parse_llm_vulnerability_report(response_content)\n\t\tif not response:\n\t\t\treturn {\n\t\t\t\t'status': False,\n\t\t\t\t'error': 'Failed to parse LLM response'\n\t\t\t}\n\t\treturn {\n\t\t\t'status': True,\n\t\t\t'description': response.get('description', ''),\n\t\t\t'impact': response.get('impact', ''),",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tselected_model",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tselected_model = OllamaSettings.objects.first()\n\t\tself.model_name = selected_model.selected_model if selected_model else 'gpt-3.5-turbo'\n\t\tself.use_ollama = selected_model.use_ollama if selected_model else False\n\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_attack_suggestion(self, user_input):\n\t\t'''\n\t\t\tuser_input (str): input for gpt\n\t\t'''\n\t\tif self.use_ollama:",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tself.model_name",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tself.model_name = selected_model.selected_model if selected_model else 'gpt-3.5-turbo'\n\t\tself.use_ollama = selected_model.use_ollama if selected_model else False\n\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_attack_suggestion(self, user_input):\n\t\t'''\n\t\t\tuser_input (str): input for gpt\n\t\t'''\n\t\tif self.use_ollama:\n\t\t\tself.logger.info(f\"Using Ollama for Attack Suggestion Generation\")",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tself.use_ollama",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tself.use_ollama = selected_model.use_ollama if selected_model else False\n\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_attack_suggestion(self, user_input):\n\t\t'''\n\t\t\tuser_input (str): input for gpt\n\t\t'''\n\t\tif self.use_ollama:\n\t\t\tself.logger.info(f\"Using Ollama for Attack Suggestion Generation\")\n\t\t\tprompt = ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT + \"\\nUser: \" + user_input\t",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tself.openai_api_key",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tself.openai_api_key = None\n\t\tself.logger = logger\n\tdef get_attack_suggestion(self, user_input):\n\t\t'''\n\t\t\tuser_input (str): input for gpt\n\t\t'''\n\t\tif self.use_ollama:\n\t\t\tself.logger.info(f\"Using Ollama for Attack Suggestion Generation\")\n\t\t\tprompt = ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT + \"\\nUser: \" + user_input\t\n\t\t\tprompt = re.sub(r'\\t', '', prompt)",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\tself.logger",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\tself.logger = logger\n\tdef get_attack_suggestion(self, user_input):\n\t\t'''\n\t\t\tuser_input (str): input for gpt\n\t\t'''\n\t\tif self.use_ollama:\n\t\t\tself.logger.info(f\"Using Ollama for Attack Suggestion Generation\")\n\t\t\tprompt = ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT + \"\\nUser: \" + user_input\t\n\t\t\tprompt = re.sub(r'\\t', '', prompt)\n\t\t\tllm = Ollama(",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\tprompt",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\tprompt = ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT + \"\\nUser: \" + user_input\t\n\t\t\tprompt = re.sub(r'\\t', '', prompt)\n\t\t\tllm = Ollama(\n\t\t\t\tbase_url=OLLAMA_INSTANCE, \n\t\t\t\tmodel=self.model_name\n\t\t\t)\n\t\t\tresponse_content = llm.invoke(prompt)\n\t\t\tself.logger.info(response_content)\n\t\telse:\n\t\t\tself.logger.info(f'Using OpenAI API for Attack Suggestion Generation')",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\tprompt",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\tprompt = re.sub(r'\\t', '', prompt)\n\t\t\tllm = Ollama(\n\t\t\t\tbase_url=OLLAMA_INSTANCE, \n\t\t\t\tmodel=self.model_name\n\t\t\t)\n\t\t\tresponse_content = llm.invoke(prompt)\n\t\t\tself.logger.info(response_content)\n\t\telse:\n\t\t\tself.logger.info(f'Using OpenAI API for Attack Suggestion Generation')\n\t\t\topenai_api_key = get_open_ai_key()",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\tllm",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\tllm = Ollama(\n\t\t\t\tbase_url=OLLAMA_INSTANCE, \n\t\t\t\tmodel=self.model_name\n\t\t\t)\n\t\t\tresponse_content = llm.invoke(prompt)\n\t\t\tself.logger.info(response_content)\n\t\telse:\n\t\t\tself.logger.info(f'Using OpenAI API for Attack Suggestion Generation')\n\t\t\topenai_api_key = get_open_ai_key()\n\t\t\tif not openai_api_key:",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse_content",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\tresponse_content = llm.invoke(prompt)\n\t\t\tself.logger.info(response_content)\n\t\telse:\n\t\t\tself.logger.info(f'Using OpenAI API for Attack Suggestion Generation')\n\t\t\topenai_api_key = get_open_ai_key()\n\t\t\tif not openai_api_key:\n\t\t\t\treturn {\n\t\t\t\t\t'status': False,\n\t\t\t\t\t'error': 'OpenAI API Key not set'\n\t\t\t\t}",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\topenai_api_key",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\topenai_api_key = get_open_ai_key()\n\t\t\tif not openai_api_key:\n\t\t\t\treturn {\n\t\t\t\t\t'status': False,\n\t\t\t\t\t'error': 'OpenAI API Key not set'\n\t\t\t\t}\n\t\t\ttry:\n\t\t\t\tprompt = re.sub(r'\\t', '', ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT)\n\t\t\t\topenai.api_key = openai_api_key\n\t\t\t\tgpt_response = openai.ChatCompletion.create(",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprompt",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\t\tprompt = re.sub(r'\\t', '', ATTACK_SUGGESTION_GPT_SYSTEM_PROMPT)\n\t\t\t\topenai.api_key = openai_api_key\n\t\t\t\tgpt_response = openai.ChatCompletion.create(\n\t\t\t\tmodel=self.model_name,\n\t\t\t\tmessages=[\n\t\t\t\t\t\t{'role': 'system', 'content': prompt},\n\t\t\t\t\t\t{'role': 'user', 'content': user_input}\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\tresponse_content = gpt_response['choices'][0]['message']['content']",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\t\topenai.api_key",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\t\topenai.api_key = openai_api_key\n\t\t\t\tgpt_response = openai.ChatCompletion.create(\n\t\t\t\tmodel=self.model_name,\n\t\t\t\tmessages=[\n\t\t\t\t\t\t{'role': 'system', 'content': prompt},\n\t\t\t\t\t\t{'role': 'user', 'content': user_input}\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\tresponse_content = gpt_response['choices'][0]['message']['content']\n\t\t\texcept Exception as e:",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tgpt_response",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\t\tgpt_response = openai.ChatCompletion.create(\n\t\t\t\tmodel=self.model_name,\n\t\t\t\tmessages=[\n\t\t\t\t\t\t{'role': 'system', 'content': prompt},\n\t\t\t\t\t\t{'role': 'user', 'content': user_input}\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\tresponse_content = gpt_response['choices'][0]['message']['content']\n\t\t\texcept Exception as e:\n\t\t\t\treturn {",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse_content",
        "kind": 5,
        "importPath": "web.reNgine.llm",
        "description": "web.reNgine.llm",
        "peekOfCode": "\t\t\t\tresponse_content = gpt_response['choices'][0]['message']['content']\n\t\t\texcept Exception as e:\n\t\t\t\treturn {\n\t\t\t\t\t'status': False,\n\t\t\t\t\t'error': str(e),\n\t\t\t\t\t'input': user_input\n\t\t\t\t}\n\t\treturn {\n\t\t\t'status': True,\n\t\t\t'description': response_content,",
        "detail": "web.reNgine.llm",
        "documentation": {}
    },
    {
        "label": "UserPreferencesMiddleware",
        "kind": 6,
        "importPath": "web.reNgine.middleware",
        "description": "web.reNgine.middleware",
        "peekOfCode": "class UserPreferencesMiddleware:\n\tdef __init__(self, get_response):\n\t\tself.get_response = get_response\n\tdef __call__(self, request):\n\t\tif request.user.is_authenticated:\n\t\t\trequest.user_preferences, created = UserPreferences.objects.get_or_create(user=request.user)\n\t\treturn self.get_response(request)",
        "detail": "web.reNgine.middleware",
        "documentation": {}
    },
    {
        "label": "\t\tself.get_response",
        "kind": 5,
        "importPath": "web.reNgine.middleware",
        "description": "web.reNgine.middleware",
        "peekOfCode": "\t\tself.get_response = get_response\n\tdef __call__(self, request):\n\t\tif request.user.is_authenticated:\n\t\t\trequest.user_preferences, created = UserPreferences.objects.get_or_create(user=request.user)\n\t\treturn self.get_response(request)",
        "detail": "web.reNgine.middleware",
        "documentation": {}
    },
    {
        "label": "SysAdmin",
        "kind": 6,
        "importPath": "web.reNgine.roles",
        "description": "web.reNgine.roles",
        "peekOfCode": "class SysAdmin(AbstractUserRole):\n    available_permissions = {\n        PERM_MODIFY_SYSTEM_CONFIGURATIONS: True,\n        PERM_MODIFY_SCAN_CONFIGURATIONS: True,\n        PERM_MODIFY_SCAN_RESULTS: True,\n        PERM_MODIFY_WORDLISTS: True,\n        PERM_MODIFY_INTERESTING_LOOKUP: True,\n        PERM_MODIFY_SCAN_REPORT: True,\n        PERM_INITATE_SCANS_SUBSCANS: True,\n        PERM_MODIFY_TARGETS: True,",
        "detail": "web.reNgine.roles",
        "documentation": {}
    },
    {
        "label": "PenetrationTester",
        "kind": 6,
        "importPath": "web.reNgine.roles",
        "description": "web.reNgine.roles",
        "peekOfCode": "class PenetrationTester(AbstractUserRole):\n    available_permissions = {\n        PERM_MODIFY_SYSTEM_CONFIGURATIONS: False,\n        PERM_MODIFY_SCAN_CONFIGURATIONS: True,\n        PERM_MODIFY_SCAN_RESULTS: True,\n        PERM_MODIFY_WORDLISTS: True,\n        PERM_MODIFY_INTERESTING_LOOKUP: True,\n        PERM_MODIFY_SCAN_REPORT: True,\n        PERM_INITATE_SCANS_SUBSCANS: True,\n        PERM_MODIFY_TARGETS: True,",
        "detail": "web.reNgine.roles",
        "documentation": {}
    },
    {
        "label": "Auditor",
        "kind": 6,
        "importPath": "web.reNgine.roles",
        "description": "web.reNgine.roles",
        "peekOfCode": "class Auditor(AbstractUserRole):\n    available_permissions = {\n        PERM_MODIFY_SYSTEM_CONFIGURATIONS: False,\n        PERM_MODIFY_SCAN_CONFIGURATIONS: False,\n        PERM_MODIFY_SCAN_RESULTS: True,\n        PERM_MODIFY_WORDLISTS: False,\n        PERM_MODIFY_INTERESTING_LOOKUP: True,\n        PERM_MODIFY_SCAN_REPORT: True,\n        PERM_INITATE_SCANS_SUBSCANS: False,\n        PERM_MODIFY_TARGETS: False,",
        "detail": "web.reNgine.roles",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "env = environ.FileAwareEnv()\nimport mimetypes\nimport os\nfrom reNgine.init import first_run\nfrom reNgine.utilities import RengineTaskFormatter\nmimetypes.add_type(\"text/javascript\", \".js\", True)\nmimetypes.add_type(\"text/css\", \".css\", True)\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#       RENGINE CONFIGURATIONS\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Take environment variables from .env file\nenviron.Env.read_env(os.path.join(BASE_DIR, os.pardir, '.env'))\n# Root env vars\nRENGINE_HOME = env('RENGINE_HOME', default='/usr/src/app')\nRENGINE_RESULTS = env('RENGINE_RESULTS', default=f'{RENGINE_HOME}/scan_results')\nRENGINE_CACHE_ENABLED = env.bool('RENGINE_CACHE_ENABLED', default=False)\nRENGINE_RECORD_ENABLED = env.bool('RENGINE_RECORD_ENABLED', default=True)\nRENGINE_RAISE_ON_ERROR = env.bool('RENGINE_RAISE_ON_ERROR', default=False)\n# Common env vars",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "RENGINE_HOME",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "RENGINE_HOME = env('RENGINE_HOME', default='/usr/src/app')\nRENGINE_RESULTS = env('RENGINE_RESULTS', default=f'{RENGINE_HOME}/scan_results')\nRENGINE_CACHE_ENABLED = env.bool('RENGINE_CACHE_ENABLED', default=False)\nRENGINE_RECORD_ENABLED = env.bool('RENGINE_RECORD_ENABLED', default=True)\nRENGINE_RAISE_ON_ERROR = env.bool('RENGINE_RAISE_ON_ERROR', default=False)\n# Common env vars\nDEBUG = env.bool('DEBUG', default=False)\nDOMAIN_NAME = env('DOMAIN_NAME', default='localhost:8000')\nTEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=False)\nSECRET_FILE = os.path.join(RENGINE_HOME, 'secret')",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "RENGINE_RESULTS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "RENGINE_RESULTS = env('RENGINE_RESULTS', default=f'{RENGINE_HOME}/scan_results')\nRENGINE_CACHE_ENABLED = env.bool('RENGINE_CACHE_ENABLED', default=False)\nRENGINE_RECORD_ENABLED = env.bool('RENGINE_RECORD_ENABLED', default=True)\nRENGINE_RAISE_ON_ERROR = env.bool('RENGINE_RAISE_ON_ERROR', default=False)\n# Common env vars\nDEBUG = env.bool('DEBUG', default=False)\nDOMAIN_NAME = env('DOMAIN_NAME', default='localhost:8000')\nTEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=False)\nSECRET_FILE = os.path.join(RENGINE_HOME, 'secret')\nDEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "RENGINE_CACHE_ENABLED",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "RENGINE_CACHE_ENABLED = env.bool('RENGINE_CACHE_ENABLED', default=False)\nRENGINE_RECORD_ENABLED = env.bool('RENGINE_RECORD_ENABLED', default=True)\nRENGINE_RAISE_ON_ERROR = env.bool('RENGINE_RAISE_ON_ERROR', default=False)\n# Common env vars\nDEBUG = env.bool('DEBUG', default=False)\nDOMAIN_NAME = env('DOMAIN_NAME', default='localhost:8000')\nTEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=False)\nSECRET_FILE = os.path.join(RENGINE_HOME, 'secret')\nDEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)\nDEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "RENGINE_RECORD_ENABLED",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "RENGINE_RECORD_ENABLED = env.bool('RENGINE_RECORD_ENABLED', default=True)\nRENGINE_RAISE_ON_ERROR = env.bool('RENGINE_RAISE_ON_ERROR', default=False)\n# Common env vars\nDEBUG = env.bool('DEBUG', default=False)\nDOMAIN_NAME = env('DOMAIN_NAME', default='localhost:8000')\nTEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=False)\nSECRET_FILE = os.path.join(RENGINE_HOME, 'secret')\nDEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)\nDEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second\nDEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "RENGINE_RAISE_ON_ERROR",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "RENGINE_RAISE_ON_ERROR = env.bool('RENGINE_RAISE_ON_ERROR', default=False)\n# Common env vars\nDEBUG = env.bool('DEBUG', default=False)\nDOMAIN_NAME = env('DOMAIN_NAME', default='localhost:8000')\nTEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=False)\nSECRET_FILE = os.path.join(RENGINE_HOME, 'secret')\nDEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)\nDEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second\nDEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds\nDEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DEBUG = env.bool('DEBUG', default=False)\nDOMAIN_NAME = env('DOMAIN_NAME', default='localhost:8000')\nTEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=False)\nSECRET_FILE = os.path.join(RENGINE_HOME, 'secret')\nDEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)\nDEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second\nDEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds\nDEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)\nDEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DOMAIN_NAME",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DOMAIN_NAME = env('DOMAIN_NAME', default='localhost:8000')\nTEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=False)\nSECRET_FILE = os.path.join(RENGINE_HOME, 'secret')\nDEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)\nDEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second\nDEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds\nDEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)\nDEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_DEBUG",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "TEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=False)\nSECRET_FILE = os.path.join(RENGINE_HOME, 'secret')\nDEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)\nDEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second\nDEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds\nDEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)\nDEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals\nALLOWED_HOSTS = ['*']",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_FILE",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "SECRET_FILE = os.path.join(RENGINE_HOME, 'secret')\nDEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)\nDEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second\nDEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds\nDEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)\nDEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals\nALLOWED_HOSTS = ['*']\nSECRET_KEY = first_run(SECRET_FILE, BASE_DIR)",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_ENABLE_HTTP_CRAWL",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DEFAULT_ENABLE_HTTP_CRAWL = env.bool('DEFAULT_ENABLE_HTTP_CRAWL', default=True)\nDEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second\nDEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds\nDEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)\nDEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals\nALLOWED_HOSTS = ['*']\nSECRET_KEY = first_run(SECRET_FILE, BASE_DIR)\n# Rengine version",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RATE_LIMIT",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DEFAULT_RATE_LIMIT = env.int('DEFAULT_RATE_LIMIT', default=150) # requests / second\nDEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds\nDEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)\nDEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals\nALLOWED_HOSTS = ['*']\nSECRET_KEY = first_run(SECRET_FILE, BASE_DIR)\n# Rengine version\n# reads current version from a file called .version",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_HTTP_TIMEOUT",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DEFAULT_HTTP_TIMEOUT = env.int('DEFAULT_HTTP_TIMEOUT', default=5) # seconds\nDEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)\nDEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals\nALLOWED_HOSTS = ['*']\nSECRET_KEY = first_run(SECRET_FILE, BASE_DIR)\n# Rengine version\n# reads current version from a file called .version\nVERSION_FILE = os.path.join(BASE_DIR, '.version')",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RETRIES",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DEFAULT_RETRIES = env.int('DEFAULT_RETRIES', default=1)\nDEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals\nALLOWED_HOSTS = ['*']\nSECRET_KEY = first_run(SECRET_FILE, BASE_DIR)\n# Rengine version\n# reads current version from a file called .version\nVERSION_FILE = os.path.join(BASE_DIR, '.version')\nif os.path.exists(VERSION_FILE):",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_THREADS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DEFAULT_THREADS = env.int('DEFAULT_THREADS', default=30)\nDEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals\nALLOWED_HOSTS = ['*']\nSECRET_KEY = first_run(SECRET_FILE, BASE_DIR)\n# Rengine version\n# reads current version from a file called .version\nVERSION_FILE = os.path.join(BASE_DIR, '.version')\nif os.path.exists(VERSION_FILE):\n    with open(VERSION_FILE, 'r') as f:",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_GPT_REPORT",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DEFAULT_GET_GPT_REPORT = env.bool('DEFAULT_GET_GPT_REPORT', default=True)\n# Globals\nALLOWED_HOSTS = ['*']\nSECRET_KEY = first_run(SECRET_FILE, BASE_DIR)\n# Rengine version\n# reads current version from a file called .version\nVERSION_FILE = os.path.join(BASE_DIR, '.version')\nif os.path.exists(VERSION_FILE):\n    with open(VERSION_FILE, 'r') as f:\n        _version = f.read().strip()",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\nSECRET_KEY = first_run(SECRET_FILE, BASE_DIR)\n# Rengine version\n# reads current version from a file called .version\nVERSION_FILE = os.path.join(BASE_DIR, '.version')\nif os.path.exists(VERSION_FILE):\n    with open(VERSION_FILE, 'r') as f:\n        _version = f.read().strip()\nelse:\n    _version = 'unknown'",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "SECRET_KEY = first_run(SECRET_FILE, BASE_DIR)\n# Rengine version\n# reads current version from a file called .version\nVERSION_FILE = os.path.join(BASE_DIR, '.version')\nif os.path.exists(VERSION_FILE):\n    with open(VERSION_FILE, 'r') as f:\n        _version = f.read().strip()\nelse:\n    _version = 'unknown'\n# removes v from _version if exists",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_FILE",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "VERSION_FILE = os.path.join(BASE_DIR, '.version')\nif os.path.exists(VERSION_FILE):\n    with open(VERSION_FILE, 'r') as f:\n        _version = f.read().strip()\nelse:\n    _version = 'unknown'\n# removes v from _version if exists\nif _version.startswith('v'):\n    _version = _version[1:]\nRENGINE_CURRENT_VERSION = _version",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "RENGINE_CURRENT_VERSION",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "RENGINE_CURRENT_VERSION = _version\n# Databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env('POSTGRES_DB'),\n        'USER': env('POSTGRES_USER'),\n        'PASSWORD': env('POSTGRES_PASSWORD'),\n        'HOST': env('POSTGRES_HOST'),\n        'PORT': env('POSTGRES_PORT'),",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env('POSTGRES_DB'),\n        'USER': env('POSTGRES_USER'),\n        'PASSWORD': env('POSTGRES_PASSWORD'),\n        'HOST': env('POSTGRES_HOST'),\n        'PORT': env('POSTGRES_PORT'),\n        # 'OPTIONS':{\n        #     'sslmode':'verify-full',",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.humanize',\n    'rest_framework',\n    'rest_framework_datatables',",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'login_required.middleware.LoginRequiredMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'reNgine.middleware.UserPreferencesMiddleware',",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [(os.path.join(BASE_DIR, 'templates'))],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "ROOT_URLCONF = 'reNgine.urls'\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n        'rest_framework_datatables.renderers.DatatablesRenderer',\n    ),\n    'DEFAULT_FILTER_BACKENDS': (\n        'rest_framework_datatables.filters.DatatablesFilterBackend',\n    ),",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n        'rest_framework_datatables.renderers.DatatablesRenderer',\n    ),\n    'DEFAULT_FILTER_BACKENDS': (\n        'rest_framework_datatables.filters.DatatablesFilterBackend',\n    ),\n    'DEFAULT_PAGINATION_CLASS':(",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "WSGI_APPLICATION = 'reNgine.wsgi.application'\n# Password validation\n# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.' +\n                'UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.' +",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.' +\n                'UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.' +\n                'MinimumLengthValidator',\n    },\n    {",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nMEDIA_URL = '/media/'\nMEDIA_ROOT = '/usr/src/scan_results/'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 100000000\nFILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nMEDIA_URL = '/media/'\nMEDIA_ROOT = '/usr/src/scan_results/'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 100000000\nFILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nMEDIA_URL = '/media/'\nMEDIA_ROOT = '/usr/src/scan_results/'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 100000000\nFILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\nMEDIA_URL = '/media/'\nMEDIA_ROOT = '/usr/src/scan_results/'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 100000000\nFILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "USE_TZ = True\nMEDIA_URL = '/media/'\nMEDIA_ROOT = '/usr/src/scan_results/'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 100000000\nFILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = '/usr/src/scan_results/'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 100000000\nFILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nLOGIN_REQUIRED_IGNORE_VIEW_NAMES = [",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "MEDIA_ROOT = '/usr/src/scan_results/'\nFILE_UPLOAD_MAX_MEMORY_SIZE = 100000000\nFILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nLOGIN_REQUIRED_IGNORE_VIEW_NAMES = [\n    'login',",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "FILE_UPLOAD_MAX_MEMORY_SIZE",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "FILE_UPLOAD_MAX_MEMORY_SIZE = 100000000\nFILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nLOGIN_REQUIRED_IGNORE_VIEW_NAMES = [\n    'login',\n]",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "FILE_UPLOAD_PERMISSIONS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "FILE_UPLOAD_PERMISSIONS = 0o644\nSTATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nLOGIN_REQUIRED_IGNORE_VIEW_NAMES = [\n    'login',\n]\nLOGIN_URL = 'login'",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "STATIC_URL = '/staticfiles/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nLOGIN_REQUIRED_IGNORE_VIEW_NAMES = [\n    'login',\n]\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'onboarding'",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nLOGIN_REQUIRED_IGNORE_VIEW_NAMES = [\n    'login',\n]\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'onboarding'\nLOGOUT_REDIRECT_URL = 'login'",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\nLOGIN_REQUIRED_IGNORE_VIEW_NAMES = [\n    'login',\n]\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'onboarding'\nLOGOUT_REDIRECT_URL = 'login'\n# Tool Location",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REQUIRED_IGNORE_VIEW_NAMES",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "LOGIN_REQUIRED_IGNORE_VIEW_NAMES = [\n    'login',\n]\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'onboarding'\nLOGOUT_REDIRECT_URL = 'login'\n# Tool Location\nTOOL_LOCATION = '/usr/src/app/tools/'\n# Number of endpoints that have the same content_length\nDELETE_DUPLICATES_THRESHOLD = 10",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "LOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'onboarding'\nLOGOUT_REDIRECT_URL = 'login'\n# Tool Location\nTOOL_LOCATION = '/usr/src/app/tools/'\n# Number of endpoints that have the same content_length\nDELETE_DUPLICATES_THRESHOLD = 10\n'''\nCELERY settings\n'''",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = 'onboarding'\nLOGOUT_REDIRECT_URL = 'login'\n# Tool Location\nTOOL_LOCATION = '/usr/src/app/tools/'\n# Number of endpoints that have the same content_length\nDELETE_DUPLICATES_THRESHOLD = 10\n'''\nCELERY settings\n'''\nCELERY_BROKER_URL = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = 'login'\n# Tool Location\nTOOL_LOCATION = '/usr/src/app/tools/'\n# Number of endpoints that have the same content_length\nDELETE_DUPLICATES_THRESHOLD = 10\n'''\nCELERY settings\n'''\nCELERY_BROKER_URL = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")\nCELERY_RESULT_BACKEND = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "TOOL_LOCATION",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "TOOL_LOCATION = '/usr/src/app/tools/'\n# Number of endpoints that have the same content_length\nDELETE_DUPLICATES_THRESHOLD = 10\n'''\nCELERY settings\n'''\nCELERY_BROKER_URL = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")\nCELERY_RESULT_BACKEND = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")\nCELERY_ENABLE_UTC = False\nCELERY_TIMEZONE = 'UTC'",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DELETE_DUPLICATES_THRESHOLD",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DELETE_DUPLICATES_THRESHOLD = 10\n'''\nCELERY settings\n'''\nCELERY_BROKER_URL = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")\nCELERY_RESULT_BACKEND = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")\nCELERY_ENABLE_UTC = False\nCELERY_TIMEZONE = 'UTC'\nCELERY_IGNORE_RESULTS = False\nCELERY_EAGER_PROPAGATES_EXCEPTIONS = True",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CELERY_BROKER_URL = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")\nCELERY_RESULT_BACKEND = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")\nCELERY_ENABLE_UTC = False\nCELERY_TIMEZONE = 'UTC'\nCELERY_IGNORE_RESULTS = False\nCELERY_EAGER_PROPAGATES_EXCEPTIONS = True\nCELERY_TRACK_STARTED = True\nCELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True\n'''\nROLES and PERMISSIONS",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = env(\"CELERY_BROKER\", default=\"redis://redis:6379/0\")\nCELERY_ENABLE_UTC = False\nCELERY_TIMEZONE = 'UTC'\nCELERY_IGNORE_RESULTS = False\nCELERY_EAGER_PROPAGATES_EXCEPTIONS = True\nCELERY_TRACK_STARTED = True\nCELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True\n'''\nROLES and PERMISSIONS\n'''",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ENABLE_UTC",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CELERY_ENABLE_UTC = False\nCELERY_TIMEZONE = 'UTC'\nCELERY_IGNORE_RESULTS = False\nCELERY_EAGER_PROPAGATES_EXCEPTIONS = True\nCELERY_TRACK_STARTED = True\nCELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True\n'''\nROLES and PERMISSIONS\n'''\nROLEPERMISSIONS_MODULE = 'reNgine.roles'",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CELERY_TIMEZONE = 'UTC'\nCELERY_IGNORE_RESULTS = False\nCELERY_EAGER_PROPAGATES_EXCEPTIONS = True\nCELERY_TRACK_STARTED = True\nCELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True\n'''\nROLES and PERMISSIONS\n'''\nROLEPERMISSIONS_MODULE = 'reNgine.roles'\nROLEPERMISSIONS_REDIRECT_TO_LOGIN = True",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_IGNORE_RESULTS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CELERY_IGNORE_RESULTS = False\nCELERY_EAGER_PROPAGATES_EXCEPTIONS = True\nCELERY_TRACK_STARTED = True\nCELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True\n'''\nROLES and PERMISSIONS\n'''\nROLEPERMISSIONS_MODULE = 'reNgine.roles'\nROLEPERMISSIONS_REDIRECT_TO_LOGIN = True\n'''",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_EAGER_PROPAGATES_EXCEPTIONS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CELERY_EAGER_PROPAGATES_EXCEPTIONS = True\nCELERY_TRACK_STARTED = True\nCELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True\n'''\nROLES and PERMISSIONS\n'''\nROLEPERMISSIONS_MODULE = 'reNgine.roles'\nROLEPERMISSIONS_REDIRECT_TO_LOGIN = True\n'''\nCache settings",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TRACK_STARTED",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CELERY_TRACK_STARTED = True\nCELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True\n'''\nROLES and PERMISSIONS\n'''\nROLEPERMISSIONS_MODULE = 'reNgine.roles'\nROLEPERMISSIONS_REDIRECT_TO_LOGIN = True\n'''\nCache settings\n'''",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True\n'''\nROLES and PERMISSIONS\n'''\nROLEPERMISSIONS_MODULE = 'reNgine.roles'\nROLEPERMISSIONS_REDIRECT_TO_LOGIN = True\n'''\nCache settings\n'''\nRENGINE_TASK_IGNORE_CACHE_KWARGS = ['ctx']",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "ROLEPERMISSIONS_MODULE",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "ROLEPERMISSIONS_MODULE = 'reNgine.roles'\nROLEPERMISSIONS_REDIRECT_TO_LOGIN = True\n'''\nCache settings\n'''\nRENGINE_TASK_IGNORE_CACHE_KWARGS = ['ctx']\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n'''\nLOGGING settings\n'''",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "ROLEPERMISSIONS_REDIRECT_TO_LOGIN",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "ROLEPERMISSIONS_REDIRECT_TO_LOGIN = True\n'''\nCache settings\n'''\nRENGINE_TASK_IGNORE_CACHE_KWARGS = ['ctx']\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n'''\nLOGGING settings\n'''\nLOGGING = {",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "RENGINE_TASK_IGNORE_CACHE_KWARGS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "RENGINE_TASK_IGNORE_CACHE_KWARGS = ['ctx']\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n'''\nLOGGING settings\n'''\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': True,\n    'handlers': {\n        'file': {",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n'''\nLOGGING settings\n'''\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': True,\n    'handlers': {\n        'file': {\n            'level': 'ERROR',",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': True,\n    'handlers': {\n        'file': {\n            'level': 'ERROR',\n            'class': 'logging.FileHandler',\n            'filename': 'errors.log',\n        },\n        'null': {",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "DATA_UPLOAD_MAX_NUMBER_FIELDS",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "DATA_UPLOAD_MAX_NUMBER_FIELDS = None\n'''\n    Caching Settings\n'''\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'TIMEOUT': 60 * 30,  # 30 minutes caching will be used\n    }\n}",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "web.reNgine.settings",
        "description": "web.reNgine.settings",
        "peekOfCode": "CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n        'TIMEOUT': 60 * 30,  # 30 minutes caching will be used\n    }\n}",
        "detail": "web.reNgine.settings",
        "documentation": {}
    },
    {
        "label": "initiate_scan",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def initiate_scan(\n\t\tscan_history_id,\n\t\tdomain_id,\n\t\tengine_id=None,\n\t\tscan_type=LIVE_SCAN,\n\t\tresults_dir=RENGINE_RESULTS,\n\t\timported_subdomains=[],\n\t\tout_of_scope_subdomains=[],\n\t\tinitiated_by_id=None,\n\t\tstarting_point_path='',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "initiate_subscan",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def initiate_subscan(\n\t\tscan_history_id,\n\t\tsubdomain_id,\n\t\tengine_id=None,\n\t\tscan_type=None,\n\t\tresults_dir=RENGINE_RESULTS,\n\t\tstarting_point_path='',\n\t\texcluded_paths=[],\n\t):\n\t\"\"\"Initiate a new subscan.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "report",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def report(ctx={}, description=None):\n\t\"\"\"Report task running after all other tasks.\n\tMark ScanHistory or SubScan object as completed and update with final\n\tstatus, log run details and send notification.\n\tArgs:\n\t\tdescription (str, optional): Task description shown in UI.\n\t\"\"\"\n\t# Get objects\n\tsubscan_id = ctx.get('subscan_id')\n\tscan_id = ctx.get('scan_history_id')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "subdomain_discovery",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def subdomain_discovery(\n\t\tself,\n\t\thost=None,\n\t\tctx=None,\n\t\tdescription=None):\n\t\"\"\"Uses a set of tools (see SUBDOMAIN_SCAN_DEFAULT_TOOLS) to scan all\n\tsubdomains associated with a domain.\n\tArgs:\n\t\thost (str): Hostname to scan.\n\tReturns:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "osint",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def osint(self, host=None, ctx={}, description=None):\n\t\"\"\"Run Open-Source Intelligence tools on selected domain.\n\tArgs:\n\t\thost (str): Hostname to scan.\n\tReturns:\n\t\tdict: Results from osint discovery and dorking.\n\t\"\"\"\n\tconfig = self.yaml_configuration.get(OSINT) or OSINT_DEFAULT_CONFIG\n\tresults = {}\n\tgrouped_tasks = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "osint_discovery",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def osint_discovery(config, host, scan_history_id, activity_id, results_dir, ctx={}):\n\t\"\"\"Run OSINT discovery.\n\tArgs:\n\t\tconfig (dict): yaml_configuration\n\t\thost (str): target name\n\t\tscan_history_id (startScan.ScanHistory): Scan History ID\n\t\tresults_dir (str): Path to store scan results\n\tReturns:\n\t\tdict: osint metadat and theHarvester and h8mail results.\n\t\"\"\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "dorking",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def dorking(config, host, scan_history_id, results_dir):\n\t\"\"\"Run Google dorks.\n\tArgs:\n\t\tconfig (dict): yaml_configuration\n\t\thost (str): target name\n\t\tscan_history_id (startScan.ScanHistory): Scan History ID\n\t\tresults_dir (str): Path to store scan results\n\tReturns:\n\t\tlist: Dorking results for each dork ran.\n\t\"\"\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "theHarvester",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def theHarvester(config, host, scan_history_id, activity_id, results_dir, ctx={}):\n\t\"\"\"Run theHarvester to get save emails, hosts, employees found in domain.\n\tArgs:\n\t\tconfig (dict): yaml_configuration\n\t\thost (str): target name\n\t\tscan_history_id (startScan.ScanHistory): Scan History ID\n\t\tactivity_id: ScanActivity ID\n\t\tresults_dir (str): Path to store scan results\n\t\tctx (dict): context of scan\n\tReturns:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "h8mail",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def h8mail(config, host, scan_history_id, activity_id, results_dir, ctx={}):\n\t\"\"\"Run h8mail.\n\tArgs:\n\t\tconfig (dict): yaml_configuration\n\t\thost (str): target name\n\t\tscan_history_id (startScan.ScanHistory): Scan History ID\n\t\tactivity_id: ScanActivity ID\n\t\tresults_dir (str): Path to store scan results\n\t\tctx (dict): context of scan\n\tReturns:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "screenshot",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def screenshot(self, ctx={}, description=None):\n\t\"\"\"Uses EyeWitness to gather screenshot of a domain and/or url.\n\tArgs:\n\t\tdescription (str, optional): Task description shown in UI.\n\t\"\"\"\n\t# Config\n\tscreenshots_path = f'{self.results_dir}/screenshots'\n\toutput_path = f'{self.results_dir}/screenshots/{self.filename}'\n\talive_endpoints_file = f'{self.results_dir}/endpoints_alive.txt'\n\tconfig = self.yaml_configuration.get(SCREENSHOT) or {}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "port_scan",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def port_scan(self, hosts=[], ctx={}, description=None):\n\t\"\"\"Run port scan.\n\tArgs:\n\t\thosts (list, optional): Hosts to run port scan on.\n\t\tdescription (str, optional): Task description shown in UI.\n\tReturns:\n\t\tlist: List of open ports (dict).\n\t\"\"\"\n\tinput_file = f'{self.results_dir}/input_subdomains_port_scan.txt'\n\tproxy = get_random_proxy()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "nmap",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def nmap(\n\t\tself,\n\t\tcmd=None,\n\t\tports=[],\n\t\thost=None,\n\t\tinput_file=None,\n\t\tscript=None,\n\t\tscript_args=None,\n\t\tmax_rate=None,\n\t\tctx={},",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "waf_detection",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def waf_detection(self, ctx={}, description=None):\n\t\"\"\"\n\tUses wafw00f to check for the presence of a WAF.\n\tArgs:\n\t\tdescription (str, optional): Task description shown in UI.\n\tReturns:\n\t\tlist: List of startScan.models.Waf objects.\n\t\"\"\"\n\tinput_path = f'{self.results_dir}/input_endpoints_waf_detection.txt'\n\tconfig = self.yaml_configuration.get(WAF_DETECTION) or {}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "dir_file_fuzz",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def dir_file_fuzz(self, ctx={}, description=None):\n\t\"\"\"Perform directory scan, and currently uses `ffuf` as a default tool.\n\tArgs:\n\t\tdescription (str, optional): Task description shown in UI.\n\tReturns:\n\t\tlist: List of URLs discovered.\n\t\"\"\"\n\t# Config\n\tcmd = 'ffuf'\n\tconfig = self.yaml_configuration.get(DIR_FILE_FUZZ) or {}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "fetch_url",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def fetch_url(self, urls=[], ctx={}, description=None):\n\t\"\"\"Fetch URLs using different tools like gauplus, gau, gospider, waybackurls ...\n\tArgs:\n\t\turls (list): List of URLs to start from.\n\t\tdescription (str, optional): Task description shown in UI.\n\t\"\"\"\n\tinput_path = f'{self.results_dir}/input_endpoints_fetch_url.txt'\n\tproxy = get_random_proxy()\n\t# Config\n\tconfig = self.yaml_configuration.get(FETCH_URL) or {}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_curl_output",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_curl_output(response):\n\t# TODO: Enrich from other cURL fields.\n\tCURL_REGEX_HTTP_STATUS = f'HTTP\\/(?:(?:\\d\\.?)+)\\s(\\d+)\\s(?:\\w+)'\n\thttp_status = 0\n\tif response:\n\t\tfailed = False\n\t\tregex = re.compile(CURL_REGEX_HTTP_STATUS, re.MULTILINE)\n\t\ttry:\n\t\t\thttp_status = int(regex.findall(response)[0])\n\t\texcept (KeyError, TypeError, IndexError):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "vulnerability_scan",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def vulnerability_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"\n\t\tThis function will serve as an entrypoint to vulnerability scan.\n\t\tAll other vulnerability scan will be run from here including nuclei, crlfuzz, etc\n\t\"\"\"\n\tlogger.info('Running Vulnerability Scan Queue')\n\tconfig = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\tshould_run_nuclei = config.get(RUN_NUCLEI, True)\n\tshould_run_crlfuzz = config.get(RUN_CRLFUZZ, False)\n\tshould_run_dalfox = config.get(RUN_DALFOX, False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "nuclei_individual_severity_module",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def nuclei_individual_severity_module(self, cmd, severity, enable_http_crawl, should_fetch_gpt_report, ctx={}, description=None):\n\t'''\n\t\tThis celery task will run vulnerability scan in parallel.\n\t\tAll severities supplied should run in parallel as grouped tasks.\n\t'''\n\tresults = []\n\tlogger.info(f'Running vulnerability scan with severity: {severity}')\n\tcmd += f' -severity {severity}'\n\t# Send start notification\n\tnotif = Notification.objects.first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "get_vulnerability_gpt_report",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def get_vulnerability_gpt_report(vuln):\n\ttitle = vuln[0]\n\tpath = vuln[1]\n\tif not path:\n\t\tpath = '/'\n\tlogger.info(f'Getting GPT Report for {title}, PATH: {path}')\n\t# check if in db already exists\n\tstored = GPTVulnerabilityReport.objects.filter(\n\t\turl_path=path\n\t).filter(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "add_gpt_description_db",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def add_gpt_description_db(title, path, description, impact, remediation, references):\n\tlogger.info(f'Adding GPT Report to DB for {title}, PATH: {path}')\n\tif not path:\n\t\tpath = '/'\n\tgpt_report = GPTVulnerabilityReport()\n\tgpt_report.url_path = path\n\tgpt_report.title = title\n\tgpt_report.description = description\n\tgpt_report.impact = impact\n\tgpt_report.remediation = remediation",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "nuclei_scan",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def nuclei_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"HTTP vulnerability scan using Nuclei\n\tArgs:\n\t\turls (list, optional): If passed, filter on those URLs.\n\t\tdescription (str, optional): Task description shown in UI.\n\tNotes:\n\tUnfurl the urls to keep only domain and path, will be sent to vuln scan and\n\tignore certain file extensions. Thanks: https://github.com/six2dez/reconftw\n\t\"\"\"\n\t# Config",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "dalfox_xss_scan",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def dalfox_xss_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"XSS Scan using dalfox\n\tArgs:\n\t\turls (list, optional): If passed, filter on those URLs.\n\t\tdescription (str, optional): Task description shown in UI.\n\t\"\"\"\n\tvuln_config = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\tshould_fetch_gpt_report = vuln_config.get(FETCH_GPT_REPORT, DEFAULT_GET_GPT_REPORT)\n\tdalfox_config = vuln_config.get(DALFOX) or {}\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "crlfuzz_scan",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def crlfuzz_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"CRLF Fuzzing with CRLFuzz\n\tArgs:\n\t\turls (list, optional): If passed, filter on those URLs.\n\t\tdescription (str, optional): Task description shown in UI.\n\t\"\"\"\n\tvuln_config = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\tshould_fetch_gpt_report = vuln_config.get(FETCH_GPT_REPORT, DEFAULT_GET_GPT_REPORT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "s3scanner",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def s3scanner(self, ctx={}, description=None):\n\t\"\"\"Bucket Scanner\n\tArgs:\n\t\tctx (dict): Context\n\t\tdescription (str, optional): Task description shown in UI.\n\t\"\"\"\n\tinput_path = f'{self.results_dir}/#{self.scan_id}_subdomain_discovery.txt'\n\tvuln_config = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\ts3_config = vuln_config.get(S3SCANNER) or {}\n\tthreads = s3_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "http_crawl",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def http_crawl(\n\t\tself,\n\t\turls=[],\n\t\tmethod=None,\n\t\trecrawl=False,\n\t\tctx={},\n\t\ttrack=True,\n\t\tdescription=None,\n\t\tis_ran_from_subdomain_scan=False,\n\t\tshould_remove_duplicate_endpoints=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_notif",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def send_notif(\n\t\tmessage,\n\t\tscan_history_id=None,\n\t\tsubscan_id=None,\n\t\t**options):\n\tif not 'title' in options:\n\t\tmessage = enrich_notification(message, scan_history_id, subscan_id)\n\tsend_discord_message(message, **options)\n\tsend_slack_message(message)\n\tsend_lark_message(message)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_scan_notif",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def send_scan_notif(\n\t\tscan_history_id,\n\t\tsubscan_id=None,\n\t\tengine_id=None,\n\t\tstatus='RUNNING'):\n\t\"\"\"Send scan status notification. Works for scan or a subscan if subscan_id\n\tis passed.\n\tArgs:\n\t\tscan_history_id (int, optional): ScanHistory id.\n\t\tsubscan_id (int, optional): SuScan id.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "generate_inapp_notification",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def generate_inapp_notification(scan, subscan, status, engine, fields):\n\tscan_type = \"Subscan\" if subscan else \"Scan\"\n\tdomain = subscan.domain.name if subscan else scan.domain.name\n\tduration_msg = None\n\tredirect_link = None\n\tif status == 'RUNNING':\n\t\ttitle = f\"{scan_type} Started\"\n\t\tdescription = f\"{scan_type} has been initiated for {domain}\"\n\t\ticon = \"mdi-play-circle-outline\"\n\t\tnotif_status = 'info'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_task_notif",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def send_task_notif(\n\t\ttask_name,\n\t\tstatus=None,\n\t\tresult=None,\n\t\toutput_path=None,\n\t\ttraceback=None,\n\t\tscan_history_id=None,\n\t\tengine_id=None,\n\t\tsubscan_id=None,\n\t\tseverity=None,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_file_to_discord",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def send_file_to_discord(file_path, title=None):\n\tnotif = Notification.objects.first()\n\tdo_send = notif and notif.send_to_discord and notif.discord_hook_url\n\tif not do_send:\n\t\treturn False\n\twebhook = DiscordWebhook(\n\t\turl=notif.discord_hook_url,\n\t\trate_limit_retry=True,\n\t\tusername=title or \"reNgine Discord Plugin\"\n\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "send_hackerone_report",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def send_hackerone_report(vulnerability_id):\n\t\"\"\"Send HackerOne vulnerability report.\n\tArgs:\n\t\tvulnerability_id (int): Vulnerability id.\n\tReturns:\n\t\tint: HTTP response status code.\n\t\"\"\"\n\tvulnerability = Vulnerability.objects.get(id=vulnerability_id)\n\tseverities = {v: k for k,v in NUCLEI_SEVERITY_MAP.items()}\n\t# can only send vulnerability report if team_handle exists and send_report is True and api_key exists",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_nmap_results",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_nmap_results(xml_file, output_file=None):\n\t\"\"\"Parse results from nmap output file.\n\tArgs:\n\t\txml_file (str): nmap XML report file path.\n\tReturns:\n\t\tlist: List of vulnerabilities found from nmap results.\n\t\"\"\"\n\twith open(xml_file, encoding='utf8') as f:\n\t\tcontent = f.read()\n\t\ttry:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_nmap_http_csrf_output",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_nmap_http_csrf_output(script_output):\n\tpass\ndef parse_nmap_vulscan_output(script_output):\n\t\"\"\"Parse nmap vulscan script output.\n\tArgs:\n\t\tscript_output (str): Vulscan script output.\n\tReturns:\n\t\tlist: List of Vulnerability dicts.\n\t\"\"\"\n\tdata = {}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_nmap_vulscan_output",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_nmap_vulscan_output(script_output):\n\t\"\"\"Parse nmap vulscan script output.\n\tArgs:\n\t\tscript_output (str): Vulscan script output.\n\tReturns:\n\t\tlist: List of Vulnerability dicts.\n\t\"\"\"\n\tdata = {}\n\tvulns = []\n\tprovider_name = ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_nmap_vulners_output",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_nmap_vulners_output(script_output, url=''):\n\t\"\"\"Parse nmap vulners script output.\n\tTODO: Rework this as it's currently matching all CVEs no matter the\n\tconfidence.\n\tArgs:\n\t\tscript_output (str): Script output.\n\tReturns:\n\t\tlist: List of found vulnerabilities.\n\t\"\"\"\n\tvulns = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "cve_to_vuln",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def cve_to_vuln(cve_id, vuln_type=''):\n\t\"\"\"Search for a CVE using CVESearch and return Vulnerability data.\n\tArgs:\n\t\tcve_id (str): CVE ID in the form CVE-*\n\tReturns:\n\t\tdict: Vulnerability dict.\n\t\"\"\"\n\tcve_info = CVESearch('https://cve.circl.lu').id(cve_id)\n\tif not cve_info:\n\t\tlogger.error(f'Could not fetch CVE info for cve {cve_id}. Skipping.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_s3scanner_result",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_s3scanner_result(line):\n\t'''\n\t\tParses and returns s3Scanner Data\n\t'''\n\tbucket = line['bucket']\n\treturn {\n\t\t'name': bucket['name'],\n\t\t'region': bucket['region'],\n\t\t'provider': bucket['provider'],\n\t\t'owner_display_name': bucket['owner_display_name'],",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_nuclei_result",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_nuclei_result(line):\n\t\"\"\"Parse results from nuclei JSON output.\n\tArgs:\n\t\tline (dict): Nuclei JSON line output.\n\tReturns:\n\t\tdict: Vulnerability data.\n\t\"\"\"\n\treturn {\n\t\t'name': line['info'].get('name', ''),\n\t\t'type': line['type'],",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_dalfox_result",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_dalfox_result(line):\n\t\"\"\"Parse results from nuclei JSON output.\n\tArgs:\n\t\tline (dict): Nuclei JSON line output.\n\tReturns:\n\t\tdict: Vulnerability data.\n\t\"\"\"\n\tdescription = ''\n\tdescription += f\" Evidence: {line.get('evidence')} <br>\" if line.get('evidence') else ''\n\tdescription += f\" Message: {line.get('message')} <br>\" if line.get('message') else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "parse_crlfuzz_result",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def parse_crlfuzz_result(url):\n\t\"\"\"Parse CRLF results\n\tArgs:\n\t\turl (str): CRLF Vulnerable URL\n\tReturns:\n\t\tdict: Vulnerability data.\n\t\"\"\"\n\treturn {\n\t\t'name': 'CRLF (HTTP Response Splitting)',\n\t\t'type': 'CRLF',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "record_exists",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def record_exists(model, data, exclude_keys=[]):\n\t\"\"\"\n\tCheck if a record already exists in the database based on the given data.\n\tArgs:\n\t\tmodel (django.db.models.Model): The Django model to check against.\n\t\tdata (dict): Data dictionary containing fields and values.\n\t\texclude_keys (list): List of keys to exclude from the lookup.\n\tReturns:\n\t\tbool: True if the record exists, False otherwise.\n\t\"\"\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "geo_localize",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def geo_localize(host, ip_id=None):\n\t\"\"\"Uses geoiplookup to find location associated with host.\n\tArgs:\n\t\thost (str): Hostname.\n\t\tip_id (int): IpAddress object id.\n\tReturns:\n\t\tstartScan.models.CountryISO: CountryISO object from DB or None.\n\t\"\"\"\n\tif validators.ipv6(host):\n\t\tlogger.info(f'Ipv6 \"{host}\" is not supported by geoiplookup. Skipping.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "query_whois",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def query_whois(target, force_reload_whois=False):\n\t\"\"\"Query WHOIS information for an IP or a domain name.\n\tArgs:\n\t\ttarget (str): IP address or domain name.\n\t\tsave_domain (bool): Whether to save domain or not, default False\n\tReturns:\n\t\tdict: WHOIS information.\n\t\"\"\"\n\ttry:\n\t\t# TODO: Implement cache whois only for 48 hours otherwise get from whois server",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "fetch_related_tlds_and_domains",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def fetch_related_tlds_and_domains(domain):\n\t\"\"\"\n\tFetch related TLDs and domains using TLSx.\n\trelated domains are those that are not part of related TLDs.\n\tArgs:\n\t\tdomain (str): The domain to find related TLDs and domains for.\n\tReturns:\n\t\ttuple: A tuple containing two lists (related_tlds, related_domains).\n\t\"\"\"\n\tlogger.info(f\"Fetching related TLDs and domains for {domain}\")",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "fetch_whois_data_using_netlas",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def fetch_whois_data_using_netlas(target):\n\t\"\"\"\n\t\tFetch WHOIS data using netlas.\n\t\tArgs:\n\t\t\ttarget (str): IP address or domain name.\n\t\tReturns:\n\t\t\tdict: WHOIS information.\n\t\"\"\"\n\tlogger.info(f'Fetching WHOIS data for {target} using Netlas...')\n\tcommand = f'netlas host {target} -f json'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "remove_duplicate_endpoints",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def remove_duplicate_endpoints(\n\t\tscan_history_id,\n\t\tdomain_id,\n\t\tsubdomain_id=None,\n\t\tfilter_ids=[],\n\t\tfilter_status=[200, 301, 404],\n\t\tduplicate_removal_fields=ENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS\n\t):\n\t\"\"\"Remove duplicate endpoints.\n\tCheck for implicit redirections by comparing endpoints:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def run_command(\n\t\tcmd, \n\t\tcwd=None, \n\t\tshell=False, \n\t\thistory_file=None, \n\t\tscan_id=None, \n\t\tactivity_id=None,\n\t\tremove_ansi_sequence=False\n\t):\n\t\"\"\"Run a given command using subprocess module.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "stream_command",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def stream_command(cmd, cwd=None, shell=False, history_file=None, encoding='utf-8', scan_id=None, activity_id=None, trunc_char=None):\n\t# Log cmd\n\tlogger.info(cmd)\n\t# logger.warning(activity_id)\n\t# Create a command record in the database\n\tcommand_obj = Command.objects.create(\n\t\tcommand=cmd,\n\t\ttime=timezone.now(),\n\t\tscan_history_id=scan_id,\n\t\tactivity_id=activity_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "process_httpx_response",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def process_httpx_response(line):\n\t\"\"\"TODO: implement this\"\"\"\ndef extract_httpx_url(line):\n\t\"\"\"Extract final URL from httpx results. Always follow redirects to find\n\tthe last URL.\n\tArgs:\n\t\tline (dict): URL data output by httpx.\n\tReturns:\n\t\ttuple: (final_url, redirect_bool) tuple.\n\t\"\"\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "extract_httpx_url",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def extract_httpx_url(line):\n\t\"\"\"Extract final URL from httpx results. Always follow redirects to find\n\tthe last URL.\n\tArgs:\n\t\tline (dict): URL data output by httpx.\n\tReturns:\n\t\ttuple: (final_url, redirect_bool) tuple.\n\t\"\"\"\n\tstatus_code = line.get('status_code', 0)\n\tfinal_url = line.get('final_url')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "get_and_save_dork_results",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def get_and_save_dork_results(lookup_target, results_dir, type, lookup_keywords=None, lookup_extensions=None, delay=3, page_count=2, scan_history=None):\n\t\"\"\"\n\t\tUses gofuzz to dork and store information\n\t\tArgs:\n\t\t\tlookup_target (str): target to look into such as stackoverflow or even the target itself\n\t\t\tresults_dir (str): Results directory\n\t\t\ttype (str): Dork Type Title\n\t\t\tlookup_keywords (str): comma separated keywords or paths to look for\n\t\t\tlookup_extensions (str): comma separated extensions to look for\n\t\t\tdelay (int): delay between each requests",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "save_metadata_info",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def save_metadata_info(meta_dict):\n\t\"\"\"Extract metadata from Google Search.\n\tArgs:\n\t\tmeta_dict (dict): Info dict.\n\tReturns:\n\t\tlist: List of startScan.MetaFinderDocument objects.\n\t\"\"\"\n\tlogger.warning(f'Getting metadata for {meta_dict.osint_target}')\n\tscan_history = ScanHistory.objects.get(id=meta_dict.scan_id)\n\t# Proxy settings",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "create_scan_activity",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def create_scan_activity(scan_history_id, message, status):\n\tscan_activity = ScanActivity()\n\tscan_activity.scan_of = ScanHistory.objects.get(pk=scan_history_id)\n\tscan_activity.title = message\n\tscan_activity.time = timezone.now()\n\tscan_activity.status = status\n\tscan_activity.save()\n\treturn scan_activity.id\n#--------------------#\n# Database functions #",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "save_vulnerability",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def save_vulnerability(**vuln_data):\n\treferences = vuln_data.pop('references', [])\n\tcve_ids = vuln_data.pop('cve_ids', [])\n\tcwe_ids = vuln_data.pop('cwe_ids', [])\n\ttags = vuln_data.pop('tags', [])\n\tsubscan = vuln_data.pop('subscan', None)\n\t# remove nulls\n\tvuln_data = replace_nulls(vuln_data)\n\t# Create vulnerability\n\tvuln, created = Vulnerability.objects.get_or_create(**vuln_data)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "save_endpoint",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def save_endpoint(\n\t\thttp_url,\n\t\tctx={},\n\t\tcrawl=False,\n\t\tis_default=False,\n\t\t**endpoint_data):\n\t\"\"\"Get or create EndPoint object. If crawl is True, also crawl the endpoint\n\tHTTP URL with httpx.\n\tArgs:\n\t\thttp_url (str): Input HTTP URL.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "save_subdomain",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def save_subdomain(subdomain_name, ctx={}):\n\t\"\"\"Get or create Subdomain object.\n\tArgs:\n\t\tsubdomain_name (str): Subdomain name.\n\t\tscan_history (startScan.models.ScanHistory): ScanHistory object.\n\tReturns:\n\t\ttuple: (startScan.models.Subdomain, created) where `created` is a\n\t\t\tboolean indicating if the object has been created in DB.\n\t\"\"\"\n\tscan_id = ctx.get('scan_history_id')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "save_email",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def save_email(email_address, scan_history=None):\n\tif not validators.email(email_address):\n\t\tlogger.info(f'Email {email_address} is invalid. Skipping.')\n\t\treturn None, False\n\temail, created = Email.objects.get_or_create(address=email_address)\n\t# if created:\n\t# \tlogger.warning(f'Found new email address {email_address}')\n\t# Add email to ScanHistory\n\tif scan_history:\n\t\tscan_history.emails.add(email)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "save_employee",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def save_employee(name, designation, scan_history=None):\n\temployee, created = Employee.objects.get_or_create(\n\t\tname=name,\n\t\tdesignation=designation)\n\t# if created:\n\t# \tlogger.warning(f'Found new employee {name}')\n\t# Add employee to ScanHistory\n\tif scan_history:\n\t\tscan_history.employees.add(employee)\n\t\tscan_history.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "save_ip_address",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def save_ip_address(ip_address, subdomain=None, subscan=None, **kwargs):\n\tif not (validators.ipv4(ip_address) or validators.ipv6(ip_address)):\n\t\tlogger.info(f'IP {ip_address} is not a valid IP. Skipping.')\n\t\treturn None, False\n\tip, created = IpAddress.objects.get_or_create(address=ip_address)\n\t# if created:\n\t# \tlogger.warning(f'Found new IP {ip_address}')\n\t# Set extra attributes\n\tfor key, value in kwargs.items():\n\t\tsetattr(ip, key, value)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "save_imported_subdomains",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def save_imported_subdomains(subdomains, ctx={}):\n\t\"\"\"Take a list of subdomains imported and write them to from_imported.txt.\n\tArgs:\n\t\tsubdomains (list): List of subdomain names.\n\t\tscan_history (startScan.models.ScanHistory): ScanHistory instance.\n\t\tdomain (startScan.models.Domain): Domain instance.\n\t\tresults_dir (str): Results directory.\n\t\"\"\"\n\tdomain_id = ctx['domain_id']\n\tdomain = Domain.objects.get(pk=domain_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "query_reverse_whois",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def query_reverse_whois(lookup_keyword):\n\t\"\"\"Queries Reverse WHOIS information for an organization or email address.\n\tArgs:\n\t\tlookup_keyword (str): Registrar Name or email\n\tReturns:\n\t\tdict: Reverse WHOIS information.\n\t\"\"\"\n\treturn reverse_whois(lookup_keyword)\n@app.task(name='query_ip_history', bind=False, queue='query_ip_history_queue')\ndef query_ip_history(domain):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "query_ip_history",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def query_ip_history(domain):\n\t\"\"\"Queries the IP history for a domain\n\tArgs:\n\t\tdomain (str): domain_name\n\tReturns:\n\t\tlist: list of historical ip addresses\n\t\"\"\"\n\treturn get_domain_historical_ip_address(domain)\n@app.task(name='llm_vulnerability_description', bind=False, queue='llm_queue')\ndef llm_vulnerability_description(vulnerability_id):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "llm_vulnerability_description",
        "kind": 2,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "def llm_vulnerability_description(vulnerability_id):\n\t\"\"\"Generate and store Vulnerability Description using GPT.\n\tArgs:\n\t\tvulnerability_id (Vulnerability Model ID): Vulnerability ID to fetch Description.\n\t\"\"\"\n\tlogger.info('Getting GPT Vulnerability Description')\n\ttry:\n\t\tlookup_vulnerability = Vulnerability.objects.get(id=vulnerability_id)\n\t\tlookup_url = urlparse(lookup_vulnerability.http_url)\n\t\tpath = lookup_url.path",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "logger = get_task_logger(__name__)\n#----------------------#\n# Scan / Subscan tasks #\n#----------------------#\n@app.task(name='initiate_scan', bind=False, queue='initiate_scan_queue')\ndef initiate_scan(\n\t\tscan_history_id,\n\t\tdomain_id,\n\t\tengine_id=None,\n\t\tscan_type=LIVE_SCAN,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan = None\n\ttry:\n\t\t# Get scan engine\n\t\tengine_id = engine_id or scan.scan_type.id # scan history engine_id\n\t\tengine = EngineType.objects.get(pk=engine_id)\n\t\t# Get YAML config\n\t\tconfig = yaml.safe_load(engine.yaml_configuration)\n\t\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t\tgf_patterns = config.get(GF_PATTERNS, [])\n\t\t# Get domain and set last_scan_date",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tengine_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tengine_id = engine_id or scan.scan_type.id # scan history engine_id\n\t\tengine = EngineType.objects.get(pk=engine_id)\n\t\t# Get YAML config\n\t\tconfig = yaml.safe_load(engine.yaml_configuration)\n\t\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t\tgf_patterns = config.get(GF_PATTERNS, [])\n\t\t# Get domain and set last_scan_date\n\t\tdomain = Domain.objects.get(pk=domain_id)\n\t\tdomain.last_scan_date = timezone.now()\n\t\tdomain.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tengine",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tengine = EngineType.objects.get(pk=engine_id)\n\t\t# Get YAML config\n\t\tconfig = yaml.safe_load(engine.yaml_configuration)\n\t\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t\tgf_patterns = config.get(GF_PATTERNS, [])\n\t\t# Get domain and set last_scan_date\n\t\tdomain = Domain.objects.get(pk=domain_id)\n\t\tdomain.last_scan_date = timezone.now()\n\t\tdomain.save()\n\t\t# Get path filter",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tconfig = yaml.safe_load(engine.yaml_configuration)\n\t\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t\tgf_patterns = config.get(GF_PATTERNS, [])\n\t\t# Get domain and set last_scan_date\n\t\tdomain = Domain.objects.get(pk=domain_id)\n\t\tdomain.last_scan_date = timezone.now()\n\t\tdomain.save()\n\t\t# Get path filter\n\t\tstarting_point_path = starting_point_path.rstrip('/')\n\t\t# for live scan scan history id is passed as scan_history_id ",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t\tgf_patterns = config.get(GF_PATTERNS, [])\n\t\t# Get domain and set last_scan_date\n\t\tdomain = Domain.objects.get(pk=domain_id)\n\t\tdomain.last_scan_date = timezone.now()\n\t\tdomain.save()\n\t\t# Get path filter\n\t\tstarting_point_path = starting_point_path.rstrip('/')\n\t\t# for live scan scan history id is passed as scan_history_id \n\t\t# and no need to create scan_history object",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tgf_patterns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tgf_patterns = config.get(GF_PATTERNS, [])\n\t\t# Get domain and set last_scan_date\n\t\tdomain = Domain.objects.get(pk=domain_id)\n\t\tdomain.last_scan_date = timezone.now()\n\t\tdomain.save()\n\t\t# Get path filter\n\t\tstarting_point_path = starting_point_path.rstrip('/')\n\t\t# for live scan scan history id is passed as scan_history_id \n\t\t# and no need to create scan_history object\n\t\tif scan_type == SCHEDULED_SCAN: # scheduled",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdomain = Domain.objects.get(pk=domain_id)\n\t\tdomain.last_scan_date = timezone.now()\n\t\tdomain.save()\n\t\t# Get path filter\n\t\tstarting_point_path = starting_point_path.rstrip('/')\n\t\t# for live scan scan history id is passed as scan_history_id \n\t\t# and no need to create scan_history object\n\t\tif scan_type == SCHEDULED_SCAN: # scheduled\n\t\t\t# we need to create scan_history object for each scheduled scan \n\t\t\tscan_history_id = create_scan_object(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdomain.last_scan_date",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdomain.last_scan_date = timezone.now()\n\t\tdomain.save()\n\t\t# Get path filter\n\t\tstarting_point_path = starting_point_path.rstrip('/')\n\t\t# for live scan scan history id is passed as scan_history_id \n\t\t# and no need to create scan_history object\n\t\tif scan_type == SCHEDULED_SCAN: # scheduled\n\t\t\t# we need to create scan_history object for each scheduled scan \n\t\t\tscan_history_id = create_scan_object(\n\t\t\t\thost_id=domain_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tstarting_point_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tstarting_point_path = starting_point_path.rstrip('/')\n\t\t# for live scan scan history id is passed as scan_history_id \n\t\t# and no need to create scan_history object\n\t\tif scan_type == SCHEDULED_SCAN: # scheduled\n\t\t\t# we need to create scan_history object for each scheduled scan \n\t\t\tscan_history_id = create_scan_object(\n\t\t\t\thost_id=domain_id,\n\t\t\t\tengine_id=engine_id,\n\t\t\t\tinitiated_by_id=initiated_by_id,\n\t\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tscan_history_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tscan_history_id = create_scan_object(\n\t\t\t\thost_id=domain_id,\n\t\t\t\tengine_id=engine_id,\n\t\t\t\tinitiated_by_id=initiated_by_id,\n\t\t\t)\n\t\tscan = ScanHistory.objects.get(pk=scan_history_id)\n\t\tscan.scan_status = RUNNING_TASK\n\t\tscan.scan_type = engine\n\t\tscan.celery_ids = [initiate_scan.request.id]\n\t\tscan.domain = domain",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan = ScanHistory.objects.get(pk=scan_history_id)\n\t\tscan.scan_status = RUNNING_TASK\n\t\tscan.scan_type = engine\n\t\tscan.celery_ids = [initiate_scan.request.id]\n\t\tscan.domain = domain\n\t\tscan.start_scan_date = timezone.now()\n\t\tscan.tasks = engine.tasks\n\t\tscan.results_dir = f'{results_dir}/{domain.name}_{scan.id}'\n\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.scan_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.scan_status = RUNNING_TASK\n\t\tscan.scan_type = engine\n\t\tscan.celery_ids = [initiate_scan.request.id]\n\t\tscan.domain = domain\n\t\tscan.start_scan_date = timezone.now()\n\t\tscan.tasks = engine.tasks\n\t\tscan.results_dir = f'{results_dir}/{domain.name}_{scan.id}'\n\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields\n\t\tscan.cfg_starting_point_path = starting_point_path",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.scan_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.scan_type = engine\n\t\tscan.celery_ids = [initiate_scan.request.id]\n\t\tscan.domain = domain\n\t\tscan.start_scan_date = timezone.now()\n\t\tscan.tasks = engine.tasks\n\t\tscan.results_dir = f'{results_dir}/{domain.name}_{scan.id}'\n\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields\n\t\tscan.cfg_starting_point_path = starting_point_path\n\t\tscan.cfg_excluded_paths = excluded_paths",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.celery_ids",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.celery_ids = [initiate_scan.request.id]\n\t\tscan.domain = domain\n\t\tscan.start_scan_date = timezone.now()\n\t\tscan.tasks = engine.tasks\n\t\tscan.results_dir = f'{results_dir}/{domain.name}_{scan.id}'\n\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields\n\t\tscan.cfg_starting_point_path = starting_point_path\n\t\tscan.cfg_excluded_paths = excluded_paths\n\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.domain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.domain = domain\n\t\tscan.start_scan_date = timezone.now()\n\t\tscan.tasks = engine.tasks\n\t\tscan.results_dir = f'{results_dir}/{domain.name}_{scan.id}'\n\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields\n\t\tscan.cfg_starting_point_path = starting_point_path\n\t\tscan.cfg_excluded_paths = excluded_paths\n\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains\n\t\tscan.cfg_imported_subdomains = imported_subdomains",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.start_scan_date",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.start_scan_date = timezone.now()\n\t\tscan.tasks = engine.tasks\n\t\tscan.results_dir = f'{results_dir}/{domain.name}_{scan.id}'\n\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields\n\t\tscan.cfg_starting_point_path = starting_point_path\n\t\tscan.cfg_excluded_paths = excluded_paths\n\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains\n\t\tscan.cfg_imported_subdomains = imported_subdomains\n\t\tif add_gf_patterns:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.tasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.tasks = engine.tasks\n\t\tscan.results_dir = f'{results_dir}/{domain.name}_{scan.id}'\n\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields\n\t\tscan.cfg_starting_point_path = starting_point_path\n\t\tscan.cfg_excluded_paths = excluded_paths\n\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains\n\t\tscan.cfg_imported_subdomains = imported_subdomains\n\t\tif add_gf_patterns:\n\t\t\tscan.used_gf_patterns = ','.join(gf_patterns)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.results_dir",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.results_dir = f'{results_dir}/{domain.name}_{scan.id}'\n\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields\n\t\tscan.cfg_starting_point_path = starting_point_path\n\t\tscan.cfg_excluded_paths = excluded_paths\n\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains\n\t\tscan.cfg_imported_subdomains = imported_subdomains\n\t\tif add_gf_patterns:\n\t\t\tscan.used_gf_patterns = ','.join(gf_patterns)\n\t\tscan.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tadd_gf_patterns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tadd_gf_patterns = gf_patterns and 'fetch_url' in engine.tasks\n\t\t# add configs to scan object, cfg_ prefix is used to avoid conflicts with other scan object fields\n\t\tscan.cfg_starting_point_path = starting_point_path\n\t\tscan.cfg_excluded_paths = excluded_paths\n\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains\n\t\tscan.cfg_imported_subdomains = imported_subdomains\n\t\tif add_gf_patterns:\n\t\t\tscan.used_gf_patterns = ','.join(gf_patterns)\n\t\tscan.save()\n\t\t# Create scan results dir",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.cfg_starting_point_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.cfg_starting_point_path = starting_point_path\n\t\tscan.cfg_excluded_paths = excluded_paths\n\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains\n\t\tscan.cfg_imported_subdomains = imported_subdomains\n\t\tif add_gf_patterns:\n\t\t\tscan.used_gf_patterns = ','.join(gf_patterns)\n\t\tscan.save()\n\t\t# Create scan results dir\n\t\tos.makedirs(scan.results_dir)\n\t\t# Build task context",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.cfg_excluded_paths",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.cfg_excluded_paths = excluded_paths\n\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains\n\t\tscan.cfg_imported_subdomains = imported_subdomains\n\t\tif add_gf_patterns:\n\t\t\tscan.used_gf_patterns = ','.join(gf_patterns)\n\t\tscan.save()\n\t\t# Create scan results dir\n\t\tos.makedirs(scan.results_dir)\n\t\t# Build task context\n\t\tctx = {",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.cfg_out_of_scope_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.cfg_out_of_scope_subdomains = out_of_scope_subdomains\n\t\tscan.cfg_imported_subdomains = imported_subdomains\n\t\tif add_gf_patterns:\n\t\t\tscan.used_gf_patterns = ','.join(gf_patterns)\n\t\tscan.save()\n\t\t# Create scan results dir\n\t\tos.makedirs(scan.results_dir)\n\t\t# Build task context\n\t\tctx = {\n\t\t\t'scan_history_id': scan_history_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.cfg_imported_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.cfg_imported_subdomains = imported_subdomains\n\t\tif add_gf_patterns:\n\t\t\tscan.used_gf_patterns = ','.join(gf_patterns)\n\t\tscan.save()\n\t\t# Create scan results dir\n\t\tos.makedirs(scan.results_dir)\n\t\t# Build task context\n\t\tctx = {\n\t\t\t'scan_history_id': scan_history_id,\n\t\t\t'engine_id': engine_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tscan.used_gf_patterns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tscan.used_gf_patterns = ','.join(gf_patterns)\n\t\tscan.save()\n\t\t# Create scan results dir\n\t\tos.makedirs(scan.results_dir)\n\t\t# Build task context\n\t\tctx = {\n\t\t\t'scan_history_id': scan_history_id,\n\t\t\t'engine_id': engine_id,\n\t\t\t'domain_id': domain.id,\n\t\t\t'results_dir': scan.results_dir,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tctx",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tctx = {\n\t\t\t'scan_history_id': scan_history_id,\n\t\t\t'engine_id': engine_id,\n\t\t\t'domain_id': domain.id,\n\t\t\t'results_dir': scan.results_dir,\n\t\t\t'starting_point_path': starting_point_path,\n\t\t\t'excluded_paths': excluded_paths,\n\t\t\t'yaml_configuration': config,\n\t\t\t'out_of_scope_subdomains': out_of_scope_subdomains\n\t\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tctx_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tctx_str = json.dumps(ctx, indent=2)\n\t\t# Send start notif\n\t\tlogger.warning(f'Starting scan {scan_history_id} with context:\\n{ctx_str}')\n\t\tsend_scan_notif.delay(\n\t\t\tscan_history_id,\n\t\t\tsubscan_id=None,\n\t\t\tengine_id=engine_id,\n\t\t\tstatus=CELERY_TASK_STATUS_MAP[scan.scan_status])\n\t\t# Save imported subdomains in DB\n\t\tsave_imported_subdomains(imported_subdomains, ctx=ctx)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain_name = domain.name\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\t# If enable_http_crawl is set, create an initial root HTTP endpoint so that\n\t\t# HTTP crawling can start somewhere\n\t\thttp_url = f'{domain.name}{starting_point_path}' if starting_point_path else domain.name\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tctx=ctx,\n\t\t\tcrawl=enable_http_crawl,\n\t\t\tis_default=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttp_url = f'{domain.name}{starting_point_path}' if starting_point_path else domain.name\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tctx=ctx,\n\t\t\tcrawl=enable_http_crawl,\n\t\t\tis_default=True,\n\t\t\tsubdomain=subdomain\n\t\t)\n\t\tif endpoint and endpoint.is_alive:\n\t\t\t# TODO: add `root_endpoint` property to subdomain and simply do",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.http_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.http_url = endpoint.http_url\n\t\t\tsubdomain.http_status = endpoint.http_status\n\t\t\tsubdomain.response_time = endpoint.response_time\n\t\t\tsubdomain.page_title = endpoint.page_title\n\t\t\tsubdomain.content_type = endpoint.content_type\n\t\t\tsubdomain.content_length = endpoint.content_length\n\t\t\tfor tech in endpoint.techs.all():\n\t\t\t\tsubdomain.technologies.add(tech)\n\t\t\tsubdomain.save()\n\t\t# Build Celery tasks, crafted according to the dependency graph below:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.http_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.http_status = endpoint.http_status\n\t\t\tsubdomain.response_time = endpoint.response_time\n\t\t\tsubdomain.page_title = endpoint.page_title\n\t\t\tsubdomain.content_type = endpoint.content_type\n\t\t\tsubdomain.content_length = endpoint.content_length\n\t\t\tfor tech in endpoint.techs.all():\n\t\t\t\tsubdomain.technologies.add(tech)\n\t\t\tsubdomain.save()\n\t\t# Build Celery tasks, crafted according to the dependency graph below:\n\t\t# subdomain_discovery --> port_scan --> fetch_url --> dir_file_fuzz",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.response_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.response_time = endpoint.response_time\n\t\t\tsubdomain.page_title = endpoint.page_title\n\t\t\tsubdomain.content_type = endpoint.content_type\n\t\t\tsubdomain.content_length = endpoint.content_length\n\t\t\tfor tech in endpoint.techs.all():\n\t\t\t\tsubdomain.technologies.add(tech)\n\t\t\tsubdomain.save()\n\t\t# Build Celery tasks, crafted according to the dependency graph below:\n\t\t# subdomain_discovery --> port_scan --> fetch_url --> dir_file_fuzz\n\t\t# osint\t\t\t\t\t\t\t\t             \t  vulnerability_scan",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.page_title",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.page_title = endpoint.page_title\n\t\t\tsubdomain.content_type = endpoint.content_type\n\t\t\tsubdomain.content_length = endpoint.content_length\n\t\t\tfor tech in endpoint.techs.all():\n\t\t\t\tsubdomain.technologies.add(tech)\n\t\t\tsubdomain.save()\n\t\t# Build Celery tasks, crafted according to the dependency graph below:\n\t\t# subdomain_discovery --> port_scan --> fetch_url --> dir_file_fuzz\n\t\t# osint\t\t\t\t\t\t\t\t             \t  vulnerability_scan\n\t\t# osint\t\t\t\t\t\t\t\t             \t  dalfox xss scan",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.content_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.content_type = endpoint.content_type\n\t\t\tsubdomain.content_length = endpoint.content_length\n\t\t\tfor tech in endpoint.techs.all():\n\t\t\t\tsubdomain.technologies.add(tech)\n\t\t\tsubdomain.save()\n\t\t# Build Celery tasks, crafted according to the dependency graph below:\n\t\t# subdomain_discovery --> port_scan --> fetch_url --> dir_file_fuzz\n\t\t# osint\t\t\t\t\t\t\t\t             \t  vulnerability_scan\n\t\t# osint\t\t\t\t\t\t\t\t             \t  dalfox xss scan\n\t\t#\t\t\t\t\t\t \t   \t\t         \t  \t  screenshot",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.content_length",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.content_length = endpoint.content_length\n\t\t\tfor tech in endpoint.techs.all():\n\t\t\t\tsubdomain.technologies.add(tech)\n\t\t\tsubdomain.save()\n\t\t# Build Celery tasks, crafted according to the dependency graph below:\n\t\t# subdomain_discovery --> port_scan --> fetch_url --> dir_file_fuzz\n\t\t# osint\t\t\t\t\t\t\t\t             \t  vulnerability_scan\n\t\t# osint\t\t\t\t\t\t\t\t             \t  dalfox xss scan\n\t\t#\t\t\t\t\t\t \t   \t\t         \t  \t  screenshot\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t  waf_detection",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tworkflow",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tworkflow = chain(\n\t\t\tgroup(\n\t\t\t\tsubdomain_discovery.si(ctx=ctx, description='Subdomain discovery'),\n\t\t\t\tosint.si(ctx=ctx, description='OS Intelligence')\n\t\t\t),\n\t\t\tport_scan.si(ctx=ctx, description='Port scan'),\n\t\t\tfetch_url.si(ctx=ctx, description='Fetch URL'),\n\t\t\tgroup(\n\t\t\t\tdir_file_fuzz.si(ctx=ctx, description='Directories & files fuzz'),\n\t\t\t\tvulnerability_scan.si(ctx=ctx, description='Vulnerability scan'),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcallback",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcallback = report.si(ctx=ctx).set(link_error=[report.si(ctx=ctx)])\n\t\t# Run Celery chord\n\t\tlogger.info(f'Running Celery workflow with {len(workflow.tasks) + 1} tasks')\n\t\ttask = chain(workflow, callback).on_error(callback).delay()\n\t\tscan.celery_ids.append(task.id)\n\t\tscan.save()\n\t\treturn {\n\t\t\t'success': True,\n\t\t\t'task_id': task.id\n\t\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttask",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttask = chain(workflow, callback).on_error(callback).delay()\n\t\tscan.celery_ids.append(task.id)\n\t\tscan.save()\n\t\treturn {\n\t\t\t'success': True,\n\t\t\t'task_id': task.id\n\t\t}\n\texcept Exception as e:\n\t\tlogger.exception(e)\n\t\tif scan:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tscan.scan_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tscan.scan_status = FAILED_TASK\n\t\t\tscan.error_message = str(e)\n\t\t\tscan.save()\n\t\treturn {\n\t\t\t'success': False,\n\t\t\t'error': str(e)\n\t\t}\n@app.task(name='initiate_subscan', bind=False, queue='subscan_queue')\ndef initiate_subscan(\n\t\tscan_history_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tscan.error_message",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tscan.error_message = str(e)\n\t\t\tscan.save()\n\t\treturn {\n\t\t\t'success': False,\n\t\t\t'error': str(e)\n\t\t}\n@app.task(name='initiate_subscan', bind=False, queue='subscan_queue')\ndef initiate_subscan(\n\t\tscan_history_id,\n\t\tsubdomain_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubdomain = Subdomain.objects.get(pk=subdomain_id)\n\tscan = ScanHistory.objects.get(pk=subdomain.scan_history.id)\n\tdomain = Domain.objects.get(pk=subdomain.target_domain.id)\n\t# Get EngineType\n\tengine_id = engine_id or scan.scan_type.id\n\tengine = EngineType.objects.get(pk=engine_id)\n\t# Get YAML config\n\tconfig = yaml.safe_load(engine.yaml_configuration)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Create scan activity of SubScan Model",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan = ScanHistory.objects.get(pk=subdomain.scan_history.id)\n\tdomain = Domain.objects.get(pk=subdomain.target_domain.id)\n\t# Get EngineType\n\tengine_id = engine_id or scan.scan_type.id\n\tengine = EngineType.objects.get(pk=engine_id)\n\t# Get YAML config\n\tconfig = yaml.safe_load(engine.yaml_configuration)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Create scan activity of SubScan Model\n\tsubscan = SubScan(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdomain = Domain.objects.get(pk=subdomain.target_domain.id)\n\t# Get EngineType\n\tengine_id = engine_id or scan.scan_type.id\n\tengine = EngineType.objects.get(pk=engine_id)\n\t# Get YAML config\n\tconfig = yaml.safe_load(engine.yaml_configuration)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Create scan activity of SubScan Model\n\tsubscan = SubScan(\n\t\tstart_scan_date=timezone.now(),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tengine_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tengine_id = engine_id or scan.scan_type.id\n\tengine = EngineType.objects.get(pk=engine_id)\n\t# Get YAML config\n\tconfig = yaml.safe_load(engine.yaml_configuration)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Create scan activity of SubScan Model\n\tsubscan = SubScan(\n\t\tstart_scan_date=timezone.now(),\n\t\tcelery_ids=[initiate_subscan.request.id],\n\t\tscan_history=scan,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tengine",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tengine = EngineType.objects.get(pk=engine_id)\n\t# Get YAML config\n\tconfig = yaml.safe_load(engine.yaml_configuration)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Create scan activity of SubScan Model\n\tsubscan = SubScan(\n\t\tstart_scan_date=timezone.now(),\n\t\tcelery_ids=[initiate_subscan.request.id],\n\t\tscan_history=scan,\n\t\tsubdomain=subdomain,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = yaml.safe_load(engine.yaml_configuration)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Create scan activity of SubScan Model\n\tsubscan = SubScan(\n\t\tstart_scan_date=timezone.now(),\n\t\tcelery_ids=[initiate_subscan.request.id],\n\t\tscan_history=scan,\n\t\tsubdomain=subdomain,\n\t\ttype=scan_type,\n\t\tstatus=RUNNING_TASK,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Create scan activity of SubScan Model\n\tsubscan = SubScan(\n\t\tstart_scan_date=timezone.now(),\n\t\tcelery_ids=[initiate_subscan.request.id],\n\t\tscan_history=scan,\n\t\tsubdomain=subdomain,\n\t\ttype=scan_type,\n\t\tstatus=RUNNING_TASK,\n\t\tengine=engine)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubscan = SubScan(\n\t\tstart_scan_date=timezone.now(),\n\t\tcelery_ids=[initiate_subscan.request.id],\n\t\tscan_history=scan,\n\t\tsubdomain=subdomain,\n\t\ttype=scan_type,\n\t\tstatus=RUNNING_TASK,\n\t\tengine=engine)\n\tsubscan.save()\n\t# Get YAML configuration",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = yaml.safe_load(engine.yaml_configuration)\n\t# Create results directory\n\tresults_dir = f'{scan.results_dir}/subscans/{subscan.id}'\n\tos.makedirs(results_dir, exist_ok=True)\n\t# Run task\n\tmethod = globals().get(scan_type)\n\tif not method:\n\t\tlogger.warning(f'Task {scan_type} is not supported by reNgine. Skipping')\n\t\treturn\n\tscan.tasks.append(scan_type)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults_dir",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults_dir = f'{scan.results_dir}/subscans/{subscan.id}'\n\tos.makedirs(results_dir, exist_ok=True)\n\t# Run task\n\tmethod = globals().get(scan_type)\n\tif not method:\n\t\tlogger.warning(f'Task {scan_type} is not supported by reNgine. Skipping')\n\t\treturn\n\tscan.tasks.append(scan_type)\n\tscan.save()\n\t# Send start notif",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmethod",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmethod = globals().get(scan_type)\n\tif not method:\n\t\tlogger.warning(f'Task {scan_type} is not supported by reNgine. Skipping')\n\t\treturn\n\tscan.tasks.append(scan_type)\n\tscan.save()\n\t# Send start notif\n\tsend_scan_notif.delay(\n\t\tscan.id,\n\t\tsubscan_id=subscan.id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tctx",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tctx = {\n\t\t'scan_history_id': scan.id,\n\t\t'subscan_id': subscan.id,\n\t\t'engine_id': engine_id,\n\t\t'domain_id': domain.id,\n\t\t'subdomain_id': subdomain.id,\n\t\t'yaml_configuration': config,\n\t\t'results_dir': results_dir,\n\t\t'starting_point_path': starting_point_path,\n\t\t'excluded_paths': excluded_paths,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tbase_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tbase_url = f'{subdomain.name}{starting_point_path}' if starting_point_path else subdomain.name\n\tendpoint, _ = save_endpoint(\n\t\tbase_url,\n\t\tcrawl=enable_http_crawl,\n\t\tctx=ctx,\n\t\tsubdomain=subdomain)\n\tif endpoint and endpoint.is_alive:\n\t\t# TODO: add `root_endpoint` property to subdomain and simply do\n\t\t# subdomain.root_endpoint = endpoint instead\n\t\tlogger.warning(f'Found subdomain root HTTP URL {endpoint.http_url}')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain.http_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain.http_url = endpoint.http_url\n\t\tsubdomain.http_status = endpoint.http_status\n\t\tsubdomain.response_time = endpoint.response_time\n\t\tsubdomain.page_title = endpoint.page_title\n\t\tsubdomain.content_type = endpoint.content_type\n\t\tsubdomain.content_length = endpoint.content_length\n\t\tfor tech in endpoint.techs.all():\n\t\t\tsubdomain.technologies.add(tech)\n\t\tsubdomain.save()\n\t# Build header + callback",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain.http_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain.http_status = endpoint.http_status\n\t\tsubdomain.response_time = endpoint.response_time\n\t\tsubdomain.page_title = endpoint.page_title\n\t\tsubdomain.content_type = endpoint.content_type\n\t\tsubdomain.content_length = endpoint.content_length\n\t\tfor tech in endpoint.techs.all():\n\t\t\tsubdomain.technologies.add(tech)\n\t\tsubdomain.save()\n\t# Build header + callback\n\tworkflow = method.si(ctx=ctx)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain.response_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain.response_time = endpoint.response_time\n\t\tsubdomain.page_title = endpoint.page_title\n\t\tsubdomain.content_type = endpoint.content_type\n\t\tsubdomain.content_length = endpoint.content_length\n\t\tfor tech in endpoint.techs.all():\n\t\t\tsubdomain.technologies.add(tech)\n\t\tsubdomain.save()\n\t# Build header + callback\n\tworkflow = method.si(ctx=ctx)\n\tcallback = report.si(ctx=ctx).set(link_error=[report.si(ctx=ctx)])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain.page_title",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain.page_title = endpoint.page_title\n\t\tsubdomain.content_type = endpoint.content_type\n\t\tsubdomain.content_length = endpoint.content_length\n\t\tfor tech in endpoint.techs.all():\n\t\t\tsubdomain.technologies.add(tech)\n\t\tsubdomain.save()\n\t# Build header + callback\n\tworkflow = method.si(ctx=ctx)\n\tcallback = report.si(ctx=ctx).set(link_error=[report.si(ctx=ctx)])\n\t# Run Celery tasks",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain.content_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain.content_type = endpoint.content_type\n\t\tsubdomain.content_length = endpoint.content_length\n\t\tfor tech in endpoint.techs.all():\n\t\t\tsubdomain.technologies.add(tech)\n\t\tsubdomain.save()\n\t# Build header + callback\n\tworkflow = method.si(ctx=ctx)\n\tcallback = report.si(ctx=ctx).set(link_error=[report.si(ctx=ctx)])\n\t# Run Celery tasks\n\ttask = chain(workflow, callback).on_error(callback).delay()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain.content_length",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain.content_length = endpoint.content_length\n\t\tfor tech in endpoint.techs.all():\n\t\t\tsubdomain.technologies.add(tech)\n\t\tsubdomain.save()\n\t# Build header + callback\n\tworkflow = method.si(ctx=ctx)\n\tcallback = report.si(ctx=ctx).set(link_error=[report.si(ctx=ctx)])\n\t# Run Celery tasks\n\ttask = chain(workflow, callback).on_error(callback).delay()\n\tsubscan.celery_ids.append(task.id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tworkflow",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tworkflow = method.si(ctx=ctx)\n\tcallback = report.si(ctx=ctx).set(link_error=[report.si(ctx=ctx)])\n\t# Run Celery tasks\n\ttask = chain(workflow, callback).on_error(callback).delay()\n\tsubscan.celery_ids.append(task.id)\n\tsubscan.save()\n\treturn {\n\t\t'success': True,\n\t\t'task_id': task.id\n\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcallback",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcallback = report.si(ctx=ctx).set(link_error=[report.si(ctx=ctx)])\n\t# Run Celery tasks\n\ttask = chain(workflow, callback).on_error(callback).delay()\n\tsubscan.celery_ids.append(task.id)\n\tsubscan.save()\n\treturn {\n\t\t'success': True,\n\t\t'task_id': task.id\n\t}\n@app.task(name='report', bind=False, queue='report_queue')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttask",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttask = chain(workflow, callback).on_error(callback).delay()\n\tsubscan.celery_ids.append(task.id)\n\tsubscan.save()\n\treturn {\n\t\t'success': True,\n\t\t'task_id': task.id\n\t}\n@app.task(name='report', bind=False, queue='report_queue')\ndef report(ctx={}, description=None):\n\t\"\"\"Report task running after all other tasks.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubscan_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubscan_id = ctx.get('subscan_id')\n\tscan_id = ctx.get('scan_history_id')\n\tengine_id = ctx.get('engine_id')\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t# Get failed tasks\n\ttasks = ScanActivity.objects.filter(scan_of=scan).all()\n\tif subscan:\n\t\ttasks = tasks.filter(celery_id__in=subscan.celery_ids)\n\tfailed_tasks = tasks.filter(status=FAILED_TASK)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_id = ctx.get('scan_history_id')\n\tengine_id = ctx.get('engine_id')\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t# Get failed tasks\n\ttasks = ScanActivity.objects.filter(scan_of=scan).all()\n\tif subscan:\n\t\ttasks = tasks.filter(celery_id__in=subscan.celery_ids)\n\tfailed_tasks = tasks.filter(status=FAILED_TASK)\n\t# Get task status",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tengine_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tengine_id = ctx.get('engine_id')\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t# Get failed tasks\n\ttasks = ScanActivity.objects.filter(scan_of=scan).all()\n\tif subscan:\n\t\ttasks = tasks.filter(celery_id__in=subscan.celery_ids)\n\tfailed_tasks = tasks.filter(status=FAILED_TASK)\n\t# Get task status\n\tfailed_count = failed_tasks.count()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t# Get failed tasks\n\ttasks = ScanActivity.objects.filter(scan_of=scan).all()\n\tif subscan:\n\t\ttasks = tasks.filter(celery_id__in=subscan.celery_ids)\n\tfailed_tasks = tasks.filter(status=FAILED_TASK)\n\t# Get task status\n\tfailed_count = failed_tasks.count()\n\tstatus = SUCCESS_TASK if failed_count == 0 else FAILED_TASK",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t# Get failed tasks\n\ttasks = ScanActivity.objects.filter(scan_of=scan).all()\n\tif subscan:\n\t\ttasks = tasks.filter(celery_id__in=subscan.celery_ids)\n\tfailed_tasks = tasks.filter(status=FAILED_TASK)\n\t# Get task status\n\tfailed_count = failed_tasks.count()\n\tstatus = SUCCESS_TASK if failed_count == 0 else FAILED_TASK\n\tstatus_h = 'SUCCESS' if failed_count == 0 else 'FAILED'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttasks = ScanActivity.objects.filter(scan_of=scan).all()\n\tif subscan:\n\t\ttasks = tasks.filter(celery_id__in=subscan.celery_ids)\n\tfailed_tasks = tasks.filter(status=FAILED_TASK)\n\t# Get task status\n\tfailed_count = failed_tasks.count()\n\tstatus = SUCCESS_TASK if failed_count == 0 else FAILED_TASK\n\tstatus_h = 'SUCCESS' if failed_count == 0 else 'FAILED'\n\t# Update scan / subscan status\n\tif subscan:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttasks = tasks.filter(celery_id__in=subscan.celery_ids)\n\tfailed_tasks = tasks.filter(status=FAILED_TASK)\n\t# Get task status\n\tfailed_count = failed_tasks.count()\n\tstatus = SUCCESS_TASK if failed_count == 0 else FAILED_TASK\n\tstatus_h = 'SUCCESS' if failed_count == 0 else 'FAILED'\n\t# Update scan / subscan status\n\tif subscan:\n\t\tsubscan.stop_scan_date = timezone.now()\n\t\tsubscan.status = status",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfailed_tasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfailed_tasks = tasks.filter(status=FAILED_TASK)\n\t# Get task status\n\tfailed_count = failed_tasks.count()\n\tstatus = SUCCESS_TASK if failed_count == 0 else FAILED_TASK\n\tstatus_h = 'SUCCESS' if failed_count == 0 else 'FAILED'\n\t# Update scan / subscan status\n\tif subscan:\n\t\tsubscan.stop_scan_date = timezone.now()\n\t\tsubscan.status = status\n\t\tsubscan.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfailed_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfailed_count = failed_tasks.count()\n\tstatus = SUCCESS_TASK if failed_count == 0 else FAILED_TASK\n\tstatus_h = 'SUCCESS' if failed_count == 0 else 'FAILED'\n\t# Update scan / subscan status\n\tif subscan:\n\t\tsubscan.stop_scan_date = timezone.now()\n\t\tsubscan.status = status\n\t\tsubscan.save()\n\telse:\n\t\tscan.scan_status = status",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tstatus = SUCCESS_TASK if failed_count == 0 else FAILED_TASK\n\tstatus_h = 'SUCCESS' if failed_count == 0 else 'FAILED'\n\t# Update scan / subscan status\n\tif subscan:\n\t\tsubscan.stop_scan_date = timezone.now()\n\t\tsubscan.status = status\n\t\tsubscan.save()\n\telse:\n\t\tscan.scan_status = status\n\tscan.stop_scan_date = timezone.now()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tstatus_h",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tstatus_h = 'SUCCESS' if failed_count == 0 else 'FAILED'\n\t# Update scan / subscan status\n\tif subscan:\n\t\tsubscan.stop_scan_date = timezone.now()\n\t\tsubscan.status = status\n\t\tsubscan.save()\n\telse:\n\t\tscan.scan_status = status\n\tscan.stop_scan_date = timezone.now()\n\tscan.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan.stop_scan_date",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubscan.stop_scan_date = timezone.now()\n\t\tsubscan.status = status\n\t\tsubscan.save()\n\telse:\n\t\tscan.scan_status = status\n\tscan.stop_scan_date = timezone.now()\n\tscan.save()\n\t# Send scan status notif\n\tsend_scan_notif.delay(\n\t\tscan_history_id=scan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan.status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubscan.status = status\n\t\tsubscan.save()\n\telse:\n\t\tscan.scan_status = status\n\tscan.stop_scan_date = timezone.now()\n\tscan.save()\n\t# Send scan status notif\n\tsend_scan_notif.delay(\n\t\tscan_history_id=scan_id,\n\t\tsubscan_id=subscan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan.scan_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan.scan_status = status\n\tscan.stop_scan_date = timezone.now()\n\tscan.save()\n\t# Send scan status notif\n\tsend_scan_notif.delay(\n\t\tscan_history_id=scan_id,\n\t\tsubscan_id=subscan_id,\n\t\tengine_id=engine_id,\n\t\tstatus=status_h)\n#------------------------- #",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan.stop_scan_date",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan.stop_scan_date = timezone.now()\n\tscan.save()\n\t# Send scan status notif\n\tsend_scan_notif.delay(\n\t\tscan_history_id=scan_id,\n\t\tsubscan_id=subscan_id,\n\t\tengine_id=engine_id,\n\t\tstatus=status_h)\n#------------------------- #\n# Tracked reNgine tasks    #",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thost",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thost = self.subdomain.name if self.subdomain else self.domain.name\n\tif self.starting_point_path:\n\t\tlogger.warning(f'Ignoring subdomains scan as an URL path filter was passed ({self.starting_point_path}).')\n\t\treturn\n\t# Config\n\tconfig = self.yaml_configuration.get(SUBDOMAIN_DISCOVERY) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL) or self.yaml_configuration.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\ttools = config.get(USES_TOOLS, SUBDOMAIN_SCAN_DEFAULT_TOOLS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(SUBDOMAIN_DISCOVERY) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL) or self.yaml_configuration.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\ttools = config.get(USES_TOOLS, SUBDOMAIN_SCAN_DEFAULT_TOOLS)\n\tdefault_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=True).filter(is_subdomain_gathering=True)]\n\tcustom_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=False).filter(is_subdomain_gathering=True)]\n\tsend_subdomain_changes, send_interesting = False, False\n\tnotif = Notification.objects.first()\n\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL) or self.yaml_configuration.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\ttools = config.get(USES_TOOLS, SUBDOMAIN_SCAN_DEFAULT_TOOLS)\n\tdefault_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=True).filter(is_subdomain_gathering=True)]\n\tcustom_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=False).filter(is_subdomain_gathering=True)]\n\tsend_subdomain_changes, send_interesting = False, False\n\tnotif = Notification.objects.first()\n\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)\n\tif notif:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\ttools = config.get(USES_TOOLS, SUBDOMAIN_SCAN_DEFAULT_TOOLS)\n\tdefault_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=True).filter(is_subdomain_gathering=True)]\n\tcustom_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=False).filter(is_subdomain_gathering=True)]\n\tsend_subdomain_changes, send_interesting = False, False\n\tnotif = Notification.objects.first()\n\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)\n\tif notif:\n\t\tsend_subdomain_changes = notif.send_subdomain_changes_notif",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttimeout",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\ttools = config.get(USES_TOOLS, SUBDOMAIN_SCAN_DEFAULT_TOOLS)\n\tdefault_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=True).filter(is_subdomain_gathering=True)]\n\tcustom_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=False).filter(is_subdomain_gathering=True)]\n\tsend_subdomain_changes, send_interesting = False, False\n\tnotif = Notification.objects.first()\n\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)\n\tif notif:\n\t\tsend_subdomain_changes = notif.send_subdomain_changes_notif\n\t\tsend_interesting = notif.send_interesting_notif",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttools",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttools = config.get(USES_TOOLS, SUBDOMAIN_SCAN_DEFAULT_TOOLS)\n\tdefault_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=True).filter(is_subdomain_gathering=True)]\n\tcustom_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=False).filter(is_subdomain_gathering=True)]\n\tsend_subdomain_changes, send_interesting = False, False\n\tnotif = Notification.objects.first()\n\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)\n\tif notif:\n\t\tsend_subdomain_changes = notif.send_subdomain_changes_notif\n\t\tsend_interesting = notif.send_interesting_notif\n\t# Gather tools to run for subdomain scan",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdefault_subdomain_tools",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdefault_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=True).filter(is_subdomain_gathering=True)]\n\tcustom_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=False).filter(is_subdomain_gathering=True)]\n\tsend_subdomain_changes, send_interesting = False, False\n\tnotif = Notification.objects.first()\n\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)\n\tif notif:\n\t\tsend_subdomain_changes = notif.send_subdomain_changes_notif\n\t\tsend_interesting = notif.send_interesting_notif\n\t# Gather tools to run for subdomain scan\n\tif ALL in tools:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_subdomain_tools",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_subdomain_tools = [tool.name.lower() for tool in InstalledExternalTool.objects.filter(is_default=False).filter(is_subdomain_gathering=True)]\n\tsend_subdomain_changes, send_interesting = False, False\n\tnotif = Notification.objects.first()\n\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)\n\tif notif:\n\t\tsend_subdomain_changes = notif.send_subdomain_changes_notif\n\t\tsend_interesting = notif.send_interesting_notif\n\t# Gather tools to run for subdomain scan\n\tif ALL in tools:\n\t\ttools = SUBDOMAIN_SCAN_DEFAULT_TOOLS + custom_subdomain_tools",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)\n\tif notif:\n\t\tsend_subdomain_changes = notif.send_subdomain_changes_notif\n\t\tsend_interesting = notif.send_interesting_notif\n\t# Gather tools to run for subdomain scan\n\tif ALL in tools:\n\t\ttools = SUBDOMAIN_SCAN_DEFAULT_TOOLS + custom_subdomain_tools\n\ttools = [t.lower() for t in tools]\n\t# Make exception for amass since tool name is amass, but command is amass-active/passive",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_scope_checker",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubdomain_scope_checker = SubdomainScopeChecker(self.out_of_scope_subdomains)\n\tif notif:\n\t\tsend_subdomain_changes = notif.send_subdomain_changes_notif\n\t\tsend_interesting = notif.send_interesting_notif\n\t# Gather tools to run for subdomain scan\n\tif ALL in tools:\n\t\ttools = SUBDOMAIN_SCAN_DEFAULT_TOOLS + custom_subdomain_tools\n\ttools = [t.lower() for t in tools]\n\t# Make exception for amass since tool name is amass, but command is amass-active/passive\n\tdefault_subdomain_tools.append('amass-passive')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsend_subdomain_changes",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsend_subdomain_changes = notif.send_subdomain_changes_notif\n\t\tsend_interesting = notif.send_interesting_notif\n\t# Gather tools to run for subdomain scan\n\tif ALL in tools:\n\t\ttools = SUBDOMAIN_SCAN_DEFAULT_TOOLS + custom_subdomain_tools\n\ttools = [t.lower() for t in tools]\n\t# Make exception for amass since tool name is amass, but command is amass-active/passive\n\tdefault_subdomain_tools.append('amass-passive')\n\tdefault_subdomain_tools.append('amass-active')\n\t# Run tools",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsend_interesting",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsend_interesting = notif.send_interesting_notif\n\t# Gather tools to run for subdomain scan\n\tif ALL in tools:\n\t\ttools = SUBDOMAIN_SCAN_DEFAULT_TOOLS + custom_subdomain_tools\n\ttools = [t.lower() for t in tools]\n\t# Make exception for amass since tool name is amass, but command is amass-active/passive\n\tdefault_subdomain_tools.append('amass-passive')\n\tdefault_subdomain_tools.append('amass-active')\n\t# Run tools\n\tfor tool in tools:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttools",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttools = SUBDOMAIN_SCAN_DEFAULT_TOOLS + custom_subdomain_tools\n\ttools = [t.lower() for t in tools]\n\t# Make exception for amass since tool name is amass, but command is amass-active/passive\n\tdefault_subdomain_tools.append('amass-passive')\n\tdefault_subdomain_tools.append('amass-active')\n\t# Run tools\n\tfor tool in tools:\n\t\tcmd = None\n\t\tlogger.info(f'Scanning subdomains for {host} with {tool}')\n\t\tproxy = get_random_proxy()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttools",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttools = [t.lower() for t in tools]\n\t# Make exception for amass since tool name is amass, but command is amass-active/passive\n\tdefault_subdomain_tools.append('amass-passive')\n\tdefault_subdomain_tools.append('amass-active')\n\t# Run tools\n\tfor tool in tools:\n\t\tcmd = None\n\t\tlogger.info(f'Scanning subdomains for {host} with {tool}')\n\t\tproxy = get_random_proxy()\n\t\tif tool in default_subdomain_tools:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcmd = None\n\t\tlogger.info(f'Scanning subdomains for {host} with {tool}')\n\t\tproxy = get_random_proxy()\n\t\tif tool in default_subdomain_tools:\n\t\t\tif tool == 'amass-passive':\n\t\t\t\tuse_amass_config = config.get(USE_AMASS_CONFIG, False)\n\t\t\t\tcmd = f'amass enum -passive -d {host} -o {self.results_dir}/subdomains_amass.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\telif tool == 'amass-active':\n\t\t\t\tuse_amass_config = config.get(USE_AMASS_CONFIG, False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tproxy = get_random_proxy()\n\t\tif tool in default_subdomain_tools:\n\t\t\tif tool == 'amass-passive':\n\t\t\t\tuse_amass_config = config.get(USE_AMASS_CONFIG, False)\n\t\t\t\tcmd = f'amass enum -passive -d {host} -o {self.results_dir}/subdomains_amass.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\telif tool == 'amass-active':\n\t\t\t\tuse_amass_config = config.get(USE_AMASS_CONFIG, False)\n\t\t\t\tamass_wordlist_name = config.get(AMASS_WORDLIST, 'deepmagic.com-prefixes-top50000')\n\t\t\t\twordlist_path = f'/usr/src/wordlist/{amass_wordlist_name}.txt'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tuse_amass_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tuse_amass_config = config.get(USE_AMASS_CONFIG, False)\n\t\t\t\tcmd = f'amass enum -passive -d {host} -o {self.results_dir}/subdomains_amass.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\telif tool == 'amass-active':\n\t\t\t\tuse_amass_config = config.get(USE_AMASS_CONFIG, False)\n\t\t\t\tamass_wordlist_name = config.get(AMASS_WORDLIST, 'deepmagic.com-prefixes-top50000')\n\t\t\t\twordlist_path = f'/usr/src/wordlist/{amass_wordlist_name}.txt'\n\t\t\t\tcmd = f'amass enum -active -d {host} -o {self.results_dir}/subdomains_amass_active.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\t\tcmd += f' -brute -w {wordlist_path}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'amass enum -passive -d {host} -o {self.results_dir}/subdomains_amass.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\telif tool == 'amass-active':\n\t\t\t\tuse_amass_config = config.get(USE_AMASS_CONFIG, False)\n\t\t\t\tamass_wordlist_name = config.get(AMASS_WORDLIST, 'deepmagic.com-prefixes-top50000')\n\t\t\t\twordlist_path = f'/usr/src/wordlist/{amass_wordlist_name}.txt'\n\t\t\t\tcmd = f'amass enum -active -d {host} -o {self.results_dir}/subdomains_amass_active.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\t\tcmd += f' -brute -w {wordlist_path}'\n\t\t\telif tool == 'sublist3r':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tuse_amass_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tuse_amass_config = config.get(USE_AMASS_CONFIG, False)\n\t\t\t\tamass_wordlist_name = config.get(AMASS_WORDLIST, 'deepmagic.com-prefixes-top50000')\n\t\t\t\twordlist_path = f'/usr/src/wordlist/{amass_wordlist_name}.txt'\n\t\t\t\tcmd = f'amass enum -active -d {host} -o {self.results_dir}/subdomains_amass_active.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\t\tcmd += f' -brute -w {wordlist_path}'\n\t\t\telif tool == 'sublist3r':\n\t\t\t\tcmd = f'python3 /usr/src/github/Sublist3r/sublist3r.py -d {host} -t {threads} -o {self.results_dir}/subdomains_sublister.txt'\n\t\t\telif tool == 'subfinder':\n\t\t\t\tcmd = f'subfinder -d {host} -o {self.results_dir}/subdomains_subfinder.txt'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tamass_wordlist_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tamass_wordlist_name = config.get(AMASS_WORDLIST, 'deepmagic.com-prefixes-top50000')\n\t\t\t\twordlist_path = f'/usr/src/wordlist/{amass_wordlist_name}.txt'\n\t\t\t\tcmd = f'amass enum -active -d {host} -o {self.results_dir}/subdomains_amass_active.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\t\tcmd += f' -brute -w {wordlist_path}'\n\t\t\telif tool == 'sublist3r':\n\t\t\t\tcmd = f'python3 /usr/src/github/Sublist3r/sublist3r.py -d {host} -t {threads} -o {self.results_dir}/subdomains_sublister.txt'\n\t\t\telif tool == 'subfinder':\n\t\t\t\tcmd = f'subfinder -d {host} -o {self.results_dir}/subdomains_subfinder.txt'\n\t\t\t\tuse_subfinder_config = config.get(USE_SUBFINDER_CONFIG, False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\twordlist_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\twordlist_path = f'/usr/src/wordlist/{amass_wordlist_name}.txt'\n\t\t\t\tcmd = f'amass enum -active -d {host} -o {self.results_dir}/subdomains_amass_active.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\t\tcmd += f' -brute -w {wordlist_path}'\n\t\t\telif tool == 'sublist3r':\n\t\t\t\tcmd = f'python3 /usr/src/github/Sublist3r/sublist3r.py -d {host} -t {threads} -o {self.results_dir}/subdomains_sublister.txt'\n\t\t\telif tool == 'subfinder':\n\t\t\t\tcmd = f'subfinder -d {host} -o {self.results_dir}/subdomains_subfinder.txt'\n\t\t\t\tuse_subfinder_config = config.get(USE_SUBFINDER_CONFIG, False)\n\t\t\t\tcmd += ' -config /root/.config/subfinder/config.yaml' if use_subfinder_config else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'amass enum -active -d {host} -o {self.results_dir}/subdomains_amass_active.txt'\n\t\t\t\tcmd += ' -config /root/.config/amass.ini' if use_amass_config else ''\n\t\t\t\tcmd += f' -brute -w {wordlist_path}'\n\t\t\telif tool == 'sublist3r':\n\t\t\t\tcmd = f'python3 /usr/src/github/Sublist3r/sublist3r.py -d {host} -t {threads} -o {self.results_dir}/subdomains_sublister.txt'\n\t\t\telif tool == 'subfinder':\n\t\t\t\tcmd = f'subfinder -d {host} -o {self.results_dir}/subdomains_subfinder.txt'\n\t\t\t\tuse_subfinder_config = config.get(USE_SUBFINDER_CONFIG, False)\n\t\t\t\tcmd += ' -config /root/.config/subfinder/config.yaml' if use_subfinder_config else ''\n\t\t\t\tcmd += f' -proxy {proxy}' if proxy else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'python3 /usr/src/github/Sublist3r/sublist3r.py -d {host} -t {threads} -o {self.results_dir}/subdomains_sublister.txt'\n\t\t\telif tool == 'subfinder':\n\t\t\t\tcmd = f'subfinder -d {host} -o {self.results_dir}/subdomains_subfinder.txt'\n\t\t\t\tuse_subfinder_config = config.get(USE_SUBFINDER_CONFIG, False)\n\t\t\t\tcmd += ' -config /root/.config/subfinder/config.yaml' if use_subfinder_config else ''\n\t\t\t\tcmd += f' -proxy {proxy}' if proxy else ''\n\t\t\t\tcmd += f' -timeout {timeout}' if timeout else ''\n\t\t\t\tcmd += f' -t {threads}' if threads else ''\n\t\t\t\tcmd += f' -silent'\n\t\t\telif tool == 'oneforall':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'subfinder -d {host} -o {self.results_dir}/subdomains_subfinder.txt'\n\t\t\t\tuse_subfinder_config = config.get(USE_SUBFINDER_CONFIG, False)\n\t\t\t\tcmd += ' -config /root/.config/subfinder/config.yaml' if use_subfinder_config else ''\n\t\t\t\tcmd += f' -proxy {proxy}' if proxy else ''\n\t\t\t\tcmd += f' -timeout {timeout}' if timeout else ''\n\t\t\t\tcmd += f' -t {threads}' if threads else ''\n\t\t\t\tcmd += f' -silent'\n\t\t\telif tool == 'oneforall':\n\t\t\t\tcmd = f'python3 /usr/src/github/OneForAll/oneforall.py --target {host} run'\n\t\t\t\tcmd_extract = f'cut -d\\',\\' -f6 /usr/src/github/OneForAll/results/{host}.csv | tail -n +2 > {self.results_dir}/subdomains_oneforall.txt'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tuse_subfinder_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tuse_subfinder_config = config.get(USE_SUBFINDER_CONFIG, False)\n\t\t\t\tcmd += ' -config /root/.config/subfinder/config.yaml' if use_subfinder_config else ''\n\t\t\t\tcmd += f' -proxy {proxy}' if proxy else ''\n\t\t\t\tcmd += f' -timeout {timeout}' if timeout else ''\n\t\t\t\tcmd += f' -t {threads}' if threads else ''\n\t\t\t\tcmd += f' -silent'\n\t\t\telif tool == 'oneforall':\n\t\t\t\tcmd = f'python3 /usr/src/github/OneForAll/oneforall.py --target {host} run'\n\t\t\t\tcmd_extract = f'cut -d\\',\\' -f6 /usr/src/github/OneForAll/results/{host}.csv | tail -n +2 > {self.results_dir}/subdomains_oneforall.txt'\n\t\t\t\tcmd_rm = f'rm -rf /usr/src/github/OneForAll/results/{host}.csv'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'python3 /usr/src/github/OneForAll/oneforall.py --target {host} run'\n\t\t\t\tcmd_extract = f'cut -d\\',\\' -f6 /usr/src/github/OneForAll/results/{host}.csv | tail -n +2 > {self.results_dir}/subdomains_oneforall.txt'\n\t\t\t\tcmd_rm = f'rm -rf /usr/src/github/OneForAll/results/{host}.csv'\n\t\t\t\tcmd += f' && {cmd_extract} && {cmd_rm}'\n\t\t\telif tool == 'ctfr':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_ctfr.txt'\n\t\t\t\tcmd = f'python3 /usr/src/github/ctfr/ctfr.py -d {host} -o {results_file}'\n\t\t\t\tcmd_extract = f\"cat {results_file} | sed 's/\\*.//g' | tail -n +12 | uniq | sort > {results_file}\"\n\t\t\t\tcmd += f' && {cmd_extract}'\n\t\t\telif tool == 'tlsx':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd_extract",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd_extract = f'cut -d\\',\\' -f6 /usr/src/github/OneForAll/results/{host}.csv | tail -n +2 > {self.results_dir}/subdomains_oneforall.txt'\n\t\t\t\tcmd_rm = f'rm -rf /usr/src/github/OneForAll/results/{host}.csv'\n\t\t\t\tcmd += f' && {cmd_extract} && {cmd_rm}'\n\t\t\telif tool == 'ctfr':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_ctfr.txt'\n\t\t\t\tcmd = f'python3 /usr/src/github/ctfr/ctfr.py -d {host} -o {results_file}'\n\t\t\t\tcmd_extract = f\"cat {results_file} | sed 's/\\*.//g' | tail -n +12 | uniq | sort > {results_file}\"\n\t\t\t\tcmd += f' && {cmd_extract}'\n\t\t\telif tool == 'tlsx':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_tlsx.txt'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd_rm",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd_rm = f'rm -rf /usr/src/github/OneForAll/results/{host}.csv'\n\t\t\t\tcmd += f' && {cmd_extract} && {cmd_rm}'\n\t\t\telif tool == 'ctfr':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_ctfr.txt'\n\t\t\t\tcmd = f'python3 /usr/src/github/ctfr/ctfr.py -d {host} -o {results_file}'\n\t\t\t\tcmd_extract = f\"cat {results_file} | sed 's/\\*.//g' | tail -n +12 | uniq | sort > {results_file}\"\n\t\t\t\tcmd += f' && {cmd_extract}'\n\t\t\telif tool == 'tlsx':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_tlsx.txt'\n\t\t\t\tcmd = f'tlsx -san -cn -silent -ro -host {host}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults_file = self.results_dir + '/subdomains_ctfr.txt'\n\t\t\t\tcmd = f'python3 /usr/src/github/ctfr/ctfr.py -d {host} -o {results_file}'\n\t\t\t\tcmd_extract = f\"cat {results_file} | sed 's/\\*.//g' | tail -n +12 | uniq | sort > {results_file}\"\n\t\t\t\tcmd += f' && {cmd_extract}'\n\t\t\telif tool == 'tlsx':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_tlsx.txt'\n\t\t\t\tcmd = f'tlsx -san -cn -silent -ro -host {host}'\n\t\t\t\tcmd += f\" | sed -n '/^\\([a-zA-Z0-9]\\([-a-zA-Z0-9]*[a-zA-Z0-9]\\)\\?\\.\\)\\+{host}$/p' | uniq | sort\"\n\t\t\t\tcmd += f' > {results_file}'\n\t\t\telif tool == 'netlas':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'python3 /usr/src/github/ctfr/ctfr.py -d {host} -o {results_file}'\n\t\t\t\tcmd_extract = f\"cat {results_file} | sed 's/\\*.//g' | tail -n +12 | uniq | sort > {results_file}\"\n\t\t\t\tcmd += f' && {cmd_extract}'\n\t\t\telif tool == 'tlsx':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_tlsx.txt'\n\t\t\t\tcmd = f'tlsx -san -cn -silent -ro -host {host}'\n\t\t\t\tcmd += f\" | sed -n '/^\\([a-zA-Z0-9]\\([-a-zA-Z0-9]*[a-zA-Z0-9]\\)\\?\\.\\)\\+{host}$/p' | uniq | sort\"\n\t\t\t\tcmd += f' > {results_file}'\n\t\t\telif tool == 'netlas':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_netlas.txt'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd_extract",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd_extract = f\"cat {results_file} | sed 's/\\*.//g' | tail -n +12 | uniq | sort > {results_file}\"\n\t\t\t\tcmd += f' && {cmd_extract}'\n\t\t\telif tool == 'tlsx':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_tlsx.txt'\n\t\t\t\tcmd = f'tlsx -san -cn -silent -ro -host {host}'\n\t\t\t\tcmd += f\" | sed -n '/^\\([a-zA-Z0-9]\\([-a-zA-Z0-9]*[a-zA-Z0-9]\\)\\?\\.\\)\\+{host}$/p' | uniq | sort\"\n\t\t\t\tcmd += f' > {results_file}'\n\t\t\telif tool == 'netlas':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_netlas.txt'\n\t\t\t\tcmd = f'netlas search -d domain -i domain domain:\"*.{host}\" -f json'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults_file = self.results_dir + '/subdomains_tlsx.txt'\n\t\t\t\tcmd = f'tlsx -san -cn -silent -ro -host {host}'\n\t\t\t\tcmd += f\" | sed -n '/^\\([a-zA-Z0-9]\\([-a-zA-Z0-9]*[a-zA-Z0-9]\\)\\?\\.\\)\\+{host}$/p' | uniq | sort\"\n\t\t\t\tcmd += f' > {results_file}'\n\t\t\telif tool == 'netlas':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_netlas.txt'\n\t\t\t\tcmd = f'netlas search -d domain -i domain domain:\"*.{host}\" -f json'\n\t\t\t\tnetlas_key = get_netlas_key()\n\t\t\t\tcmd += f' -a {netlas_key}' if netlas_key else ''\n\t\t\t\tcmd_extract = f\"grep -oE '([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?\\.)+{host}'\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'tlsx -san -cn -silent -ro -host {host}'\n\t\t\t\tcmd += f\" | sed -n '/^\\([a-zA-Z0-9]\\([-a-zA-Z0-9]*[a-zA-Z0-9]\\)\\?\\.\\)\\+{host}$/p' | uniq | sort\"\n\t\t\t\tcmd += f' > {results_file}'\n\t\t\telif tool == 'netlas':\n\t\t\t\tresults_file = self.results_dir + '/subdomains_netlas.txt'\n\t\t\t\tcmd = f'netlas search -d domain -i domain domain:\"*.{host}\" -f json'\n\t\t\t\tnetlas_key = get_netlas_key()\n\t\t\t\tcmd += f' -a {netlas_key}' if netlas_key else ''\n\t\t\t\tcmd_extract = f\"grep -oE '([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?\\.)+{host}'\"\n\t\t\t\tcmd += f' | {cmd_extract} > {results_file}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults_file = self.results_dir + '/subdomains_netlas.txt'\n\t\t\t\tcmd = f'netlas search -d domain -i domain domain:\"*.{host}\" -f json'\n\t\t\t\tnetlas_key = get_netlas_key()\n\t\t\t\tcmd += f' -a {netlas_key}' if netlas_key else ''\n\t\t\t\tcmd_extract = f\"grep -oE '([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?\\.)+{host}'\"\n\t\t\t\tcmd += f' | {cmd_extract} > {results_file}'\n\t\t\telif tool == 'chaos':\n\t\t\t\t# we need to find api key if not ignore\n\t\t\t\tchaos_key = get_chaos_key()\n\t\t\t\tif not chaos_key:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'netlas search -d domain -i domain domain:\"*.{host}\" -f json'\n\t\t\t\tnetlas_key = get_netlas_key()\n\t\t\t\tcmd += f' -a {netlas_key}' if netlas_key else ''\n\t\t\t\tcmd_extract = f\"grep -oE '([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?\\.)+{host}'\"\n\t\t\t\tcmd += f' | {cmd_extract} > {results_file}'\n\t\t\telif tool == 'chaos':\n\t\t\t\t# we need to find api key if not ignore\n\t\t\t\tchaos_key = get_chaos_key()\n\t\t\t\tif not chaos_key:\n\t\t\t\t\tlogger.error('Chaos API key not found. Skipping.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnetlas_key",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tnetlas_key = get_netlas_key()\n\t\t\t\tcmd += f' -a {netlas_key}' if netlas_key else ''\n\t\t\t\tcmd_extract = f\"grep -oE '([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?\\.)+{host}'\"\n\t\t\t\tcmd += f' | {cmd_extract} > {results_file}'\n\t\t\telif tool == 'chaos':\n\t\t\t\t# we need to find api key if not ignore\n\t\t\t\tchaos_key = get_chaos_key()\n\t\t\t\tif not chaos_key:\n\t\t\t\t\tlogger.error('Chaos API key not found. Skipping.')\n\t\t\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd_extract",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd_extract = f\"grep -oE '([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?\\.)+{host}'\"\n\t\t\t\tcmd += f' | {cmd_extract} > {results_file}'\n\t\t\telif tool == 'chaos':\n\t\t\t\t# we need to find api key if not ignore\n\t\t\t\tchaos_key = get_chaos_key()\n\t\t\t\tif not chaos_key:\n\t\t\t\t\tlogger.error('Chaos API key not found. Skipping.')\n\t\t\t\t\tcontinue\n\t\t\t\tresults_file = self.results_dir + '/subdomains_chaos.txt'\n\t\t\t\tcmd = f'chaos -d {host} -silent -key {chaos_key} -o {results_file}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tchaos_key",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tchaos_key = get_chaos_key()\n\t\t\t\tif not chaos_key:\n\t\t\t\t\tlogger.error('Chaos API key not found. Skipping.')\n\t\t\t\t\tcontinue\n\t\t\t\tresults_file = self.results_dir + '/subdomains_chaos.txt'\n\t\t\t\tcmd = f'chaos -d {host} -silent -key {chaos_key} -o {results_file}'\n\t\telif tool in custom_subdomain_tools:\n\t\t\ttool_query = InstalledExternalTool.objects.filter(name__icontains=tool.lower())\n\t\t\tif not tool_query.exists():\n\t\t\t\tlogger.error(f'{tool} configuration does not exists. Skipping.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults_file = self.results_dir + '/subdomains_chaos.txt'\n\t\t\t\tcmd = f'chaos -d {host} -silent -key {chaos_key} -o {results_file}'\n\t\telif tool in custom_subdomain_tools:\n\t\t\ttool_query = InstalledExternalTool.objects.filter(name__icontains=tool.lower())\n\t\t\tif not tool_query.exists():\n\t\t\t\tlogger.error(f'{tool} configuration does not exists. Skipping.')\n\t\t\t\tcontinue\n\t\t\tcustom_tool = tool_query.first()\n\t\t\tcmd = custom_tool.subdomain_gathering_command\n\t\t\tif '{TARGET}' not in cmd:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcmd = f'chaos -d {host} -silent -key {chaos_key} -o {results_file}'\n\t\telif tool in custom_subdomain_tools:\n\t\t\ttool_query = InstalledExternalTool.objects.filter(name__icontains=tool.lower())\n\t\t\tif not tool_query.exists():\n\t\t\t\tlogger.error(f'{tool} configuration does not exists. Skipping.')\n\t\t\t\tcontinue\n\t\t\tcustom_tool = tool_query.first()\n\t\t\tcmd = custom_tool.subdomain_gathering_command\n\t\t\tif '{TARGET}' not in cmd:\n\t\t\t\tlogger.error(f'Missing {{TARGET}} placeholders in {tool} configuration. Skipping.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\ttool_query",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\ttool_query = InstalledExternalTool.objects.filter(name__icontains=tool.lower())\n\t\t\tif not tool_query.exists():\n\t\t\t\tlogger.error(f'{tool} configuration does not exists. Skipping.')\n\t\t\t\tcontinue\n\t\t\tcustom_tool = tool_query.first()\n\t\t\tcmd = custom_tool.subdomain_gathering_command\n\t\t\tif '{TARGET}' not in cmd:\n\t\t\t\tlogger.error(f'Missing {{TARGET}} placeholders in {tool} configuration. Skipping.')\n\t\t\t\tcontinue\n\t\t\tif '{OUTPUT}' not in cmd:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcustom_tool",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcustom_tool = tool_query.first()\n\t\t\tcmd = custom_tool.subdomain_gathering_command\n\t\t\tif '{TARGET}' not in cmd:\n\t\t\t\tlogger.error(f'Missing {{TARGET}} placeholders in {tool} configuration. Skipping.')\n\t\t\t\tcontinue\n\t\t\tif '{OUTPUT}' not in cmd:\n\t\t\t\tlogger.error(f'Missing {{OUTPUT}} placeholders in {tool} configuration. Skipping.')\n\t\t\t\tcontinue\n\t\t\tcmd = cmd.replace('{TARGET}', host)\n\t\t\tcmd = cmd.replace('{OUTPUT}', f'{self.results_dir}/subdomains_{tool}.txt')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcmd = custom_tool.subdomain_gathering_command\n\t\t\tif '{TARGET}' not in cmd:\n\t\t\t\tlogger.error(f'Missing {{TARGET}} placeholders in {tool} configuration. Skipping.')\n\t\t\t\tcontinue\n\t\t\tif '{OUTPUT}' not in cmd:\n\t\t\t\tlogger.error(f'Missing {{OUTPUT}} placeholders in {tool} configuration. Skipping.')\n\t\t\t\tcontinue\n\t\t\tcmd = cmd.replace('{TARGET}', host)\n\t\t\tcmd = cmd.replace('{OUTPUT}', f'{self.results_dir}/subdomains_{tool}.txt')\n\t\t\tcmd = cmd.replace('{PATH}', custom_tool.github_clone_path) if '{PATH}' in cmd else cmd",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcmd = cmd.replace('{TARGET}', host)\n\t\t\tcmd = cmd.replace('{OUTPUT}', f'{self.results_dir}/subdomains_{tool}.txt')\n\t\t\tcmd = cmd.replace('{PATH}', custom_tool.github_clone_path) if '{PATH}' in cmd else cmd\n\t\telse:\n\t\t\tlogger.warning(\n\t\t\t\tf'Subdomain discovery tool \"{tool}\" is not supported by reNgine. Skipping.')\n\t\t\tcontinue\n\t\t# Run tool\n\t\ttry:\n\t\t\trun_command(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcmd = cmd.replace('{OUTPUT}', f'{self.results_dir}/subdomains_{tool}.txt')\n\t\t\tcmd = cmd.replace('{PATH}', custom_tool.github_clone_path) if '{PATH}' in cmd else cmd\n\t\telse:\n\t\t\tlogger.warning(\n\t\t\t\tf'Subdomain discovery tool \"{tool}\" is not supported by reNgine. Skipping.')\n\t\t\tcontinue\n\t\t# Run tool\n\t\ttry:\n\t\t\trun_command(\n\t\t\t\tcmd,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcmd = cmd.replace('{PATH}', custom_tool.github_clone_path) if '{PATH}' in cmd else cmd\n\t\telse:\n\t\t\tlogger.warning(\n\t\t\t\tf'Subdomain discovery tool \"{tool}\" is not supported by reNgine. Skipping.')\n\t\t\tcontinue\n\t\t# Run tool\n\t\ttry:\n\t\t\trun_command(\n\t\t\t\tcmd,\n\t\t\t\tshell=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tlines",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tlines = f.readlines()\n\t# Parse the output_file file and store Subdomain and EndPoint objects found\n\t# in db.\n\tsubdomain_count = 0\n\tsubdomains = []\n\turls = []\n\tfor line in lines:\n\t\tsubdomain_name = line.strip()\n\t\tvalid_url = bool(validators.url(subdomain_name))\n\t\tvalid_domain = (",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubdomain_count = 0\n\tsubdomains = []\n\turls = []\n\tfor line in lines:\n\t\tsubdomain_name = line.strip()\n\t\tvalid_url = bool(validators.url(subdomain_name))\n\t\tvalid_domain = (\n\t\t\tbool(validators.domain(subdomain_name)) or\n\t\t\tbool(validators.ipv4(subdomain_name)) or\n\t\t\tbool(validators.ipv6(subdomain_name)) or",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubdomains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubdomains = []\n\turls = []\n\tfor line in lines:\n\t\tsubdomain_name = line.strip()\n\t\tvalid_url = bool(validators.url(subdomain_name))\n\t\tvalid_domain = (\n\t\t\tbool(validators.domain(subdomain_name)) or\n\t\t\tbool(validators.ipv4(subdomain_name)) or\n\t\t\tbool(validators.ipv6(subdomain_name)) or\n\t\t\tvalid_url",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\turls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\turls = []\n\tfor line in lines:\n\t\tsubdomain_name = line.strip()\n\t\tvalid_url = bool(validators.url(subdomain_name))\n\t\tvalid_domain = (\n\t\t\tbool(validators.domain(subdomain_name)) or\n\t\t\tbool(validators.ipv4(subdomain_name)) or\n\t\t\tbool(validators.ipv6(subdomain_name)) or\n\t\t\tvalid_url\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain_name = line.strip()\n\t\tvalid_url = bool(validators.url(subdomain_name))\n\t\tvalid_domain = (\n\t\t\tbool(validators.domain(subdomain_name)) or\n\t\t\tbool(validators.ipv4(subdomain_name)) or\n\t\t\tbool(validators.ipv6(subdomain_name)) or\n\t\t\tvalid_url\n\t\t)\n\t\tif not valid_domain:\n\t\t\tlogger.error(f'Subdomain {subdomain_name} is not a valid domain, IP or URL. Skipping.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvalid_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvalid_url = bool(validators.url(subdomain_name))\n\t\tvalid_domain = (\n\t\t\tbool(validators.domain(subdomain_name)) or\n\t\t\tbool(validators.ipv4(subdomain_name)) or\n\t\t\tbool(validators.ipv6(subdomain_name)) or\n\t\t\tvalid_url\n\t\t)\n\t\tif not valid_domain:\n\t\t\tlogger.error(f'Subdomain {subdomain_name} is not a valid domain, IP or URL. Skipping.')\n\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvalid_domain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvalid_domain = (\n\t\t\tbool(validators.domain(subdomain_name)) or\n\t\t\tbool(validators.ipv4(subdomain_name)) or\n\t\t\tbool(validators.ipv6(subdomain_name)) or\n\t\t\tvalid_url\n\t\t)\n\t\tif not valid_domain:\n\t\t\tlogger.error(f'Subdomain {subdomain_name} is not a valid domain, IP or URL. Skipping.')\n\t\t\tcontinue\n\t\tif valid_url:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain_name = urlparse(subdomain_name).netloc\n\t\tif subdomain_scope_checker.is_out_of_scope(subdomain_name):\n\t\t\tlogger.error(f'Subdomain {subdomain_name} is out of scope. Skipping.')\n\t\t\tcontinue\n\t\t# Add subdomain\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tif subdomain:\n\t\t\tsubdomain_count += 1\n\t\t\tsubdomains.append(subdomain)\n\t\t\turls.append(subdomain.name)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tctx['track']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tctx['track'] = True\n\t\thttp_crawl(urls, ctx=ctx, is_ran_from_subdomain_scan=True)\n\t# Find root subdomain endpoints\n\tfor subdomain in subdomains:\n\t\tpass\n\t# Send notifications\n\tsubdomains_str = '\\n'.join([f'• `{subdomain.name}`' for subdomain in subdomains])\n\tself.notify(fields={\n\t\t'Subdomain count': len(subdomains),\n\t\t'Subdomains': subdomains_str,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubdomains_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubdomains_str = '\\n'.join([f'• `{subdomain.name}`' for subdomain in subdomains])\n\tself.notify(fields={\n\t\t'Subdomain count': len(subdomains),\n\t\t'Subdomains': subdomains_str,\n\t})\n\tif send_subdomain_changes and self.scan_id and self.domain_id:\n\t\tadded = get_new_added_subdomain(self.scan_id, self.domain_id)\n\t\tremoved = get_removed_subdomain(self.scan_id, self.domain_id)\n\t\tif added:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in added])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tadded",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tadded = get_new_added_subdomain(self.scan_id, self.domain_id)\n\t\tremoved = get_removed_subdomain(self.scan_id, self.domain_id)\n\t\tif added:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in added])\n\t\t\tself.notify(fields={'Added subdomains': subdomains_str})\n\t\tif removed:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in removed])\n\t\t\tself.notify(fields={'Removed subdomains': subdomains_str})\n\tif send_interesting and self.scan_id and self.domain_id:\n\t\tinteresting_subdomains = get_interesting_subdomains(self.scan_id, self.domain_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tremoved",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tremoved = get_removed_subdomain(self.scan_id, self.domain_id)\n\t\tif added:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in added])\n\t\t\tself.notify(fields={'Added subdomains': subdomains_str})\n\t\tif removed:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in removed])\n\t\t\tself.notify(fields={'Removed subdomains': subdomains_str})\n\tif send_interesting and self.scan_id and self.domain_id:\n\t\tinteresting_subdomains = get_interesting_subdomains(self.scan_id, self.domain_id)\n\t\tif interesting_subdomains:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in added])\n\t\t\tself.notify(fields={'Added subdomains': subdomains_str})\n\t\tif removed:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in removed])\n\t\t\tself.notify(fields={'Removed subdomains': subdomains_str})\n\tif send_interesting and self.scan_id and self.domain_id:\n\t\tinteresting_subdomains = get_interesting_subdomains(self.scan_id, self.domain_id)\n\t\tif interesting_subdomains:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in interesting_subdomains])\n\t\t\tself.notify(fields={'Interesting subdomains': subdomains_str})",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in removed])\n\t\t\tself.notify(fields={'Removed subdomains': subdomains_str})\n\tif send_interesting and self.scan_id and self.domain_id:\n\t\tinteresting_subdomains = get_interesting_subdomains(self.scan_id, self.domain_id)\n\t\tif interesting_subdomains:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in interesting_subdomains])\n\t\t\tself.notify(fields={'Interesting subdomains': subdomains_str})\n\treturn SubdomainSerializer(subdomains, many=True).data\n@app.task(name='osint', queue='main_scan_queue', base=RengineTask, bind=True)\ndef osint(self, host=None, ctx={}, description=None):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tinteresting_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tinteresting_subdomains = get_interesting_subdomains(self.scan_id, self.domain_id)\n\t\tif interesting_subdomains:\n\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in interesting_subdomains])\n\t\t\tself.notify(fields={'Interesting subdomains': subdomains_str})\n\treturn SubdomainSerializer(subdomains, many=True).data\n@app.task(name='osint', queue='main_scan_queue', base=RengineTask, bind=True)\ndef osint(self, host=None, ctx={}, description=None):\n\t\"\"\"Run Open-Source Intelligence tools on selected domain.\n\tArgs:\n\t\thost (str): Hostname to scan.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomains_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomains_str = '\\n'.join([f'• `{subdomain}`' for subdomain in interesting_subdomains])\n\t\t\tself.notify(fields={'Interesting subdomains': subdomains_str})\n\treturn SubdomainSerializer(subdomains, many=True).data\n@app.task(name='osint', queue='main_scan_queue', base=RengineTask, bind=True)\ndef osint(self, host=None, ctx={}, description=None):\n\t\"\"\"Run Open-Source Intelligence tools on selected domain.\n\tArgs:\n\t\thost (str): Hostname to scan.\n\tReturns:\n\t\tdict: Results from osint discovery and dorking.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(OSINT) or OSINT_DEFAULT_CONFIG\n\tresults = {}\n\tgrouped_tasks = []\n\tif 'discover' in config:\n\t\tctx['track'] = False\n\t\t# results = osint_discovery(host=host, ctx=ctx)\n\t\t_task = osint_discovery.si(\n\t\t\tconfig=config,\n\t\t\thost=self.scan.domain.name,\n\t\t\tscan_history_id=self.scan.id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = {}\n\tgrouped_tasks = []\n\tif 'discover' in config:\n\t\tctx['track'] = False\n\t\t# results = osint_discovery(host=host, ctx=ctx)\n\t\t_task = osint_discovery.si(\n\t\t\tconfig=config,\n\t\t\thost=self.scan.domain.name,\n\t\t\tscan_history_id=self.scan.id,\n\t\t\tactivity_id=self.activity_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgrouped_tasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgrouped_tasks = []\n\tif 'discover' in config:\n\t\tctx['track'] = False\n\t\t# results = osint_discovery(host=host, ctx=ctx)\n\t\t_task = osint_discovery.si(\n\t\t\tconfig=config,\n\t\t\thost=self.scan.domain.name,\n\t\t\tscan_history_id=self.scan.id,\n\t\t\tactivity_id=self.activity_id,\n\t\t\tresults_dir=self.results_dir,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tctx['track']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tctx['track'] = False\n\t\t# results = osint_discovery(host=host, ctx=ctx)\n\t\t_task = osint_discovery.si(\n\t\t\tconfig=config,\n\t\t\thost=self.scan.domain.name,\n\t\t\tscan_history_id=self.scan.id,\n\t\t\tactivity_id=self.activity_id,\n\t\t\tresults_dir=self.results_dir,\n\t\t\tctx=ctx\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = osint_discovery.si(\n\t\t\tconfig=config,\n\t\t\thost=self.scan.domain.name,\n\t\t\tscan_history_id=self.scan.id,\n\t\t\tactivity_id=self.activity_id,\n\t\t\tresults_dir=self.results_dir,\n\t\t\tctx=ctx\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tif OSINT_DORK in config or OSINT_CUSTOM_DORK in config:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = dorking.si(\n\t\t\tconfig=config,\n\t\t\thost=self.scan.domain.name,\n\t\t\tscan_history_id=self.scan.id,\n\t\t\tresults_dir=self.results_dir\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tcelery_group = group(grouped_tasks)\n\tjob = celery_group.apply_async()\n\twhile not job.ready():",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcelery_group",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcelery_group = group(grouped_tasks)\n\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)\n\tlogger.info('OSINT Tasks finished...')\n\t# with open(self.output_path, 'w') as f:\n\t# \tjson.dump(results, f, indent=4)\n\t#\n\t# return results",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tjob",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)\n\tlogger.info('OSINT Tasks finished...')\n\t# with open(self.output_path, 'w') as f:\n\t# \tjson.dump(results, f, indent=4)\n\t#\n\t# return results\n@app.task(name='osint_discovery', queue='osint_discovery_queue', bind=False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_history = ScanHistory.objects.get(pk=scan_history_id)\n\tosint_lookup = config.get(OSINT_DISCOVER, [])\n\tosint_intensity = config.get(INTENSITY, 'normal')\n\tdocuments_limit = config.get(OSINT_DOCUMENTS_LIMIT, 50)\n\tresults = {}\n\tmeta_info = []\n\temails = []\n\tcreds = []\n\t# Get and save meta info\n\tif 'metainfo' in osint_lookup:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tosint_lookup",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tosint_lookup = config.get(OSINT_DISCOVER, [])\n\tosint_intensity = config.get(INTENSITY, 'normal')\n\tdocuments_limit = config.get(OSINT_DOCUMENTS_LIMIT, 50)\n\tresults = {}\n\tmeta_info = []\n\temails = []\n\tcreds = []\n\t# Get and save meta info\n\tif 'metainfo' in osint_lookup:\n\t\tif osint_intensity == 'normal':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tosint_intensity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tosint_intensity = config.get(INTENSITY, 'normal')\n\tdocuments_limit = config.get(OSINT_DOCUMENTS_LIMIT, 50)\n\tresults = {}\n\tmeta_info = []\n\temails = []\n\tcreds = []\n\t# Get and save meta info\n\tif 'metainfo' in osint_lookup:\n\t\tif osint_intensity == 'normal':\n\t\t\tmeta_dict = DottedDict({",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdocuments_limit",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdocuments_limit = config.get(OSINT_DOCUMENTS_LIMIT, 50)\n\tresults = {}\n\tmeta_info = []\n\temails = []\n\tcreds = []\n\t# Get and save meta info\n\tif 'metainfo' in osint_lookup:\n\t\tif osint_intensity == 'normal':\n\t\t\tmeta_dict = DottedDict({\n\t\t\t\t'osint_target': host,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = {}\n\tmeta_info = []\n\temails = []\n\tcreds = []\n\t# Get and save meta info\n\tif 'metainfo' in osint_lookup:\n\t\tif osint_intensity == 'normal':\n\t\t\tmeta_dict = DottedDict({\n\t\t\t\t'osint_target': host,\n\t\t\t\t'domain': host,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmeta_info",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmeta_info = []\n\temails = []\n\tcreds = []\n\t# Get and save meta info\n\tif 'metainfo' in osint_lookup:\n\t\tif osint_intensity == 'normal':\n\t\t\tmeta_dict = DottedDict({\n\t\t\t\t'osint_target': host,\n\t\t\t\t'domain': host,\n\t\t\t\t'scan_id': scan_history_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\temails",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\temails = []\n\tcreds = []\n\t# Get and save meta info\n\tif 'metainfo' in osint_lookup:\n\t\tif osint_intensity == 'normal':\n\t\t\tmeta_dict = DottedDict({\n\t\t\t\t'osint_target': host,\n\t\t\t\t'domain': host,\n\t\t\t\t'scan_id': scan_history_id,\n\t\t\t\t'documents_limit': documents_limit",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcreds",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcreds = []\n\t# Get and save meta info\n\tif 'metainfo' in osint_lookup:\n\t\tif osint_intensity == 'normal':\n\t\t\tmeta_dict = DottedDict({\n\t\t\t\t'osint_target': host,\n\t\t\t\t'domain': host,\n\t\t\t\t'scan_id': scan_history_id,\n\t\t\t\t'documents_limit': documents_limit\n\t\t\t})",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tmeta_dict",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tmeta_dict = DottedDict({\n\t\t\t\t'osint_target': host,\n\t\t\t\t'domain': host,\n\t\t\t\t'scan_id': scan_history_id,\n\t\t\t\t'documents_limit': documents_limit\n\t\t\t})\n\t\t\tmeta_info.append(save_metadata_info(meta_dict))\n\t\t# TODO: disabled for now\n\t\t# elif osint_intensity == 'deep':\n\t\t# \tsubdomains = Subdomain.objects",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgrouped_tasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgrouped_tasks = []\n\tif 'emails' in osint_lookup:\n\t\t_task = h8mail.si(\n\t\t\tconfig=config,\n\t\t\thost=host,\n\t\t\tscan_history_id=scan_history_id,\n\t\t\tactivity_id=activity_id,\n\t\t\tresults_dir=results_dir,\n\t\t\tctx=ctx\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = h8mail.si(\n\t\t\tconfig=config,\n\t\t\thost=host,\n\t\t\tscan_history_id=scan_history_id,\n\t\t\tactivity_id=activity_id,\n\t\t\tresults_dir=results_dir,\n\t\t\tctx=ctx\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tif 'employees' in osint_lookup:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tctx['track']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tctx['track'] = False\n\t\t_task = theHarvester.si(\n\t\t\tconfig=config,\n\t\t\thost=host,\n\t\t\tscan_history_id=scan_history_id,\n\t\t\tactivity_id=activity_id,\n\t\t\tresults_dir=results_dir,\n\t\t\tctx=ctx\n\t\t)\n\t\tgrouped_tasks.append(_task)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = theHarvester.si(\n\t\t\tconfig=config,\n\t\t\thost=host,\n\t\t\tscan_history_id=scan_history_id,\n\t\t\tactivity_id=activity_id,\n\t\t\tresults_dir=results_dir,\n\t\t\tctx=ctx\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tcelery_group = group(grouped_tasks)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcelery_group",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcelery_group = group(grouped_tasks)\n\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)\n\t# results['emails'] = results.get('emails', []) + emails\n\t# results['creds'] = creds\n\t# results['meta_info'] = meta_info\n\treturn results\n@app.task(name='dorking', bind=False, queue='dorking_queue')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tjob",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)\n\t# results['emails'] = results.get('emails', []) + emails\n\t# results['creds'] = creds\n\t# results['meta_info'] = meta_info\n\treturn results\n@app.task(name='dorking', bind=False, queue='dorking_queue')\ndef dorking(config, host, scan_history_id, results_dir):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_history = ScanHistory.objects.get(pk=scan_history_id)\n\tdorks = config.get(OSINT_DORK, [])\n\tcustom_dorks = config.get(OSINT_CUSTOM_DORK, [])\n\tresults = []\n\t# custom dorking has higher priority\n\ttry:\n\t\tfor custom_dork in custom_dorks:\n\t\t\tlookup_target = custom_dork.get('lookup_site')\n\t\t\t# replace with original host if _target_\n\t\t\tlookup_target = host if lookup_target == '_target_' else lookup_target",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdorks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdorks = config.get(OSINT_DORK, [])\n\tcustom_dorks = config.get(OSINT_CUSTOM_DORK, [])\n\tresults = []\n\t# custom dorking has higher priority\n\ttry:\n\t\tfor custom_dork in custom_dorks:\n\t\t\tlookup_target = custom_dork.get('lookup_site')\n\t\t\t# replace with original host if _target_\n\t\t\tlookup_target = host if lookup_target == '_target_' else lookup_target\n\t\t\tif 'lookup_extensions' in custom_dork:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_dorks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_dorks = config.get(OSINT_CUSTOM_DORK, [])\n\tresults = []\n\t# custom dorking has higher priority\n\ttry:\n\t\tfor custom_dork in custom_dorks:\n\t\t\tlookup_target = custom_dork.get('lookup_site')\n\t\t\t# replace with original host if _target_\n\t\t\tlookup_target = host if lookup_target == '_target_' else lookup_target\n\t\t\tif 'lookup_extensions' in custom_dork:\n\t\t\t\tresults = get_and_save_dork_results(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\t# custom dorking has higher priority\n\ttry:\n\t\tfor custom_dork in custom_dorks:\n\t\t\tlookup_target = custom_dork.get('lookup_site')\n\t\t\t# replace with original host if _target_\n\t\t\tlookup_target = host if lookup_target == '_target_' else lookup_target\n\t\t\tif 'lookup_extensions' in custom_dork:\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=lookup_target,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_target",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tlookup_target = custom_dork.get('lookup_site')\n\t\t\t# replace with original host if _target_\n\t\t\tlookup_target = host if lookup_target == '_target_' else lookup_target\n\t\t\tif 'lookup_extensions' in custom_dork:\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=lookup_target,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype='custom_dork',\n\t\t\t\t\tlookup_extensions=custom_dork.get('lookup_extensions'),\n\t\t\t\t\tscan_history=scan_history",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tlookup_target",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tlookup_target = host if lookup_target == '_target_' else lookup_target\n\t\t\tif 'lookup_extensions' in custom_dork:\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=lookup_target,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype='custom_dork',\n\t\t\t\t\tlookup_extensions=custom_dork.get('lookup_extensions'),\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif 'lookup_keywords' in custom_dork:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=lookup_target,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype='custom_dork',\n\t\t\t\t\tlookup_extensions=custom_dork.get('lookup_extensions'),\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif 'lookup_keywords' in custom_dork:\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=lookup_target,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=lookup_target,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype='custom_dork',\n\t\t\t\t\tlookup_keywords=custom_dork.get('lookup_keywords'),\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\texcept Exception as e:\n\t\tlogger.exception(e)\n\t# default dorking",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target='stackoverflow.com',\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=host,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'login_pages':\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords='/login/,login.html',\n\t\t\t\t\tpage_count=5,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'admin_panels':\n\t\t\t\tresults = get_and_save_dork_results(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords='/admin/,admin.html',\n\t\t\t\t\tpage_count=5,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'dashboard_pages':\n\t\t\t\tresults = get_and_save_dork_results(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords='/dashboard/,dashboard.html',\n\t\t\t\t\tpage_count=5,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'social_media' :\n\t\t\t\tsocial_websites = [",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsocial_websites",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tsocial_websites = [\n\t\t\t\t\t'tiktok.com',\n\t\t\t\t\t'facebook.com',\n\t\t\t\t\t'twitter.com',\n\t\t\t\t\t'youtube.com',\n\t\t\t\t\t'reddit.com'\n\t\t\t\t]\n\t\t\t\tfor site in social_websites:\n\t\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\t\tlookup_target=site,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\t\tlookup_target=site,\n\t\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\t\ttype=dork,\n\t\t\t\t\t\tlookup_keywords=host,\n\t\t\t\t\t\tscan_history=scan_history\n\t\t\t\t\t)\n\t\t\telif dork == 'project_management' :\n\t\t\t\tproject_websites = [\n\t\t\t\t\t'trello.com',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tproject_websites",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tproject_websites = [\n\t\t\t\t\t'trello.com',\n\t\t\t\t\t'atlassian.net'\n\t\t\t\t]\n\t\t\t\tfor site in project_websites:\n\t\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\t\tlookup_target=site,\n\t\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\t\ttype=dork,\n\t\t\t\t\t\tlookup_keywords=host,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\t\tlookup_target=site,\n\t\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\t\ttype=dork,\n\t\t\t\t\t\tlookup_keywords=host,\n\t\t\t\t\t\tscan_history=scan_history\n\t\t\t\t\t)\n\t\t\telif dork == 'code_sharing' :\n\t\t\t\tproject_websites = [\n\t\t\t\t\t'github.com',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tproject_websites",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tproject_websites = [\n\t\t\t\t\t'github.com',\n\t\t\t\t\t'gitlab.com',\n\t\t\t\t\t'bitbucket.org'\n\t\t\t\t]\n\t\t\t\tfor site in project_websites:\n\t\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\t\tlookup_target=site,\n\t\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\t\ttype=dork,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\t\tlookup_target=site,\n\t\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\t\ttype=dork,\n\t\t\t\t\t\tlookup_keywords=host,\n\t\t\t\t\t\tscan_history=scan_history\n\t\t\t\t\t)\n\t\t\telif dork == 'config_files' :\n\t\t\t\tconfig_file_exts = [\n\t\t\t\t\t'env',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tconfig_file_exts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tconfig_file_exts = [\n\t\t\t\t\t'env',\n\t\t\t\t\t'xml',\n\t\t\t\t\t'conf',\n\t\t\t\t\t'toml',\n\t\t\t\t\t'yml',\n\t\t\t\t\t'yaml',\n\t\t\t\t\t'cnf',\n\t\t\t\t\t'inf',\n\t\t\t\t\t'rdp',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_extensions=','.join(config_file_exts),\n\t\t\t\t\tpage_count=4,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'jenkins' :\n\t\t\t\tlookup_keyword = 'Jenkins'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tlookup_keyword",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tlookup_keyword = 'Jenkins'\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=lookup_keyword,\n\t\t\t\t\tpage_count=1,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'wordpress_files' :",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=lookup_keyword,\n\t\t\t\t\tpage_count=1,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'wordpress_files' :\n\t\t\t\tlookup_keywords = [",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tlookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tlookup_keywords = [\n\t\t\t\t\t'/wp-content/',\n\t\t\t\t\t'/wp-includes/'\n\t\t\t\t]\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=','.join(lookup_keywords),\n\t\t\t\t\tpage_count=5,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=','.join(lookup_keywords),\n\t\t\t\t\tpage_count=5,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'php_error' :\n\t\t\t\tlookup_keywords = [",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tlookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tlookup_keywords = [\n\t\t\t\t\t'PHP Parse error',\n\t\t\t\t\t'PHP Warning',\n\t\t\t\t\t'PHP Error'\n\t\t\t\t]\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=','.join(lookup_keywords),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=','.join(lookup_keywords),\n\t\t\t\t\tpage_count=5,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'jenkins' :\n\t\t\t\tlookup_keywords = [",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tlookup_keywords",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tlookup_keywords = [\n\t\t\t\t\t'PHP Parse error',\n\t\t\t\t\t'PHP Warning',\n\t\t\t\t\t'PHP Error'\n\t\t\t\t]\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=','.join(lookup_keywords),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_keywords=','.join(lookup_keywords),\n\t\t\t\t\tpage_count=5,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'exposed_documents' :\n\t\t\t\tdocs_file_ext = [",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdocs_file_ext",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tdocs_file_ext = [\n\t\t\t\t\t'doc',\n\t\t\t\t\t'docx',\n\t\t\t\t\t'odt',\n\t\t\t\t\t'pdf',\n\t\t\t\t\t'rtf',\n\t\t\t\t\t'sxw',\n\t\t\t\t\t'psw',\n\t\t\t\t\t'ppt',\n\t\t\t\t\t'pptx',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_extensions=','.join(docs_file_ext),\n\t\t\t\t\tpage_count=7,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'db_files' :\n\t\t\t\tfile_ext = [",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfile_ext",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tfile_ext = [\n\t\t\t\t\t'sql',\n\t\t\t\t\t'db',\n\t\t\t\t\t'dbf',\n\t\t\t\t\t'mdb'\n\t\t\t\t]\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_extensions=','.join(file_ext),\n\t\t\t\t\tpage_count=1,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\t\t\telif dork == 'git_exposed' :\n\t\t\t\tfile_ext = [",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfile_ext",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tfile_ext = [\n\t\t\t\t\t'git',\n\t\t\t\t]\n\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_extensions=','.join(file_ext),\n\t\t\t\t\tpage_count=1,\n\t\t\t\t\tscan_history=scan_history",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresults = get_and_save_dork_results(\n\t\t\t\t\tlookup_target=host,\n\t\t\t\t\tresults_dir=results_dir,\n\t\t\t\t\ttype=dork,\n\t\t\t\t\tlookup_extensions=','.join(file_ext),\n\t\t\t\t\tpage_count=1,\n\t\t\t\t\tscan_history=scan_history\n\t\t\t\t)\n\texcept Exception as e:\n\t\tlogger.exception(e)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_history = ScanHistory.objects.get(pk=scan_history_id)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\toutput_path_json = f'{results_dir}/theHarvester.json'\n\ttheHarvester_dir = '/usr/src/github/theHarvester'\n\thistory_file = f'{results_dir}/commands.txt'\n\tcmd  = f'python3 {theHarvester_dir}/theHarvester.py -d {host} -b all -f {output_path_json}'\n\t# Update proxies.yaml\n\tproxy_query = Proxy.objects.all()\n\tif proxy_query.exists():\n\t\tproxy = proxy_query.first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\toutput_path_json = f'{results_dir}/theHarvester.json'\n\ttheHarvester_dir = '/usr/src/github/theHarvester'\n\thistory_file = f'{results_dir}/commands.txt'\n\tcmd  = f'python3 {theHarvester_dir}/theHarvester.py -d {host} -b all -f {output_path_json}'\n\t# Update proxies.yaml\n\tproxy_query = Proxy.objects.all()\n\tif proxy_query.exists():\n\t\tproxy = proxy_query.first()\n\t\tif proxy.use_proxy:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput_path_json",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput_path_json = f'{results_dir}/theHarvester.json'\n\ttheHarvester_dir = '/usr/src/github/theHarvester'\n\thistory_file = f'{results_dir}/commands.txt'\n\tcmd  = f'python3 {theHarvester_dir}/theHarvester.py -d {host} -b all -f {output_path_json}'\n\t# Update proxies.yaml\n\tproxy_query = Proxy.objects.all()\n\tif proxy_query.exists():\n\t\tproxy = proxy_query.first()\n\t\tif proxy.use_proxy:\n\t\t\tproxy_list = proxy.proxies.splitlines()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttheHarvester_dir",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttheHarvester_dir = '/usr/src/github/theHarvester'\n\thistory_file = f'{results_dir}/commands.txt'\n\tcmd  = f'python3 {theHarvester_dir}/theHarvester.py -d {host} -b all -f {output_path_json}'\n\t# Update proxies.yaml\n\tproxy_query = Proxy.objects.all()\n\tif proxy_query.exists():\n\t\tproxy = proxy_query.first()\n\t\tif proxy.use_proxy:\n\t\t\tproxy_list = proxy.proxies.splitlines()\n\t\t\tyaml_data = {'http' : proxy_list}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thistory_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thistory_file = f'{results_dir}/commands.txt'\n\tcmd  = f'python3 {theHarvester_dir}/theHarvester.py -d {host} -b all -f {output_path_json}'\n\t# Update proxies.yaml\n\tproxy_query = Proxy.objects.all()\n\tif proxy_query.exists():\n\t\tproxy = proxy_query.first()\n\t\tif proxy.use_proxy:\n\t\t\tproxy_list = proxy.proxies.splitlines()\n\t\t\tyaml_data = {'http' : proxy_list}\n\t\t\twith open(f'{theHarvester_dir}/proxies.yaml', 'w') as file:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tproxy_query",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tproxy_query = Proxy.objects.all()\n\tif proxy_query.exists():\n\t\tproxy = proxy_query.first()\n\t\tif proxy.use_proxy:\n\t\t\tproxy_list = proxy.proxies.splitlines()\n\t\t\tyaml_data = {'http' : proxy_list}\n\t\t\twith open(f'{theHarvester_dir}/proxies.yaml', 'w') as file:\n\t\t\t\tyaml.dump(yaml_data, file)\n\t# Run cmd\n\trun_command(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tproxy = proxy_query.first()\n\t\tif proxy.use_proxy:\n\t\t\tproxy_list = proxy.proxies.splitlines()\n\t\t\tyaml_data = {'http' : proxy_list}\n\t\t\twith open(f'{theHarvester_dir}/proxies.yaml', 'w') as file:\n\t\t\t\tyaml.dump(yaml_data, file)\n\t# Run cmd\n\trun_command(\n\t\tcmd,\n\t\tshell=False,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tproxy_list",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tproxy_list = proxy.proxies.splitlines()\n\t\t\tyaml_data = {'http' : proxy_list}\n\t\t\twith open(f'{theHarvester_dir}/proxies.yaml', 'w') as file:\n\t\t\t\tyaml.dump(yaml_data, file)\n\t# Run cmd\n\trun_command(\n\t\tcmd,\n\t\tshell=False,\n\t\tcwd=theHarvester_dir,\n\t\thistory_file=history_file,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tyaml_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tyaml_data = {'http' : proxy_list}\n\t\t\twith open(f'{theHarvester_dir}/proxies.yaml', 'w') as file:\n\t\t\t\tyaml.dump(yaml_data, file)\n\t# Run cmd\n\trun_command(\n\t\tcmd,\n\t\tshell=False,\n\t\tcwd=theHarvester_dir,\n\t\thistory_file=history_file,\n\t\tscan_id=scan_history_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdata = json.load(f)\n\t# Re-indent theHarvester JSON\n\twith open(output_path_json, 'w') as f:\n\t\tjson.dump(data, f, indent=4)\n\temails = data.get('emails', [])\n\tfor email_address in emails:\n\t\temail, _ = save_email(email_address, scan_history=scan_history)\n\t\t# if email:\n\t\t# \tself.notify(fields={'Emails': f'• `{email.address}`'})\n\tlinkedin_people = data.get('linkedin_people', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\temails",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\temails = data.get('emails', [])\n\tfor email_address in emails:\n\t\temail, _ = save_email(email_address, scan_history=scan_history)\n\t\t# if email:\n\t\t# \tself.notify(fields={'Emails': f'• `{email.address}`'})\n\tlinkedin_people = data.get('linkedin_people', [])\n\tfor people in linkedin_people:\n\t\temployee, _ = save_employee(\n\t\t\tpeople,\n\t\t\tdesignation='linkedin',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tlinkedin_people",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tlinkedin_people = data.get('linkedin_people', [])\n\tfor people in linkedin_people:\n\t\temployee, _ = save_employee(\n\t\t\tpeople,\n\t\t\tdesignation='linkedin',\n\t\t\tscan_history=scan_history)\n\t\t# if employee:\n\t\t# \tself.notify(fields={'LinkedIn people': f'• {employee.name}'})\n\ttwitter_people = data.get('twitter_people', [])\n\tfor people in twitter_people:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttwitter_people",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttwitter_people = data.get('twitter_people', [])\n\tfor people in twitter_people:\n\t\temployee, _ = save_employee(\n\t\t\tpeople,\n\t\t\tdesignation='twitter',\n\t\t\tscan_history=scan_history)\n\t\t# if employee:\n\t\t# \tself.notify(fields={'Twitter people': f'• {employee.name}'})\n\thosts = data.get('hosts', [])\n\turls = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thosts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thosts = data.get('hosts', [])\n\turls = []\n\tfor host in hosts:\n\t\tsplit = tuple(host.split(':'))\n\t\thttp_url = split[0]\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=False,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\turls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\turls = []\n\tfor host in hosts:\n\t\tsplit = tuple(host.split(':'))\n\t\thttp_url = split[0]\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=False,\n\t\t\tctx=ctx,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsplit",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsplit = tuple(host.split(':'))\n\t\thttp_url = split[0]\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=False,\n\t\t\tctx=ctx,\n\t\t\tsubdomain=subdomain)\n\t\t# if endpoint:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttp_url = split[0]\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=False,\n\t\t\tctx=ctx,\n\t\t\tsubdomain=subdomain)\n\t\t# if endpoint:\n\t\t# \turls.append(endpoint.http_url)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=False,\n\t\t\tctx=ctx,\n\t\t\tsubdomain=subdomain)\n\t\t# if endpoint:\n\t\t# \turls.append(endpoint.http_url)\n\t\t\t# self.notify(fields={'Hosts': f'• {endpoint.http_url}'})",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_history = ScanHistory.objects.get(pk=scan_history_id)\n\tinput_path = f'{results_dir}/emails.txt'\n\toutput_file = f'{results_dir}/h8mail.json'\n\tcmd = f'h8mail -t {input_path} --json {output_file}'\n\thistory_file = f'{results_dir}/commands.txt'\n\trun_command(\n\t\tcmd,\n\t\thistory_file=history_file,\n\t\tscan_id=scan_history_id,\n\t\tactivity_id=activity_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{results_dir}/emails.txt'\n\toutput_file = f'{results_dir}/h8mail.json'\n\tcmd = f'h8mail -t {input_path} --json {output_file}'\n\thistory_file = f'{results_dir}/commands.txt'\n\trun_command(\n\t\tcmd,\n\t\thistory_file=history_file,\n\t\tscan_id=scan_history_id,\n\t\tactivity_id=activity_id)\n\twith open(output_file) as f:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput_file = f'{results_dir}/h8mail.json'\n\tcmd = f'h8mail -t {input_path} --json {output_file}'\n\thistory_file = f'{results_dir}/commands.txt'\n\trun_command(\n\t\tcmd,\n\t\thistory_file=history_file,\n\t\tscan_id=scan_history_id,\n\t\tactivity_id=activity_id)\n\twith open(output_file) as f:\n\t\tdata = json.load(f)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = f'h8mail -t {input_path} --json {output_file}'\n\thistory_file = f'{results_dir}/commands.txt'\n\trun_command(\n\t\tcmd,\n\t\thistory_file=history_file,\n\t\tscan_id=scan_history_id,\n\t\tactivity_id=activity_id)\n\twith open(output_file) as f:\n\t\tdata = json.load(f)\n\t\tcreds = data.get('targets', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thistory_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thistory_file = f'{results_dir}/commands.txt'\n\trun_command(\n\t\tcmd,\n\t\thistory_file=history_file,\n\t\tscan_id=scan_history_id,\n\t\tactivity_id=activity_id)\n\twith open(output_file) as f:\n\t\tdata = json.load(f)\n\t\tcreds = data.get('targets', [])\n\t# TODO: go through h8mail output and save emails to DB",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdata = json.load(f)\n\t\tcreds = data.get('targets', [])\n\t# TODO: go through h8mail output and save emails to DB\n\tfor cred in creds:\n\t\tlogger.warning(cred)\n\t\temail_address = cred['target']\n\t\tpwn_num = cred['pwn_num']\n\t\tpwn_data = cred.get('data', [])\n\t\temail, created = save_email(email_address, scan_history=scan)\n\t\t# if email:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcreds",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcreds = data.get('targets', [])\n\t# TODO: go through h8mail output and save emails to DB\n\tfor cred in creds:\n\t\tlogger.warning(cred)\n\t\temail_address = cred['target']\n\t\tpwn_num = cred['pwn_num']\n\t\tpwn_data = cred.get('data', [])\n\t\temail, created = save_email(email_address, scan_history=scan)\n\t\t# if email:\n\t\t# \tself.notify(fields={'Emails': f'• `{email.address}`'})",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\temail_address",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\temail_address = cred['target']\n\t\tpwn_num = cred['pwn_num']\n\t\tpwn_data = cred.get('data', [])\n\t\temail, created = save_email(email_address, scan_history=scan)\n\t\t# if email:\n\t\t# \tself.notify(fields={'Emails': f'• `{email.address}`'})\n\treturn creds\n@app.task(name='screenshot', queue='main_scan_queue', base=RengineTask, bind=True)\ndef screenshot(self, ctx={}, description=None):\n\t\"\"\"Uses EyeWitness to gather screenshot of a domain and/or url.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tpwn_num",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tpwn_num = cred['pwn_num']\n\t\tpwn_data = cred.get('data', [])\n\t\temail, created = save_email(email_address, scan_history=scan)\n\t\t# if email:\n\t\t# \tself.notify(fields={'Emails': f'• `{email.address}`'})\n\treturn creds\n@app.task(name='screenshot', queue='main_scan_queue', base=RengineTask, bind=True)\ndef screenshot(self, ctx={}, description=None):\n\t\"\"\"Uses EyeWitness to gather screenshot of a domain and/or url.\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tpwn_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tpwn_data = cred.get('data', [])\n\t\temail, created = save_email(email_address, scan_history=scan)\n\t\t# if email:\n\t\t# \tself.notify(fields={'Emails': f'• `{email.address}`'})\n\treturn creds\n@app.task(name='screenshot', queue='main_scan_queue', base=RengineTask, bind=True)\ndef screenshot(self, ctx={}, description=None):\n\t\"\"\"Uses EyeWitness to gather screenshot of a domain and/or url.\n\tArgs:\n\t\tdescription (str, optional): Task description shown in UI.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscreenshots_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscreenshots_path = f'{self.results_dir}/screenshots'\n\toutput_path = f'{self.results_dir}/screenshots/{self.filename}'\n\talive_endpoints_file = f'{self.results_dir}/endpoints_alive.txt'\n\tconfig = self.yaml_configuration.get(SCREENSHOT) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT + 5)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# If intensity is normal, grab only the root endpoints of each subdomain\n\tstrict = True if intensity == 'normal' else False",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput_path = f'{self.results_dir}/screenshots/{self.filename}'\n\talive_endpoints_file = f'{self.results_dir}/endpoints_alive.txt'\n\tconfig = self.yaml_configuration.get(SCREENSHOT) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT + 5)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# If intensity is normal, grab only the root endpoints of each subdomain\n\tstrict = True if intensity == 'normal' else False\n\t# Get URLs to take screenshot of",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\talive_endpoints_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\talive_endpoints_file = f'{self.results_dir}/endpoints_alive.txt'\n\tconfig = self.yaml_configuration.get(SCREENSHOT) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT + 5)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# If intensity is normal, grab only the root endpoints of each subdomain\n\tstrict = True if intensity == 'normal' else False\n\t# Get URLs to take screenshot of\n\tget_http_urls(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(SCREENSHOT) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT + 5)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# If intensity is normal, grab only the root endpoints of each subdomain\n\tstrict = True if intensity == 'normal' else False\n\t# Get URLs to take screenshot of\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT + 5)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# If intensity is normal, grab only the root endpoints of each subdomain\n\tstrict = True if intensity == 'normal' else False\n\t# Get URLs to take screenshot of\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,\n\t\tstrict=strict,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tintensity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT + 5)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# If intensity is normal, grab only the root endpoints of each subdomain\n\tstrict = True if intensity == 'normal' else False\n\t# Get URLs to take screenshot of\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,\n\t\tstrict=strict,\n\t\twrite_filepath=alive_endpoints_file,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttimeout",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT + 5)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# If intensity is normal, grab only the root endpoints of each subdomain\n\tstrict = True if intensity == 'normal' else False\n\t# Get URLs to take screenshot of\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,\n\t\tstrict=strict,\n\t\twrite_filepath=alive_endpoints_file,\n\t\tget_only_default_urls=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# If intensity is normal, grab only the root endpoints of each subdomain\n\tstrict = True if intensity == 'normal' else False\n\t# Get URLs to take screenshot of\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,\n\t\tstrict=strict,\n\t\twrite_filepath=alive_endpoints_file,\n\t\tget_only_default_urls=True,\n\t\tctx=ctx",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tstrict",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tstrict = True if intensity == 'normal' else False\n\t# Get URLs to take screenshot of\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,\n\t\tstrict=strict,\n\t\twrite_filepath=alive_endpoints_file,\n\t\tget_only_default_urls=True,\n\t\tctx=ctx\n\t)\n\t# Send start notif",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotification",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotification = Notification.objects.first()\n\tsend_output_file = notification.send_scan_output_file if notification else False\n\t# Run cmd\n\tcmd = f'python3 /usr/src/github/EyeWitness/Python/EyeWitness.py -f {alive_endpoints_file} -d {screenshots_path} --no-prompt'\n\tcmd += f' --timeout {timeout}' if timeout > 0 else ''\n\tcmd += f' --threads {threads}' if threads > 0 else ''\n\trun_command(\n\t\tcmd,\n\t\tshell=False,\n\t\thistory_file=self.history_file,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsend_output_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsend_output_file = notification.send_scan_output_file if notification else False\n\t# Run cmd\n\tcmd = f'python3 /usr/src/github/EyeWitness/Python/EyeWitness.py -f {alive_endpoints_file} -d {screenshots_path} --no-prompt'\n\tcmd += f' --timeout {timeout}' if timeout > 0 else ''\n\tcmd += f' --threads {threads}' if threads > 0 else ''\n\trun_command(\n\t\tcmd,\n\t\tshell=False,\n\t\thistory_file=self.history_file,\n\t\tscan_id=self.scan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = f'python3 /usr/src/github/EyeWitness/Python/EyeWitness.py -f {alive_endpoints_file} -d {screenshots_path} --no-prompt'\n\tcmd += f' --timeout {timeout}' if timeout > 0 else ''\n\tcmd += f' --threads {threads}' if threads > 0 else ''\n\trun_command(\n\t\tcmd,\n\t\tshell=False,\n\t\thistory_file=self.history_file,\n\t\tscan_id=self.scan_id,\n\t\tactivity_id=self.activity_id)\n\tif not os.path.isfile(output_path):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscreenshot_paths",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscreenshot_paths = []\n\trequired_cols = [\n\t\t'Protocol',\n\t\t'Port',\n\t\t'Domain',\n\t\t'Request Status',\n\t\t'Screenshot Path'\n\t]\n\twith open(output_path, 'r', newline='') as file:\n\t\treader = csv.DictReader(file)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\trequired_cols",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\trequired_cols = [\n\t\t'Protocol',\n\t\t'Port',\n\t\t'Domain',\n\t\t'Request Status',\n\t\t'Screenshot Path'\n\t]\n\twith open(output_path, 'r', newline='') as file:\n\t\treader = csv.DictReader(file)\n\t\tfor row in reader:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\treader",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\treader = csv.DictReader(file)\n\t\tfor row in reader:\n\t\t\tparsed_row = {col: row[col] for col in required_cols if col in row}\n\t\t\tprotocol = parsed_row['Protocol']\n\t\t\tport = parsed_row['Port']\n\t\t\tsubdomain_name = parsed_row['Domain']\n\t\t\tstatus = parsed_row['Request Status']\n\t\t\tscreenshot_path = parsed_row['Screenshot Path']\n\t\t\tlogger.info(f'{protocol}:{port}:{subdomain_name}:{status}')\n\t\t\tsubdomain_query = Subdomain.objects.filter(name=subdomain_name)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tparsed_row",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tparsed_row = {col: row[col] for col in required_cols if col in row}\n\t\t\tprotocol = parsed_row['Protocol']\n\t\t\tport = parsed_row['Port']\n\t\t\tsubdomain_name = parsed_row['Domain']\n\t\t\tstatus = parsed_row['Request Status']\n\t\t\tscreenshot_path = parsed_row['Screenshot Path']\n\t\t\tlogger.info(f'{protocol}:{port}:{subdomain_name}:{status}')\n\t\t\tsubdomain_query = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tif self.scan:\n\t\t\t\tsubdomain_query = subdomain_query.filter(scan_history=self.scan)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tprotocol",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tprotocol = parsed_row['Protocol']\n\t\t\tport = parsed_row['Port']\n\t\t\tsubdomain_name = parsed_row['Domain']\n\t\t\tstatus = parsed_row['Request Status']\n\t\t\tscreenshot_path = parsed_row['Screenshot Path']\n\t\t\tlogger.info(f'{protocol}:{port}:{subdomain_name}:{status}')\n\t\t\tsubdomain_query = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tif self.scan:\n\t\t\t\tsubdomain_query = subdomain_query.filter(scan_history=self.scan)\n\t\t\tif status == 'Successful' and subdomain_query.exists():",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tport",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tport = parsed_row['Port']\n\t\t\tsubdomain_name = parsed_row['Domain']\n\t\t\tstatus = parsed_row['Request Status']\n\t\t\tscreenshot_path = parsed_row['Screenshot Path']\n\t\t\tlogger.info(f'{protocol}:{port}:{subdomain_name}:{status}')\n\t\t\tsubdomain_query = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tif self.scan:\n\t\t\t\tsubdomain_query = subdomain_query.filter(scan_history=self.scan)\n\t\t\tif status == 'Successful' and subdomain_query.exists():\n\t\t\t\tsubdomain = subdomain_query.first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain_name = parsed_row['Domain']\n\t\t\tstatus = parsed_row['Request Status']\n\t\t\tscreenshot_path = parsed_row['Screenshot Path']\n\t\t\tlogger.info(f'{protocol}:{port}:{subdomain_name}:{status}')\n\t\t\tsubdomain_query = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tif self.scan:\n\t\t\t\tsubdomain_query = subdomain_query.filter(scan_history=self.scan)\n\t\t\tif status == 'Successful' and subdomain_query.exists():\n\t\t\t\tsubdomain = subdomain_query.first()\n\t\t\t\tscreenshot_paths.append(screenshot_path)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tstatus",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tstatus = parsed_row['Request Status']\n\t\t\tscreenshot_path = parsed_row['Screenshot Path']\n\t\t\tlogger.info(f'{protocol}:{port}:{subdomain_name}:{status}')\n\t\t\tsubdomain_query = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tif self.scan:\n\t\t\t\tsubdomain_query = subdomain_query.filter(scan_history=self.scan)\n\t\t\tif status == 'Successful' and subdomain_query.exists():\n\t\t\t\tsubdomain = subdomain_query.first()\n\t\t\t\tscreenshot_paths.append(screenshot_path)\n\t\t\t\tsubdomain.screenshot_path = screenshot_path.replace('/usr/src/scan_results/', '')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tscreenshot_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tscreenshot_path = parsed_row['Screenshot Path']\n\t\t\tlogger.info(f'{protocol}:{port}:{subdomain_name}:{status}')\n\t\t\tsubdomain_query = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tif self.scan:\n\t\t\t\tsubdomain_query = subdomain_query.filter(scan_history=self.scan)\n\t\t\tif status == 'Successful' and subdomain_query.exists():\n\t\t\t\tsubdomain = subdomain_query.first()\n\t\t\t\tscreenshot_paths.append(screenshot_path)\n\t\t\t\tsubdomain.screenshot_path = screenshot_path.replace('/usr/src/scan_results/', '')\n\t\t\t\tsubdomain.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain_query = Subdomain.objects.filter(name=subdomain_name)\n\t\t\tif self.scan:\n\t\t\t\tsubdomain_query = subdomain_query.filter(scan_history=self.scan)\n\t\t\tif status == 'Successful' and subdomain_query.exists():\n\t\t\t\tsubdomain = subdomain_query.first()\n\t\t\t\tscreenshot_paths.append(screenshot_path)\n\t\t\t\tsubdomain.screenshot_path = screenshot_path.replace('/usr/src/scan_results/', '')\n\t\t\t\tsubdomain.save()\n\t\t\t\tlogger.warning(f'Added screenshot for {subdomain.name} to DB')\n\t# Remove all db, html extra files in screenshot results",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubdomain_query",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tsubdomain_query = subdomain_query.filter(scan_history=self.scan)\n\t\t\tif status == 'Successful' and subdomain_query.exists():\n\t\t\t\tsubdomain = subdomain_query.first()\n\t\t\t\tscreenshot_paths.append(screenshot_path)\n\t\t\t\tsubdomain.screenshot_path = screenshot_path.replace('/usr/src/scan_results/', '')\n\t\t\t\tsubdomain.save()\n\t\t\t\tlogger.warning(f'Added screenshot for {subdomain.name} to DB')\n\t# Remove all db, html extra files in screenshot results\n\trun_command(\n\t\tf'rm -rf {screenshots_path}/*.csv {screenshots_path}/*.db {screenshots_path}/*.js {screenshots_path}/*.html {screenshots_path}/*.css',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tsubdomain = subdomain_query.first()\n\t\t\t\tscreenshot_paths.append(screenshot_path)\n\t\t\t\tsubdomain.screenshot_path = screenshot_path.replace('/usr/src/scan_results/', '')\n\t\t\t\tsubdomain.save()\n\t\t\t\tlogger.warning(f'Added screenshot for {subdomain.name} to DB')\n\t# Remove all db, html extra files in screenshot results\n\trun_command(\n\t\tf'rm -rf {screenshots_path}/*.csv {screenshots_path}/*.db {screenshots_path}/*.js {screenshots_path}/*.html {screenshots_path}/*.css',\n\t\tshell=True,\n\t\thistory_file=self.history_file,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubdomain.screenshot_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tsubdomain.screenshot_path = screenshot_path.replace('/usr/src/scan_results/', '')\n\t\t\t\tsubdomain.save()\n\t\t\t\tlogger.warning(f'Added screenshot for {subdomain.name} to DB')\n\t# Remove all db, html extra files in screenshot results\n\trun_command(\n\t\tf'rm -rf {screenshots_path}/*.csv {screenshots_path}/*.db {screenshots_path}/*.js {screenshots_path}/*.html {screenshots_path}/*.css',\n\t\tshell=True,\n\t\thistory_file=self.history_file,\n\t\tscan_id=self.scan_id,\n\t\tactivity_id=self.activity_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscreenshots_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscreenshots_str = '• ' + '\\n• '.join([f'`{path}`' for path in screenshot_paths])\n\tself.notify(fields={'Screenshots': screenshots_str})\n\tif send_output_file:\n\t\tfor path in screenshot_paths:\n\t\t\ttitle = get_output_file_name(\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id,\n\t\t\t\tself.filename)\n\t\t\tsend_file_to_discord.delay(path, title)\n@app.task(name='port_scan', queue='main_scan_queue', base=RengineTask, bind=True)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\ttitle = get_output_file_name(\n\t\t\t\tself.scan_id,\n\t\t\t\tself.subscan_id,\n\t\t\t\tself.filename)\n\t\t\tsend_file_to_discord.delay(path, title)\n@app.task(name='port_scan', queue='main_scan_queue', base=RengineTask, bind=True)\ndef port_scan(self, hosts=[], ctx={}, description=None):\n\t\"\"\"Run port scan.\n\tArgs:\n\t\thosts (list, optional): Hosts to run port scan on.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_file = f'{self.results_dir}/input_subdomains_port_scan.txt'\n\tproxy = get_random_proxy()\n\t# Config\n\tconfig = self.yaml_configuration.get(PORT_SCAN) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\texclude_ports = config.get(NAABU_EXCLUDE_PORTS, [])\n\texclude_subdomains = config.get(NAABU_EXCLUDE_SUBDOMAINS, False)\n\tports = config.get(PORTS, NAABU_DEFAULT_PORTS)\n\tports = [str(port) for port in ports]",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tproxy = get_random_proxy()\n\t# Config\n\tconfig = self.yaml_configuration.get(PORT_SCAN) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\texclude_ports = config.get(NAABU_EXCLUDE_PORTS, [])\n\texclude_subdomains = config.get(NAABU_EXCLUDE_SUBDOMAINS, False)\n\tports = config.get(PORTS, NAABU_DEFAULT_PORTS)\n\tports = [str(port) for port in ports]\n\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(PORT_SCAN) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\texclude_ports = config.get(NAABU_EXCLUDE_PORTS, [])\n\texclude_subdomains = config.get(NAABU_EXCLUDE_SUBDOMAINS, False)\n\tports = config.get(PORTS, NAABU_DEFAULT_PORTS)\n\tports = [str(port) for port in ports]\n\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\texclude_ports = config.get(NAABU_EXCLUDE_PORTS, [])\n\texclude_subdomains = config.get(NAABU_EXCLUDE_SUBDOMAINS, False)\n\tports = config.get(PORTS, NAABU_DEFAULT_PORTS)\n\tports = [str(port) for port in ports]\n\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttimeout",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\texclude_ports = config.get(NAABU_EXCLUDE_PORTS, [])\n\texclude_subdomains = config.get(NAABU_EXCLUDE_SUBDOMAINS, False)\n\tports = config.get(PORTS, NAABU_DEFAULT_PORTS)\n\tports = [str(port) for port in ports]\n\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\texclude_ports",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\texclude_ports = config.get(NAABU_EXCLUDE_PORTS, [])\n\texclude_subdomains = config.get(NAABU_EXCLUDE_SUBDOMAINS, False)\n\tports = config.get(PORTS, NAABU_DEFAULT_PORTS)\n\tports = [str(port) for port in ports]\n\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\texclude_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\texclude_subdomains = config.get(NAABU_EXCLUDE_SUBDOMAINS, False)\n\tports = config.get(PORTS, NAABU_DEFAULT_PORTS)\n\tports = [str(port) for port in ports]\n\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args\n\tnmap_enabled = config.get(ENABLE_NMAP, False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tports",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tports = config.get(PORTS, NAABU_DEFAULT_PORTS)\n\tports = [str(port) for port in ports]\n\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args\n\tnmap_enabled = config.get(ENABLE_NMAP, False)\n\tnmap_cmd = config.get(NMAP_COMMAND, '')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tports",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tports = [str(port) for port in ports]\n\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args\n\tnmap_enabled = config.get(ENABLE_NMAP, False)\n\tnmap_cmd = config.get(NMAP_COMMAND, '')\n\tnmap_script = config.get(NMAP_SCRIPT, '')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\trate_limit",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\trate_limit = config.get(NAABU_RATE) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args\n\tnmap_enabled = config.get(ENABLE_NMAP, False)\n\tnmap_cmd = config.get(NMAP_COMMAND, '')\n\tnmap_script = config.get(NMAP_SCRIPT, '')\n\tnmap_script = ','.join(return_iterable(nmap_script))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args\n\tnmap_enabled = config.get(ENABLE_NMAP, False)\n\tnmap_cmd = config.get(NMAP_COMMAND, '')\n\tnmap_script = config.get(NMAP_SCRIPT, '')\n\tnmap_script = ','.join(return_iterable(nmap_script))\n\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tpassive",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tpassive = config.get(NAABU_PASSIVE, False)\n\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args\n\tnmap_enabled = config.get(ENABLE_NMAP, False)\n\tnmap_cmd = config.get(NMAP_COMMAND, '')\n\tnmap_script = config.get(NMAP_SCRIPT, '')\n\tnmap_script = ','.join(return_iterable(nmap_script))\n\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)\n\tif hosts:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tuse_naabu_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tuse_naabu_config = config.get(USE_NAABU_CONFIG, False)\n\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args\n\tnmap_enabled = config.get(ENABLE_NMAP, False)\n\tnmap_cmd = config.get(NMAP_COMMAND, '')\n\tnmap_script = config.get(NMAP_SCRIPT, '')\n\tnmap_script = ','.join(return_iterable(nmap_script))\n\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)\n\tif hosts:\n\t\twith open(input_file, 'w') as f:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\texclude_ports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\texclude_ports_str = ','.join(return_iterable(exclude_ports))\n\t# nmap args\n\tnmap_enabled = config.get(ENABLE_NMAP, False)\n\tnmap_cmd = config.get(NMAP_COMMAND, '')\n\tnmap_script = config.get(NMAP_SCRIPT, '')\n\tnmap_script = ','.join(return_iterable(nmap_script))\n\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)\n\tif hosts:\n\t\twith open(input_file, 'w') as f:\n\t\t\tf.write('\\n'.join(hosts))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnmap_enabled",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnmap_enabled = config.get(ENABLE_NMAP, False)\n\tnmap_cmd = config.get(NMAP_COMMAND, '')\n\tnmap_script = config.get(NMAP_SCRIPT, '')\n\tnmap_script = ','.join(return_iterable(nmap_script))\n\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)\n\tif hosts:\n\t\twith open(input_file, 'w') as f:\n\t\t\tf.write('\\n'.join(hosts))\n\telse:\n\t\thosts = get_subdomains(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnmap_cmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnmap_cmd = config.get(NMAP_COMMAND, '')\n\tnmap_script = config.get(NMAP_SCRIPT, '')\n\tnmap_script = ','.join(return_iterable(nmap_script))\n\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)\n\tif hosts:\n\t\twith open(input_file, 'w') as f:\n\t\t\tf.write('\\n'.join(hosts))\n\telse:\n\t\thosts = get_subdomains(\n\t\t\twrite_filepath=input_file,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnmap_script",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnmap_script = config.get(NMAP_SCRIPT, '')\n\tnmap_script = ','.join(return_iterable(nmap_script))\n\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)\n\tif hosts:\n\t\twith open(input_file, 'w') as f:\n\t\t\tf.write('\\n'.join(hosts))\n\telse:\n\t\thosts = get_subdomains(\n\t\t\twrite_filepath=input_file,\n\t\t\texclude_subdomains=exclude_subdomains,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnmap_script",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnmap_script = ','.join(return_iterable(nmap_script))\n\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)\n\tif hosts:\n\t\twith open(input_file, 'w') as f:\n\t\t\tf.write('\\n'.join(hosts))\n\telse:\n\t\thosts = get_subdomains(\n\t\t\twrite_filepath=input_file,\n\t\t\texclude_subdomains=exclude_subdomains,\n\t\t\tctx=ctx)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnmap_script_args",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnmap_script_args = config.get(NMAP_SCRIPT_ARGS)\n\tif hosts:\n\t\twith open(input_file, 'w') as f:\n\t\t\tf.write('\\n'.join(hosts))\n\telse:\n\t\thosts = get_subdomains(\n\t\t\twrite_filepath=input_file,\n\t\t\texclude_subdomains=exclude_subdomains,\n\t\t\tctx=ctx)\n\t# Build cmd",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thosts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thosts = get_subdomains(\n\t\t\twrite_filepath=input_file,\n\t\t\texclude_subdomains=exclude_subdomains,\n\t\t\tctx=ctx)\n\t# Build cmd\n\tcmd = 'naabu -json -exclude-cdn'\n\tcmd += f' -list {input_file}' if len(hosts) > 0 else f' -host {hosts[0]}'\n\tif 'full' in ports or 'all' in ports:\n\t\tports_str = ' -p \"-\"'\n\telif 'top-100' in ports:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = 'naabu -json -exclude-cdn'\n\tcmd += f' -list {input_file}' if len(hosts) > 0 else f' -host {hosts[0]}'\n\tif 'full' in ports or 'all' in ports:\n\t\tports_str = ' -p \"-\"'\n\telif 'top-100' in ports:\n\t\tports_str = ' -top-ports 100'\n\telif 'top-1000' in ports:\n\t\tports_str = ' -top-ports 1000'\n\telse:\n\t\tports_str = ','.join(ports)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tports_str = ' -p \"-\"'\n\telif 'top-100' in ports:\n\t\tports_str = ' -top-ports 100'\n\telif 'top-1000' in ports:\n\t\tports_str = ' -top-ports 1000'\n\telse:\n\t\tports_str = ','.join(ports)\n\t\tports_str = f' -p {ports_str}'\n\tcmd += ports_str\n\tcmd += ' -config /root/.config/naabu/config.yaml' if use_naabu_config else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tports_str = ' -top-ports 100'\n\telif 'top-1000' in ports:\n\t\tports_str = ' -top-ports 1000'\n\telse:\n\t\tports_str = ','.join(ports)\n\t\tports_str = f' -p {ports_str}'\n\tcmd += ports_str\n\tcmd += ' -config /root/.config/naabu/config.yaml' if use_naabu_config else ''\n\tcmd += f' -proxy \"{proxy}\"' if proxy else ''\n\tcmd += f' -c {threads}' if threads else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tports_str = ' -top-ports 1000'\n\telse:\n\t\tports_str = ','.join(ports)\n\t\tports_str = f' -p {ports_str}'\n\tcmd += ports_str\n\tcmd += ' -config /root/.config/naabu/config.yaml' if use_naabu_config else ''\n\tcmd += f' -proxy \"{proxy}\"' if proxy else ''\n\tcmd += f' -c {threads}' if threads else ''\n\tcmd += f' -rate {rate_limit}' if rate_limit > 0 else ''\n\tcmd += f' -timeout {timeout*1000}' if timeout > 0 else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tports_str = ','.join(ports)\n\t\tports_str = f' -p {ports_str}'\n\tcmd += ports_str\n\tcmd += ' -config /root/.config/naabu/config.yaml' if use_naabu_config else ''\n\tcmd += f' -proxy \"{proxy}\"' if proxy else ''\n\tcmd += f' -c {threads}' if threads else ''\n\tcmd += f' -rate {rate_limit}' if rate_limit > 0 else ''\n\tcmd += f' -timeout {timeout*1000}' if timeout > 0 else ''\n\tcmd += f' -passive' if passive else ''\n\tcmd += f' -exclude-ports {exclude_ports_str}' if exclude_ports else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tports_str = f' -p {ports_str}'\n\tcmd += ports_str\n\tcmd += ' -config /root/.config/naabu/config.yaml' if use_naabu_config else ''\n\tcmd += f' -proxy \"{proxy}\"' if proxy else ''\n\tcmd += f' -c {threads}' if threads else ''\n\tcmd += f' -rate {rate_limit}' if rate_limit > 0 else ''\n\tcmd += f' -timeout {timeout*1000}' if timeout > 0 else ''\n\tcmd += f' -passive' if passive else ''\n\tcmd += f' -exclude-ports {exclude_ports_str}' if exclude_ports else ''\n\tcmd += f' -silent'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\turls = []\n\tports_data = {}\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id):\n\t\tif not isinstance(line, dict):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\turls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\turls = []\n\tports_data = {}\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id):\n\t\tif not isinstance(line, dict):\n\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tports_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tports_data = {}\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id):\n\t\tif not isinstance(line, dict):\n\t\t\tcontinue\n\t\tresults.append(line)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tport_number",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tport_number = line['port']\n\t\tip_address = line['ip']\n\t\thost = line.get('host') or ip_address\n\t\tif port_number == 0:\n\t\t\tcontinue\n\t\t# Grab subdomain\n\t\tsubdomain = Subdomain.objects.filter(\n\t\t\tname=host,\n\t\t\ttarget_domain=self.domain,\n\t\t\tscan_history=self.scan",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tip_address",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tip_address = line['ip']\n\t\thost = line.get('host') or ip_address\n\t\tif port_number == 0:\n\t\t\tcontinue\n\t\t# Grab subdomain\n\t\tsubdomain = Subdomain.objects.filter(\n\t\t\tname=host,\n\t\t\ttarget_domain=self.domain,\n\t\t\tscan_history=self.scan\n\t\t).first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thost",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thost = line.get('host') or ip_address\n\t\tif port_number == 0:\n\t\t\tcontinue\n\t\t# Grab subdomain\n\t\tsubdomain = Subdomain.objects.filter(\n\t\t\tname=host,\n\t\t\ttarget_domain=self.domain,\n\t\t\tscan_history=self.scan\n\t\t).first()\n\t\t# Add IP DB",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain = Subdomain.objects.filter(\n\t\t\tname=host,\n\t\t\ttarget_domain=self.domain,\n\t\t\tscan_history=self.scan\n\t\t).first()\n\t\t# Add IP DB\n\t\tip, _ = save_ip_address(ip_address, subdomain, subscan=self.subscan)\n\t\tif self.subscan:\n\t\t\tip.ip_subscan_ids.add(self.subscan)\n\t\t\tip.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thttp_url = f'{host}:{port_number}'\n\t\t\tendpoint, _ = save_endpoint(\n\t\t\t\thttp_url,\n\t\t\t\tcrawl=enable_http_crawl,\n\t\t\t\tctx=ctx,\n\t\t\t\tsubdomain=subdomain)\n\t\t\tif endpoint:\n\t\t\t\thttp_url = endpoint.http_url\n\t\t\turls.append(http_url)\n\t\t# Add Port in DB",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\thttp_url = endpoint.http_url\n\t\t\turls.append(http_url)\n\t\t# Add Port in DB\n\t\tres = get_port_service_description(port_number)\n\t\t# get or create port\n\t\tport, created = update_or_create_port(\n\t\t\tport_number=port_number,\n\t\t\tservice_name=res.get('service_name', ''),\n\t\t\tdescription=res.get('description', '')\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tres",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tres = get_port_service_description(port_number)\n\t\t# get or create port\n\t\tport, created = update_or_create_port(\n\t\t\tport_number=port_number,\n\t\t\tservice_name=res.get('service_name', ''),\n\t\t\tdescription=res.get('description', '')\n\t\t)\n\t\tif created:\n\t\t\tlogger.warning(f'Added new port {port_number} to DB')\n\t\tif port_number in UNCOMMON_WEB_PORTS:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tport.is_uncommon",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tport.is_uncommon = True\n\t\t\tport.save()\n\t\tip.ports.add(port)\n\t\tip.save()\n\t\tif host in ports_data:\n\t\t\tports_data[host].append(port_number)\n\t\telse:\n\t\t\tports_data[host] = [port_number]\n\t\t# Send notification\n\t\tlogger.warning(f'Found opened port {port_number} on {ip_address} ({host})')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tports_data[host]",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tports_data[host] = [port_number]\n\t\t# Send notification\n\t\tlogger.warning(f'Found opened port {port_number} on {ip_address} ({host})')\n\tif len(ports_data) == 0:\n\t\tlogger.info('Finished running naabu port scan - No open ports found.')\n\t\tif nmap_enabled:\n\t\t\tlogger.info('Nmap scans skipped')\n\t\treturn ports_data\n\t# Send notification\n\tfields_str = ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfields_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfields_str = ''\n\tfor host, ports in ports_data.items():\n\t\tports_str = ', '.join([f'`{port}`' for port in ports])\n\t\tfields_str += f'• `{host}`: {ports_str}\\n'\n\tself.notify(fields={'Ports discovered': fields_str})\n\t# Save output to file\n\twith open(self.output_path, 'w') as f:\n\t\tjson.dump(results, f, indent=4)\n\tlogger.info('Finished running naabu port scan.')\n\t# Process nmap results: 1 process per host",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tports_str = ', '.join([f'`{port}`' for port in ports])\n\t\tfields_str += f'• `{host}`: {ports_str}\\n'\n\tself.notify(fields={'Ports discovered': fields_str})\n\t# Save output to file\n\twith open(self.output_path, 'w') as f:\n\t\tjson.dump(results, f, indent=4)\n\tlogger.info('Finished running naabu port scan.')\n\t# Process nmap results: 1 process per host\n\tsigs = []\n\tif nmap_enabled:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsigs",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsigs = []\n\tif nmap_enabled:\n\t\tlogger.warning(f'Starting nmap scans ...')\n\t\tlogger.warning(ports_data)\n\t\tfor host, port_list in ports_data.items():\n\t\t\tports_str = '_'.join([str(p) for p in port_list])\n\t\t\tctx_nmap = ctx.copy()\n\t\t\tctx_nmap['description'] = get_task_title(f'nmap_{host}', self.scan_id, self.subscan_id)\n\t\t\tctx_nmap['track'] = False\n\t\t\tsig = nmap.si(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tports_str = '_'.join([str(p) for p in port_list])\n\t\t\tctx_nmap = ctx.copy()\n\t\t\tctx_nmap['description'] = get_task_title(f'nmap_{host}', self.scan_id, self.subscan_id)\n\t\t\tctx_nmap['track'] = False\n\t\t\tsig = nmap.si(\n\t\t\t\tcmd=nmap_cmd,\n\t\t\t\tports=port_list,\n\t\t\t\thost=host,\n\t\t\t\tscript=nmap_script,\n\t\t\t\tscript_args=nmap_script_args,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tctx_nmap",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tctx_nmap = ctx.copy()\n\t\t\tctx_nmap['description'] = get_task_title(f'nmap_{host}', self.scan_id, self.subscan_id)\n\t\t\tctx_nmap['track'] = False\n\t\t\tsig = nmap.si(\n\t\t\t\tcmd=nmap_cmd,\n\t\t\t\tports=port_list,\n\t\t\t\thost=host,\n\t\t\t\tscript=nmap_script,\n\t\t\t\tscript_args=nmap_script_args,\n\t\t\t\tmax_rate=rate_limit,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tctx_nmap['description']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tctx_nmap['description'] = get_task_title(f'nmap_{host}', self.scan_id, self.subscan_id)\n\t\t\tctx_nmap['track'] = False\n\t\t\tsig = nmap.si(\n\t\t\t\tcmd=nmap_cmd,\n\t\t\t\tports=port_list,\n\t\t\t\thost=host,\n\t\t\t\tscript=nmap_script,\n\t\t\t\tscript_args=nmap_script_args,\n\t\t\t\tmax_rate=rate_limit,\n\t\t\t\tctx=ctx_nmap)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tctx_nmap['track']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tctx_nmap['track'] = False\n\t\t\tsig = nmap.si(\n\t\t\t\tcmd=nmap_cmd,\n\t\t\t\tports=port_list,\n\t\t\t\thost=host,\n\t\t\t\tscript=nmap_script,\n\t\t\t\tscript_args=nmap_script_args,\n\t\t\t\tmax_rate=rate_limit,\n\t\t\t\tctx=ctx_nmap)\n\t\t\tsigs.append(sig)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsig = nmap.si(\n\t\t\t\tcmd=nmap_cmd,\n\t\t\t\tports=port_list,\n\t\t\t\thost=host,\n\t\t\t\tscript=nmap_script,\n\t\t\t\tscript_args=nmap_script_args,\n\t\t\t\tmax_rate=rate_limit,\n\t\t\t\tctx=ctx_nmap)\n\t\t\tsigs.append(sig)\n\t\ttask = group(sigs).apply_async()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttask",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttask = group(sigs).apply_async()\n\t\twith allow_join_result():\n\t\t\tresults = task.get()\n\treturn ports_data\n@app.task(name='nmap', queue='main_scan_queue', base=RengineTask, bind=True)\ndef nmap(\n\t\tself,\n\t\tcmd=None,\n\t\tports=[],\n\t\thost=None,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tresults = task.get()\n\treturn ports_data\n@app.task(name='nmap', queue='main_scan_queue', base=RengineTask, bind=True)\ndef nmap(\n\t\tself,\n\t\tcmd=None,\n\t\tports=[],\n\t\thost=None,\n\t\tinput_file=None,\n\t\tscript=None,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tports_str = ','.join(str(port) for port in ports)\n\tself.filename = self.filename.replace('.txt', '.xml')\n\tfilename_vulns = self.filename.replace('.xml', '_vulns.json')\n\toutput_file = self.output_path\n\toutput_file_xml = f'{self.results_dir}/{host}_{self.filename}'\n\tvulns_file = f'{self.results_dir}/{host}_{filename_vulns}'\n\tlogger.warning(f'Running nmap on {host}:{ports}')\n\t# Build cmd\n\tnmap_cmd = get_nmap_cmd(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tports_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tports_str = ','.join(str(port) for port in ports)\n\tself.filename = self.filename.replace('.txt', '.xml')\n\tfilename_vulns = self.filename.replace('.xml', '_vulns.json')\n\toutput_file = self.output_path\n\toutput_file_xml = f'{self.results_dir}/{host}_{self.filename}'\n\tvulns_file = f'{self.results_dir}/{host}_{filename_vulns}'\n\tlogger.warning(f'Running nmap on {host}:{ports}')\n\t# Build cmd\n\tnmap_cmd = get_nmap_cmd(\n\t\tcmd=cmd,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tself.filename",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tself.filename = self.filename.replace('.txt', '.xml')\n\tfilename_vulns = self.filename.replace('.xml', '_vulns.json')\n\toutput_file = self.output_path\n\toutput_file_xml = f'{self.results_dir}/{host}_{self.filename}'\n\tvulns_file = f'{self.results_dir}/{host}_{filename_vulns}'\n\tlogger.warning(f'Running nmap on {host}:{ports}')\n\t# Build cmd\n\tnmap_cmd = get_nmap_cmd(\n\t\tcmd=cmd,\n\t\tports=ports_str,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfilename_vulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfilename_vulns = self.filename.replace('.xml', '_vulns.json')\n\toutput_file = self.output_path\n\toutput_file_xml = f'{self.results_dir}/{host}_{self.filename}'\n\tvulns_file = f'{self.results_dir}/{host}_{filename_vulns}'\n\tlogger.warning(f'Running nmap on {host}:{ports}')\n\t# Build cmd\n\tnmap_cmd = get_nmap_cmd(\n\t\tcmd=cmd,\n\t\tports=ports_str,\n\t\tscript=script,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput_file = self.output_path\n\toutput_file_xml = f'{self.results_dir}/{host}_{self.filename}'\n\tvulns_file = f'{self.results_dir}/{host}_{filename_vulns}'\n\tlogger.warning(f'Running nmap on {host}:{ports}')\n\t# Build cmd\n\tnmap_cmd = get_nmap_cmd(\n\t\tcmd=cmd,\n\t\tports=ports_str,\n\t\tscript=script,\n\t\tscript_args=script_args,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput_file_xml",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput_file_xml = f'{self.results_dir}/{host}_{self.filename}'\n\tvulns_file = f'{self.results_dir}/{host}_{filename_vulns}'\n\tlogger.warning(f'Running nmap on {host}:{ports}')\n\t# Build cmd\n\tnmap_cmd = get_nmap_cmd(\n\t\tcmd=cmd,\n\t\tports=ports_str,\n\t\tscript=script,\n\t\tscript_args=script_args,\n\t\tmax_rate=max_rate,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvulns_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvulns_file = f'{self.results_dir}/{host}_{filename_vulns}'\n\tlogger.warning(f'Running nmap on {host}:{ports}')\n\t# Build cmd\n\tnmap_cmd = get_nmap_cmd(\n\t\tcmd=cmd,\n\t\tports=ports_str,\n\t\tscript=script,\n\t\tscript_args=script_args,\n\t\tmax_rate=max_rate,\n\t\thost=host,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnmap_cmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnmap_cmd = get_nmap_cmd(\n\t\tcmd=cmd,\n\t\tports=ports_str,\n\t\tscript=script,\n\t\tscript_args=script_args,\n\t\tmax_rate=max_rate,\n\t\thost=host,\n\t\tinput_file=input_file,\n\t\toutput_file=output_file_xml)\n\t# Run cmd",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvulns = parse_nmap_results(output_file_xml, output_file)\n\twith open(vulns_file, 'w') as f:\n\t\tjson.dump(vulns, f, indent=4)\n\t# Save vulnerabilities found by nmap\n\tvulns_str = ''\n\tfor vuln_data in vulns:\n\t\t# URL is not necessarily an HTTP URL when running nmap (can be any\n\t\t# other vulnerable protocols). Look for existing endpoint and use its\n\t\t# URL as vulnerability.http_url if it exists.\n\t\turl = vuln_data['http_url']",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvulns_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvulns_str = ''\n\tfor vuln_data in vulns:\n\t\t# URL is not necessarily an HTTP URL when running nmap (can be any\n\t\t# other vulnerable protocols). Look for existing endpoint and use its\n\t\t# URL as vulnerability.http_url if it exists.\n\t\turl = vuln_data['http_url']\n\t\tendpoint = EndPoint.objects.filter(http_url__contains=url).first()\n\t\tif endpoint:\n\t\t\tvuln_data['http_url'] = endpoint.http_url\n\t\tvuln, created = save_vulnerability(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turl = vuln_data['http_url']\n\t\tendpoint = EndPoint.objects.filter(http_url__contains=url).first()\n\t\tif endpoint:\n\t\t\tvuln_data['http_url'] = endpoint.http_url\n\t\tvuln, created = save_vulnerability(\n\t\t\ttarget_domain=self.domain,\n\t\t\tsubdomain=self.subdomain,\n\t\t\tscan_history=self.scan,\n\t\t\tsubscan=self.subscan,\n\t\t\tendpoint=endpoint,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint = EndPoint.objects.filter(http_url__contains=url).first()\n\t\tif endpoint:\n\t\t\tvuln_data['http_url'] = endpoint.http_url\n\t\tvuln, created = save_vulnerability(\n\t\t\ttarget_domain=self.domain,\n\t\t\tsubdomain=self.subdomain,\n\t\t\tscan_history=self.scan,\n\t\t\tsubscan=self.subscan,\n\t\t\tendpoint=endpoint,\n\t\t\t**vuln_data)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tvuln_data['http_url']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tvuln_data['http_url'] = endpoint.http_url\n\t\tvuln, created = save_vulnerability(\n\t\t\ttarget_domain=self.domain,\n\t\t\tsubdomain=self.subdomain,\n\t\t\tscan_history=self.scan,\n\t\t\tsubscan=self.subscan,\n\t\t\tendpoint=endpoint,\n\t\t\t**vuln_data)\n\t\tvulns_str += f'• {str(vuln)}\\n'\n\t\tif created:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{self.results_dir}/input_endpoints_waf_detection.txt'\n\tconfig = self.yaml_configuration.get(WAF_DETECTION) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Get alive endpoints from DB\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,\n\t\twrite_filepath=input_path,\n\t\tget_only_default_urls=True,\n\t\tctx=ctx\n\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(WAF_DETECTION) or {}\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Get alive endpoints from DB\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,\n\t\twrite_filepath=input_path,\n\t\tget_only_default_urls=True,\n\t\tctx=ctx\n\t)\n\tcmd = f'wafw00f -i {input_path} -o {self.output_path}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\t# Get alive endpoints from DB\n\tget_http_urls(\n\t\tis_alive=enable_http_crawl,\n\t\twrite_filepath=input_path,\n\t\tget_only_default_urls=True,\n\t\tctx=ctx\n\t)\n\tcmd = f'wafw00f -i {input_path} -o {self.output_path}'\n\trun_command(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = f'wafw00f -i {input_path} -o {self.output_path}'\n\trun_command(\n\t\tcmd,\n\t\thistory_file=self.history_file,\n\t\tscan_id=self.scan_id,\n\t\tactivity_id=self.activity_id)\n\tif not os.path.isfile(self.output_path):\n\t\tlogger.error(f'Could not find {self.output_path}')\n\t\treturn\n\twith open(self.output_path) as file:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\twafs",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\twafs = file.readlines()\n\tfor line in wafs:\n\t\tline = \" \".join(line.split())\n\t\tsplitted = line.split(' ', 1)\n\t\twaf_info = splitted[1].strip()\n\t\twaf_name = waf_info[:waf_info.find('(')].strip()\n\t\twaf_manufacturer = waf_info[waf_info.find('(')+1:waf_info.find(')')].strip().replace('.', '')\n\t\thttp_url = sanitize_url(splitted[0].strip())\n\t\tif not waf_name or waf_name == 'None':\n\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline = \" \".join(line.split())\n\t\tsplitted = line.split(' ', 1)\n\t\twaf_info = splitted[1].strip()\n\t\twaf_name = waf_info[:waf_info.find('(')].strip()\n\t\twaf_manufacturer = waf_info[waf_info.find('(')+1:waf_info.find(')')].strip().replace('.', '')\n\t\thttp_url = sanitize_url(splitted[0].strip())\n\t\tif not waf_name or waf_name == 'None':\n\t\t\tcontinue\n\t\t# Add waf to db\n\t\twaf, _ = Waf.objects.get_or_create(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsplitted",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsplitted = line.split(' ', 1)\n\t\twaf_info = splitted[1].strip()\n\t\twaf_name = waf_info[:waf_info.find('(')].strip()\n\t\twaf_manufacturer = waf_info[waf_info.find('(')+1:waf_info.find(')')].strip().replace('.', '')\n\t\thttp_url = sanitize_url(splitted[0].strip())\n\t\tif not waf_name or waf_name == 'None':\n\t\t\tcontinue\n\t\t# Add waf to db\n\t\twaf, _ = Waf.objects.get_or_create(\n\t\t\tname=waf_name,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\twaf_info",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\twaf_info = splitted[1].strip()\n\t\twaf_name = waf_info[:waf_info.find('(')].strip()\n\t\twaf_manufacturer = waf_info[waf_info.find('(')+1:waf_info.find(')')].strip().replace('.', '')\n\t\thttp_url = sanitize_url(splitted[0].strip())\n\t\tif not waf_name or waf_name == 'None':\n\t\t\tcontinue\n\t\t# Add waf to db\n\t\twaf, _ = Waf.objects.get_or_create(\n\t\t\tname=waf_name,\n\t\t\tmanufacturer=waf_manufacturer",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\twaf_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\twaf_name = waf_info[:waf_info.find('(')].strip()\n\t\twaf_manufacturer = waf_info[waf_info.find('(')+1:waf_info.find(')')].strip().replace('.', '')\n\t\thttp_url = sanitize_url(splitted[0].strip())\n\t\tif not waf_name or waf_name == 'None':\n\t\t\tcontinue\n\t\t# Add waf to db\n\t\twaf, _ = Waf.objects.get_or_create(\n\t\t\tname=waf_name,\n\t\t\tmanufacturer=waf_manufacturer\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\twaf_manufacturer",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\twaf_manufacturer = waf_info[waf_info.find('(')+1:waf_info.find(')')].strip().replace('.', '')\n\t\thttp_url = sanitize_url(splitted[0].strip())\n\t\tif not waf_name or waf_name == 'None':\n\t\t\tcontinue\n\t\t# Add waf to db\n\t\twaf, _ = Waf.objects.get_or_create(\n\t\t\tname=waf_name,\n\t\t\tmanufacturer=waf_manufacturer\n\t\t)\n\t\t# Add waf info to Subdomain in DB",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttp_url = sanitize_url(splitted[0].strip())\n\t\tif not waf_name or waf_name == 'None':\n\t\t\tcontinue\n\t\t# Add waf to db\n\t\twaf, _ = Waf.objects.get_or_create(\n\t\t\tname=waf_name,\n\t\t\tmanufacturer=waf_manufacturer\n\t\t)\n\t\t# Add waf info to Subdomain in DB\n\t\tsubdomain = get_subdomain_from_url(http_url)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain = get_subdomain_from_url(http_url)\n\t\tlogger.info(f'Wafw00f Subdomain : {subdomain}')\n\t\tsubdomain_query, _ = Subdomain.objects.get_or_create(scan_history=self.scan, name=subdomain)\n\t\tsubdomain_query.waf.add(waf)\n\t\tsubdomain_query.save()\n\treturn wafs\n@app.task(name='dir_file_fuzz', queue='main_scan_queue', base=RengineTask, bind=True)\ndef dir_file_fuzz(self, ctx={}, description=None):\n\t\"\"\"Perform directory scan, and currently uses `ffuf` as a default tool.\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = 'ffuf'\n\tconfig = self.yaml_configuration.get(DIR_FILE_FUZZ) or {}\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t# support for custom header will be remove in next major release, as of now it will be supported\n\t# for backward compatibility\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\tauto_calibration = config.get(AUTO_CALIBRATION, True)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(DIR_FILE_FUZZ) or {}\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t# support for custom header will be remove in next major release, as of now it will be supported\n\t# for backward compatibility\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\tauto_calibration = config.get(AUTO_CALIBRATION, True)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t# support for custom header will be remove in next major release, as of now it will be supported\n\t# for backward compatibility\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\tauto_calibration = config.get(AUTO_CALIBRATION, True)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\textensions = config.get(EXTENSIONS, DEFAULT_DIR_FILE_FUZZ_EXTENSIONS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_header",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\tauto_calibration = config.get(AUTO_CALIBRATION, True)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\textensions = config.get(EXTENSIONS, DEFAULT_DIR_FILE_FUZZ_EXTENSIONS)\n\t# prepend . on extensions\n\textensions = [ext if ext.startswith('.') else '.' + ext for ext in extensions]\n\textensions_str = ','.join(map(str, extensions))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tauto_calibration",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tauto_calibration = config.get(AUTO_CALIBRATION, True)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\textensions = config.get(EXTENSIONS, DEFAULT_DIR_FILE_FUZZ_EXTENSIONS)\n\t# prepend . on extensions\n\textensions = [ext if ext.startswith('.') else '.' + ext for ext in extensions]\n\textensions_str = ','.join(map(str, extensions))\n\tfollow_redirect = config.get(FOLLOW_REDIRECT, FFUF_DEFAULT_FOLLOW_REDIRECT)\n\tmax_time = config.get(MAX_TIME, 0)\n\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\textensions = config.get(EXTENSIONS, DEFAULT_DIR_FILE_FUZZ_EXTENSIONS)\n\t# prepend . on extensions\n\textensions = [ext if ext.startswith('.') else '.' + ext for ext in extensions]\n\textensions_str = ','.join(map(str, extensions))\n\tfollow_redirect = config.get(FOLLOW_REDIRECT, FFUF_DEFAULT_FOLLOW_REDIRECT)\n\tmax_time = config.get(MAX_TIME, 0)\n\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)\n\tmc = ','.join([str(c) for c in match_http_status])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\trate_limit",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\textensions = config.get(EXTENSIONS, DEFAULT_DIR_FILE_FUZZ_EXTENSIONS)\n\t# prepend . on extensions\n\textensions = [ext if ext.startswith('.') else '.' + ext for ext in extensions]\n\textensions_str = ','.join(map(str, extensions))\n\tfollow_redirect = config.get(FOLLOW_REDIRECT, FFUF_DEFAULT_FOLLOW_REDIRECT)\n\tmax_time = config.get(MAX_TIME, 0)\n\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)\n\tmc = ','.join([str(c) for c in match_http_status])\n\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\textensions",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\textensions = config.get(EXTENSIONS, DEFAULT_DIR_FILE_FUZZ_EXTENSIONS)\n\t# prepend . on extensions\n\textensions = [ext if ext.startswith('.') else '.' + ext for ext in extensions]\n\textensions_str = ','.join(map(str, extensions))\n\tfollow_redirect = config.get(FOLLOW_REDIRECT, FFUF_DEFAULT_FOLLOW_REDIRECT)\n\tmax_time = config.get(MAX_TIME, 0)\n\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)\n\tmc = ','.join([str(c) for c in match_http_status])\n\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)\n\tstop_on_error = config.get(STOP_ON_ERROR, False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\textensions",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\textensions = [ext if ext.startswith('.') else '.' + ext for ext in extensions]\n\textensions_str = ','.join(map(str, extensions))\n\tfollow_redirect = config.get(FOLLOW_REDIRECT, FFUF_DEFAULT_FOLLOW_REDIRECT)\n\tmax_time = config.get(MAX_TIME, 0)\n\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)\n\tmc = ','.join([str(c) for c in match_http_status])\n\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)\n\tstop_on_error = config.get(STOP_ON_ERROR, False)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\textensions_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\textensions_str = ','.join(map(str, extensions))\n\tfollow_redirect = config.get(FOLLOW_REDIRECT, FFUF_DEFAULT_FOLLOW_REDIRECT)\n\tmax_time = config.get(MAX_TIME, 0)\n\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)\n\tmc = ','.join([str(c) for c in match_http_status])\n\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)\n\tstop_on_error = config.get(STOP_ON_ERROR, False)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfollow_redirect",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfollow_redirect = config.get(FOLLOW_REDIRECT, FFUF_DEFAULT_FOLLOW_REDIRECT)\n\tmax_time = config.get(MAX_TIME, 0)\n\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)\n\tmc = ','.join([str(c) for c in match_http_status])\n\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)\n\tstop_on_error = config.get(STOP_ON_ERROR, False)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmax_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmax_time = config.get(MAX_TIME, 0)\n\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)\n\tmc = ','.join([str(c) for c in match_http_status])\n\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)\n\tstop_on_error = config.get(STOP_ON_ERROR, False)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmatch_http_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmatch_http_status = config.get(MATCH_HTTP_STATUS, FFUF_DEFAULT_MATCH_HTTP_STATUS)\n\tmc = ','.join([str(c) for c in match_http_status])\n\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)\n\tstop_on_error = config.get(STOP_ON_ERROR, False)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmc",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmc = ','.join([str(c) for c in match_http_status])\n\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)\n\tstop_on_error = config.get(STOP_ON_ERROR, False)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist\n\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\trecursive_level",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\trecursive_level = config.get(RECURSIVE_LEVEL, FFUF_DEFAULT_RECURSIVE_LEVEL)\n\tstop_on_error = config.get(STOP_ON_ERROR, False)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist\n\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name\n\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tstop_on_error",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tstop_on_error = config.get(STOP_ON_ERROR, False)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist\n\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name\n\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'\n\t# Build command",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttimeout",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist\n\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name\n\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'\n\t# Build command\n\tcmd += f' -w {wordlist_path}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist\n\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name\n\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'\n\t# Build command\n\tcmd += f' -w {wordlist_path}'\n\tcmd += f' -e {extensions_str}' if extensions else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\twordlist_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\twordlist_name = config.get(WORDLIST, 'dicc')\n\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist\n\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name\n\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'\n\t# Build command\n\tcmd += f' -w {wordlist_path}'\n\tcmd += f' -e {extensions_str}' if extensions else ''\n\tcmd += f' -maxtime {max_time}' if max_time > 0 else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdelay",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdelay = rate_limit / (threads * 100) # calculate request pause delay from rate_limit and number of threads\n\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist\n\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name\n\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'\n\t# Build command\n\tcmd += f' -w {wordlist_path}'\n\tcmd += f' -e {extensions_str}' if extensions else ''\n\tcmd += f' -maxtime {max_time}' if max_time > 0 else ''\n\tcmd += f' -p {delay}' if delay > 0 else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{self.results_dir}/input_dir_file_fuzz.txt'\n\t# Get wordlist\n\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name\n\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'\n\t# Build command\n\tcmd += f' -w {wordlist_path}'\n\tcmd += f' -e {extensions_str}' if extensions else ''\n\tcmd += f' -maxtime {max_time}' if max_time > 0 else ''\n\tcmd += f' -p {delay}' if delay > 0 else ''\n\tcmd += f' -recursion -recursion-depth {recursive_level} ' if recursive_level > 0 else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\twordlist_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\twordlist_name = 'dicc' if wordlist_name == 'default' else wordlist_name\n\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'\n\t# Build command\n\tcmd += f' -w {wordlist_path}'\n\tcmd += f' -e {extensions_str}' if extensions else ''\n\tcmd += f' -maxtime {max_time}' if max_time > 0 else ''\n\tcmd += f' -p {delay}' if delay > 0 else ''\n\tcmd += f' -recursion -recursion-depth {recursive_level} ' if recursive_level > 0 else ''\n\tcmd += f' -t {threads}' if threads and threads > 0 else ''\n\tcmd += f' -timeout {timeout}' if timeout and timeout > 0 else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\twordlist_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\twordlist_path = f'/usr/src/wordlist/{wordlist_name}.txt'\n\t# Build command\n\tcmd += f' -w {wordlist_path}'\n\tcmd += f' -e {extensions_str}' if extensions else ''\n\tcmd += f' -maxtime {max_time}' if max_time > 0 else ''\n\tcmd += f' -p {delay}' if delay > 0 else ''\n\tcmd += f' -recursion -recursion-depth {recursive_level} ' if recursive_level > 0 else ''\n\tcmd += f' -t {threads}' if threads and threads > 0 else ''\n\tcmd += f' -timeout {timeout}' if timeout and timeout > 0 else ''\n\tcmd += ' -se' if stop_on_error else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tformatted_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\t# Grab URLs to fuzz\n\turls = get_http_urls(\n\t\tis_alive=True,\n\t\tignore_files=False,\n\t\twrite_filepath=input_path,\n\t\tget_only_default_urls=True,\n\t\tctx=ctx",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\turls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\turls = get_http_urls(\n\t\tis_alive=True,\n\t\tignore_files=False,\n\t\twrite_filepath=input_path,\n\t\tget_only_default_urls=True,\n\t\tctx=ctx\n\t)\n\tlogger.warning(urls)\n\t# Loop through URLs and run command\n\tresults = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\tfor url in urls:\n\t\t'''\n\t\t\tAbove while fetching urls, we are not ignoring files, because some\n\t\t\tdefault urls may redirect to https://example.com/login.php\n\t\t\tso, ignore_files is set to False\n\t\t\tbut, during fuzzing, we will only need part of the path, in above example\n\t\t\tit is still a good idea to ffuf base url https://example.com\n\t\t\tso files from base url\n\t\t'''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl_parse",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turl_parse = urlparse(url)\n\t\turl = url_parse.scheme + '://' + url_parse.netloc\n\t\turl += '/FUZZ' # TODO: fuzz not only URL but also POST / PUT / headers\n\t\tproxy = get_random_proxy()\n\t\t# Build final cmd\n\t\tfcmd = cmd\n\t\tfcmd += f' -x {proxy}' if proxy else ''\n\t\tfcmd += f' -u {url} -json'\n\t\t# Initialize DirectoryScan object\n\t\tdirscan = DirectoryScan()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turl = url_parse.scheme + '://' + url_parse.netloc\n\t\turl += '/FUZZ' # TODO: fuzz not only URL but also POST / PUT / headers\n\t\tproxy = get_random_proxy()\n\t\t# Build final cmd\n\t\tfcmd = cmd\n\t\tfcmd += f' -x {proxy}' if proxy else ''\n\t\tfcmd += f' -u {url} -json'\n\t\t# Initialize DirectoryScan object\n\t\tdirscan = DirectoryScan()\n\t\tdirscan.scanned_date = timezone.now()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tproxy = get_random_proxy()\n\t\t# Build final cmd\n\t\tfcmd = cmd\n\t\tfcmd += f' -x {proxy}' if proxy else ''\n\t\tfcmd += f' -u {url} -json'\n\t\t# Initialize DirectoryScan object\n\t\tdirscan = DirectoryScan()\n\t\tdirscan.scanned_date = timezone.now()\n\t\tdirscan.command_line = fcmd\n\t\tdirscan.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tfcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tfcmd = cmd\n\t\tfcmd += f' -x {proxy}' if proxy else ''\n\t\tfcmd += f' -u {url} -json'\n\t\t# Initialize DirectoryScan object\n\t\tdirscan = DirectoryScan()\n\t\tdirscan.scanned_date = timezone.now()\n\t\tdirscan.command_line = fcmd\n\t\tdirscan.save()\n\t\t# Loop through results and populate EndPoint and DirectoryFile in DB\n\t\tresults = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdirscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdirscan = DirectoryScan()\n\t\tdirscan.scanned_date = timezone.now()\n\t\tdirscan.command_line = fcmd\n\t\tdirscan.save()\n\t\t# Loop through results and populate EndPoint and DirectoryFile in DB\n\t\tresults = []\n\t\tfor line in stream_command(\n\t\t\t\tfcmd,\n\t\t\t\tshell=True,\n\t\t\t\thistory_file=self.history_file,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdirscan.scanned_date",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdirscan.scanned_date = timezone.now()\n\t\tdirscan.command_line = fcmd\n\t\tdirscan.save()\n\t\t# Loop through results and populate EndPoint and DirectoryFile in DB\n\t\tresults = []\n\t\tfor line in stream_command(\n\t\t\t\tfcmd,\n\t\t\t\tshell=True,\n\t\t\t\thistory_file=self.history_file,\n\t\t\t\tscan_id=self.scan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdirscan.command_line",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdirscan.command_line = fcmd\n\t\tdirscan.save()\n\t\t# Loop through results and populate EndPoint and DirectoryFile in DB\n\t\tresults = []\n\t\tfor line in stream_command(\n\t\t\t\tfcmd,\n\t\t\t\tshell=True,\n\t\t\t\thistory_file=self.history_file,\n\t\t\t\tscan_id=self.scan_id,\n\t\t\t\tactivity_id=self.activity_id):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tresults = []\n\t\tfor line in stream_command(\n\t\t\t\tfcmd,\n\t\t\t\tshell=True,\n\t\t\t\thistory_file=self.history_file,\n\t\t\t\tscan_id=self.scan_id,\n\t\t\t\tactivity_id=self.activity_id):\n\t\t\t# Empty line, continue to the next record\n\t\t\tif not isinstance(line, dict):\n\t\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\turl = line['url']\n\t\t\t# Extract path and convert to base64 (need byte string encode & decode)\n\t\t\tname = base64.b64encode(extract_path_from_url(url).encode()).decode()\n\t\t\tlength = line['length']\n\t\t\tstatus = line['status']\n\t\t\twords = line['words']\n\t\t\tlines = line['lines']\n\t\t\tcontent_type = line['content-type']\n\t\t\tduration = line['duration']\n\t\t\t# If name empty log error and continue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tname",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tname = base64.b64encode(extract_path_from_url(url).encode()).decode()\n\t\t\tlength = line['length']\n\t\t\tstatus = line['status']\n\t\t\twords = line['words']\n\t\t\tlines = line['lines']\n\t\t\tcontent_type = line['content-type']\n\t\t\tduration = line['duration']\n\t\t\t# If name empty log error and continue\n\t\t\tif not name:\n\t\t\t\tlogger.error(f'FUZZ not found for \"{url}\"')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tlength",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tlength = line['length']\n\t\t\tstatus = line['status']\n\t\t\twords = line['words']\n\t\t\tlines = line['lines']\n\t\t\tcontent_type = line['content-type']\n\t\t\tduration = line['duration']\n\t\t\t# If name empty log error and continue\n\t\t\tif not name:\n\t\t\t\tlogger.error(f'FUZZ not found for \"{url}\"')\n\t\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tstatus",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tstatus = line['status']\n\t\t\twords = line['words']\n\t\t\tlines = line['lines']\n\t\t\tcontent_type = line['content-type']\n\t\t\tduration = line['duration']\n\t\t\t# If name empty log error and continue\n\t\t\tif not name:\n\t\t\t\tlogger.error(f'FUZZ not found for \"{url}\"')\n\t\t\t\tcontinue\n\t\t\t# Get or create endpoint from URL",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\twords",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\twords = line['words']\n\t\t\tlines = line['lines']\n\t\t\tcontent_type = line['content-type']\n\t\t\tduration = line['duration']\n\t\t\t# If name empty log error and continue\n\t\t\tif not name:\n\t\t\t\tlogger.error(f'FUZZ not found for \"{url}\"')\n\t\t\t\tcontinue\n\t\t\t# Get or create endpoint from URL\n\t\t\tendpoint, created = save_endpoint(url, crawl=False, ctx=ctx)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tlines",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tlines = line['lines']\n\t\t\tcontent_type = line['content-type']\n\t\t\tduration = line['duration']\n\t\t\t# If name empty log error and continue\n\t\t\tif not name:\n\t\t\t\tlogger.error(f'FUZZ not found for \"{url}\"')\n\t\t\t\tcontinue\n\t\t\t# Get or create endpoint from URL\n\t\t\tendpoint, created = save_endpoint(url, crawl=False, ctx=ctx)\n\t\t\t# Continue to next line if endpoint returned is None",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcontent_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcontent_type = line['content-type']\n\t\t\tduration = line['duration']\n\t\t\t# If name empty log error and continue\n\t\t\tif not name:\n\t\t\t\tlogger.error(f'FUZZ not found for \"{url}\"')\n\t\t\t\tcontinue\n\t\t\t# Get or create endpoint from URL\n\t\t\tendpoint, created = save_endpoint(url, crawl=False, ctx=ctx)\n\t\t\t# Continue to next line if endpoint returned is None\n\t\t\tif endpoint == None:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tduration",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tduration = line['duration']\n\t\t\t# If name empty log error and continue\n\t\t\tif not name:\n\t\t\t\tlogger.error(f'FUZZ not found for \"{url}\"')\n\t\t\t\tcontinue\n\t\t\t# Get or create endpoint from URL\n\t\t\tendpoint, created = save_endpoint(url, crawl=False, ctx=ctx)\n\t\t\t# Continue to next line if endpoint returned is None\n\t\t\tif endpoint == None:\n\t\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint.http_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint.http_status = status\n\t\t\tendpoint.content_length = length\n\t\t\tendpoint.response_time = duration / 1000000000\n\t\t\tendpoint.content_type = content_type\n\t\t\tendpoint.content_length = length\n\t\t\tendpoint.save()\n\t\t\t# Save directory file output from FFUF output\n\t\t\tdfile, created = DirectoryFile.objects.get_or_create(\n\t\t\t\tname=name,\n\t\t\t\tlength=length,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint.content_length",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint.content_length = length\n\t\t\tendpoint.response_time = duration / 1000000000\n\t\t\tendpoint.content_type = content_type\n\t\t\tendpoint.content_length = length\n\t\t\tendpoint.save()\n\t\t\t# Save directory file output from FFUF output\n\t\t\tdfile, created = DirectoryFile.objects.get_or_create(\n\t\t\t\tname=name,\n\t\t\t\tlength=length,\n\t\t\t\twords=words,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint.response_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint.response_time = duration / 1000000000\n\t\t\tendpoint.content_type = content_type\n\t\t\tendpoint.content_length = length\n\t\t\tendpoint.save()\n\t\t\t# Save directory file output from FFUF output\n\t\t\tdfile, created = DirectoryFile.objects.get_or_create(\n\t\t\t\tname=name,\n\t\t\t\tlength=length,\n\t\t\t\twords=words,\n\t\t\t\tlines=lines,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint.content_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint.content_type = content_type\n\t\t\tendpoint.content_length = length\n\t\t\tendpoint.save()\n\t\t\t# Save directory file output from FFUF output\n\t\t\tdfile, created = DirectoryFile.objects.get_or_create(\n\t\t\t\tname=name,\n\t\t\t\tlength=length,\n\t\t\t\twords=words,\n\t\t\t\tlines=lines,\n\t\t\t\tcontent_type=content_type,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint.content_length",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint.content_length = length\n\t\t\tendpoint.save()\n\t\t\t# Save directory file output from FFUF output\n\t\t\tdfile, created = DirectoryFile.objects.get_or_create(\n\t\t\t\tname=name,\n\t\t\t\tlength=length,\n\t\t\t\twords=words,\n\t\t\t\tlines=lines,\n\t\t\t\tcontent_type=content_type,\n\t\t\t\turl=url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tsubdomain = Subdomain.objects.get(id=ctx['subdomain_id'])\n\t\t\telse:\n\t\t\t\tsubdomain_name = get_subdomain_from_url(endpoint.http_url)\n\t\t\t\tsubdomain = Subdomain.objects.get(name=subdomain_name, scan_history=self.scan)\n\t\t\tsubdomain.directories.add(dirscan)\n\t\t\tsubdomain.save()\n\t# Crawl discovered URLs\n\tif enable_http_crawl:\n\t\tctx['track'] = False\n\t\thttp_crawl(urls, ctx=ctx)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tsubdomain_name = get_subdomain_from_url(endpoint.http_url)\n\t\t\t\tsubdomain = Subdomain.objects.get(name=subdomain_name, scan_history=self.scan)\n\t\t\tsubdomain.directories.add(dirscan)\n\t\t\tsubdomain.save()\n\t# Crawl discovered URLs\n\tif enable_http_crawl:\n\t\tctx['track'] = False\n\t\thttp_crawl(urls, ctx=ctx)\n\treturn results\n@app.task(name='fetch_url', queue='main_scan_queue', base=RengineTask, bind=True)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tsubdomain = Subdomain.objects.get(name=subdomain_name, scan_history=self.scan)\n\t\t\tsubdomain.directories.add(dirscan)\n\t\t\tsubdomain.save()\n\t# Crawl discovered URLs\n\tif enable_http_crawl:\n\t\tctx['track'] = False\n\t\thttp_crawl(urls, ctx=ctx)\n\treturn results\n@app.task(name='fetch_url', queue='main_scan_queue', base=RengineTask, bind=True)\ndef fetch_url(self, urls=[], ctx={}, description=None):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tctx['track']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tctx['track'] = False\n\t\thttp_crawl(urls, ctx=ctx)\n\treturn results\n@app.task(name='fetch_url', queue='main_scan_queue', base=RengineTask, bind=True)\ndef fetch_url(self, urls=[], ctx={}, description=None):\n\t\"\"\"Fetch URLs using different tools like gauplus, gau, gospider, waybackurls ...\n\tArgs:\n\t\turls (list): List of URLs to start from.\n\t\tdescription (str, optional): Task description shown in UI.\n\t\"\"\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{self.results_dir}/input_endpoints_fetch_url.txt'\n\tproxy = get_random_proxy()\n\t# Config\n\tconfig = self.yaml_configuration.get(FETCH_URL) or {}\n\tshould_remove_duplicate_endpoints = config.get(REMOVE_DUPLICATE_ENDPOINTS, True)\n\tduplicate_removal_fields = config.get(DUPLICATE_REMOVAL_FIELDS, ENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tgf_patterns = config.get(GF_PATTERNS, DEFAULT_GF_PATTERNS)\n\tignore_file_extension = config.get(IGNORE_FILE_EXTENSION, DEFAULT_IGNORE_FILE_EXTENSIONS)\n\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tproxy = get_random_proxy()\n\t# Config\n\tconfig = self.yaml_configuration.get(FETCH_URL) or {}\n\tshould_remove_duplicate_endpoints = config.get(REMOVE_DUPLICATE_ENDPOINTS, True)\n\tduplicate_removal_fields = config.get(DUPLICATE_REMOVAL_FIELDS, ENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tgf_patterns = config.get(GF_PATTERNS, DEFAULT_GF_PATTERNS)\n\tignore_file_extension = config.get(IGNORE_FILE_EXTENSION, DEFAULT_IGNORE_FILE_EXTENSIONS)\n\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(FETCH_URL) or {}\n\tshould_remove_duplicate_endpoints = config.get(REMOVE_DUPLICATE_ENDPOINTS, True)\n\tduplicate_removal_fields = config.get(DUPLICATE_REMOVAL_FIELDS, ENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tgf_patterns = config.get(GF_PATTERNS, DEFAULT_GF_PATTERNS)\n\tignore_file_extension = config.get(IGNORE_FILE_EXTENSION, DEFAULT_IGNORE_FILE_EXTENSIONS)\n\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# domain_request_headers = self.domain.request_headers if self.domain else None\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tshould_remove_duplicate_endpoints",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tshould_remove_duplicate_endpoints = config.get(REMOVE_DUPLICATE_ENDPOINTS, True)\n\tduplicate_removal_fields = config.get(DUPLICATE_REMOVAL_FIELDS, ENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tgf_patterns = config.get(GF_PATTERNS, DEFAULT_GF_PATTERNS)\n\tignore_file_extension = config.get(IGNORE_FILE_EXTENSION, DEFAULT_IGNORE_FILE_EXTENSIONS)\n\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# domain_request_headers = self.domain.request_headers if self.domain else None\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tduplicate_removal_fields",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tduplicate_removal_fields = config.get(DUPLICATE_REMOVAL_FIELDS, ENDPOINT_SCAN_DEFAULT_DUPLICATE_FIELDS)\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tgf_patterns = config.get(GF_PATTERNS, DEFAULT_GF_PATTERNS)\n\tignore_file_extension = config.get(IGNORE_FILE_EXTENSION, DEFAULT_IGNORE_FILE_EXTENSIONS)\n\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# domain_request_headers = self.domain.request_headers if self.domain else None\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tgf_patterns = config.get(GF_PATTERNS, DEFAULT_GF_PATTERNS)\n\tignore_file_extension = config.get(IGNORE_FILE_EXTENSION, DEFAULT_IGNORE_FILE_EXTENSIONS)\n\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# domain_request_headers = self.domain.request_headers if self.domain else None\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, ",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgf_patterns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgf_patterns = config.get(GF_PATTERNS, DEFAULT_GF_PATTERNS)\n\tignore_file_extension = config.get(IGNORE_FILE_EXTENSION, DEFAULT_IGNORE_FILE_EXTENSIONS)\n\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# domain_request_headers = self.domain.request_headers if self.domain else None\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tignore_file_extension",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tignore_file_extension = config.get(IGNORE_FILE_EXTENSION, DEFAULT_IGNORE_FILE_EXTENSIONS)\n\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# domain_request_headers = self.domain.request_headers if self.domain else None\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttools",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttools = config.get(USES_TOOLS, ENDPOINT_SCAN_DEFAULT_TOOLS)\n\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# domain_request_headers = self.domain.request_headers if self.domain else None\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\t# domain_request_headers = self.domain.request_headers if self.domain else None\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_header",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\texclude_subdomains = config.get(EXCLUDED_SUBDOMAINS, False)\n\t# Get URLs to scan and save to input file\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\turls = get_http_urls(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\texclude_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\texclude_subdomains = config.get(EXCLUDED_SUBDOMAINS, False)\n\t# Get URLs to scan and save to input file\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\turls = get_http_urls(\n\t\t\tis_alive=enable_http_crawl,\n\t\t\twrite_filepath=input_path,\n\t\t\texclude_subdomains=exclude_subdomains,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turls = get_http_urls(\n\t\t\tis_alive=enable_http_crawl,\n\t\t\twrite_filepath=input_path,\n\t\t\texclude_subdomains=exclude_subdomains,\n\t\t\tget_only_default_urls=True,\n\t\t\tctx=ctx\n\t\t)\n\t# Domain regex\n\thost = self.domain.name if self.domain else urlparse(urls[0]).netloc\n\thost_regex = f\"\\'https?://([a-z0-9]+[.])*{host}.*\\'\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thost",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thost = self.domain.name if self.domain else urlparse(urls[0]).netloc\n\thost_regex = f\"\\'https?://([a-z0-9]+[.])*{host}.*\\'\"\n\t# Tools cmds\n\tcmd_map = {\n\t\t'gau': f'gau',\n\t\t'hakrawler': 'hakrawler -subs -u',\n\t\t'waybackurls': 'waybackurls',\n\t\t'gospider': f'gospider -S {input_path} --js -d 2 --sitemap --robots -w -r',\n\t\t'katana': f'katana -list {input_path} -silent -jc -kf all -d 3 -fs rdn',\n\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thost_regex",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thost_regex = f\"\\'https?://([a-z0-9]+[.])*{host}.*\\'\"\n\t# Tools cmds\n\tcmd_map = {\n\t\t'gau': f'gau',\n\t\t'hakrawler': 'hakrawler -subs -u',\n\t\t'waybackurls': 'waybackurls',\n\t\t'gospider': f'gospider -S {input_path} --js -d 2 --sitemap --robots -w -r',\n\t\t'katana': f'katana -list {input_path} -silent -jc -kf all -d 3 -fs rdn',\n\t}\n\tif proxy:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd_map",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd_map = {\n\t\t'gau': f'gau',\n\t\t'hakrawler': 'hakrawler -subs -u',\n\t\t'waybackurls': 'waybackurls',\n\t\t'gospider': f'gospider -S {input_path} --js -d 2 --sitemap --robots -w -r',\n\t\t'katana': f'katana -list {input_path} -silent -jc -kf all -d 3 -fs rdn',\n\t}\n\tif proxy:\n\t\tcmd_map['gau'] += f' --proxy \"{proxy}\"'\n\t\tcmd_map['gospider'] += f' -p {proxy}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tformatted_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\t\tcmd_map['gospider'] += formatted_headers\n\t\tcmd_map['hakrawler'] += ';;'.join(header for header in custom_headers)\n\t\tcmd_map['katana'] += formatted_headers\n\tcat_input = f'cat {input_path}'\n\tgrep_output = f'grep -Eo {host_regex}'\n\tcmd_map = {\n\t\ttool: f'{cat_input} | {cmd} | {grep_output} > {self.results_dir}/urls_{tool}.txt'\n\t\tfor tool, cmd in cmd_map.items()\n\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcat_input",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcat_input = f'cat {input_path}'\n\tgrep_output = f'grep -Eo {host_regex}'\n\tcmd_map = {\n\t\ttool: f'{cat_input} | {cmd} | {grep_output} > {self.results_dir}/urls_{tool}.txt'\n\t\tfor tool, cmd in cmd_map.items()\n\t}\n\ttasks = group(\n\t\trun_command.si(\n\t\t\tcmd,\n\t\t\tshell=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgrep_output",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgrep_output = f'grep -Eo {host_regex}'\n\tcmd_map = {\n\t\ttool: f'{cat_input} | {cmd} | {grep_output} > {self.results_dir}/urls_{tool}.txt'\n\t\tfor tool, cmd in cmd_map.items()\n\t}\n\ttasks = group(\n\t\trun_command.si(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\tscan_id=self.scan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd_map",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd_map = {\n\t\ttool: f'{cat_input} | {cmd} | {grep_output} > {self.results_dir}/urls_{tool}.txt'\n\t\tfor tool, cmd in cmd_map.items()\n\t}\n\ttasks = group(\n\t\trun_command.si(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttasks = group(\n\t\trun_command.si(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id)\n\t\tfor tool, cmd in cmd_map.items()\n\t\tif tool in tools\n\t)\n\t# Cleanup task",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsort_output",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsort_output = [\n\t\tf'cat {self.results_dir}/urls_* > {self.output_path}',\n\t\tf'cat {input_path} >> {self.output_path}',\n\t\tf'sort -u {self.output_path} -o {self.output_path}',\n\t]\n\tif ignore_file_extension:\n\t\tignore_exts = '|'.join(ignore_file_extension)\n\t\tgrep_ext_filtered_output = [\n\t\t\tf'cat {self.output_path} | grep -Eiv \"\\\\.({ignore_exts}).*\" > {self.results_dir}/urls_filtered.txt',\n\t\t\tf'mv {self.results_dir}/urls_filtered.txt {self.output_path}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tignore_exts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tignore_exts = '|'.join(ignore_file_extension)\n\t\tgrep_ext_filtered_output = [\n\t\t\tf'cat {self.output_path} | grep -Eiv \"\\\\.({ignore_exts}).*\" > {self.results_dir}/urls_filtered.txt',\n\t\t\tf'mv {self.results_dir}/urls_filtered.txt {self.output_path}'\n\t\t]\n\t\tsort_output.extend(grep_ext_filtered_output)\n\tcleanup = chain(\n\t\trun_command.si(\n\t\t\tcmd,\n\t\t\tshell=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tgrep_ext_filtered_output",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tgrep_ext_filtered_output = [\n\t\t\tf'cat {self.output_path} | grep -Eiv \"\\\\.({ignore_exts}).*\" > {self.results_dir}/urls_filtered.txt',\n\t\t\tf'mv {self.results_dir}/urls_filtered.txt {self.output_path}'\n\t\t]\n\t\tsort_output.extend(grep_ext_filtered_output)\n\tcleanup = chain(\n\t\trun_command.si(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\tscan_id=self.scan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcleanup",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcleanup = chain(\n\t\trun_command.si(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id)\n\t\tfor cmd in sort_output\n\t)\n\t# Run all commands\n\ttask = chord(tasks)(cleanup)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttask",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttask = chord(tasks)(cleanup)\n\twith allow_join_result():\n\t\ttask.get()\n\t# Store all the endpoints and run httpx\n\twith open(self.output_path) as f:\n\t\tdiscovered_urls = f.readlines()\n\t\tself.notify(fields={'Discovered URLs': len(discovered_urls)})\n\t# Some tools can have an URL in the format <URL>] - <PATH> or <URL> - <PATH>, add them\n\t# to the final URL list\n\tall_urls = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdiscovered_urls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdiscovered_urls = f.readlines()\n\t\tself.notify(fields={'Discovered URLs': len(discovered_urls)})\n\t# Some tools can have an URL in the format <URL>] - <PATH> or <URL> - <PATH>, add them\n\t# to the final URL list\n\tall_urls = []\n\tfor url in discovered_urls:\n\t\turl = url.strip()\n\t\turlpath = None\n\t\tbase_url = None\n\t\tif '] ' in url: # found JS scraped endpoint e.g from gospider",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tall_urls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tall_urls = []\n\tfor url in discovered_urls:\n\t\turl = url.strip()\n\t\turlpath = None\n\t\tbase_url = None\n\t\tif '] ' in url: # found JS scraped endpoint e.g from gospider\n\t\t\tsplit = tuple(url.split('] '))\n\t\t\tif not len(split) == 2:\n\t\t\t\tlogger.warning(f'URL format not recognized for \"{url}\". Skipping.')\n\t\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turl = url.strip()\n\t\turlpath = None\n\t\tbase_url = None\n\t\tif '] ' in url: # found JS scraped endpoint e.g from gospider\n\t\t\tsplit = tuple(url.split('] '))\n\t\t\tif not len(split) == 2:\n\t\t\t\tlogger.warning(f'URL format not recognized for \"{url}\". Skipping.')\n\t\t\t\tcontinue\n\t\t\tbase_url, urlpath = split\n\t\t\turlpath = urlpath.lstrip('- ')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turlpath",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turlpath = None\n\t\tbase_url = None\n\t\tif '] ' in url: # found JS scraped endpoint e.g from gospider\n\t\t\tsplit = tuple(url.split('] '))\n\t\t\tif not len(split) == 2:\n\t\t\t\tlogger.warning(f'URL format not recognized for \"{url}\". Skipping.')\n\t\t\t\tcontinue\n\t\t\tbase_url, urlpath = split\n\t\t\turlpath = urlpath.lstrip('- ')\n\t\telif ' - ' in url: # found JS scraped endpoint e.g from gospider",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tbase_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tbase_url = None\n\t\tif '] ' in url: # found JS scraped endpoint e.g from gospider\n\t\t\tsplit = tuple(url.split('] '))\n\t\t\tif not len(split) == 2:\n\t\t\t\tlogger.warning(f'URL format not recognized for \"{url}\". Skipping.')\n\t\t\t\tcontinue\n\t\t\tbase_url, urlpath = split\n\t\t\turlpath = urlpath.lstrip('- ')\n\t\telif ' - ' in url: # found JS scraped endpoint e.g from gospider\n\t\t\tbase_url, urlpath = tuple(url.split(' - '))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsplit",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsplit = tuple(url.split('] '))\n\t\t\tif not len(split) == 2:\n\t\t\t\tlogger.warning(f'URL format not recognized for \"{url}\". Skipping.')\n\t\t\t\tcontinue\n\t\t\tbase_url, urlpath = split\n\t\t\turlpath = urlpath.lstrip('- ')\n\t\telif ' - ' in url: # found JS scraped endpoint e.g from gospider\n\t\t\tbase_url, urlpath = tuple(url.split(' - '))\n\t\tif base_url and urlpath:\n\t\t\tsubdomain = urlparse(base_url)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\turlpath",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\turlpath = urlpath.lstrip('- ')\n\t\telif ' - ' in url: # found JS scraped endpoint e.g from gospider\n\t\t\tbase_url, urlpath = tuple(url.split(' - '))\n\t\tif base_url and urlpath:\n\t\t\tsubdomain = urlparse(base_url)\n\t\t\turl = f'{subdomain.scheme}://{subdomain.netloc}{self.starting_point_path}'\n\t\tif not validators.url(url):\n\t\t\tlogger.warning(f'Invalid URL \"{url}\". Skipping.')\n\t\tif url not in all_urls:\n\t\t\tall_urls.append(url)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain = urlparse(base_url)\n\t\t\turl = f'{subdomain.scheme}://{subdomain.netloc}{self.starting_point_path}'\n\t\tif not validators.url(url):\n\t\t\tlogger.warning(f'Invalid URL \"{url}\". Skipping.')\n\t\tif url not in all_urls:\n\t\t\tall_urls.append(url)\n\t# Filter out URLs if a path filter was passed\n\tif self.starting_point_path:\n\t\tall_urls = [url for url in all_urls if self.starting_point_path in url]\n\t# if exclude_paths is found, then remove urls matching those paths",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\turl = f'{subdomain.scheme}://{subdomain.netloc}{self.starting_point_path}'\n\t\tif not validators.url(url):\n\t\t\tlogger.warning(f'Invalid URL \"{url}\". Skipping.')\n\t\tif url not in all_urls:\n\t\t\tall_urls.append(url)\n\t# Filter out URLs if a path filter was passed\n\tif self.starting_point_path:\n\t\tall_urls = [url for url in all_urls if self.starting_point_path in url]\n\t# if exclude_paths is found, then remove urls matching those paths\n\tif self.excluded_paths:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tall_urls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tall_urls = [url for url in all_urls if self.starting_point_path in url]\n\t# if exclude_paths is found, then remove urls matching those paths\n\tif self.excluded_paths:\n\t\tall_urls = exclude_urls_by_patterns(self.excluded_paths, all_urls)\n\t# Write result to output path\n\twith open(self.output_path, 'w') as f:\n\t\tf.write('\\n'.join(all_urls))\n\tlogger.warning(f'Found {len(all_urls)} usable URLs')\n\t# Crawl discovered URLs\n\tif enable_http_crawl:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tall_urls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tall_urls = exclude_urls_by_patterns(self.excluded_paths, all_urls)\n\t# Write result to output path\n\twith open(self.output_path, 'w') as f:\n\t\tf.write('\\n'.join(all_urls))\n\tlogger.warning(f'Found {len(all_urls)} usable URLs')\n\t# Crawl discovered URLs\n\tif enable_http_crawl:\n\t\tctx['track'] = False\n\t\thttp_crawl(\n\t\t\tall_urls,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tctx['track']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tctx['track'] = False\n\t\thttp_crawl(\n\t\t\tall_urls,\n\t\t\tctx=ctx,\n\t\t\tshould_remove_duplicate_endpoints=should_remove_duplicate_endpoints,\n\t\t\tduplicate_removal_fields=duplicate_removal_fields\n\t\t)\n\t#-------------------#\n\t# GF PATTERNS MATCH #\n\t#-------------------#",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tself.scan.used_gf_patterns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tself.scan.used_gf_patterns = ','.join(gf_patterns)\n\t\tself.scan.save()\n\t# Run gf patterns on saved endpoints\n\t# TODO: refactor to Celery task\n\tfor gf_pattern in gf_patterns:\n\t\t# TODO: js var is causing issues, removing for now\n\t\tif gf_pattern == 'jsvar':\n\t\t\tlogger.info('Ignoring jsvar as it is causing issues.')\n\t\t\tcontinue\n\t\t# Run gf on current pattern",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tgf_output_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tgf_output_file = f'{self.results_dir}/gf_patterns_{gf_pattern}.txt'\n\t\tcmd = f'cat {self.output_path} | gf {gf_pattern} | grep -Eo {host_regex} >> {gf_output_file}'\n\t\trun_command(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id)\n\t\t# Check output file\n\t\tif not os.path.exists(gf_output_file):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcmd = f'cat {self.output_path} | gf {gf_pattern} | grep -Eo {host_regex} >> {gf_output_file}'\n\t\trun_command(\n\t\t\tcmd,\n\t\t\tshell=True,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id)\n\t\t# Check output file\n\t\tif not os.path.exists(gf_output_file):\n\t\t\tlogger.error(f'Could not find GF output file {gf_output_file}. Skipping GF pattern \"{gf_pattern}\"')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tlines",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tlines = f.readlines()\n\t\t# Add endpoints / subdomains to DB\n\t\tfor url in lines:\n\t\t\thttp_url = sanitize_url(url)\n\t\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\t\tif not subdomain:\n\t\t\t\tcontinue\n\t\t\tendpoint, created = save_endpoint(\n\t\t\t\thttp_url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thttp_url = sanitize_url(url)\n\t\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\t\tif not subdomain:\n\t\t\t\tcontinue\n\t\t\tendpoint, created = save_endpoint(\n\t\t\t\thttp_url,\n\t\t\t\tcrawl=False,\n\t\t\t\tsubdomain=subdomain,\n\t\t\t\tctx=ctx)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\t\tif not subdomain:\n\t\t\t\tcontinue\n\t\t\tendpoint, created = save_endpoint(\n\t\t\t\thttp_url,\n\t\t\t\tcrawl=False,\n\t\t\t\tsubdomain=subdomain,\n\t\t\t\tctx=ctx)\n\t\t\tif not endpoint:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tearlier_pattern",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tearlier_pattern = None\n\t\t\tif not created:\n\t\t\t\tearlier_pattern = endpoint.matched_gf_patterns\n\t\t\tpattern = f'{earlier_pattern},{gf_pattern}' if earlier_pattern else gf_pattern\n\t\t\tendpoint.matched_gf_patterns = pattern\n\t\t\tendpoint.save()\n\treturn all_urls\ndef parse_curl_output(response):\n\t# TODO: Enrich from other cURL fields.\n\tCURL_REGEX_HTTP_STATUS = f'HTTP\\/(?:(?:\\d\\.?)+)\\s(\\d+)\\s(?:\\w+)'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tearlier_pattern",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tearlier_pattern = endpoint.matched_gf_patterns\n\t\t\tpattern = f'{earlier_pattern},{gf_pattern}' if earlier_pattern else gf_pattern\n\t\t\tendpoint.matched_gf_patterns = pattern\n\t\t\tendpoint.save()\n\treturn all_urls\ndef parse_curl_output(response):\n\t# TODO: Enrich from other cURL fields.\n\tCURL_REGEX_HTTP_STATUS = f'HTTP\\/(?:(?:\\d\\.?)+)\\s(\\d+)\\s(?:\\w+)'\n\thttp_status = 0\n\tif response:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tpattern",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tpattern = f'{earlier_pattern},{gf_pattern}' if earlier_pattern else gf_pattern\n\t\t\tendpoint.matched_gf_patterns = pattern\n\t\t\tendpoint.save()\n\treturn all_urls\ndef parse_curl_output(response):\n\t# TODO: Enrich from other cURL fields.\n\tCURL_REGEX_HTTP_STATUS = f'HTTP\\/(?:(?:\\d\\.?)+)\\s(\\d+)\\s(?:\\w+)'\n\thttp_status = 0\n\tif response:\n\t\tfailed = False",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint.matched_gf_patterns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint.matched_gf_patterns = pattern\n\t\t\tendpoint.save()\n\treturn all_urls\ndef parse_curl_output(response):\n\t# TODO: Enrich from other cURL fields.\n\tCURL_REGEX_HTTP_STATUS = f'HTTP\\/(?:(?:\\d\\.?)+)\\s(\\d+)\\s(?:\\w+)'\n\thttp_status = 0\n\tif response:\n\t\tfailed = False\n\t\tregex = re.compile(CURL_REGEX_HTTP_STATUS, re.MULTILINE)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tCURL_REGEX_HTTP_STATUS",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tCURL_REGEX_HTTP_STATUS = f'HTTP\\/(?:(?:\\d\\.?)+)\\s(\\d+)\\s(?:\\w+)'\n\thttp_status = 0\n\tif response:\n\t\tfailed = False\n\t\tregex = re.compile(CURL_REGEX_HTTP_STATUS, re.MULTILINE)\n\t\ttry:\n\t\t\thttp_status = int(regex.findall(response)[0])\n\t\texcept (KeyError, TypeError, IndexError):\n\t\t\tpass\n\treturn {",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thttp_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thttp_status = 0\n\tif response:\n\t\tfailed = False\n\t\tregex = re.compile(CURL_REGEX_HTTP_STATUS, re.MULTILINE)\n\t\ttry:\n\t\t\thttp_status = int(regex.findall(response)[0])\n\t\texcept (KeyError, TypeError, IndexError):\n\t\t\tpass\n\treturn {\n\t\t'http_status': http_status,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tfailed",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tfailed = False\n\t\tregex = re.compile(CURL_REGEX_HTTP_STATUS, re.MULTILINE)\n\t\ttry:\n\t\t\thttp_status = int(regex.findall(response)[0])\n\t\texcept (KeyError, TypeError, IndexError):\n\t\t\tpass\n\treturn {\n\t\t'http_status': http_status,\n\t}\n@app.task(name='vulnerability_scan', queue='main_scan_queue', bind=True, base=RengineTask)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tregex",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tregex = re.compile(CURL_REGEX_HTTP_STATUS, re.MULTILINE)\n\t\ttry:\n\t\t\thttp_status = int(regex.findall(response)[0])\n\t\texcept (KeyError, TypeError, IndexError):\n\t\t\tpass\n\treturn {\n\t\t'http_status': http_status,\n\t}\n@app.task(name='vulnerability_scan', queue='main_scan_queue', bind=True, base=RengineTask)\ndef vulnerability_scan(self, urls=[], ctx={}, description=None):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thttp_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thttp_status = int(regex.findall(response)[0])\n\t\texcept (KeyError, TypeError, IndexError):\n\t\t\tpass\n\treturn {\n\t\t'http_status': http_status,\n\t}\n@app.task(name='vulnerability_scan', queue='main_scan_queue', bind=True, base=RengineTask)\ndef vulnerability_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"\n\t\tThis function will serve as an entrypoint to vulnerability scan.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\tshould_run_nuclei = config.get(RUN_NUCLEI, True)\n\tshould_run_crlfuzz = config.get(RUN_CRLFUZZ, False)\n\tshould_run_dalfox = config.get(RUN_DALFOX, False)\n\tshould_run_s3scanner = config.get(RUN_S3SCANNER, True)\n\tgrouped_tasks = []\n\tif should_run_nuclei:\n\t\t_task = nuclei_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tshould_run_nuclei",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tshould_run_nuclei = config.get(RUN_NUCLEI, True)\n\tshould_run_crlfuzz = config.get(RUN_CRLFUZZ, False)\n\tshould_run_dalfox = config.get(RUN_DALFOX, False)\n\tshould_run_s3scanner = config.get(RUN_S3SCANNER, True)\n\tgrouped_tasks = []\n\tif should_run_nuclei:\n\t\t_task = nuclei_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Nuclei Scan'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tshould_run_crlfuzz",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tshould_run_crlfuzz = config.get(RUN_CRLFUZZ, False)\n\tshould_run_dalfox = config.get(RUN_DALFOX, False)\n\tshould_run_s3scanner = config.get(RUN_S3SCANNER, True)\n\tgrouped_tasks = []\n\tif should_run_nuclei:\n\t\t_task = nuclei_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Nuclei Scan'\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tshould_run_dalfox",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tshould_run_dalfox = config.get(RUN_DALFOX, False)\n\tshould_run_s3scanner = config.get(RUN_S3SCANNER, True)\n\tgrouped_tasks = []\n\tif should_run_nuclei:\n\t\t_task = nuclei_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Nuclei Scan'\n\t\t)\n\t\tgrouped_tasks.append(_task)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tshould_run_s3scanner",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tshould_run_s3scanner = config.get(RUN_S3SCANNER, True)\n\tgrouped_tasks = []\n\tif should_run_nuclei:\n\t\t_task = nuclei_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Nuclei Scan'\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tif should_run_crlfuzz:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgrouped_tasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgrouped_tasks = []\n\tif should_run_nuclei:\n\t\t_task = nuclei_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Nuclei Scan'\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tif should_run_crlfuzz:\n\t\t_task = crlfuzz_scan.si(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = nuclei_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Nuclei Scan'\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tif should_run_crlfuzz:\n\t\t_task = crlfuzz_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = crlfuzz_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,\n\t\t\tdescription=f'CRLFuzz Scan'\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tif should_run_dalfox:\n\t\t_task = dalfox_xss_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = dalfox_xss_scan.si(\n\t\t\turls=urls,\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Dalfox XSS Scan'\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tif should_run_s3scanner:\n\t\t_task = s3scanner.si(\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Misconfigured S3 Buckets Scanner'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = s3scanner.si(\n\t\t\tctx=ctx,\n\t\t\tdescription=f'Misconfigured S3 Buckets Scanner'\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tcelery_group = group(grouped_tasks)\n\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcelery_group",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcelery_group = group(grouped_tasks)\n\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)\n\tlogger.info('Vulnerability scan completed...')\n\t# return results\n\treturn None\n@app.task(name='nuclei_individual_severity_module', queue='main_scan_queue', base=RengineTask, bind=True)\ndef nuclei_individual_severity_module(self, cmd, severity, enable_http_crawl, should_fetch_gpt_report, ctx={}, description=None):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tjob",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)\n\tlogger.info('Vulnerability scan completed...')\n\t# return results\n\treturn None\n@app.task(name='nuclei_individual_severity_module', queue='main_scan_queue', base=RengineTask, bind=True)\ndef nuclei_individual_severity_module(self, cmd, severity, enable_http_crawl, should_fetch_gpt_report, ctx={}, description=None):\n\t'''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\tlogger.info(f'Running vulnerability scan with severity: {severity}')\n\tcmd += f' -severity {severity}'\n\t# Send start notification\n\tnotif = Notification.objects.first()\n\tsend_status = notif.send_scan_status_notif if notif else False\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tsend_status = notif.send_scan_status_notif if notif else False\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id):\n\t\tif not isinstance(line, dict):\n\t\t\tcontinue\n\t\tresults.append(line)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsend_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsend_status = notif.send_scan_status_notif if notif else False\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id):\n\t\tif not isinstance(line, dict):\n\t\t\tcontinue\n\t\tresults.append(line)\n\t\t# Gather nuclei results",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_data = parse_nuclei_result(line)\n\t\t# Get corresponding subdomain\n\t\thttp_url = sanitize_url(line.get('matched-at'))\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t# TODO: this should be get only\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttp_url = sanitize_url(line.get('matched-at'))\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t# TODO: this should be get only\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\t# Look for duplicate vulnerabilities by excluding records that might change but are irrelevant.\n\t\tobject_comparison_exclude = ['response', 'curl_command', 'tags', 'references', 'cve_ids', 'cwe_ids']",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t# TODO: this should be get only\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\t# Look for duplicate vulnerabilities by excluding records that might change but are irrelevant.\n\t\tobject_comparison_exclude = ['response', 'curl_command', 'tags', 'references', 'cve_ids', 'cwe_ids']\n\t\t# Add subdomain and target domain to the duplicate check",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tobject_comparison_exclude",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tobject_comparison_exclude = ['response', 'curl_command', 'tags', 'references', 'cve_ids', 'cwe_ids']\n\t\t# Add subdomain and target domain to the duplicate check\n\t\tvuln_data_copy = vuln_data.copy()\n\t\tvuln_data_copy['subdomain'] = subdomain\n\t\tvuln_data_copy['target_domain'] = self.domain\n\t\t# Check if record exists, if exists do not save it\n\t\tif record_exists(Vulnerability, data=vuln_data_copy, exclude_keys=object_comparison_exclude):\n\t\t\tlogger.warning(f'Nuclei vulnerability of severity {severity} : {vuln_data_copy[\"name\"]} for {subdomain_name} already exists')\n\t\t\tcontinue\n\t\t# Get or create EndPoint object",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_data_copy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_data_copy = vuln_data.copy()\n\t\tvuln_data_copy['subdomain'] = subdomain\n\t\tvuln_data_copy['target_domain'] = self.domain\n\t\t# Check if record exists, if exists do not save it\n\t\tif record_exists(Vulnerability, data=vuln_data_copy, exclude_keys=object_comparison_exclude):\n\t\t\tlogger.warning(f'Nuclei vulnerability of severity {severity} : {vuln_data_copy[\"name\"]} for {subdomain_name} already exists')\n\t\t\tcontinue\n\t\t# Get or create EndPoint object\n\t\tresponse = line.get('response')\n\t\thttpx_crawl = False if response else enable_http_crawl # avoid yet another httpx crawl",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_data_copy['subdomain']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_data_copy['subdomain'] = subdomain\n\t\tvuln_data_copy['target_domain'] = self.domain\n\t\t# Check if record exists, if exists do not save it\n\t\tif record_exists(Vulnerability, data=vuln_data_copy, exclude_keys=object_comparison_exclude):\n\t\t\tlogger.warning(f'Nuclei vulnerability of severity {severity} : {vuln_data_copy[\"name\"]} for {subdomain_name} already exists')\n\t\t\tcontinue\n\t\t# Get or create EndPoint object\n\t\tresponse = line.get('response')\n\t\thttpx_crawl = False if response else enable_http_crawl # avoid yet another httpx crawl\n\t\tendpoint, _ = save_endpoint(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_data_copy['target_domain']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_data_copy['target_domain'] = self.domain\n\t\t# Check if record exists, if exists do not save it\n\t\tif record_exists(Vulnerability, data=vuln_data_copy, exclude_keys=object_comparison_exclude):\n\t\t\tlogger.warning(f'Nuclei vulnerability of severity {severity} : {vuln_data_copy[\"name\"]} for {subdomain_name} already exists')\n\t\t\tcontinue\n\t\t# Get or create EndPoint object\n\t\tresponse = line.get('response')\n\t\thttpx_crawl = False if response else enable_http_crawl # avoid yet another httpx crawl\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tresponse = line.get('response')\n\t\thttpx_crawl = False if response else enable_http_crawl # avoid yet another httpx crawl\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=httpx_crawl,\n\t\t\tsubdomain=subdomain,\n\t\t\tctx=ctx)\n\t\tif endpoint:\n\t\t\thttp_url = endpoint.http_url\n\t\t\tif not httpx_crawl:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttpx_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttpx_crawl = False if response else enable_http_crawl # avoid yet another httpx crawl\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=httpx_crawl,\n\t\t\tsubdomain=subdomain,\n\t\t\tctx=ctx)\n\t\tif endpoint:\n\t\t\thttp_url = endpoint.http_url\n\t\t\tif not httpx_crawl:\n\t\t\t\toutput = parse_curl_output(response)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thttp_url = endpoint.http_url\n\t\t\tif not httpx_crawl:\n\t\t\t\toutput = parse_curl_output(response)\n\t\t\t\tendpoint.http_status = output['http_status']\n\t\t\t\tendpoint.save()\n\t\t# Get or create Vulnerability object\n\t\tvuln, _ = save_vulnerability(\n\t\t\ttarget_domain=self.domain,\n\t\t\thttp_url=http_url,\n\t\t\tscan_history=self.scan,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\toutput",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\toutput = parse_curl_output(response)\n\t\t\t\tendpoint.http_status = output['http_status']\n\t\t\t\tendpoint.save()\n\t\t# Get or create Vulnerability object\n\t\tvuln, _ = save_vulnerability(\n\t\t\ttarget_domain=self.domain,\n\t\t\thttp_url=http_url,\n\t\t\tscan_history=self.scan,\n\t\t\tsubscan=self.subscan,\n\t\t\tsubdomain=subdomain,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tendpoint.http_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tendpoint.http_status = output['http_status']\n\t\t\t\tendpoint.save()\n\t\t# Get or create Vulnerability object\n\t\tvuln, _ = save_vulnerability(\n\t\t\ttarget_domain=self.domain,\n\t\t\thttp_url=http_url,\n\t\t\tscan_history=self.scan,\n\t\t\tsubscan=self.subscan,\n\t\t\tsubdomain=subdomain,\n\t\t\t**vuln_data)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tseverity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tseverity = line['info'].get('severity', 'unknown')\n\t\tlogger.warning(str(vuln))\n\t\t# Send notification for all vulnerabilities except info\n\t\turl = vuln.http_url or vuln.subdomain\n\t\tsend_vuln = (\n\t\t\tnotif and\n\t\t\tnotif.send_vuln_notif and\n\t\t\tvuln and\n\t\t\tseverity in ['low', 'medium', 'high', 'critical'])\n\t\tif send_vuln:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turl = vuln.http_url or vuln.subdomain\n\t\tsend_vuln = (\n\t\t\tnotif and\n\t\t\tnotif.send_vuln_notif and\n\t\t\tvuln and\n\t\t\tseverity in ['low', 'medium', 'high', 'critical'])\n\t\tif send_vuln:\n\t\t\tfields = {\n\t\t\t\t'Severity': f'**{severity.upper()}**',\n\t\t\t\t'URL': http_url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsend_vuln",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsend_vuln = (\n\t\t\tnotif and\n\t\t\tnotif.send_vuln_notif and\n\t\t\tvuln and\n\t\t\tseverity in ['low', 'medium', 'high', 'critical'])\n\t\tif send_vuln:\n\t\t\tfields = {\n\t\t\t\t'Severity': f'**{severity.upper()}**',\n\t\t\t\t'URL': http_url,\n\t\t\t\t'Subdomain': subdomain_name,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tfields",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tfields = {\n\t\t\t\t'Severity': f'**{severity.upper()}**',\n\t\t\t\t'URL': http_url,\n\t\t\t\t'Subdomain': subdomain_name,\n\t\t\t\t'Name': vuln.name,\n\t\t\t\t'Type': vuln.type,\n\t\t\t\t'Description': vuln.description,\n\t\t\t\t'Template': vuln.template_url,\n\t\t\t\t'Tags': vuln.get_tags_str(),\n\t\t\t\t'CVEs': vuln.get_cve_str(),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tseverity_map",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tseverity_map = {\n\t\t\t\t'low': 'info',\n\t\t\t\t'medium': 'warning',\n\t\t\t\t'high': 'error',\n\t\t\t\t'critical': 'error'\n\t\t\t}\n\t\t\tself.notify(\n\t\t\t\tf'vulnerability_scan_#{vuln.id}',\n\t\t\t\tseverity_map[severity],\n\t\t\t\tfields,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thackerone_query",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thackerone_query = Hackerone.objects.filter(send_report=True)\n\t\tapi_key_check_query = HackerOneAPIKey.objects.filter(\n\t\t\tQ(username__isnull=False) & Q(key__isnull=False)\n\t\t)\n\t\tsend_report = (\n\t\t\thackerone_query.exists() and\n\t\t\tapi_key_check_query.exists() and\n\t\t\tseverity not in ('info', 'low') and\n\t\t\tvuln.target_domain.h1_team_handle\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tapi_key_check_query",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tapi_key_check_query = HackerOneAPIKey.objects.filter(\n\t\t\tQ(username__isnull=False) & Q(key__isnull=False)\n\t\t)\n\t\tsend_report = (\n\t\t\thackerone_query.exists() and\n\t\t\tapi_key_check_query.exists() and\n\t\t\tseverity not in ('info', 'low') and\n\t\t\tvuln.target_domain.h1_team_handle\n\t\t)\n\t\tif send_report:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsend_report",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsend_report = (\n\t\t\thackerone_query.exists() and\n\t\t\tapi_key_check_query.exists() and\n\t\t\tseverity not in ('info', 'low') and\n\t\t\tvuln.target_domain.h1_team_handle\n\t\t)\n\t\tif send_report:\n\t\t\thackerone = hackerone_query.first()\n\t\t\tif hackerone.send_critical and severity == 'critical':\n\t\t\t\tsend_hackerone_report.delay(vuln.id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thackerone",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thackerone = hackerone_query.first()\n\t\t\tif hackerone.send_critical and severity == 'critical':\n\t\t\t\tsend_hackerone_report.delay(vuln.id)\n\t\t\telif hackerone.send_high and severity == 'high':\n\t\t\t\tsend_hackerone_report.delay(vuln.id)\n\t\t\telif hackerone.send_medium and severity == 'medium':\n\t\t\t\tsend_hackerone_report.delay(vuln.id)\n\t# Write results to JSON file\n\twith open(self.output_path, 'w') as f:\n\t\tjson.dump(results, f, indent=4)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulns = Vulnerability.objects.filter(scan_history__id=self.scan_id)\n\t\tinfo_count = vulns.filter(severity=0).count()\n\t\tlow_count = vulns.filter(severity=1).count()\n\t\tmedium_count = vulns.filter(severity=2).count()\n\t\thigh_count = vulns.filter(severity=3).count()\n\t\tcritical_count = vulns.filter(severity=4).count()\n\t\tunknown_count = vulns.filter(severity=-1).count()\n\t\tvulnerability_count = info_count + low_count + medium_count + high_count + critical_count + unknown_count\n\t\tfields = {\n\t\t\t'Total': vulnerability_count,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tinfo_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tinfo_count = vulns.filter(severity=0).count()\n\t\tlow_count = vulns.filter(severity=1).count()\n\t\tmedium_count = vulns.filter(severity=2).count()\n\t\thigh_count = vulns.filter(severity=3).count()\n\t\tcritical_count = vulns.filter(severity=4).count()\n\t\tunknown_count = vulns.filter(severity=-1).count()\n\t\tvulnerability_count = info_count + low_count + medium_count + high_count + critical_count + unknown_count\n\t\tfields = {\n\t\t\t'Total': vulnerability_count,\n\t\t\t'Critical': critical_count,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tlow_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tlow_count = vulns.filter(severity=1).count()\n\t\tmedium_count = vulns.filter(severity=2).count()\n\t\thigh_count = vulns.filter(severity=3).count()\n\t\tcritical_count = vulns.filter(severity=4).count()\n\t\tunknown_count = vulns.filter(severity=-1).count()\n\t\tvulnerability_count = info_count + low_count + medium_count + high_count + critical_count + unknown_count\n\t\tfields = {\n\t\t\t'Total': vulnerability_count,\n\t\t\t'Critical': critical_count,\n\t\t\t'High': high_count,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tmedium_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tmedium_count = vulns.filter(severity=2).count()\n\t\thigh_count = vulns.filter(severity=3).count()\n\t\tcritical_count = vulns.filter(severity=4).count()\n\t\tunknown_count = vulns.filter(severity=-1).count()\n\t\tvulnerability_count = info_count + low_count + medium_count + high_count + critical_count + unknown_count\n\t\tfields = {\n\t\t\t'Total': vulnerability_count,\n\t\t\t'Critical': critical_count,\n\t\t\t'High': high_count,\n\t\t\t'Medium': medium_count,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thigh_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thigh_count = vulns.filter(severity=3).count()\n\t\tcritical_count = vulns.filter(severity=4).count()\n\t\tunknown_count = vulns.filter(severity=-1).count()\n\t\tvulnerability_count = info_count + low_count + medium_count + high_count + critical_count + unknown_count\n\t\tfields = {\n\t\t\t'Total': vulnerability_count,\n\t\t\t'Critical': critical_count,\n\t\t\t'High': high_count,\n\t\t\t'Medium': medium_count,\n\t\t\t'Low': low_count,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcritical_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcritical_count = vulns.filter(severity=4).count()\n\t\tunknown_count = vulns.filter(severity=-1).count()\n\t\tvulnerability_count = info_count + low_count + medium_count + high_count + critical_count + unknown_count\n\t\tfields = {\n\t\t\t'Total': vulnerability_count,\n\t\t\t'Critical': critical_count,\n\t\t\t'High': high_count,\n\t\t\t'Medium': medium_count,\n\t\t\t'Low': low_count,\n\t\t\t'Info': info_count,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tunknown_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tunknown_count = vulns.filter(severity=-1).count()\n\t\tvulnerability_count = info_count + low_count + medium_count + high_count + critical_count + unknown_count\n\t\tfields = {\n\t\t\t'Total': vulnerability_count,\n\t\t\t'Critical': critical_count,\n\t\t\t'High': high_count,\n\t\t\t'Medium': medium_count,\n\t\t\t'Low': low_count,\n\t\t\t'Info': info_count,\n\t\t\t'Unknown': unknown_count",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability_count",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulnerability_count = info_count + low_count + medium_count + high_count + critical_count + unknown_count\n\t\tfields = {\n\t\t\t'Total': vulnerability_count,\n\t\t\t'Critical': critical_count,\n\t\t\t'High': high_count,\n\t\t\t'Medium': medium_count,\n\t\t\t'Low': low_count,\n\t\t\t'Info': info_count,\n\t\t\t'Unknown': unknown_count\n\t\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tfields = {\n\t\t\t'Total': vulnerability_count,\n\t\t\t'Critical': critical_count,\n\t\t\t'High': high_count,\n\t\t\t'Medium': medium_count,\n\t\t\t'Low': low_count,\n\t\t\t'Info': info_count,\n\t\t\t'Unknown': unknown_count\n\t\t}\n\t\tself.notify(fields=fields)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulns = Vulnerability.objects.filter(\n\t\t\tscan_history__id=self.scan_id\n\t\t).filter(\n\t\t\tsource=NUCLEI\n\t\t).exclude(\n\t\t\tseverity=0\n\t\t)\n\t\t# find all unique vulnerabilities based on path and title\n\t\t# all unique vulnerability will go thru gpt function and get report\n\t\t# once report is got, it will be matched with other vulnerabilities and saved",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tunique_vulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tunique_vulns = set()\n\t\tfor vuln in vulns:\n\t\t\tunique_vulns.add((vuln.name, vuln.get_path()))\n\t\tunique_vulns = list(unique_vulns)\n\t\twith concurrent.futures.ThreadPoolExecutor(max_workers=DEFAULT_THREADS) as executor:\n\t\t\tfuture_to_gpt = {executor.submit(get_vulnerability_gpt_report, vuln): vuln for vuln in unique_vulns}\n\t\t\t# Wait for all tasks to complete\n\t\t\tfor future in concurrent.futures.as_completed(future_to_gpt):\n\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tunique_vulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tunique_vulns = list(unique_vulns)\n\t\twith concurrent.futures.ThreadPoolExecutor(max_workers=DEFAULT_THREADS) as executor:\n\t\t\tfuture_to_gpt = {executor.submit(get_vulnerability_gpt_report, vuln): vuln for vuln in unique_vulns}\n\t\t\t# Wait for all tasks to complete\n\t\t\tfor future in concurrent.futures.as_completed(future_to_gpt):\n\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f\"Exception for Vulnerability {vuln}: {e}\")",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tfuture_to_gpt",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tfuture_to_gpt = {executor.submit(get_vulnerability_gpt_report, vuln): vuln for vuln in unique_vulns}\n\t\t\t# Wait for all tasks to complete\n\t\t\tfor future in concurrent.futures.as_completed(future_to_gpt):\n\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f\"Exception for Vulnerability {vuln}: {e}\")\n\t\treturn None\ndef get_vulnerability_gpt_report(vuln):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tgpt",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f\"Exception for Vulnerability {vuln}: {e}\")\n\t\treturn None\ndef get_vulnerability_gpt_report(vuln):\n\ttitle = vuln[0]\n\tpath = vuln[1]\n\tif not path:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttitle = vuln[0]\n\tpath = vuln[1]\n\tif not path:\n\t\tpath = '/'\n\tlogger.info(f'Getting GPT Report for {title}, PATH: {path}')\n\t# check if in db already exists\n\tstored = GPTVulnerabilityReport.objects.filter(\n\t\turl_path=path\n\t).filter(\n\t\ttitle=title",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tpath",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tpath = vuln[1]\n\tif not path:\n\t\tpath = '/'\n\tlogger.info(f'Getting GPT Report for {title}, PATH: {path}')\n\t# check if in db already exists\n\tstored = GPTVulnerabilityReport.objects.filter(\n\t\turl_path=path\n\t).filter(\n\t\ttitle=title\n\t).first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tpath = '/'\n\tlogger.info(f'Getting GPT Report for {title}, PATH: {path}')\n\t# check if in db already exists\n\tstored = GPTVulnerabilityReport.objects.filter(\n\t\turl_path=path\n\t).filter(\n\t\ttitle=title\n\t).first()\n\tif stored and stored.description and stored.impact and stored.remediation:\n\t\tresponse = {",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tstored",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tstored = GPTVulnerabilityReport.objects.filter(\n\t\turl_path=path\n\t).filter(\n\t\ttitle=title\n\t).first()\n\tif stored and stored.description and stored.impact and stored.remediation:\n\t\tresponse = {\n\t\t\t'description': stored.description,\n\t\t\t'impact': stored.impact,\n\t\t\t'remediation': stored.remediation,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tresponse = {\n\t\t\t'description': stored.description,\n\t\t\t'impact': stored.impact,\n\t\t\t'remediation': stored.remediation,\n\t\t\t'references': [url.url for url in stored.references.all()]\n\t\t}\n\telse:\n\t\treport = LLMVulnerabilityReportGenerator(logger=logger)\n\t\tvulnerability_description = get_gpt_vuln_input_description(\n\t\t\ttitle,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\treport",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\treport = LLMVulnerabilityReportGenerator(logger=logger)\n\t\tvulnerability_description = get_gpt_vuln_input_description(\n\t\t\ttitle,\n\t\t\tpath\n\t\t)\n\t\tresponse = report.get_vulnerability_description(vulnerability_description)\n\t\tadd_gpt_description_db(\n\t\t\ttitle,\n\t\t\tpath,\n\t\t\tresponse.get('description'),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability_description",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulnerability_description = get_gpt_vuln_input_description(\n\t\t\ttitle,\n\t\t\tpath\n\t\t)\n\t\tresponse = report.get_vulnerability_description(vulnerability_description)\n\t\tadd_gpt_description_db(\n\t\t\ttitle,\n\t\t\tpath,\n\t\t\tresponse.get('description'),\n\t\t\tresponse.get('impact'),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tresponse = report.get_vulnerability_description(vulnerability_description)\n\t\tadd_gpt_description_db(\n\t\t\ttitle,\n\t\t\tpath,\n\t\t\tresponse.get('description'),\n\t\t\tresponse.get('impact'),\n\t\t\tresponse.get('remediation'),\n\t\t\tresponse.get('references', [])\n\t\t)\n\tfor vuln in Vulnerability.objects.filter(name=title, http_url__icontains=path):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.description",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.description = response.get('description', vuln.description)\n\t\tvuln.impact = response.get('impact')\n\t\tvuln.remediation = response.get('remediation')\n\t\tvuln.is_gpt_used = True\n\t\tvuln.save()\n\t\tfor url in response.get('references', []):\n\t\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\t\tvuln.references.add(ref)\n\t\t\tvuln.save()\ndef add_gpt_description_db(title, path, description, impact, remediation, references):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.impact",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.impact = response.get('impact')\n\t\tvuln.remediation = response.get('remediation')\n\t\tvuln.is_gpt_used = True\n\t\tvuln.save()\n\t\tfor url in response.get('references', []):\n\t\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\t\tvuln.references.add(ref)\n\t\t\tvuln.save()\ndef add_gpt_description_db(title, path, description, impact, remediation, references):\n\tlogger.info(f'Adding GPT Report to DB for {title}, PATH: {path}')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.remediation",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.remediation = response.get('remediation')\n\t\tvuln.is_gpt_used = True\n\t\tvuln.save()\n\t\tfor url in response.get('references', []):\n\t\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\t\tvuln.references.add(ref)\n\t\t\tvuln.save()\ndef add_gpt_description_db(title, path, description, impact, remediation, references):\n\tlogger.info(f'Adding GPT Report to DB for {title}, PATH: {path}')\n\tif not path:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.is_gpt_used",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.is_gpt_used = True\n\t\tvuln.save()\n\t\tfor url in response.get('references', []):\n\t\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\t\tvuln.references.add(ref)\n\t\t\tvuln.save()\ndef add_gpt_description_db(title, path, description, impact, remediation, references):\n\tlogger.info(f'Adding GPT Report to DB for {title}, PATH: {path}')\n\tif not path:\n\t\tpath = '/'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tpath = '/'\n\tgpt_report = GPTVulnerabilityReport()\n\tgpt_report.url_path = path\n\tgpt_report.title = title\n\tgpt_report.description = description\n\tgpt_report.impact = impact\n\tgpt_report.remediation = remediation\n\tgpt_report.save()\n\tfor url in references:\n\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgpt_report",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgpt_report = GPTVulnerabilityReport()\n\tgpt_report.url_path = path\n\tgpt_report.title = title\n\tgpt_report.description = description\n\tgpt_report.impact = impact\n\tgpt_report.remediation = remediation\n\tgpt_report.save()\n\tfor url in references:\n\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\tgpt_report.references.add(ref)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgpt_report.url_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgpt_report.url_path = path\n\tgpt_report.title = title\n\tgpt_report.description = description\n\tgpt_report.impact = impact\n\tgpt_report.remediation = remediation\n\tgpt_report.save()\n\tfor url in references:\n\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\tgpt_report.references.add(ref)\n\t\tgpt_report.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgpt_report.title",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgpt_report.title = title\n\tgpt_report.description = description\n\tgpt_report.impact = impact\n\tgpt_report.remediation = remediation\n\tgpt_report.save()\n\tfor url in references:\n\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\tgpt_report.references.add(ref)\n\t\tgpt_report.save()\n@app.task(name='nuclei_scan', queue='main_scan_queue', base=RengineTask, bind=True)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgpt_report.description",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgpt_report.description = description\n\tgpt_report.impact = impact\n\tgpt_report.remediation = remediation\n\tgpt_report.save()\n\tfor url in references:\n\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\tgpt_report.references.add(ref)\n\t\tgpt_report.save()\n@app.task(name='nuclei_scan', queue='main_scan_queue', base=RengineTask, bind=True)\ndef nuclei_scan(self, urls=[], ctx={}, description=None):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgpt_report.impact",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgpt_report.impact = impact\n\tgpt_report.remediation = remediation\n\tgpt_report.save()\n\tfor url in references:\n\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\tgpt_report.references.add(ref)\n\t\tgpt_report.save()\n@app.task(name='nuclei_scan', queue='main_scan_queue', base=RengineTask, bind=True)\ndef nuclei_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"HTTP vulnerability scan using Nuclei",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgpt_report.remediation",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgpt_report.remediation = remediation\n\tgpt_report.save()\n\tfor url in references:\n\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\tgpt_report.references.add(ref)\n\t\tgpt_report.save()\n@app.task(name='nuclei_scan', queue='main_scan_queue', base=RengineTask, bind=True)\ndef nuclei_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"HTTP vulnerability scan using Nuclei\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconfig",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconfig = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\tinput_path = f'{self.results_dir}/input_endpoints_vulnerability_scan.txt'\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tconcurrency = config.get(NUCLEI_CONCURRENCY) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tretries = config.get(RETRIES) or self.yaml_configuration.get(RETRIES, DEFAULT_RETRIES)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{self.results_dir}/input_endpoints_vulnerability_scan.txt'\n\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tconcurrency = config.get(NUCLEI_CONCURRENCY) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tretries = config.get(RETRIES) or self.yaml_configuration.get(RETRIES, DEFAULT_RETRIES)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tenable_http_crawl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tenable_http_crawl = config.get(ENABLE_HTTP_CRAWL, DEFAULT_ENABLE_HTTP_CRAWL)\n\tconcurrency = config.get(NUCLEI_CONCURRENCY) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tretries = config.get(RETRIES) or self.yaml_configuration.get(RETRIES, DEFAULT_RETRIES)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, ",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tconcurrency",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tconcurrency = config.get(NUCLEI_CONCURRENCY) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tretries = config.get(RETRIES) or self.yaml_configuration.get(RETRIES, DEFAULT_RETRIES)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tintensity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tintensity = config.get(INTENSITY) or self.yaml_configuration.get(INTENSITY, DEFAULT_SCAN_INTENSITY)\n\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tretries = config.get(RETRIES) or self.yaml_configuration.get(RETRIES, DEFAULT_RETRIES)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\trate_limit",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\trate_limit = config.get(RATE_LIMIT) or self.yaml_configuration.get(RATE_LIMIT, DEFAULT_RATE_LIMIT)\n\tretries = config.get(RETRIES) or self.yaml_configuration.get(RETRIES, DEFAULT_RETRIES)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tretries",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tretries = config.get(RETRIES) or self.yaml_configuration.get(RETRIES, DEFAULT_RETRIES)\n\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttimeout",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttimeout = config.get(TIMEOUT) or self.yaml_configuration.get(TIMEOUT, DEFAULT_HTTP_TIMEOUT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_header",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\tshould_fetch_gpt_report = config.get(FETCH_GPT_REPORT, DEFAULT_GET_GPT_REPORT)\n\tproxy = get_random_proxy()\n\tnuclei_specific_config = config.get('nuclei', {})\n\tuse_nuclei_conf = nuclei_specific_config.get(USE_NUCLEI_CONFIG, False)\n\tseverities = nuclei_specific_config.get(NUCLEI_SEVERITY, NUCLEI_DEFAULT_SEVERITIES)\n\ttags = nuclei_specific_config.get(NUCLEI_TAGS, [])\n\ttags = ','.join(tags)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tshould_fetch_gpt_report",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tshould_fetch_gpt_report = config.get(FETCH_GPT_REPORT, DEFAULT_GET_GPT_REPORT)\n\tproxy = get_random_proxy()\n\tnuclei_specific_config = config.get('nuclei', {})\n\tuse_nuclei_conf = nuclei_specific_config.get(USE_NUCLEI_CONFIG, False)\n\tseverities = nuclei_specific_config.get(NUCLEI_SEVERITY, NUCLEI_DEFAULT_SEVERITIES)\n\ttags = nuclei_specific_config.get(NUCLEI_TAGS, [])\n\ttags = ','.join(tags)\n\tnuclei_templates = nuclei_specific_config.get(NUCLEI_TEMPLATE)\n\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tproxy = get_random_proxy()\n\tnuclei_specific_config = config.get('nuclei', {})\n\tuse_nuclei_conf = nuclei_specific_config.get(USE_NUCLEI_CONFIG, False)\n\tseverities = nuclei_specific_config.get(NUCLEI_SEVERITY, NUCLEI_DEFAULT_SEVERITIES)\n\ttags = nuclei_specific_config.get(NUCLEI_TAGS, [])\n\ttags = ','.join(tags)\n\tnuclei_templates = nuclei_specific_config.get(NUCLEI_TEMPLATE)\n\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)\n\t# Get alive endpoints",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnuclei_specific_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnuclei_specific_config = config.get('nuclei', {})\n\tuse_nuclei_conf = nuclei_specific_config.get(USE_NUCLEI_CONFIG, False)\n\tseverities = nuclei_specific_config.get(NUCLEI_SEVERITY, NUCLEI_DEFAULT_SEVERITIES)\n\ttags = nuclei_specific_config.get(NUCLEI_TAGS, [])\n\ttags = ','.join(tags)\n\tnuclei_templates = nuclei_specific_config.get(NUCLEI_TEMPLATE)\n\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)\n\t# Get alive endpoints\n\tif urls:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tuse_nuclei_conf",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tuse_nuclei_conf = nuclei_specific_config.get(USE_NUCLEI_CONFIG, False)\n\tseverities = nuclei_specific_config.get(NUCLEI_SEVERITY, NUCLEI_DEFAULT_SEVERITIES)\n\ttags = nuclei_specific_config.get(NUCLEI_TAGS, [])\n\ttags = ','.join(tags)\n\tnuclei_templates = nuclei_specific_config.get(NUCLEI_TEMPLATE)\n\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)\n\t# Get alive endpoints\n\tif urls:\n\t\twith open(input_path, 'w') as f:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tseverities",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tseverities = nuclei_specific_config.get(NUCLEI_SEVERITY, NUCLEI_DEFAULT_SEVERITIES)\n\ttags = nuclei_specific_config.get(NUCLEI_TAGS, [])\n\ttags = ','.join(tags)\n\tnuclei_templates = nuclei_specific_config.get(NUCLEI_TEMPLATE)\n\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)\n\t# Get alive endpoints\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttags",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttags = nuclei_specific_config.get(NUCLEI_TAGS, [])\n\ttags = ','.join(tags)\n\tnuclei_templates = nuclei_specific_config.get(NUCLEI_TEMPLATE)\n\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)\n\t# Get alive endpoints\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttags",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttags = ','.join(tags)\n\tnuclei_templates = nuclei_specific_config.get(NUCLEI_TEMPLATE)\n\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)\n\t# Get alive endpoints\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnuclei_templates",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnuclei_templates = nuclei_specific_config.get(NUCLEI_TEMPLATE)\n\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)\n\t# Get alive endpoints\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=enable_http_crawl,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_nuclei_templates",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_nuclei_templates = nuclei_specific_config.get(NUCLEI_CUSTOM_TEMPLATE)\n\t# severities_str = ','.join(severities)\n\t# Get alive endpoints\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=enable_http_crawl,\n\t\t\tignore_files=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tunfurl_filter",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tunfurl_filter = f'{self.results_dir}/urls_unfurled.txt'\n\t\trun_command(\n\t\t\tf\"cat {input_path} | unfurl -u format %s://%d%p |uro > {unfurl_filter}\",\n\t\t\tshell=True,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id)\n\t\trun_command(\n\t\t\tf'sort -u {unfurl_filter} -o  {unfurl_filter}',\n\t\t\tshell=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tinput_path = unfurl_filter\n\t# Build templates\n\t# logger.info('Updating Nuclei templates ...')\n\trun_command(\n\t\t'nuclei -update-templates',\n\t\tshell=True,\n\t\thistory_file=self.history_file,\n\t\tscan_id=self.scan_id,\n\t\tactivity_id=self.activity_id)\n\ttemplates = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttemplates",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttemplates = []\n\tif not (nuclei_templates or custom_nuclei_templates):\n\t\ttemplates.append(NUCLEI_DEFAULT_TEMPLATES_PATH)\n\tif nuclei_templates:\n\t\tif ALL in nuclei_templates:\n\t\t\ttemplate = NUCLEI_DEFAULT_TEMPLATES_PATH\n\t\t\ttemplates.append(template)\n\t\telse:\n\t\t\ttemplates.extend(nuclei_templates)\n\tif custom_nuclei_templates:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\ttemplate",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\ttemplate = NUCLEI_DEFAULT_TEMPLATES_PATH\n\t\t\ttemplates.append(template)\n\t\telse:\n\t\t\ttemplates.extend(nuclei_templates)\n\tif custom_nuclei_templates:\n\t\tcustom_nuclei_template_paths = [f'{str(elem)}.yaml' for elem in custom_nuclei_templates]\n\t\ttemplate = templates.extend(custom_nuclei_template_paths)\n\t# Build CMD\n\tcmd = 'nuclei -j'\n\tcmd += ' -config /root/.config/nuclei/config.yaml' if use_nuclei_conf else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcustom_nuclei_template_paths",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcustom_nuclei_template_paths = [f'{str(elem)}.yaml' for elem in custom_nuclei_templates]\n\t\ttemplate = templates.extend(custom_nuclei_template_paths)\n\t# Build CMD\n\tcmd = 'nuclei -j'\n\tcmd += ' -config /root/.config/nuclei/config.yaml' if use_nuclei_conf else ''\n\tcmd += f' -irr'\n\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -l {input_path}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttemplate",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttemplate = templates.extend(custom_nuclei_template_paths)\n\t# Build CMD\n\tcmd = 'nuclei -j'\n\tcmd += ' -config /root/.config/nuclei/config.yaml' if use_nuclei_conf else ''\n\tcmd += f' -irr'\n\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -l {input_path}'\n\tcmd += f' -c {str(concurrency)}' if concurrency > 0 else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = 'nuclei -j'\n\tcmd += ' -config /root/.config/nuclei/config.yaml' if use_nuclei_conf else ''\n\tcmd += f' -irr'\n\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -l {input_path}'\n\tcmd += f' -c {str(concurrency)}' if concurrency > 0 else ''\n\tcmd += f' -proxy {proxy} ' if proxy else ''\n\tcmd += f' -retries {retries}' if retries > 0 else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tformatted_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -l {input_path}'\n\tcmd += f' -c {str(concurrency)}' if concurrency > 0 else ''\n\tcmd += f' -proxy {proxy} ' if proxy else ''\n\tcmd += f' -retries {retries}' if retries > 0 else ''\n\tcmd += f' -rl {rate_limit}' if rate_limit > 0 else ''\n\t# cmd += f' -severity {severities_str}'\n\tcmd += f' -timeout {str(timeout)}' if timeout and timeout > 0 else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgrouped_tasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgrouped_tasks = []\n\tcustom_ctx = ctx\n\tfor severity in severities:\n\t\tcustom_ctx['track'] = True\n\t\t_task = nuclei_individual_severity_module.si(\n\t\t\tcmd,\n\t\t\tseverity,\n\t\t\tenable_http_crawl,\n\t\t\tshould_fetch_gpt_report,\n\t\t\tctx=custom_ctx,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_ctx",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_ctx = ctx\n\tfor severity in severities:\n\t\tcustom_ctx['track'] = True\n\t\t_task = nuclei_individual_severity_module.si(\n\t\t\tcmd,\n\t\t\tseverity,\n\t\t\tenable_http_crawl,\n\t\t\tshould_fetch_gpt_report,\n\t\t\tctx=custom_ctx,\n\t\t\tdescription=f'Nuclei Scan with severity {severity}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcustom_ctx['track']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcustom_ctx['track'] = True\n\t\t_task = nuclei_individual_severity_module.si(\n\t\t\tcmd,\n\t\t\tseverity,\n\t\t\tenable_http_crawl,\n\t\t\tshould_fetch_gpt_report,\n\t\t\tctx=custom_ctx,\n\t\t\tdescription=f'Nuclei Scan with severity {severity}'\n\t\t)\n\t\tgrouped_tasks.append(_task)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_task",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_task = nuclei_individual_severity_module.si(\n\t\t\tcmd,\n\t\t\tseverity,\n\t\t\tenable_http_crawl,\n\t\t\tshould_fetch_gpt_report,\n\t\t\tctx=custom_ctx,\n\t\t\tdescription=f'Nuclei Scan with severity {severity}'\n\t\t)\n\t\tgrouped_tasks.append(_task)\n\tcelery_group = group(grouped_tasks)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcelery_group",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcelery_group = group(grouped_tasks)\n\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)\n\tlogger.info('Vulnerability scan with all severities completed...')\n\treturn None\n@app.task(name='dalfox_xss_scan', queue='main_scan_queue', base=RengineTask, bind=True)\ndef dalfox_xss_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"XSS Scan using dalfox",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tjob",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tjob = celery_group.apply_async()\n\twhile not job.ready():\n\t\t# wait for all jobs to complete\n\t\ttime.sleep(5)\n\tlogger.info('Vulnerability scan with all severities completed...')\n\treturn None\n@app.task(name='dalfox_xss_scan', queue='main_scan_queue', base=RengineTask, bind=True)\ndef dalfox_xss_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"XSS Scan using dalfox\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_config = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\tshould_fetch_gpt_report = vuln_config.get(FETCH_GPT_REPORT, DEFAULT_GET_GPT_REPORT)\n\tdalfox_config = vuln_config.get(DALFOX) or {}\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tshould_fetch_gpt_report",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tshould_fetch_gpt_report = vuln_config.get(FETCH_GPT_REPORT, DEFAULT_GET_GPT_REPORT)\n\tdalfox_config = vuln_config.get(DALFOX) or {}\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdalfox_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdalfox_config = vuln_config.get(DALFOX) or {}\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_header",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\tproxy = get_random_proxy()\n\tis_waf_evasion = dalfox_config.get(WAF_EVASION, False)\n\tblind_xss_server = dalfox_config.get(BLIND_XSS_SERVER)\n\tuser_agent = dalfox_config.get(USER_AGENT) or self.yaml_configuration.get(USER_AGENT)\n\ttimeout = dalfox_config.get(TIMEOUT)\n\tdelay = dalfox_config.get(DELAY)\n\tthreads = dalfox_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tproxy = get_random_proxy()\n\tis_waf_evasion = dalfox_config.get(WAF_EVASION, False)\n\tblind_xss_server = dalfox_config.get(BLIND_XSS_SERVER)\n\tuser_agent = dalfox_config.get(USER_AGENT) or self.yaml_configuration.get(USER_AGENT)\n\ttimeout = dalfox_config.get(TIMEOUT)\n\tdelay = dalfox_config.get(DELAY)\n\tthreads = dalfox_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_dalfox_xss.txt'\n\tif urls:\n\t\twith open(input_path, 'w') as f:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tis_waf_evasion",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tis_waf_evasion = dalfox_config.get(WAF_EVASION, False)\n\tblind_xss_server = dalfox_config.get(BLIND_XSS_SERVER)\n\tuser_agent = dalfox_config.get(USER_AGENT) or self.yaml_configuration.get(USER_AGENT)\n\ttimeout = dalfox_config.get(TIMEOUT)\n\tdelay = dalfox_config.get(DELAY)\n\tthreads = dalfox_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_dalfox_xss.txt'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tblind_xss_server",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tblind_xss_server = dalfox_config.get(BLIND_XSS_SERVER)\n\tuser_agent = dalfox_config.get(USER_AGENT) or self.yaml_configuration.get(USER_AGENT)\n\ttimeout = dalfox_config.get(TIMEOUT)\n\tdelay = dalfox_config.get(DELAY)\n\tthreads = dalfox_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_dalfox_xss.txt'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tuser_agent",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tuser_agent = dalfox_config.get(USER_AGENT) or self.yaml_configuration.get(USER_AGENT)\n\ttimeout = dalfox_config.get(TIMEOUT)\n\tdelay = dalfox_config.get(DELAY)\n\tthreads = dalfox_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_dalfox_xss.txt'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttimeout",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttimeout = dalfox_config.get(TIMEOUT)\n\tdelay = dalfox_config.get(DELAY)\n\tthreads = dalfox_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_dalfox_xss.txt'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=False,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdelay",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdelay = dalfox_config.get(DELAY)\n\tthreads = dalfox_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_dalfox_xss.txt'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=False,\n\t\t\tignore_files=False,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = dalfox_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_dalfox_xss.txt'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=False,\n\t\t\tignore_files=False,\n\t\t\twrite_filepath=input_path,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{self.results_dir}/input_endpoints_dalfox_xss.txt'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=False,\n\t\t\tignore_files=False,\n\t\t\twrite_filepath=input_path,\n\t\t\tctx=ctx",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tsend_status = notif.send_scan_status_notif if notif else False\n\t# command builder\n\tcmd = 'dalfox --silence --no-color --no-spinner'\n\tcmd += f' --only-poc r '\n\tcmd += f' --ignore-return 302,404,403'\n\tcmd += f' --skip-bav'\n\tcmd += f' file {input_path}'\n\tcmd += f' --proxy {proxy}' if proxy else ''\n\tcmd += f' --waf-evasion' if is_waf_evasion else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsend_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsend_status = notif.send_scan_status_notif if notif else False\n\t# command builder\n\tcmd = 'dalfox --silence --no-color --no-spinner'\n\tcmd += f' --only-poc r '\n\tcmd += f' --ignore-return 302,404,403'\n\tcmd += f' --skip-bav'\n\tcmd += f' file {input_path}'\n\tcmd += f' --proxy {proxy}' if proxy else ''\n\tcmd += f' --waf-evasion' if is_waf_evasion else ''\n\tcmd += f' -b {blind_xss_server}' if blind_xss_server else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = 'dalfox --silence --no-color --no-spinner'\n\tcmd += f' --only-poc r '\n\tcmd += f' --ignore-return 302,404,403'\n\tcmd += f' --skip-bav'\n\tcmd += f' file {input_path}'\n\tcmd += f' --proxy {proxy}' if proxy else ''\n\tcmd += f' --waf-evasion' if is_waf_evasion else ''\n\tcmd += f' -b {blind_xss_server}' if blind_xss_server else ''\n\tcmd += f' --delay {delay}' if delay else ''\n\tcmd += f' --timeout {timeout}' if timeout else ''",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tformatted_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' --user-agent {user_agent}' if user_agent else ''\n\tcmd += f' --worker {threads}' if threads else ''\n\tcmd += f' --format json'\n\tresults = []\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\thistory_file=self.history_file,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\thistory_file=self.history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id,\n\t\t\ttrunc_char=','\n\t\t):\n\t\tif not isinstance(line, dict):\n\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_data = parse_dalfox_result(line)\n\t\thttp_url = sanitize_url(line.get('data'))\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t# TODO: this should be get only\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\tendpoint, _ = save_endpoint(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttp_url = sanitize_url(line.get('data'))\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t# TODO: this should be get only\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\t# TODO: this should be get only\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thttp_url = endpoint.http_url\n\t\t\tendpoint.save()\n\t\tvuln, _ = save_vulnerability(\n\t\t\ttarget_domain=self.domain,\n\t\t\thttp_url=http_url,\n\t\t\tscan_history=self.scan,\n\t\t\tsubscan=self.subscan,\n\t\t\t**vuln_data\n\t\t)\n\t\tif not vuln:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulns = Vulnerability.objects.filter(\n\t\t\tscan_history__id=self.scan_id\n\t\t).filter(\n\t\t\tsource=DALFOX\n\t\t).exclude(\n\t\t\tseverity=0\n\t\t)\n\t\t_vulns = []\n\t\tfor vuln in vulns:\n\t\t\t_vulns.append((vuln.name, vuln.http_url))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_vulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_vulns = []\n\t\tfor vuln in vulns:\n\t\t\t_vulns.append((vuln.name, vuln.http_url))\n\t\twith concurrent.futures.ThreadPoolExecutor(max_workers=DEFAULT_THREADS) as executor:\n\t\t\tfuture_to_gpt = {executor.submit(get_vulnerability_gpt_report, vuln): vuln for vuln in _vulns}\n\t\t\t# Wait for all tasks to complete\n\t\t\tfor future in concurrent.futures.as_completed(future_to_gpt):\n\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tfuture_to_gpt",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tfuture_to_gpt = {executor.submit(get_vulnerability_gpt_report, vuln): vuln for vuln in _vulns}\n\t\t\t# Wait for all tasks to complete\n\t\t\tfor future in concurrent.futures.as_completed(future_to_gpt):\n\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f\"Exception for Vulnerability {vuln}: {e}\")\n\treturn results\n@app.task(name='crlfuzz_scan', queue='main_scan_queue', base=RengineTask, bind=True)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tgpt",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f\"Exception for Vulnerability {vuln}: {e}\")\n\treturn results\n@app.task(name='crlfuzz_scan', queue='main_scan_queue', base=RengineTask, bind=True)\ndef crlfuzz_scan(self, urls=[], ctx={}, description=None):\n\t\"\"\"CRLF Fuzzing with CRLFuzz\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_config = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\tshould_fetch_gpt_report = vuln_config.get(FETCH_GPT_REPORT, DEFAULT_GET_GPT_REPORT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tshould_fetch_gpt_report",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tshould_fetch_gpt_report = vuln_config.get(FETCH_GPT_REPORT, DEFAULT_GET_GPT_REPORT)\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_header",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\tproxy = get_random_proxy()\n\tuser_agent = vuln_config.get(USER_AGENT) or self.yaml_configuration.get(USER_AGENT)\n\tthreads = vuln_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_crlf.txt'\n\toutput_path = f'{self.results_dir}/{self.filename}'\n\tif urls:\n\t\twith open(input_path, 'w') as f:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tproxy = get_random_proxy()\n\tuser_agent = vuln_config.get(USER_AGENT) or self.yaml_configuration.get(USER_AGENT)\n\tthreads = vuln_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_crlf.txt'\n\toutput_path = f'{self.results_dir}/{self.filename}'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tuser_agent",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tuser_agent = vuln_config.get(USER_AGENT) or self.yaml_configuration.get(USER_AGENT)\n\tthreads = vuln_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_crlf.txt'\n\toutput_path = f'{self.results_dir}/{self.filename}'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=False,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = vuln_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tinput_path = f'{self.results_dir}/input_endpoints_crlf.txt'\n\toutput_path = f'{self.results_dir}/{self.filename}'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=False,\n\t\t\tignore_files=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{self.results_dir}/input_endpoints_crlf.txt'\n\toutput_path = f'{self.results_dir}/{self.filename}'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=False,\n\t\t\tignore_files=True,\n\t\t\twrite_filepath=input_path,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput_path = f'{self.results_dir}/{self.filename}'\n\tif urls:\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\tget_http_urls(\n\t\t\tis_alive=False,\n\t\t\tignore_files=True,\n\t\t\twrite_filepath=input_path,\n\t\t\tctx=ctx",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tsend_status = notif.send_scan_status_notif if notif else False\n\t# command builder\n\tcmd = 'crlfuzz -s'\n\tcmd += f' -l {input_path}'\n\tcmd += f' -x {proxy}' if proxy else ''\n\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -o {output_path}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsend_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsend_status = notif.send_scan_status_notif if notif else False\n\t# command builder\n\tcmd = 'crlfuzz -s'\n\tcmd += f' -l {input_path}'\n\tcmd += f' -x {proxy}' if proxy else ''\n\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -o {output_path}'\n\trun_command(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = 'crlfuzz -s'\n\tcmd += f' -l {input_path}'\n\tcmd += f' -x {proxy}' if proxy else ''\n\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -o {output_path}'\n\trun_command(\n\t\tcmd,\n\t\tshell=False,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tformatted_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -o {output_path}'\n\trun_command(\n\t\tcmd,\n\t\tshell=False,\n\t\thistory_file=self.history_file,\n\t\tscan_id=self.scan_id,\n\t\tactivity_id=self.activity_id",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcrlfs",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcrlfs = []\n\tresults = []\n\twith open(output_path, 'r') as file:\n\t\tcrlfs = file.readlines()\n\tfor crlf in crlfs:\n\t\turl = crlf.strip()\n\t\tvuln_data = parse_crlfuzz_result(url)\n\t\thttp_url = sanitize_url(url)\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\twith open(output_path, 'r') as file:\n\t\tcrlfs = file.readlines()\n\tfor crlf in crlfs:\n\t\turl = crlf.strip()\n\t\tvuln_data = parse_crlfuzz_result(url)\n\t\thttp_url = sanitize_url(url)\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcrlfs",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcrlfs = file.readlines()\n\tfor crlf in crlfs:\n\t\turl = crlf.strip()\n\t\tvuln_data = parse_crlfuzz_result(url)\n\t\thttp_url = sanitize_url(url)\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turl = crlf.strip()\n\t\tvuln_data = parse_crlfuzz_result(url)\n\t\thttp_url = sanitize_url(url)\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\tendpoint, _ = save_endpoint(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_data = parse_crlfuzz_result(url)\n\t\thttp_url = sanitize_url(url)\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttp_url = sanitize_url(url)\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=True,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = Subdomain.objects.get_or_create(\n\t\t\tname=subdomain_name,\n\t\t\tscan_history=self.scan,\n\t\t\ttarget_domain=self.domain\n\t\t)\n\t\tendpoint, _ = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=True,\n\t\t\tsubdomain=subdomain,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thttp_url = endpoint.http_url\n\t\t\tendpoint.save()\n\t\tvuln, _ = save_vulnerability(\n\t\t\ttarget_domain=self.domain,\n\t\t\thttp_url=http_url,\n\t\t\tscan_history=self.scan,\n\t\t\tsubscan=self.subscan,\n\t\t\t**vuln_data\n\t\t)\n\t\tif not vuln:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulns = Vulnerability.objects.filter(\n\t\t\tscan_history__id=self.scan_id\n\t\t).filter(\n\t\t\tsource=CRLFUZZ\n\t\t).exclude(\n\t\t\tseverity=0\n\t\t)\n\t\t_vulns = []\n\t\tfor vuln in vulns:\n\t\t\t_vulns.append((vuln.name, vuln.http_url))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t_vulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t_vulns = []\n\t\tfor vuln in vulns:\n\t\t\t_vulns.append((vuln.name, vuln.http_url))\n\t\twith concurrent.futures.ThreadPoolExecutor(max_workers=DEFAULT_THREADS) as executor:\n\t\t\tfuture_to_gpt = {executor.submit(get_vulnerability_gpt_report, vuln): vuln for vuln in _vulns}\n\t\t\t# Wait for all tasks to complete\n\t\t\tfor future in concurrent.futures.as_completed(future_to_gpt):\n\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tfuture_to_gpt",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tfuture_to_gpt = {executor.submit(get_vulnerability_gpt_report, vuln): vuln for vuln in _vulns}\n\t\t\t# Wait for all tasks to complete\n\t\t\tfor future in concurrent.futures.as_completed(future_to_gpt):\n\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f\"Exception for Vulnerability {vuln}: {e}\")\n\treturn results\n@app.task(name='s3scanner', queue='main_scan_queue', base=RengineTask, bind=True)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tgpt",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tgpt = future_to_gpt[future]\n\t\t\t\ttry:\n\t\t\t\t\tfuture.result()\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f\"Exception for Vulnerability {vuln}: {e}\")\n\treturn results\n@app.task(name='s3scanner', queue='main_scan_queue', base=RengineTask, bind=True)\ndef s3scanner(self, ctx={}, description=None):\n\t\"\"\"Bucket Scanner\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{self.results_dir}/#{self.scan_id}_subdomain_discovery.txt'\n\tvuln_config = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\ts3_config = vuln_config.get(S3SCANNER) or {}\n\tthreads = s3_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tproviders = s3_config.get(PROVIDERS, S3SCANNER_DEFAULT_PROVIDERS)\n\tscan_history = ScanHistory.objects.filter(pk=self.scan_id).first()\n\tfor provider in providers:\n\t\tcmd = f's3scanner -bucket-file {input_path} -enumerate -provider {provider} -threads {threads} -json'\n\t\tfor line in stream_command(\n\t\t\t\tcmd,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_config = self.yaml_configuration.get(VULNERABILITY_SCAN) or {}\n\ts3_config = vuln_config.get(S3SCANNER) or {}\n\tthreads = s3_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tproviders = s3_config.get(PROVIDERS, S3SCANNER_DEFAULT_PROVIDERS)\n\tscan_history = ScanHistory.objects.filter(pk=self.scan_id).first()\n\tfor provider in providers:\n\t\tcmd = f's3scanner -bucket-file {input_path} -enumerate -provider {provider} -threads {threads} -json'\n\t\tfor line in stream_command(\n\t\t\t\tcmd,\n\t\t\t\thistory_file=self.history_file,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ts3_config",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ts3_config = vuln_config.get(S3SCANNER) or {}\n\tthreads = s3_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tproviders = s3_config.get(PROVIDERS, S3SCANNER_DEFAULT_PROVIDERS)\n\tscan_history = ScanHistory.objects.filter(pk=self.scan_id).first()\n\tfor provider in providers:\n\t\tcmd = f's3scanner -bucket-file {input_path} -enumerate -provider {provider} -threads {threads} -json'\n\t\tfor line in stream_command(\n\t\t\t\tcmd,\n\t\t\t\thistory_file=self.history_file,\n\t\t\t\tscan_id=self.scan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = s3_config.get(THREADS) or self.yaml_configuration.get(THREADS, DEFAULT_THREADS)\n\tproviders = s3_config.get(PROVIDERS, S3SCANNER_DEFAULT_PROVIDERS)\n\tscan_history = ScanHistory.objects.filter(pk=self.scan_id).first()\n\tfor provider in providers:\n\t\tcmd = f's3scanner -bucket-file {input_path} -enumerate -provider {provider} -threads {threads} -json'\n\t\tfor line in stream_command(\n\t\t\t\tcmd,\n\t\t\t\thistory_file=self.history_file,\n\t\t\t\tscan_id=self.scan_id,\n\t\t\t\tactivity_id=self.activity_id):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tproviders",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tproviders = s3_config.get(PROVIDERS, S3SCANNER_DEFAULT_PROVIDERS)\n\tscan_history = ScanHistory.objects.filter(pk=self.scan_id).first()\n\tfor provider in providers:\n\t\tcmd = f's3scanner -bucket-file {input_path} -enumerate -provider {provider} -threads {threads} -json'\n\t\tfor line in stream_command(\n\t\t\t\tcmd,\n\t\t\t\thistory_file=self.history_file,\n\t\t\t\tscan_id=self.scan_id,\n\t\t\t\tactivity_id=self.activity_id):\n\t\t\tif not isinstance(line, dict):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_history = ScanHistory.objects.filter(pk=self.scan_id).first()\n\tfor provider in providers:\n\t\tcmd = f's3scanner -bucket-file {input_path} -enumerate -provider {provider} -threads {threads} -json'\n\t\tfor line in stream_command(\n\t\t\t\tcmd,\n\t\t\t\thistory_file=self.history_file,\n\t\t\t\tscan_id=self.scan_id,\n\t\t\t\tactivity_id=self.activity_id):\n\t\t\tif not isinstance(line, dict):\n\t\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcmd = f's3scanner -bucket-file {input_path} -enumerate -provider {provider} -threads {threads} -json'\n\t\tfor line in stream_command(\n\t\t\t\tcmd,\n\t\t\t\thistory_file=self.history_file,\n\t\t\t\tscan_id=self.scan_id,\n\t\t\t\tactivity_id=self.activity_id):\n\t\t\tif not isinstance(line, dict):\n\t\t\t\tcontinue\n\t\t\tif line.get('bucket', {}).get('exists', 0) == 1:\n\t\t\t\tresult = parse_s3scanner_result(line)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresult",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresult = parse_s3scanner_result(line)\n\t\t\t\ts3bucket, created = S3Bucket.objects.get_or_create(**result)\n\t\t\t\tscan_history.buckets.add(s3bucket)\n\t\t\t\tlogger.info(f\"s3 bucket added {result['provider']}-{result['name']}-{result['region']}\")\n@app.task(name='http_crawl', queue='main_scan_queue', base=RengineTask, bind=True)\ndef http_crawl(\n\t\tself,\n\t\turls=[],\n\t\tmethod=None,\n\t\trecrawl=False,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = '/go/bin/httpx'\n\tcfg = self.yaml_configuration.get(HTTP_CRAWL) or {}\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcfg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcfg = self.yaml_configuration.get(HTTP_CRAWL) or {}\n\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_headers = self.yaml_configuration.get(CUSTOM_HEADERS, [])\n\t'''\n\t# TODO: Remove custom_header in next major release\n\t\tsupport for custom_header will be remove in next major release, \n\t\tas of now it will be supported for backward compatibility\n\t\tonly custom_headers will be supported\n\t'''\n\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcustom_header",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcustom_header = self.yaml_configuration.get(CUSTOM_HEADER)\n\tif custom_header:\n\t\tcustom_headers.append(custom_header)\n\tthreads = cfg.get(THREADS, DEFAULT_THREADS)\n\tfollow_redirect = cfg.get(FOLLOW_REDIRECT, True)\n\tself.output_path = None\n\tinput_path = f'{self.results_dir}/httpx_input.txt'\n\thistory_file = f'{self.results_dir}/commands.txt'\n\tif urls: # direct passing URLs to check\n\t\tif self.starting_point_path:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tthreads = cfg.get(THREADS, DEFAULT_THREADS)\n\tfollow_redirect = cfg.get(FOLLOW_REDIRECT, True)\n\tself.output_path = None\n\tinput_path = f'{self.results_dir}/httpx_input.txt'\n\thistory_file = f'{self.results_dir}/commands.txt'\n\tif urls: # direct passing URLs to check\n\t\tif self.starting_point_path:\n\t\t\turls = [u for u in urls if self.starting_point_path in u]\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfollow_redirect",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfollow_redirect = cfg.get(FOLLOW_REDIRECT, True)\n\tself.output_path = None\n\tinput_path = f'{self.results_dir}/httpx_input.txt'\n\thistory_file = f'{self.results_dir}/commands.txt'\n\tif urls: # direct passing URLs to check\n\t\tif self.starting_point_path:\n\t\t\turls = [u for u in urls if self.starting_point_path in u]\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tself.output_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tself.output_path = None\n\tinput_path = f'{self.results_dir}/httpx_input.txt'\n\thistory_file = f'{self.results_dir}/commands.txt'\n\tif urls: # direct passing URLs to check\n\t\tif self.starting_point_path:\n\t\t\turls = [u for u in urls if self.starting_point_path in u]\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\turls = get_http_urls(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tinput_path",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tinput_path = f'{self.results_dir}/httpx_input.txt'\n\thistory_file = f'{self.results_dir}/commands.txt'\n\tif urls: # direct passing URLs to check\n\t\tif self.starting_point_path:\n\t\t\turls = [u for u in urls if self.starting_point_path in u]\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\turls = get_http_urls(\n\t\t\tis_uncrawled=not recrawl,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thistory_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thistory_file = f'{self.results_dir}/commands.txt'\n\tif urls: # direct passing URLs to check\n\t\tif self.starting_point_path:\n\t\t\turls = [u for u in urls if self.starting_point_path in u]\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\turls = get_http_urls(\n\t\t\tis_uncrawled=not recrawl,\n\t\t\twrite_filepath=input_path,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\turls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\turls = [u for u in urls if self.starting_point_path in u]\n\t\twith open(input_path, 'w') as f:\n\t\t\tf.write('\\n'.join(urls))\n\telse:\n\t\turls = get_http_urls(\n\t\t\tis_uncrawled=not recrawl,\n\t\t\twrite_filepath=input_path,\n\t\t\tctx=ctx\n\t\t)\n\t\t# logger.debug(urls)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turls = get_http_urls(\n\t\t\tis_uncrawled=not recrawl,\n\t\t\twrite_filepath=input_path,\n\t\t\tctx=ctx\n\t\t)\n\t\t# logger.debug(urls)\n\t# exclude urls by pattern\n\tif self.excluded_paths:\n\t\turls = exclude_urls_by_patterns(self.excluded_paths, urls)\n\t# If no URLs found, skip it",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turls",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turls = exclude_urls_by_patterns(self.excluded_paths, urls)\n\t# If no URLs found, skip it\n\tif not urls:\n\t\treturn\n\t# Re-adjust thread number if few URLs to avoid spinning up a monster to\n\t# kill a fly.\n\tif len(urls) < threads:\n\t\tthreads = len(urls)\n\t# Get random proxy\n\tproxy = get_random_proxy()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tthreads",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tthreads = len(urls)\n\t# Get random proxy\n\tproxy = get_random_proxy()\n\t# Run command\n\tcmd += f' -cl -ct -rt -location -td -websocket -cname -asn -cdn -probe -random-agent'\n\tcmd += f' -t {threads}' if threads > 0 else ''\n\tcmd += f' --http-proxy {proxy}' if proxy else ''\n\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tproxy",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tproxy = get_random_proxy()\n\t# Run command\n\tcmd += f' -cl -ct -rt -location -td -websocket -cname -asn -cdn -probe -random-agent'\n\tcmd += f' -t {threads}' if threads > 0 else ''\n\tcmd += f' --http-proxy {proxy}' if proxy else ''\n\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -json'\n\tcmd += f' -u {urls[0]}' if len(urls) == 1 else f' -l {input_path}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tformatted_headers",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tformatted_headers = ' '.join(f'-H \"{header}\"' for header in custom_headers)\n\tif formatted_headers:\n\t\tcmd += formatted_headers\n\tcmd += f' -json'\n\tcmd += f' -u {urls[0]}' if len(urls) == 1 else f' -l {input_path}'\n\tcmd += f' -x {method}' if method else ''\n\tcmd += f' -silent'\n\tif follow_redirect:\n\t\tcmd += ' -fr'\n\tresults = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\tendpoint_ids = []\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\thistory_file=history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id):\n\t\tif not line or not isinstance(line, dict):\n\t\t\tcontinue\n\t\tlogger.debug(line)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tendpoint_ids",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tendpoint_ids = []\n\tfor line in stream_command(\n\t\t\tcmd,\n\t\t\thistory_file=history_file,\n\t\t\tscan_id=self.scan_id,\n\t\t\tactivity_id=self.activity_id):\n\t\tif not line or not isinstance(line, dict):\n\t\t\tcontinue\n\t\tlogger.debug(line)\n\t\t# No response from endpoint",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thost",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thost = line.get('host', '')\n\t\tcontent_length = line.get('content_length', 0)\n\t\thttp_status = line.get('status_code')\n\t\thttp_url, is_redirect = extract_httpx_url(line)\n\t\tpage_title = line.get('title')\n\t\twebserver = line.get('webserver')\n\t\tcdn = line.get('cdn', False)\n\t\trt = line.get('time')\n\t\ttechs = line.get('tech', [])\n\t\tcname = line.get('cname', '')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcontent_length",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcontent_length = line.get('content_length', 0)\n\t\thttp_status = line.get('status_code')\n\t\thttp_url, is_redirect = extract_httpx_url(line)\n\t\tpage_title = line.get('title')\n\t\twebserver = line.get('webserver')\n\t\tcdn = line.get('cdn', False)\n\t\trt = line.get('time')\n\t\ttechs = line.get('tech', [])\n\t\tcname = line.get('cname', '')\n\t\tcontent_type = line.get('content_type', '')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttp_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttp_status = line.get('status_code')\n\t\thttp_url, is_redirect = extract_httpx_url(line)\n\t\tpage_title = line.get('title')\n\t\twebserver = line.get('webserver')\n\t\tcdn = line.get('cdn', False)\n\t\trt = line.get('time')\n\t\ttechs = line.get('tech', [])\n\t\tcname = line.get('cname', '')\n\t\tcontent_type = line.get('content_type', '')\n\t\tresponse_time = -1",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tpage_title",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tpage_title = line.get('title')\n\t\twebserver = line.get('webserver')\n\t\tcdn = line.get('cdn', False)\n\t\trt = line.get('time')\n\t\ttechs = line.get('tech', [])\n\t\tcname = line.get('cname', '')\n\t\tcontent_type = line.get('content_type', '')\n\t\tresponse_time = -1\n\t\tif rt:\n\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\twebserver",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\twebserver = line.get('webserver')\n\t\tcdn = line.get('cdn', False)\n\t\trt = line.get('time')\n\t\ttechs = line.get('tech', [])\n\t\tcname = line.get('cname', '')\n\t\tcontent_type = line.get('content_type', '')\n\t\tresponse_time = -1\n\t\tif rt:\n\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))\n\t\t\tif rt[-2:] == 'ms':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcdn",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcdn = line.get('cdn', False)\n\t\trt = line.get('time')\n\t\ttechs = line.get('tech', [])\n\t\tcname = line.get('cname', '')\n\t\tcontent_type = line.get('content_type', '')\n\t\tresponse_time = -1\n\t\tif rt:\n\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))\n\t\t\tif rt[-2:] == 'ms':\n\t\t\t\tresponse_time = response_time / 1000",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\trt",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\trt = line.get('time')\n\t\ttechs = line.get('tech', [])\n\t\tcname = line.get('cname', '')\n\t\tcontent_type = line.get('content_type', '')\n\t\tresponse_time = -1\n\t\tif rt:\n\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))\n\t\t\tif rt[-2:] == 'ms':\n\t\t\t\tresponse_time = response_time / 1000\n\t\t# Create Subdomain object in DB",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttechs",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttechs = line.get('tech', [])\n\t\tcname = line.get('cname', '')\n\t\tcontent_type = line.get('content_type', '')\n\t\tresponse_time = -1\n\t\tif rt:\n\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))\n\t\t\tif rt[-2:] == 'ms':\n\t\t\t\tresponse_time = response_time / 1000\n\t\t# Create Subdomain object in DB\n\t\tsubdomain_name = get_subdomain_from_url(http_url)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcname",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcname = line.get('cname', '')\n\t\tcontent_type = line.get('content_type', '')\n\t\tresponse_time = -1\n\t\tif rt:\n\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))\n\t\t\tif rt[-2:] == 'ms':\n\t\t\t\tresponse_time = response_time / 1000\n\t\t# Create Subdomain object in DB\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcontent_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcontent_type = line.get('content_type', '')\n\t\tresponse_time = -1\n\t\tif rt:\n\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))\n\t\t\tif rt[-2:] == 'ms':\n\t\t\t\tresponse_time = response_time / 1000\n\t\t# Create Subdomain object in DB\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tif not subdomain:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresponse_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tresponse_time = -1\n\t\tif rt:\n\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))\n\t\t\tif rt[-2:] == 'ms':\n\t\t\t\tresponse_time = response_time / 1000\n\t\t# Create Subdomain object in DB\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tif not subdomain:\n\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tresponse_time = float(''.join(ch for ch in rt if not ch.isalpha()))\n\t\t\tif rt[-2:] == 'ms':\n\t\t\t\tresponse_time = response_time / 1000\n\t\t# Create Subdomain object in DB\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tif not subdomain:\n\t\t\tcontinue\n\t\t# Save default HTTP URL to endpoint object in DB\n\t\tendpoint, created = save_endpoint(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tresponse_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tresponse_time = response_time / 1000\n\t\t# Create Subdomain object in DB\n\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tif not subdomain:\n\t\t\tcontinue\n\t\t# Save default HTTP URL to endpoint object in DB\n\t\tendpoint, created = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=False,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain_name = get_subdomain_from_url(http_url)\n\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\tif not subdomain:\n\t\t\tcontinue\n\t\t# Save default HTTP URL to endpoint object in DB\n\t\tendpoint, created = save_endpoint(\n\t\t\thttp_url,\n\t\t\tcrawl=False,\n\t\t\tctx=ctx,\n\t\t\tsubdomain=subdomain,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint.http_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint.http_status = http_status\n\t\tendpoint.page_title = page_title\n\t\tendpoint.content_length = content_length\n\t\tendpoint.webserver = webserver\n\t\tendpoint.response_time = response_time\n\t\tendpoint.content_type = content_type\n\t\tendpoint.save()\n\t\tendpoint_str = f'{http_url} [{http_status}] `{content_length}B` `{webserver}` `{rt}`'\n\t\tlogger.warning(endpoint_str)\n\t\tif endpoint and endpoint.is_alive and endpoint.http_status != 403:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint.page_title",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint.page_title = page_title\n\t\tendpoint.content_length = content_length\n\t\tendpoint.webserver = webserver\n\t\tendpoint.response_time = response_time\n\t\tendpoint.content_type = content_type\n\t\tendpoint.save()\n\t\tendpoint_str = f'{http_url} [{http_status}] `{content_length}B` `{webserver}` `{rt}`'\n\t\tlogger.warning(endpoint_str)\n\t\tif endpoint and endpoint.is_alive and endpoint.http_status != 403:\n\t\t\tself.notify(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint.content_length",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint.content_length = content_length\n\t\tendpoint.webserver = webserver\n\t\tendpoint.response_time = response_time\n\t\tendpoint.content_type = content_type\n\t\tendpoint.save()\n\t\tendpoint_str = f'{http_url} [{http_status}] `{content_length}B` `{webserver}` `{rt}`'\n\t\tlogger.warning(endpoint_str)\n\t\tif endpoint and endpoint.is_alive and endpoint.http_status != 403:\n\t\t\tself.notify(\n\t\t\t\tfields={'Alive endpoint': f'• {endpoint_str}'},",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint.webserver",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint.webserver = webserver\n\t\tendpoint.response_time = response_time\n\t\tendpoint.content_type = content_type\n\t\tendpoint.save()\n\t\tendpoint_str = f'{http_url} [{http_status}] `{content_length}B` `{webserver}` `{rt}`'\n\t\tlogger.warning(endpoint_str)\n\t\tif endpoint and endpoint.is_alive and endpoint.http_status != 403:\n\t\t\tself.notify(\n\t\t\t\tfields={'Alive endpoint': f'• {endpoint_str}'},\n\t\t\t\tadd_meta_info=False)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint.response_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint.response_time = response_time\n\t\tendpoint.content_type = content_type\n\t\tendpoint.save()\n\t\tendpoint_str = f'{http_url} [{http_status}] `{content_length}B` `{webserver}` `{rt}`'\n\t\tlogger.warning(endpoint_str)\n\t\tif endpoint and endpoint.is_alive and endpoint.http_status != 403:\n\t\t\tself.notify(\n\t\t\t\tfields={'Alive endpoint': f'• {endpoint_str}'},\n\t\t\t\tadd_meta_info=False)\n\t\t# Add endpoint to results",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint.content_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint.content_type = content_type\n\t\tendpoint.save()\n\t\tendpoint_str = f'{http_url} [{http_status}] `{content_length}B` `{webserver}` `{rt}`'\n\t\tlogger.warning(endpoint_str)\n\t\tif endpoint and endpoint.is_alive and endpoint.http_status != 403:\n\t\t\tself.notify(\n\t\t\t\tfields={'Alive endpoint': f'• {endpoint_str}'},\n\t\t\t\tadd_meta_info=False)\n\t\t# Add endpoint to results\n\t\tline['_cmd'] = cmd",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint_str = f'{http_url} [{http_status}] `{content_length}B` `{webserver}` `{rt}`'\n\t\tlogger.warning(endpoint_str)\n\t\tif endpoint and endpoint.is_alive and endpoint.http_status != 403:\n\t\t\tself.notify(\n\t\t\t\tfields={'Alive endpoint': f'• {endpoint_str}'},\n\t\t\t\tadd_meta_info=False)\n\t\t# Add endpoint to results\n\t\tline['_cmd'] = cmd\n\t\tline['final_url'] = http_url\n\t\tline['endpoint_id'] = endpoint.id",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline['_cmd']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline['_cmd'] = cmd\n\t\tline['final_url'] = http_url\n\t\tline['endpoint_id'] = endpoint.id\n\t\tline['endpoint_created'] = created\n\t\tline['is_redirect'] = is_redirect\n\t\tresults.append(line)\n\t\t# Add technology objects to DB\n\t\tfor technology in techs:\n\t\t\ttech, _ = Technology.objects.get_or_create(name=technology)\n\t\t\tendpoint.techs.add(tech)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline['final_url']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline['final_url'] = http_url\n\t\tline['endpoint_id'] = endpoint.id\n\t\tline['endpoint_created'] = created\n\t\tline['is_redirect'] = is_redirect\n\t\tresults.append(line)\n\t\t# Add technology objects to DB\n\t\tfor technology in techs:\n\t\t\ttech, _ = Technology.objects.get_or_create(name=technology)\n\t\t\tendpoint.techs.add(tech)\n\t\t\tif is_ran_from_subdomain_scan:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline['endpoint_id']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline['endpoint_id'] = endpoint.id\n\t\tline['endpoint_created'] = created\n\t\tline['is_redirect'] = is_redirect\n\t\tresults.append(line)\n\t\t# Add technology objects to DB\n\t\tfor technology in techs:\n\t\t\ttech, _ = Technology.objects.get_or_create(name=technology)\n\t\t\tendpoint.techs.add(tech)\n\t\t\tif is_ran_from_subdomain_scan:\n\t\t\t\tsubdomain.technologies.add(tech)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline['endpoint_created']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline['endpoint_created'] = created\n\t\tline['is_redirect'] = is_redirect\n\t\tresults.append(line)\n\t\t# Add technology objects to DB\n\t\tfor technology in techs:\n\t\t\ttech, _ = Technology.objects.get_or_create(name=technology)\n\t\t\tendpoint.techs.add(tech)\n\t\t\tif is_ran_from_subdomain_scan:\n\t\t\t\tsubdomain.technologies.add(tech)\n\t\t\t\tsubdomain.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline['is_redirect']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline['is_redirect'] = is_redirect\n\t\tresults.append(line)\n\t\t# Add technology objects to DB\n\t\tfor technology in techs:\n\t\t\ttech, _ = Technology.objects.get_or_create(name=technology)\n\t\t\tendpoint.techs.add(tech)\n\t\t\tif is_ran_from_subdomain_scan:\n\t\t\t\tsubdomain.technologies.add(tech)\n\t\t\t\tsubdomain.save()\n\t\t\tendpoint.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttechs_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttechs_str = ', '.join([f'`{tech}`' for tech in techs])\n\t\tself.notify(\n\t\t\tfields={'Technologies': techs_str},\n\t\t\tadd_meta_info=False)\n\t\t# Add IP objects for 'a' records to DB\n\t\ta_records = line.get('a', [])\n\t\tfor ip_address in a_records:\n\t\t\tip, created = save_ip_address(\n\t\t\t\tip_address,\n\t\t\t\tsubdomain,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ta_records",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ta_records = line.get('a', [])\n\t\tfor ip_address in a_records:\n\t\t\tip, created = save_ip_address(\n\t\t\t\tip_address,\n\t\t\t\tsubdomain,\n\t\t\t\tsubscan=self.subscan,\n\t\t\t\tcdn=cdn)\n\t\tips_str = '• ' + '\\n• '.join([f'`{ip}`' for ip in a_records])\n\t\tself.notify(\n\t\t\tfields={'IPs': ips_str},",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tips_str",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tips_str = '• ' + '\\n• '.join([f'`{ip}`' for ip in a_records])\n\t\tself.notify(\n\t\t\tfields={'IPs': ips_str},\n\t\t\tadd_meta_info=False)\n\t\t# Add IP object for host in DB\n\t\tif host:\n\t\t\tip, created = save_ip_address(\n\t\t\t\thost,\n\t\t\t\tsubdomain,\n\t\t\t\tsubscan=self.subscan,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.http_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.http_url = http_url\n\t\t\tsubdomain.http_status = http_status\n\t\t\tsubdomain.page_title = page_title\n\t\t\tsubdomain.content_length = content_length\n\t\t\tsubdomain.webserver = webserver\n\t\t\tsubdomain.response_time = response_time\n\t\t\tsubdomain.content_type = content_type\n\t\t\tsubdomain.cname = ','.join(cname)\n\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.http_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.http_status = http_status\n\t\t\tsubdomain.page_title = page_title\n\t\t\tsubdomain.content_length = content_length\n\t\t\tsubdomain.webserver = webserver\n\t\t\tsubdomain.response_time = response_time\n\t\t\tsubdomain.content_type = content_type\n\t\t\tsubdomain.cname = ','.join(cname)\n\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:\n\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.page_title",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.page_title = page_title\n\t\t\tsubdomain.content_length = content_length\n\t\t\tsubdomain.webserver = webserver\n\t\t\tsubdomain.response_time = response_time\n\t\t\tsubdomain.content_type = content_type\n\t\t\tsubdomain.cname = ','.join(cname)\n\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:\n\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')\n\t\t\tsubdomain.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.content_length",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.content_length = content_length\n\t\t\tsubdomain.webserver = webserver\n\t\t\tsubdomain.response_time = response_time\n\t\t\tsubdomain.content_type = content_type\n\t\t\tsubdomain.cname = ','.join(cname)\n\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:\n\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')\n\t\t\tsubdomain.save()\n\t\tendpoint.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.webserver",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.webserver = webserver\n\t\t\tsubdomain.response_time = response_time\n\t\t\tsubdomain.content_type = content_type\n\t\t\tsubdomain.cname = ','.join(cname)\n\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:\n\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')\n\t\t\tsubdomain.save()\n\t\tendpoint.save()\n\t\tendpoint_ids.append(endpoint.id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.response_time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.response_time = response_time\n\t\t\tsubdomain.content_type = content_type\n\t\t\tsubdomain.cname = ','.join(cname)\n\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:\n\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')\n\t\t\tsubdomain.save()\n\t\tendpoint.save()\n\t\tendpoint_ids.append(endpoint.id)\n\tif should_remove_duplicate_endpoints:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.content_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.content_type = content_type\n\t\t\tsubdomain.cname = ','.join(cname)\n\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:\n\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')\n\t\t\tsubdomain.save()\n\t\tendpoint.save()\n\t\tendpoint_ids.append(endpoint.id)\n\tif should_remove_duplicate_endpoints:\n\t\t# Remove 'fake' alive endpoints that are just redirects to the same page",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.cname",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.cname = ','.join(cname)\n\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:\n\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')\n\t\t\tsubdomain.save()\n\t\tendpoint.save()\n\t\tendpoint_ids.append(endpoint.id)\n\tif should_remove_duplicate_endpoints:\n\t\t# Remove 'fake' alive endpoints that are just redirects to the same page\n\t\tremove_duplicate_endpoints(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.is_cdn",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.is_cdn = cdn\n\t\t\tif cdn:\n\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')\n\t\t\tsubdomain.save()\n\t\tendpoint.save()\n\t\tendpoint_ids.append(endpoint.id)\n\tif should_remove_duplicate_endpoints:\n\t\t# Remove 'fake' alive endpoints that are just redirects to the same page\n\t\tremove_duplicate_endpoints(\n\t\t\tself.scan_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsubdomain.cdn_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tsubdomain.cdn_name = line.get('cdn_name')\n\t\t\tsubdomain.save()\n\t\tendpoint.save()\n\t\tendpoint_ids.append(endpoint.id)\n\tif should_remove_duplicate_endpoints:\n\t\t# Remove 'fake' alive endpoints that are just redirects to the same page\n\t\tremove_duplicate_endpoints(\n\t\t\tself.scan_id,\n\t\t\tself.domain_id,\n\t\t\tself.subdomain_id,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tmessage",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tmessage = enrich_notification(message, scan_history_id, subscan_id)\n\tsend_discord_message(message, **options)\n\tsend_slack_message(message)\n\tsend_lark_message(message)\n\tsend_telegram_message(message)\n@app.task(name='send_scan_notif', bind=False, queue='send_scan_notif_queue')\ndef send_scan_notif(\n\t\tscan_history_id,\n\t\tsubscan_id=None,\n\t\tengine_id=None,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tengine",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tengine = EngineType.objects.filter(pk=engine_id).first()\n\tscan = ScanHistory.objects.filter(pk=scan_history_id).first()\n\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\ttasks = ScanActivity.objects.filter(scan_of=scan) if scan else 0\n\t# Build notif options\n\turl = get_scan_url(scan_history_id, subscan_id)\n\ttitle = get_scan_title(scan_history_id, subscan_id)\n\tfields = get_scan_fields(engine, scan, subscan, status, tasks)\n\tseverity = None\n\tmsg = f'{title} {status}\\n'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan = ScanHistory.objects.filter(pk=scan_history_id).first()\n\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\ttasks = ScanActivity.objects.filter(scan_of=scan) if scan else 0\n\t# Build notif options\n\turl = get_scan_url(scan_history_id, subscan_id)\n\ttitle = get_scan_title(scan_history_id, subscan_id)\n\tfields = get_scan_fields(engine, scan, subscan, status, tasks)\n\tseverity = None\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\ttasks = ScanActivity.objects.filter(scan_of=scan) if scan else 0\n\t# Build notif options\n\turl = get_scan_url(scan_history_id, subscan_id)\n\ttitle = get_scan_title(scan_history_id, subscan_id)\n\tfields = get_scan_fields(engine, scan, subscan, status, tasks)\n\tseverity = None\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\tif status:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttasks",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttasks = ScanActivity.objects.filter(scan_of=scan) if scan else 0\n\t# Build notif options\n\turl = get_scan_url(scan_history_id, subscan_id)\n\ttitle = get_scan_title(scan_history_id, subscan_id)\n\tfields = get_scan_fields(engine, scan, subscan, status, tasks)\n\tseverity = None\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\turl = get_scan_url(scan_history_id, subscan_id)\n\ttitle = get_scan_title(scan_history_id, subscan_id)\n\tfields = get_scan_fields(engine, scan, subscan, status, tasks)\n\tseverity = None\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\topts = {\n\t\t'title': title,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttitle = get_scan_title(scan_history_id, subscan_id)\n\tfields = get_scan_fields(engine, scan, subscan, status, tasks)\n\tseverity = None\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\topts = {\n\t\t'title': title,\n\t\t'url': url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfields = get_scan_fields(engine, scan, subscan, status, tasks)\n\tseverity = None\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\topts = {\n\t\t'title': title,\n\t\t'url': url,\n\t\t'fields': fields,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tseverity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tseverity = None\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\topts = {\n\t\t'title': title,\n\t\t'url': url,\n\t\t'fields': fields,\n\t\t'severity': severity",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmsg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\topts = {\n\t\t'title': title,\n\t\t'url': url,\n\t\t'fields': fields,\n\t\t'severity': severity\n\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tseverity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\topts = {\n\t\t'title': title,\n\t\t'url': url,\n\t\t'fields': fields,\n\t\t'severity': severity\n\t}\n\tlogger.warning(f'Sending notification \"{title}\" [{severity}]')\n\t# inapp notification has to be sent eitherways\n\tgenerate_inapp_notification(scan, subscan, status, engine, fields)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\topts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\topts = {\n\t\t'title': title,\n\t\t'url': url,\n\t\t'fields': fields,\n\t\t'severity': severity\n\t}\n\tlogger.warning(f'Sending notification \"{title}\" [{severity}]')\n\t# inapp notification has to be sent eitherways\n\tgenerate_inapp_notification(scan, subscan, status, engine, fields)\n\tnotif = Notification.objects.first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tif notif and notif.send_scan_status_notif:\n\t\t# Send notification\n\t\tsend_notif(\n\t\t\tmsg,\n\t\t\tscan_history_id,\n\t\t\tsubscan_id,\n\t\t\t**opts)\ndef generate_inapp_notification(scan, subscan, status, engine, fields):\n\tscan_type = \"Subscan\" if subscan else \"Scan\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_type = \"Subscan\" if subscan else \"Scan\"\n\tdomain = subscan.domain.name if subscan else scan.domain.name\n\tduration_msg = None\n\tredirect_link = None\n\tif status == 'RUNNING':\n\t\ttitle = f\"{scan_type} Started\"\n\t\tdescription = f\"{scan_type} has been initiated for {domain}\"\n\t\ticon = \"mdi-play-circle-outline\"\n\t\tnotif_status = 'info'\n\telif status == 'SUCCESS':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdomain = subscan.domain.name if subscan else scan.domain.name\n\tduration_msg = None\n\tredirect_link = None\n\tif status == 'RUNNING':\n\t\ttitle = f\"{scan_type} Started\"\n\t\tdescription = f\"{scan_type} has been initiated for {domain}\"\n\t\ticon = \"mdi-play-circle-outline\"\n\t\tnotif_status = 'info'\n\telif status == 'SUCCESS':\n\t\ttitle = f\"{scan_type} Completed\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tduration_msg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tduration_msg = None\n\tredirect_link = None\n\tif status == 'RUNNING':\n\t\ttitle = f\"{scan_type} Started\"\n\t\tdescription = f\"{scan_type} has been initiated for {domain}\"\n\t\ticon = \"mdi-play-circle-outline\"\n\t\tnotif_status = 'info'\n\telif status == 'SUCCESS':\n\t\ttitle = f\"{scan_type} Completed\"\n\t\tdescription = f\"{scan_type} was successful for {domain}\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tredirect_link",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tredirect_link = None\n\tif status == 'RUNNING':\n\t\ttitle = f\"{scan_type} Started\"\n\t\tdescription = f\"{scan_type} has been initiated for {domain}\"\n\t\ticon = \"mdi-play-circle-outline\"\n\t\tnotif_status = 'info'\n\telif status == 'SUCCESS':\n\t\ttitle = f\"{scan_type} Completed\"\n\t\tdescription = f\"{scan_type} was successful for {domain}\"\n\t\ticon = \"mdi-check-circle-outline\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttitle = f\"{scan_type} Started\"\n\t\tdescription = f\"{scan_type} has been initiated for {domain}\"\n\t\ticon = \"mdi-play-circle-outline\"\n\t\tnotif_status = 'info'\n\telif status == 'SUCCESS':\n\t\ttitle = f\"{scan_type} Completed\"\n\t\tdescription = f\"{scan_type} was successful for {domain}\"\n\t\ticon = \"mdi-check-circle-outline\"\n\t\tnotif_status = 'success'\n\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdescription = f\"{scan_type} has been initiated for {domain}\"\n\t\ticon = \"mdi-play-circle-outline\"\n\t\tnotif_status = 'info'\n\telif status == 'SUCCESS':\n\t\ttitle = f\"{scan_type} Completed\"\n\t\tdescription = f\"{scan_type} was successful for {domain}\"\n\t\ticon = \"mdi-check-circle-outline\"\n\t\tnotif_status = 'success'\n\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'\n\telif status == 'ABORTED':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ticon",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ticon = \"mdi-play-circle-outline\"\n\t\tnotif_status = 'info'\n\telif status == 'SUCCESS':\n\t\ttitle = f\"{scan_type} Completed\"\n\t\tdescription = f\"{scan_type} was successful for {domain}\"\n\t\ticon = \"mdi-check-circle-outline\"\n\t\tnotif_status = 'success'\n\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'\n\telif status == 'ABORTED':\n\t\ttitle = f\"{scan_type} Aborted\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tnotif_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tnotif_status = 'info'\n\telif status == 'SUCCESS':\n\t\ttitle = f\"{scan_type} Completed\"\n\t\tdescription = f\"{scan_type} was successful for {domain}\"\n\t\ticon = \"mdi-check-circle-outline\"\n\t\tnotif_status = 'success'\n\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'\n\telif status == 'ABORTED':\n\t\ttitle = f\"{scan_type} Aborted\"\n\t\tdescription = f\"{scan_type} was aborted for {domain}\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttitle = f\"{scan_type} Completed\"\n\t\tdescription = f\"{scan_type} was successful for {domain}\"\n\t\ticon = \"mdi-check-circle-outline\"\n\t\tnotif_status = 'success'\n\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'\n\telif status == 'ABORTED':\n\t\ttitle = f\"{scan_type} Aborted\"\n\t\tdescription = f\"{scan_type} was aborted for {domain}\"\n\t\ticon = \"mdi-alert-circle-outline\"\n\t\tnotif_status = 'warning'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdescription = f\"{scan_type} was successful for {domain}\"\n\t\ticon = \"mdi-check-circle-outline\"\n\t\tnotif_status = 'success'\n\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'\n\telif status == 'ABORTED':\n\t\ttitle = f\"{scan_type} Aborted\"\n\t\tdescription = f\"{scan_type} was aborted for {domain}\"\n\t\ticon = \"mdi-alert-circle-outline\"\n\t\tnotif_status = 'warning'\n\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ticon",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ticon = \"mdi-check-circle-outline\"\n\t\tnotif_status = 'success'\n\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'\n\telif status == 'ABORTED':\n\t\ttitle = f\"{scan_type} Aborted\"\n\t\tdescription = f\"{scan_type} was aborted for {domain}\"\n\t\ticon = \"mdi-alert-circle-outline\"\n\t\tnotif_status = 'warning'\n\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'\n\telif status == 'FAILED':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tnotif_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tnotif_status = 'success'\n\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'\n\telif status == 'ABORTED':\n\t\ttitle = f\"{scan_type} Aborted\"\n\t\tdescription = f\"{scan_type} was aborted for {domain}\"\n\t\ticon = \"mdi-alert-circle-outline\"\n\t\tnotif_status = 'warning'\n\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'\n\telif status == 'FAILED':\n\t\ttitle = f\"{scan_type} Failed\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tduration_msg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tduration_msg = f'Completed in {fields.get(\"Duration\")}'\n\telif status == 'ABORTED':\n\t\ttitle = f\"{scan_type} Aborted\"\n\t\tdescription = f\"{scan_type} was aborted for {domain}\"\n\t\ticon = \"mdi-alert-circle-outline\"\n\t\tnotif_status = 'warning'\n\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'\n\telif status == 'FAILED':\n\t\ttitle = f\"{scan_type} Failed\"\n\t\tdescription = f\"{scan_type} has failed for {domain}\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttitle = f\"{scan_type} Aborted\"\n\t\tdescription = f\"{scan_type} was aborted for {domain}\"\n\t\ticon = \"mdi-alert-circle-outline\"\n\t\tnotif_status = 'warning'\n\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'\n\telif status == 'FAILED':\n\t\ttitle = f\"{scan_type} Failed\"\n\t\tdescription = f\"{scan_type} has failed for {domain}\"\n\t\ticon = \"mdi-close-circle-outline\"\n\t\tnotif_status = 'error'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdescription = f\"{scan_type} was aborted for {domain}\"\n\t\ticon = \"mdi-alert-circle-outline\"\n\t\tnotif_status = 'warning'\n\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'\n\telif status == 'FAILED':\n\t\ttitle = f\"{scan_type} Failed\"\n\t\tdescription = f\"{scan_type} has failed for {domain}\"\n\t\ticon = \"mdi-close-circle-outline\"\n\t\tnotif_status = 'error'\n\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ticon",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ticon = \"mdi-alert-circle-outline\"\n\t\tnotif_status = 'warning'\n\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'\n\telif status == 'FAILED':\n\t\ttitle = f\"{scan_type} Failed\"\n\t\tdescription = f\"{scan_type} has failed for {domain}\"\n\t\ticon = \"mdi-close-circle-outline\"\n\t\tnotif_status = 'error'\n\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'\n\tdescription += f\"<br>Engine: {engine.engine_name if engine else 'N/A'}\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tnotif_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tnotif_status = 'warning'\n\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'\n\telif status == 'FAILED':\n\t\ttitle = f\"{scan_type} Failed\"\n\t\tdescription = f\"{scan_type} has failed for {domain}\"\n\t\ticon = \"mdi-close-circle-outline\"\n\t\tnotif_status = 'error'\n\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'\n\tdescription += f\"<br>Engine: {engine.engine_name if engine else 'N/A'}\"\n\tslug = scan.domain.project.slug if scan else subscan.history.domain.project.slug",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tduration_msg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tduration_msg = f'Aborted in {fields.get(\"Duration\")}'\n\telif status == 'FAILED':\n\t\ttitle = f\"{scan_type} Failed\"\n\t\tdescription = f\"{scan_type} has failed for {domain}\"\n\t\ticon = \"mdi-close-circle-outline\"\n\t\tnotif_status = 'error'\n\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'\n\tdescription += f\"<br>Engine: {engine.engine_name if engine else 'N/A'}\"\n\tslug = scan.domain.project.slug if scan else subscan.history.domain.project.slug\n\tif duration_msg:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttitle = f\"{scan_type} Failed\"\n\t\tdescription = f\"{scan_type} has failed for {domain}\"\n\t\ticon = \"mdi-close-circle-outline\"\n\t\tnotif_status = 'error'\n\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'\n\tdescription += f\"<br>Engine: {engine.engine_name if engine else 'N/A'}\"\n\tslug = scan.domain.project.slug if scan else subscan.history.domain.project.slug\n\tif duration_msg:\n\t\tdescription += f\"<br>{duration_msg}\"\n\tif status != 'RUNNING':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdescription = f\"{scan_type} has failed for {domain}\"\n\t\ticon = \"mdi-close-circle-outline\"\n\t\tnotif_status = 'error'\n\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'\n\tdescription += f\"<br>Engine: {engine.engine_name if engine else 'N/A'}\"\n\tslug = scan.domain.project.slug if scan else subscan.history.domain.project.slug\n\tif duration_msg:\n\t\tdescription += f\"<br>{duration_msg}\"\n\tif status != 'RUNNING':\n\t\tredirect_link = f\"/scan/{slug}/detail/{scan.id}\" if scan else None",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ticon",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ticon = \"mdi-close-circle-outline\"\n\t\tnotif_status = 'error'\n\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'\n\tdescription += f\"<br>Engine: {engine.engine_name if engine else 'N/A'}\"\n\tslug = scan.domain.project.slug if scan else subscan.history.domain.project.slug\n\tif duration_msg:\n\t\tdescription += f\"<br>{duration_msg}\"\n\tif status != 'RUNNING':\n\t\tredirect_link = f\"/scan/{slug}/detail/{scan.id}\" if scan else None\n\tcreate_inappnotification(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tnotif_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tnotif_status = 'error'\n\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'\n\tdescription += f\"<br>Engine: {engine.engine_name if engine else 'N/A'}\"\n\tslug = scan.domain.project.slug if scan else subscan.history.domain.project.slug\n\tif duration_msg:\n\t\tdescription += f\"<br>{duration_msg}\"\n\tif status != 'RUNNING':\n\t\tredirect_link = f\"/scan/{slug}/detail/{scan.id}\" if scan else None\n\tcreate_inappnotification(\n\t\ttitle=title,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tduration_msg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tduration_msg = f'Failed in {fields.get(\"Duration\")}'\n\tdescription += f\"<br>Engine: {engine.engine_name if engine else 'N/A'}\"\n\tslug = scan.domain.project.slug if scan else subscan.history.domain.project.slug\n\tif duration_msg:\n\t\tdescription += f\"<br>{duration_msg}\"\n\tif status != 'RUNNING':\n\t\tredirect_link = f\"/scan/{slug}/detail/{scan.id}\" if scan else None\n\tcreate_inappnotification(\n\t\ttitle=title,\n\t\tdescription=description,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tslug",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tslug = scan.domain.project.slug if scan else subscan.history.domain.project.slug\n\tif duration_msg:\n\t\tdescription += f\"<br>{duration_msg}\"\n\tif status != 'RUNNING':\n\t\tredirect_link = f\"/scan/{slug}/detail/{scan.id}\" if scan else None\n\tcreate_inappnotification(\n\t\ttitle=title,\n\t\tdescription=description,\n\t\tnotification_type='project',\n\t\tproject_slug=slug,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tredirect_link",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tredirect_link = f\"/scan/{slug}/detail/{scan.id}\" if scan else None\n\tcreate_inappnotification(\n\t\ttitle=title,\n\t\tdescription=description,\n\t\tnotification_type='project',\n\t\tproject_slug=slug,\n\t\ticon=icon,\n\t\tis_read=False,\n\t\tstatus=notif_status,\n\t\tredirect_link=redirect_link,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tif not (notif and notif.send_scan_status_notif):\n\t\treturn\n\t# Build fields\n\turl = None\n\tfields = {}\n\tif add_meta_info:\n\t\tengine = EngineType.objects.filter(pk=engine_id).first()\n\t\tscan = ScanHistory.objects.filter(pk=scan_history_id).first()\n\t\tsubscan = SubScan.objects.filter(pk=subscan_id).first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\turl = None\n\tfields = {}\n\tif add_meta_info:\n\t\tengine = EngineType.objects.filter(pk=engine_id).first()\n\t\tscan = ScanHistory.objects.filter(pk=scan_history_id).first()\n\t\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t\turl = get_scan_url(scan_history_id)\n\t\tif status:\n\t\t\tfields['Status'] = f'**{status}**'\n\t\tif engine:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfields = {}\n\tif add_meta_info:\n\t\tengine = EngineType.objects.filter(pk=engine_id).first()\n\t\tscan = ScanHistory.objects.filter(pk=scan_history_id).first()\n\t\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t\turl = get_scan_url(scan_history_id)\n\t\tif status:\n\t\t\tfields['Status'] = f'**{status}**'\n\t\tif engine:\n\t\t\tfields['Engine'] = engine.engine_name",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tengine",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tengine = EngineType.objects.filter(pk=engine_id).first()\n\t\tscan = ScanHistory.objects.filter(pk=scan_history_id).first()\n\t\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t\turl = get_scan_url(scan_history_id)\n\t\tif status:\n\t\t\tfields['Status'] = f'**{status}**'\n\t\tif engine:\n\t\t\tfields['Engine'] = engine.engine_name\n\t\tif scan:\n\t\t\tfields['Scan ID'] = f'[#{scan.id}]({url})'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan = ScanHistory.objects.filter(pk=scan_history_id).first()\n\t\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t\turl = get_scan_url(scan_history_id)\n\t\tif status:\n\t\t\tfields['Status'] = f'**{status}**'\n\t\tif engine:\n\t\t\tfields['Engine'] = engine.engine_name\n\t\tif scan:\n\t\t\tfields['Scan ID'] = f'[#{scan.id}]({url})'\n\t\tif subscan:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubscan = SubScan.objects.filter(pk=subscan_id).first()\n\t\turl = get_scan_url(scan_history_id)\n\t\tif status:\n\t\t\tfields['Status'] = f'**{status}**'\n\t\tif engine:\n\t\t\tfields['Engine'] = engine.engine_name\n\t\tif scan:\n\t\t\tfields['Scan ID'] = f'[#{scan.id}]({url})'\n\t\tif subscan:\n\t\t\turl = get_scan_url(scan_history_id, subscan_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\turl = get_scan_url(scan_history_id)\n\t\tif status:\n\t\t\tfields['Status'] = f'**{status}**'\n\t\tif engine:\n\t\t\tfields['Engine'] = engine.engine_name\n\t\tif scan:\n\t\t\tfields['Scan ID'] = f'[#{scan.id}]({url})'\n\t\tif subscan:\n\t\t\turl = get_scan_url(scan_history_id, subscan_id)\n\t\t\tfields['Subscan ID'] = f'[#{subscan.id}]({url})'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tfields['Status']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tfields['Status'] = f'**{status}**'\n\t\tif engine:\n\t\t\tfields['Engine'] = engine.engine_name\n\t\tif scan:\n\t\t\tfields['Scan ID'] = f'[#{scan.id}]({url})'\n\t\tif subscan:\n\t\t\turl = get_scan_url(scan_history_id, subscan_id)\n\t\t\tfields['Subscan ID'] = f'[#{subscan.id}]({url})'\n\ttitle = get_task_title(task_name, scan_history_id, subscan_id)\n\tif status:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tfields['Engine']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tfields['Engine'] = engine.engine_name\n\t\tif scan:\n\t\t\tfields['Scan ID'] = f'[#{scan.id}]({url})'\n\t\tif subscan:\n\t\t\turl = get_scan_url(scan_history_id, subscan_id)\n\t\t\tfields['Subscan ID'] = f'[#{subscan.id}]({url})'\n\ttitle = get_task_title(task_name, scan_history_id, subscan_id)\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\tmsg = f'{title} {status}\\n'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\turl = get_scan_url(scan_history_id, subscan_id)\n\t\t\tfields['Subscan ID'] = f'[#{subscan.id}]({url})'\n\ttitle = get_task_title(task_name, scan_history_id, subscan_id)\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\t# Add fields to update\n\tfor k, v in update_fields.items():\n\t\tfields[k] = v",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttitle = get_task_title(task_name, scan_history_id, subscan_id)\n\tif status:\n\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\t# Add fields to update\n\tfor k, v in update_fields.items():\n\t\tfields[k] = v\n\t# Add traceback to notif\n\tif traceback and notif.send_scan_tracebacks:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tseverity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tseverity = STATUS_TO_SEVERITIES.get(status)\n\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\t# Add fields to update\n\tfor k, v in update_fields.items():\n\t\tfields[k] = v\n\t# Add traceback to notif\n\tif traceback and notif.send_scan_tracebacks:\n\t\tfields['Traceback'] = f'```\\n{traceback}\\n```'\n\t# Add files to notif",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmsg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmsg = f'{title} {status}\\n'\n\tmsg += '\\n🡆 '.join(f'**{k}:** {v}' for k, v in fields.items())\n\t# Add fields to update\n\tfor k, v in update_fields.items():\n\t\tfields[k] = v\n\t# Add traceback to notif\n\tif traceback and notif.send_scan_tracebacks:\n\t\tfields['Traceback'] = f'```\\n{traceback}\\n```'\n\t# Add files to notif\n\tfiles = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tfields[k]",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tfields[k] = v\n\t# Add traceback to notif\n\tif traceback and notif.send_scan_tracebacks:\n\t\tfields['Traceback'] = f'```\\n{traceback}\\n```'\n\t# Add files to notif\n\tfiles = []\n\tattach_file = (\n\t\tnotif.send_scan_output_file and\n\t\toutput_path and\n\t\tresult and",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tfields['Traceback']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tfields['Traceback'] = f'```\\n{traceback}\\n```'\n\t# Add files to notif\n\tfiles = []\n\tattach_file = (\n\t\tnotif.send_scan_output_file and\n\t\toutput_path and\n\t\tresult and\n\t\tnot traceback\n\t)\n\tif attach_file:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfiles",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfiles = []\n\tattach_file = (\n\t\tnotif.send_scan_output_file and\n\t\toutput_path and\n\t\tresult and\n\t\tnot traceback\n\t)\n\tif attach_file:\n\t\toutput_title = output_path.split('/')[-1]\n\t\tfiles = [(output_path, output_title)]",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tattach_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tattach_file = (\n\t\tnotif.send_scan_output_file and\n\t\toutput_path and\n\t\tresult and\n\t\tnot traceback\n\t)\n\tif attach_file:\n\t\toutput_title = output_path.split('/')[-1]\n\t\tfiles = [(output_path, output_title)]\n\t# Send notif",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\toutput_title",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\toutput_title = output_path.split('/')[-1]\n\t\tfiles = [(output_path, output_title)]\n\t# Send notif\n\topts = {\n\t\t'title': title,\n\t\t'url': url,\n\t\t'files': files,\n\t\t'severity': severity,\n\t\t'fields': fields,\n\t\t'fields_append': update_fields.keys()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tfiles",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tfiles = [(output_path, output_title)]\n\t# Send notif\n\topts = {\n\t\t'title': title,\n\t\t'url': url,\n\t\t'files': files,\n\t\t'severity': severity,\n\t\t'fields': fields,\n\t\t'fields_append': update_fields.keys()\n\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\topts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\topts = {\n\t\t'title': title,\n\t\t'url': url,\n\t\t'files': files,\n\t\t'severity': severity,\n\t\t'fields': fields,\n\t\t'fields_append': update_fields.keys()\n\t}\n\tsend_notif(\n\t\tmsg,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnotif",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnotif = Notification.objects.first()\n\tdo_send = notif and notif.send_to_discord and notif.discord_hook_url\n\tif not do_send:\n\t\treturn False\n\twebhook = DiscordWebhook(\n\t\turl=notif.discord_hook_url,\n\t\trate_limit_retry=True,\n\t\tusername=title or \"reNgine Discord Plugin\"\n\t)\n\twith open(file_path, \"rb\") as f:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdo_send",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdo_send = notif and notif.send_to_discord and notif.discord_hook_url\n\tif not do_send:\n\t\treturn False\n\twebhook = DiscordWebhook(\n\t\turl=notif.discord_hook_url,\n\t\trate_limit_retry=True,\n\t\tusername=title or \"reNgine Discord Plugin\"\n\t)\n\twith open(file_path, \"rb\") as f:\n\t\thead, tail = os.path.split(file_path)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\twebhook",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\twebhook = DiscordWebhook(\n\t\turl=notif.discord_hook_url,\n\t\trate_limit_retry=True,\n\t\tusername=title or \"reNgine Discord Plugin\"\n\t)\n\twith open(file_path, \"rb\") as f:\n\t\thead, tail = os.path.split(file_path)\n\t\twebhook.add_file(file=f.read(), filename=tail)\n\twebhook.execute()\n@app.task(name='send_hackerone_report', bind=False, queue='send_hackerone_report_queue')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvulnerability",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvulnerability = Vulnerability.objects.get(id=vulnerability_id)\n\tseverities = {v: k for k,v in NUCLEI_SEVERITY_MAP.items()}\n\t# can only send vulnerability report if team_handle exists and send_report is True and api_key exists\n\thackerone = Hackerone.objects.filter(send_report=True).first()\n\tapi_key = HackerOneAPIKey.objects.filter(username__isnull=False, key__isnull=False).first()\n\tif not (vulnerability.target_domain.h1_team_handle and hackerone and api_key):\n\t\tlogger.error('Missing required data: team handle, Hackerone config, or API key.')\n\t\treturn {\"status_code\": 400, \"message\": \"Missing required data\"}\n\tseverity_value = severities[vulnerability.severity]\n\ttpl = hackerone.report_template or \"\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tseverities",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tseverities = {v: k for k,v in NUCLEI_SEVERITY_MAP.items()}\n\t# can only send vulnerability report if team_handle exists and send_report is True and api_key exists\n\thackerone = Hackerone.objects.filter(send_report=True).first()\n\tapi_key = HackerOneAPIKey.objects.filter(username__isnull=False, key__isnull=False).first()\n\tif not (vulnerability.target_domain.h1_team_handle and hackerone and api_key):\n\t\tlogger.error('Missing required data: team handle, Hackerone config, or API key.')\n\t\treturn {\"status_code\": 400, \"message\": \"Missing required data\"}\n\tseverity_value = severities[vulnerability.severity]\n\ttpl = hackerone.report_template or \"\"\n\ttpl_vars = {",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thackerone",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thackerone = Hackerone.objects.filter(send_report=True).first()\n\tapi_key = HackerOneAPIKey.objects.filter(username__isnull=False, key__isnull=False).first()\n\tif not (vulnerability.target_domain.h1_team_handle and hackerone and api_key):\n\t\tlogger.error('Missing required data: team handle, Hackerone config, or API key.')\n\t\treturn {\"status_code\": 400, \"message\": \"Missing required data\"}\n\tseverity_value = severities[vulnerability.severity]\n\ttpl = hackerone.report_template or \"\"\n\ttpl_vars = {\n\t\t'{vulnerability_name}': vulnerability.name,\n\t\t'{vulnerable_url}': vulnerability.http_url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tapi_key",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tapi_key = HackerOneAPIKey.objects.filter(username__isnull=False, key__isnull=False).first()\n\tif not (vulnerability.target_domain.h1_team_handle and hackerone and api_key):\n\t\tlogger.error('Missing required data: team handle, Hackerone config, or API key.')\n\t\treturn {\"status_code\": 400, \"message\": \"Missing required data\"}\n\tseverity_value = severities[vulnerability.severity]\n\ttpl = hackerone.report_template or \"\"\n\ttpl_vars = {\n\t\t'{vulnerability_name}': vulnerability.name,\n\t\t'{vulnerable_url}': vulnerability.http_url,\n\t\t'{vulnerability_severity}': severity_value,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tseverity_value",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tseverity_value = severities[vulnerability.severity]\n\ttpl = hackerone.report_template or \"\"\n\ttpl_vars = {\n\t\t'{vulnerability_name}': vulnerability.name,\n\t\t'{vulnerable_url}': vulnerability.http_url,\n\t\t'{vulnerability_severity}': severity_value,\n\t\t'{vulnerability_description}': vulnerability.description or '',\n\t\t'{vulnerability_extracted_results}': vulnerability.extracted_results or '',\n\t\t'{vulnerability_reference}': vulnerability.reference or '',\n\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttpl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttpl = hackerone.report_template or \"\"\n\ttpl_vars = {\n\t\t'{vulnerability_name}': vulnerability.name,\n\t\t'{vulnerable_url}': vulnerability.http_url,\n\t\t'{vulnerability_severity}': severity_value,\n\t\t'{vulnerability_description}': vulnerability.description or '',\n\t\t'{vulnerability_extracted_results}': vulnerability.extracted_results or '',\n\t\t'{vulnerability_reference}': vulnerability.reference or '',\n\t}\n\t# Replace syntax of report template with actual content",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttpl_vars",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttpl_vars = {\n\t\t'{vulnerability_name}': vulnerability.name,\n\t\t'{vulnerable_url}': vulnerability.http_url,\n\t\t'{vulnerability_severity}': severity_value,\n\t\t'{vulnerability_description}': vulnerability.description or '',\n\t\t'{vulnerability_extracted_results}': vulnerability.extracted_results or '',\n\t\t'{vulnerability_reference}': vulnerability.reference or '',\n\t}\n\t# Replace syntax of report template with actual content\n\tfor key, value in tpl_vars.items():",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\ttpl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\ttpl = tpl.replace(key, value)\n\tdata = {\n\t\t\"data\": {\n\t\t\t\"type\": \"report\",\n\t\t\t\"attributes\": {\n\t\t\t\t\"team_handle\": vulnerability.target_domain.h1_team_handle,\n\t\t\t\t\"title\": f'{vulnerability.name} found in {vulnerability.http_url}',\n\t\t\t\t\"vulnerability_information\": tpl,\n\t\t\t\t\"severity_rating\": severity_value,\n\t\t\t\t\"impact\": \"More information about the impact and vulnerability can be found here: \\n\" + vulnerability.reference if vulnerability.reference else \"NA\",",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdata = {\n\t\t\"data\": {\n\t\t\t\"type\": \"report\",\n\t\t\t\"attributes\": {\n\t\t\t\t\"team_handle\": vulnerability.target_domain.h1_team_handle,\n\t\t\t\t\"title\": f'{vulnerability.name} found in {vulnerability.http_url}',\n\t\t\t\t\"vulnerability_information\": tpl,\n\t\t\t\t\"severity_rating\": severity_value,\n\t\t\t\t\"impact\": \"More information about the impact and vulnerability can be found here: \\n\" + vulnerability.reference if vulnerability.reference else \"NA\",\n\t\t\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\theaders",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\theaders = {\n\t\t'Content-Type': 'application/json',\n\t\t'Accept': 'application/json'\n\t}\n\tr = requests.post(\n\t\t'https://api.hackerone.com/v1/hackers/reports',\n\t\tauth=(api_key.username, api_key.key),\n\t\tjson=data,\n\t\theaders=headers\n\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tr = requests.post(\n\t\t'https://api.hackerone.com/v1/hackers/reports',\n\t\tauth=(api_key.username, api_key.key),\n\t\tjson=data,\n\t\theaders=headers\n\t)\n\tresponse = r.json()\n\tstatus_code = r.status_code\n\tif status_code == 201:\n\t\tvulnerability.hackerone_report_id = response['data'][\"id\"]",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresponse = r.json()\n\tstatus_code = r.status_code\n\tif status_code == 201:\n\t\tvulnerability.hackerone_report_id = response['data'][\"id\"]\n\t\tvulnerability.open_status = False\n\t\tvulnerability.save()\n\t\treturn {\"status_code\": r.status_code, \"message\": \"Report sent successfully\"}\n\tlogger.error(f\"Error sending report to HackerOne\")\n\treturn {\"status_code\": r.status_code, \"message\": response}\n#-------------#",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tstatus_code",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tstatus_code = r.status_code\n\tif status_code == 201:\n\t\tvulnerability.hackerone_report_id = response['data'][\"id\"]\n\t\tvulnerability.open_status = False\n\t\tvulnerability.save()\n\t\treturn {\"status_code\": r.status_code, \"message\": \"Report sent successfully\"}\n\tlogger.error(f\"Error sending report to HackerOne\")\n\treturn {\"status_code\": r.status_code, \"message\": response}\n#-------------#\n# Utils tasks #",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability.hackerone_report_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulnerability.hackerone_report_id = response['data'][\"id\"]\n\t\tvulnerability.open_status = False\n\t\tvulnerability.save()\n\t\treturn {\"status_code\": r.status_code, \"message\": \"Report sent successfully\"}\n\tlogger.error(f\"Error sending report to HackerOne\")\n\treturn {\"status_code\": r.status_code, \"message\": response}\n#-------------#\n# Utils tasks #\n#-------------#\n@app.task(name='parse_nmap_results', bind=False, queue='parse_nmap_results_queue')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability.open_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulnerability.open_status = False\n\t\tvulnerability.save()\n\t\treturn {\"status_code\": r.status_code, \"message\": \"Report sent successfully\"}\n\tlogger.error(f\"Error sending report to HackerOne\")\n\treturn {\"status_code\": r.status_code, \"message\": response}\n#-------------#\n# Utils tasks #\n#-------------#\n@app.task(name='parse_nmap_results', bind=False, queue='parse_nmap_results_queue')\ndef parse_nmap_results(xml_file, output_file=None):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcontent",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcontent = f.read()\n\t\ttry:\n\t\t\tnmap_results = xmltodict.parse(content) # parse XML to dict\n\t\texcept Exception as e:\n\t\t\tlogger.exception(e)\n\t\t\tlogger.error(f'Cannot parse {xml_file} to valid JSON. Skipping.')\n\t\t\treturn []\n\t# Write JSON to output file\n\tif output_file:\n\t\twith open(output_file, 'w') as f:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tnmap_results",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tnmap_results = xmltodict.parse(content) # parse XML to dict\n\t\texcept Exception as e:\n\t\t\tlogger.exception(e)\n\t\t\tlogger.error(f'Cannot parse {xml_file} to valid JSON. Skipping.')\n\t\t\treturn []\n\t# Write JSON to output file\n\tif output_file:\n\t\twith open(output_file, 'w') as f:\n\t\t\tjson.dump(nmap_results, f, indent=4)\n\tlogger.warning(json.dumps(nmap_results, indent=4))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thosts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thosts = (\n\t\tnmap_results\n\t\t.get('nmaprun', {})\n\t\t.get('host', {})\n\t)\n\tall_vulns = []\n\tif isinstance(hosts, dict):\n\t\thosts = [hosts]\n\tfor host in hosts:\n\t\t# Grab hostname / IP from output",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tall_vulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tall_vulns = []\n\tif isinstance(hosts, dict):\n\t\thosts = [hosts]\n\tfor host in hosts:\n\t\t# Grab hostname / IP from output\n\t\thostnames_dict = host.get('hostnames', {})\n\t\tif hostnames_dict:\n\t\t\t# Ensure that hostnames['hostname'] is a list for consistency\n\t\t\thostnames_list = hostnames_dict['hostname'] if isinstance(hostnames_dict['hostname'], list) else [hostnames_dict['hostname']]\n\t\t\t# Extract all the @name values from the list of dictionaries",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thosts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thosts = [hosts]\n\tfor host in hosts:\n\t\t# Grab hostname / IP from output\n\t\thostnames_dict = host.get('hostnames', {})\n\t\tif hostnames_dict:\n\t\t\t# Ensure that hostnames['hostname'] is a list for consistency\n\t\t\thostnames_list = hostnames_dict['hostname'] if isinstance(hostnames_dict['hostname'], list) else [hostnames_dict['hostname']]\n\t\t\t# Extract all the @name values from the list of dictionaries\n\t\t\thostnames = [entry.get('@name') for entry in hostnames_list]\n\t\telse:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thostnames_dict",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thostnames_dict = host.get('hostnames', {})\n\t\tif hostnames_dict:\n\t\t\t# Ensure that hostnames['hostname'] is a list for consistency\n\t\t\thostnames_list = hostnames_dict['hostname'] if isinstance(hostnames_dict['hostname'], list) else [hostnames_dict['hostname']]\n\t\t\t# Extract all the @name values from the list of dictionaries\n\t\t\thostnames = [entry.get('@name') for entry in hostnames_list]\n\t\telse:\n\t\t\thostnames = [host.get('address')['@addr']]\n\t\t# Iterate over each hostname for each port\n\t\tfor hostname in hostnames:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thostnames_list",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thostnames_list = hostnames_dict['hostname'] if isinstance(hostnames_dict['hostname'], list) else [hostnames_dict['hostname']]\n\t\t\t# Extract all the @name values from the list of dictionaries\n\t\t\thostnames = [entry.get('@name') for entry in hostnames_list]\n\t\telse:\n\t\t\thostnames = [host.get('address')['@addr']]\n\t\t# Iterate over each hostname for each port\n\t\tfor hostname in hostnames:\n\t\t\t# Grab ports from output\n\t\t\tports = host.get('ports', {}).get('port', [])\n\t\t\tif isinstance(ports, dict):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thostnames",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thostnames = [entry.get('@name') for entry in hostnames_list]\n\t\telse:\n\t\t\thostnames = [host.get('address')['@addr']]\n\t\t# Iterate over each hostname for each port\n\t\tfor hostname in hostnames:\n\t\t\t# Grab ports from output\n\t\t\tports = host.get('ports', {}).get('port', [])\n\t\t\tif isinstance(ports, dict):\n\t\t\t\tports = [ports]\n\t\t\tfor port in ports:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thostnames",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thostnames = [host.get('address')['@addr']]\n\t\t# Iterate over each hostname for each port\n\t\tfor hostname in hostnames:\n\t\t\t# Grab ports from output\n\t\t\tports = host.get('ports', {}).get('port', [])\n\t\t\tif isinstance(ports, dict):\n\t\t\t\tports = [ports]\n\t\t\tfor port in ports:\n\t\t\t\turl_vulns = []\n\t\t\t\tport_number = port['@portid']",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tports",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tports = host.get('ports', {}).get('port', [])\n\t\t\tif isinstance(ports, dict):\n\t\t\t\tports = [ports]\n\t\t\tfor port in ports:\n\t\t\t\turl_vulns = []\n\t\t\t\tport_number = port['@portid']\n\t\t\t\turl = sanitize_url(f'{hostname}:{port_number}')\n\t\t\t\tlogger.info(f'Parsing nmap results for {hostname}:{port_number} ...')\n\t\t\t\tif not port_number or not port_number.isdigit():\n\t\t\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tports",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tports = [ports]\n\t\t\tfor port in ports:\n\t\t\t\turl_vulns = []\n\t\t\t\tport_number = port['@portid']\n\t\t\t\turl = sanitize_url(f'{hostname}:{port_number}')\n\t\t\t\tlogger.info(f'Parsing nmap results for {hostname}:{port_number} ...')\n\t\t\t\tif not port_number or not port_number.isdigit():\n\t\t\t\t\tcontinue\n\t\t\t\tport_protocol = port['@protocol']\n\t\t\t\tscripts = port.get('script', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\turl_vulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\turl_vulns = []\n\t\t\t\tport_number = port['@portid']\n\t\t\t\turl = sanitize_url(f'{hostname}:{port_number}')\n\t\t\t\tlogger.info(f'Parsing nmap results for {hostname}:{port_number} ...')\n\t\t\t\tif not port_number or not port_number.isdigit():\n\t\t\t\t\tcontinue\n\t\t\t\tport_protocol = port['@protocol']\n\t\t\t\tscripts = port.get('script', [])\n\t\t\t\tif isinstance(scripts, dict):\n\t\t\t\t\tscripts = [scripts]",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tport_number",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tport_number = port['@portid']\n\t\t\t\turl = sanitize_url(f'{hostname}:{port_number}')\n\t\t\t\tlogger.info(f'Parsing nmap results for {hostname}:{port_number} ...')\n\t\t\t\tif not port_number or not port_number.isdigit():\n\t\t\t\t\tcontinue\n\t\t\t\tport_protocol = port['@protocol']\n\t\t\t\tscripts = port.get('script', [])\n\t\t\t\tif isinstance(scripts, dict):\n\t\t\t\t\tscripts = [scripts]\n\t\t\t\tfor script in scripts:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\turl = sanitize_url(f'{hostname}:{port_number}')\n\t\t\t\tlogger.info(f'Parsing nmap results for {hostname}:{port_number} ...')\n\t\t\t\tif not port_number or not port_number.isdigit():\n\t\t\t\t\tcontinue\n\t\t\t\tport_protocol = port['@protocol']\n\t\t\t\tscripts = port.get('script', [])\n\t\t\t\tif isinstance(scripts, dict):\n\t\t\t\t\tscripts = [scripts]\n\t\t\t\tfor script in scripts:\n\t\t\t\t\tscript_id = script['@id']",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tport_protocol",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tport_protocol = port['@protocol']\n\t\t\t\tscripts = port.get('script', [])\n\t\t\t\tif isinstance(scripts, dict):\n\t\t\t\t\tscripts = [scripts]\n\t\t\t\tfor script in scripts:\n\t\t\t\t\tscript_id = script['@id']\n\t\t\t\t\tscript_output = script['@output']\n\t\t\t\t\tscript_output_table = script.get('table', [])\n\t\t\t\t\tlogger.debug(f'Ran nmap script \"{script_id}\" on {port_number}/{port_protocol}:\\n{script_output}\\n')\n\t\t\t\t\tif script_id == 'vulscan':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tscripts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tscripts = port.get('script', [])\n\t\t\t\tif isinstance(scripts, dict):\n\t\t\t\t\tscripts = [scripts]\n\t\t\t\tfor script in scripts:\n\t\t\t\t\tscript_id = script['@id']\n\t\t\t\t\tscript_output = script['@output']\n\t\t\t\t\tscript_output_table = script.get('table', [])\n\t\t\t\t\tlogger.debug(f'Ran nmap script \"{script_id}\" on {port_number}/{port_protocol}:\\n{script_output}\\n')\n\t\t\t\t\tif script_id == 'vulscan':\n\t\t\t\t\t\tvulns = parse_nmap_vulscan_output(script_output)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tscripts",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tscripts = [scripts]\n\t\t\t\tfor script in scripts:\n\t\t\t\t\tscript_id = script['@id']\n\t\t\t\t\tscript_output = script['@output']\n\t\t\t\t\tscript_output_table = script.get('table', [])\n\t\t\t\t\tlogger.debug(f'Ran nmap script \"{script_id}\" on {port_number}/{port_protocol}:\\n{script_output}\\n')\n\t\t\t\t\tif script_id == 'vulscan':\n\t\t\t\t\t\tvulns = parse_nmap_vulscan_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\telif script_id == 'vulners':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tscript_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tscript_id = script['@id']\n\t\t\t\t\tscript_output = script['@output']\n\t\t\t\t\tscript_output_table = script.get('table', [])\n\t\t\t\t\tlogger.debug(f'Ran nmap script \"{script_id}\" on {port_number}/{port_protocol}:\\n{script_output}\\n')\n\t\t\t\t\tif script_id == 'vulscan':\n\t\t\t\t\t\tvulns = parse_nmap_vulscan_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\telif script_id == 'vulners':\n\t\t\t\t\t\tvulns = parse_nmap_vulners_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tscript_output",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tscript_output = script['@output']\n\t\t\t\t\tscript_output_table = script.get('table', [])\n\t\t\t\t\tlogger.debug(f'Ran nmap script \"{script_id}\" on {port_number}/{port_protocol}:\\n{script_output}\\n')\n\t\t\t\t\tif script_id == 'vulscan':\n\t\t\t\t\t\tvulns = parse_nmap_vulscan_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\telif script_id == 'vulners':\n\t\t\t\t\t\tvulns = parse_nmap_vulners_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\t# elif script_id == 'http-server-header':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tscript_output_table",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tscript_output_table = script.get('table', [])\n\t\t\t\t\tlogger.debug(f'Ran nmap script \"{script_id}\" on {port_number}/{port_protocol}:\\n{script_output}\\n')\n\t\t\t\t\tif script_id == 'vulscan':\n\t\t\t\t\t\tvulns = parse_nmap_vulscan_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\telif script_id == 'vulners':\n\t\t\t\t\t\tvulns = parse_nmap_vulners_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\t# elif script_id == 'http-server-header':\n\t\t\t\t\t# \tTODO: nmap can help find technologies as well using the http-server-header script",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\t\tvulns = parse_nmap_vulscan_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\telif script_id == 'vulners':\n\t\t\t\t\t\tvulns = parse_nmap_vulners_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\t# elif script_id == 'http-server-header':\n\t\t\t\t\t# \tTODO: nmap can help find technologies as well using the http-server-header script\n\t\t\t\t\t# \tregex = r'(\\w+)/([\\d.]+)\\s?(?:\\((\\w+)\\))?'\n\t\t\t\t\t# \ttech_name, tech_version, tech_os = re.match(regex, test_string).groups()\n\t\t\t\t\t# \tTechnology.objects.get_or_create(...)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\t\tvulns = parse_nmap_vulners_output(script_output)\n\t\t\t\t\t\turl_vulns.extend(vulns)\n\t\t\t\t\t# elif script_id == 'http-server-header':\n\t\t\t\t\t# \tTODO: nmap can help find technologies as well using the http-server-header script\n\t\t\t\t\t# \tregex = r'(\\w+)/([\\d.]+)\\s?(?:\\((\\w+)\\))?'\n\t\t\t\t\t# \ttech_name, tech_version, tech_os = re.match(regex, test_string).groups()\n\t\t\t\t\t# \tTechnology.objects.get_or_create(...)\n\t\t\t\t\t# elif script_id == 'http_csrf':\n\t\t\t\t\t# \tvulns = parse_nmap_http_csrf_output(script_output)\n\t\t\t\t\t# \turl_vulns.extend(vulns)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tvuln['source']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tvuln['source'] = NMAP\n\t\t\t\t\t# TODO: This should extend to any URL, not just HTTP\n\t\t\t\t\tvuln['http_url'] = url\n\t\t\t\t\tif 'http_path' in vuln:\n\t\t\t\t\t\tvuln['http_url'] += vuln['http_path']\n\t\t\t\t\tall_vulns.append(vuln)\n\treturn all_vulns\ndef parse_nmap_http_csrf_output(script_output):\n\tpass\ndef parse_nmap_vulscan_output(script_output):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tvuln['http_url']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tvuln['http_url'] = url\n\t\t\t\t\tif 'http_path' in vuln:\n\t\t\t\t\t\tvuln['http_url'] += vuln['http_path']\n\t\t\t\t\tall_vulns.append(vuln)\n\treturn all_vulns\ndef parse_nmap_http_csrf_output(script_output):\n\tpass\ndef parse_nmap_vulscan_output(script_output):\n\t\"\"\"Parse nmap vulscan script output.\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdata = {}\n\tvulns = []\n\tprovider_name = ''\n\t# Sort all vulns found by provider so that we can match each provider with\n\t# a function that pulls from its API to get more info about the\n\t# vulnerability.\n\tfor line in script_output.splitlines():\n\t\tif not line:\n\t\t\tcontinue\n\t\tif not line.startswith('['): # provider line",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvulns = []\n\tprovider_name = ''\n\t# Sort all vulns found by provider so that we can match each provider with\n\t# a function that pulls from its API to get more info about the\n\t# vulnerability.\n\tfor line in script_output.splitlines():\n\t\tif not line:\n\t\t\tcontinue\n\t\tif not line.startswith('['): # provider line\n\t\t\tif \"No findings\" in line:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tprovider_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tprovider_name = ''\n\t# Sort all vulns found by provider so that we can match each provider with\n\t# a function that pulls from its API to get more info about the\n\t# vulnerability.\n\tfor line in script_output.splitlines():\n\t\tif not line:\n\t\t\tcontinue\n\t\tif not line.startswith('['): # provider line\n\t\t\tif \"No findings\" in line:\n\t\t\t\tlogger.info(f\"No findings: {line}\")",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata[provider_name]",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tdata[provider_name] = {'url': provider_url.rstrip(':'), 'entries': []}\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\t# Log a warning\n\t\t\t\tlogger.warning(f\"Unexpected line format: {line}\")\n\t\t\t\tcontinue\n\t\treg = r'\\[(.*)\\] (.*)'\n\t\tmatches = re.match(reg, line)\n\t\tid, title = matches.groups()\n\t\tentry = {'id': id, 'title': title}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\treg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\treg = r'\\[(.*)\\] (.*)'\n\t\tmatches = re.match(reg, line)\n\t\tid, title = matches.groups()\n\t\tentry = {'id': id, 'title': title}\n\t\tdata[provider_name]['entries'].append(entry)\n\tlogger.warning('Vulscan parsed output:')\n\tlogger.warning(pprint.pformat(data))\n\tfor provider_name in data:\n\t\tif provider_name == 'Exploit-DB':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tmatches",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tmatches = re.match(reg, line)\n\t\tid, title = matches.groups()\n\t\tentry = {'id': id, 'title': title}\n\t\tdata[provider_name]['entries'].append(entry)\n\tlogger.warning('Vulscan parsed output:')\n\tlogger.warning(pprint.pformat(data))\n\tfor provider_name in data:\n\t\tif provider_name == 'Exploit-DB':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')\n\t\t\tpass",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tentry",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tentry = {'id': id, 'title': title}\n\t\tdata[provider_name]['entries'].append(entry)\n\tlogger.warning('Vulscan parsed output:')\n\tlogger.warning(pprint.pformat(data))\n\tfor provider_name in data:\n\t\tif provider_name == 'Exploit-DB':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')\n\t\t\tpass\n\t\telif provider_name == 'IBM X-Force':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcve_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tcve_id = entry['id']\n\t\t\t\tvuln = cve_to_vuln(cve_id)\n\t\t\t\tvulns.append(vuln)\n\t\telif provider_name == 'OSVDB':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')\n\t\t\tpass\n\t\telif provider_name == 'OpenVAS (Nessus)':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')\n\t\t\tpass\n\t\telif provider_name == 'SecurityFocus':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tvuln",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tvuln = cve_to_vuln(cve_id)\n\t\t\t\tvulns.append(vuln)\n\t\telif provider_name == 'OSVDB':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')\n\t\t\tpass\n\t\telif provider_name == 'OpenVAS (Nessus)':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')\n\t\t\tpass\n\t\telif provider_name == 'SecurityFocus':\n\t\t\tlogger.error(f'Provider {provider_name} is not supported YET.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvulns",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvulns = []\n\t# Check for CVE in script output\n\tCVE_REGEX = re.compile(r'.*(CVE-\\d\\d\\d\\d-\\d+).*')\n\tmatches = CVE_REGEX.findall(script_output)\n\tmatches = list(dict.fromkeys(matches))\n\tfor cve_id in matches: # get CVE info\n\t\tvuln = cve_to_vuln(cve_id, vuln_type='nmap-vulners-nse')\n\t\tif vuln:\n\t\t\tvulns.append(vuln)\n\treturn vulns",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tCVE_REGEX",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tCVE_REGEX = re.compile(r'.*(CVE-\\d\\d\\d\\d-\\d+).*')\n\tmatches = CVE_REGEX.findall(script_output)\n\tmatches = list(dict.fromkeys(matches))\n\tfor cve_id in matches: # get CVE info\n\t\tvuln = cve_to_vuln(cve_id, vuln_type='nmap-vulners-nse')\n\t\tif vuln:\n\t\t\tvulns.append(vuln)\n\treturn vulns\ndef cve_to_vuln(cve_id, vuln_type=''):\n\t\"\"\"Search for a CVE using CVESearch and return Vulnerability data.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmatches",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmatches = CVE_REGEX.findall(script_output)\n\tmatches = list(dict.fromkeys(matches))\n\tfor cve_id in matches: # get CVE info\n\t\tvuln = cve_to_vuln(cve_id, vuln_type='nmap-vulners-nse')\n\t\tif vuln:\n\t\t\tvulns.append(vuln)\n\treturn vulns\ndef cve_to_vuln(cve_id, vuln_type=''):\n\t\"\"\"Search for a CVE using CVESearch and return Vulnerability data.\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmatches",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmatches = list(dict.fromkeys(matches))\n\tfor cve_id in matches: # get CVE info\n\t\tvuln = cve_to_vuln(cve_id, vuln_type='nmap-vulners-nse')\n\t\tif vuln:\n\t\t\tvulns.append(vuln)\n\treturn vulns\ndef cve_to_vuln(cve_id, vuln_type=''):\n\t\"\"\"Search for a CVE using CVESearch and return Vulnerability data.\n\tArgs:\n\t\tcve_id (str): CVE ID in the form CVE-*",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln = cve_to_vuln(cve_id, vuln_type='nmap-vulners-nse')\n\t\tif vuln:\n\t\t\tvulns.append(vuln)\n\treturn vulns\ndef cve_to_vuln(cve_id, vuln_type=''):\n\t\"\"\"Search for a CVE using CVESearch and return Vulnerability data.\n\tArgs:\n\t\tcve_id (str): CVE ID in the form CVE-*\n\tReturns:\n\t\tdict: Vulnerability dict.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcve_info",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcve_info = CVESearch('https://cve.circl.lu').id(cve_id)\n\tif not cve_info:\n\t\tlogger.error(f'Could not fetch CVE info for cve {cve_id}. Skipping.')\n\t\treturn None\n\tvuln_cve_id = cve_info['id']\n\tvuln_name = vuln_cve_id\n\tvuln_description = cve_info.get('summary', 'none').replace(vuln_cve_id, '').strip()\n\ttry:\n\t\tvuln_cvss = float(cve_info.get('cvss', -1))\n\texcept (ValueError, TypeError):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_cve_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_cve_id = cve_info['id']\n\tvuln_name = vuln_cve_id\n\tvuln_description = cve_info.get('summary', 'none').replace(vuln_cve_id, '').strip()\n\ttry:\n\t\tvuln_cvss = float(cve_info.get('cvss', -1))\n\texcept (ValueError, TypeError):\n\t\tvuln_cvss = -1\n\tvuln_cwe_id = cve_info.get('cwe', '')\n\texploit_ids = cve_info.get('refmap', {}).get('exploit-db', [])\n\tosvdb_ids = cve_info.get('refmap', {}).get('osvdb', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_name = vuln_cve_id\n\tvuln_description = cve_info.get('summary', 'none').replace(vuln_cve_id, '').strip()\n\ttry:\n\t\tvuln_cvss = float(cve_info.get('cvss', -1))\n\texcept (ValueError, TypeError):\n\t\tvuln_cvss = -1\n\tvuln_cwe_id = cve_info.get('cwe', '')\n\texploit_ids = cve_info.get('refmap', {}).get('exploit-db', [])\n\tosvdb_ids = cve_info.get('refmap', {}).get('osvdb', [])\n\treferences = cve_info.get('references', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_description",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_description = cve_info.get('summary', 'none').replace(vuln_cve_id, '').strip()\n\ttry:\n\t\tvuln_cvss = float(cve_info.get('cvss', -1))\n\texcept (ValueError, TypeError):\n\t\tvuln_cvss = -1\n\tvuln_cwe_id = cve_info.get('cwe', '')\n\texploit_ids = cve_info.get('refmap', {}).get('exploit-db', [])\n\tosvdb_ids = cve_info.get('refmap', {}).get('osvdb', [])\n\treferences = cve_info.get('references', [])\n\tcapec_objects = cve_info.get('capec', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_cvss",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_cvss = float(cve_info.get('cvss', -1))\n\texcept (ValueError, TypeError):\n\t\tvuln_cvss = -1\n\tvuln_cwe_id = cve_info.get('cwe', '')\n\texploit_ids = cve_info.get('refmap', {}).get('exploit-db', [])\n\tosvdb_ids = cve_info.get('refmap', {}).get('osvdb', [])\n\treferences = cve_info.get('references', [])\n\tcapec_objects = cve_info.get('capec', [])\n\t# Parse ovals for a better vuln name / type\n\tovals = cve_info.get('oval', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_cvss",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_cvss = -1\n\tvuln_cwe_id = cve_info.get('cwe', '')\n\texploit_ids = cve_info.get('refmap', {}).get('exploit-db', [])\n\tosvdb_ids = cve_info.get('refmap', {}).get('osvdb', [])\n\treferences = cve_info.get('references', [])\n\tcapec_objects = cve_info.get('capec', [])\n\t# Parse ovals for a better vuln name / type\n\tovals = cve_info.get('oval', [])\n\tif ovals:\n\t\tvuln_name = ovals[0]['title']",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_cwe_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_cwe_id = cve_info.get('cwe', '')\n\texploit_ids = cve_info.get('refmap', {}).get('exploit-db', [])\n\tosvdb_ids = cve_info.get('refmap', {}).get('osvdb', [])\n\treferences = cve_info.get('references', [])\n\tcapec_objects = cve_info.get('capec', [])\n\t# Parse ovals for a better vuln name / type\n\tovals = cve_info.get('oval', [])\n\tif ovals:\n\t\tvuln_name = ovals[0]['title']\n\t\tvuln_type = ovals[0]['family']",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\texploit_ids",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\texploit_ids = cve_info.get('refmap', {}).get('exploit-db', [])\n\tosvdb_ids = cve_info.get('refmap', {}).get('osvdb', [])\n\treferences = cve_info.get('references', [])\n\tcapec_objects = cve_info.get('capec', [])\n\t# Parse ovals for a better vuln name / type\n\tovals = cve_info.get('oval', [])\n\tif ovals:\n\t\tvuln_name = ovals[0]['title']\n\t\tvuln_type = ovals[0]['family']\n\t# Set vulnerability severity based on CVSS score",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tosvdb_ids",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tosvdb_ids = cve_info.get('refmap', {}).get('osvdb', [])\n\treferences = cve_info.get('references', [])\n\tcapec_objects = cve_info.get('capec', [])\n\t# Parse ovals for a better vuln name / type\n\tovals = cve_info.get('oval', [])\n\tif ovals:\n\t\tvuln_name = ovals[0]['title']\n\t\tvuln_type = ovals[0]['family']\n\t# Set vulnerability severity based on CVSS score\n\tvuln_severity = 'info'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\treferences",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\treferences = cve_info.get('references', [])\n\tcapec_objects = cve_info.get('capec', [])\n\t# Parse ovals for a better vuln name / type\n\tovals = cve_info.get('oval', [])\n\tif ovals:\n\t\tvuln_name = ovals[0]['title']\n\t\tvuln_type = ovals[0]['family']\n\t# Set vulnerability severity based on CVSS score\n\tvuln_severity = 'info'\n\tif vuln_cvss < 4:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcapec_objects",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcapec_objects = cve_info.get('capec', [])\n\t# Parse ovals for a better vuln name / type\n\tovals = cve_info.get('oval', [])\n\tif ovals:\n\t\tvuln_name = ovals[0]['title']\n\t\tvuln_type = ovals[0]['family']\n\t# Set vulnerability severity based on CVSS score\n\tvuln_severity = 'info'\n\tif vuln_cvss < 4:\n\t\tvuln_severity = 'low'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tovals",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tovals = cve_info.get('oval', [])\n\tif ovals:\n\t\tvuln_name = ovals[0]['title']\n\t\tvuln_type = ovals[0]['family']\n\t# Set vulnerability severity based on CVSS score\n\tvuln_severity = 'info'\n\tif vuln_cvss < 4:\n\t\tvuln_severity = 'low'\n\telif vuln_cvss < 7:\n\t\tvuln_severity = 'medium'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_name = ovals[0]['title']\n\t\tvuln_type = ovals[0]['family']\n\t# Set vulnerability severity based on CVSS score\n\tvuln_severity = 'info'\n\tif vuln_cvss < 4:\n\t\tvuln_severity = 'low'\n\telif vuln_cvss < 7:\n\t\tvuln_severity = 'medium'\n\telif vuln_cvss < 9:\n\t\tvuln_severity = 'high'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_type",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_type = ovals[0]['family']\n\t# Set vulnerability severity based on CVSS score\n\tvuln_severity = 'info'\n\tif vuln_cvss < 4:\n\t\tvuln_severity = 'low'\n\telif vuln_cvss < 7:\n\t\tvuln_severity = 'medium'\n\telif vuln_cvss < 9:\n\t\tvuln_severity = 'high'\n\telse:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_severity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_severity = 'info'\n\tif vuln_cvss < 4:\n\t\tvuln_severity = 'low'\n\telif vuln_cvss < 7:\n\t\tvuln_severity = 'medium'\n\telif vuln_cvss < 9:\n\t\tvuln_severity = 'high'\n\telse:\n\t\tvuln_severity = 'critical'\n\t# Build console warning message",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_severity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_severity = 'low'\n\telif vuln_cvss < 7:\n\t\tvuln_severity = 'medium'\n\telif vuln_cvss < 9:\n\t\tvuln_severity = 'high'\n\telse:\n\t\tvuln_severity = 'critical'\n\t# Build console warning message\n\tmsg = f'{vuln_name} | {vuln_severity.upper()} | {vuln_cve_id} | {vuln_cwe_id} | {vuln_cvss}'\n\tfor id in osvdb_ids:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_severity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_severity = 'medium'\n\telif vuln_cvss < 9:\n\t\tvuln_severity = 'high'\n\telse:\n\t\tvuln_severity = 'critical'\n\t# Build console warning message\n\tmsg = f'{vuln_name} | {vuln_severity.upper()} | {vuln_cve_id} | {vuln_cwe_id} | {vuln_cvss}'\n\tfor id in osvdb_ids:\n\t\tmsg += f'\\n\\tOSVDB: {id}'\n\tfor exploit_id in exploit_ids:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_severity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_severity = 'high'\n\telse:\n\t\tvuln_severity = 'critical'\n\t# Build console warning message\n\tmsg = f'{vuln_name} | {vuln_severity.upper()} | {vuln_cve_id} | {vuln_cwe_id} | {vuln_cvss}'\n\tfor id in osvdb_ids:\n\t\tmsg += f'\\n\\tOSVDB: {id}'\n\tfor exploit_id in exploit_ids:\n\t\tmsg += f'\\n\\tEXPLOITDB: {exploit_id}'\n\tlogger.warning(msg)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln_severity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln_severity = 'critical'\n\t# Build console warning message\n\tmsg = f'{vuln_name} | {vuln_severity.upper()} | {vuln_cve_id} | {vuln_cwe_id} | {vuln_cvss}'\n\tfor id in osvdb_ids:\n\t\tmsg += f'\\n\\tOSVDB: {id}'\n\tfor exploit_id in exploit_ids:\n\t\tmsg += f'\\n\\tEXPLOITDB: {exploit_id}'\n\tlogger.warning(msg)\n\tvuln = {\n\t\t'name': vuln_name,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tmsg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tmsg = f'{vuln_name} | {vuln_severity.upper()} | {vuln_cve_id} | {vuln_cwe_id} | {vuln_cvss}'\n\tfor id in osvdb_ids:\n\t\tmsg += f'\\n\\tOSVDB: {id}'\n\tfor exploit_id in exploit_ids:\n\t\tmsg += f'\\n\\tEXPLOITDB: {exploit_id}'\n\tlogger.warning(msg)\n\tvuln = {\n\t\t'name': vuln_name,\n\t\t'type': vuln_type,\n\t\t'severity': NUCLEI_SEVERITY_MAP[vuln_severity],",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln = {\n\t\t'name': vuln_name,\n\t\t'type': vuln_type,\n\t\t'severity': NUCLEI_SEVERITY_MAP[vuln_severity],\n\t\t'description': vuln_description,\n\t\t'cvss_score': vuln_cvss,\n\t\t'references': references,\n\t\t'cve_ids': [vuln_cve_id],\n\t\t'cwe_ids': [vuln_cwe_id]\n\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tbucket",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tbucket = line['bucket']\n\treturn {\n\t\t'name': bucket['name'],\n\t\t'region': bucket['region'],\n\t\t'provider': bucket['provider'],\n\t\t'owner_display_name': bucket['owner_display_name'],\n\t\t'owner_id': bucket['owner_id'],\n\t\t'perm_auth_users_read': bucket['perm_auth_users_read'],\n\t\t'perm_auth_users_write': bucket['perm_auth_users_write'],\n\t\t'perm_auth_users_read_acl': bucket['perm_auth_users_read_acl'],",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdescription = ''\n\tdescription += f\" Evidence: {line.get('evidence')} <br>\" if line.get('evidence') else ''\n\tdescription += f\" Message: {line.get('message')} <br>\" if line.get('message') else ''\n\tdescription += f\" Payload: {line.get('message_str')} <br>\" if line.get('message_str') else ''\n\tdescription += f\" Vulnerable Parameter: {line.get('param')} <br>\" if line.get('param') else ''\n\treturn {\n\t\t'name': 'XSS (Cross Site Scripting)',\n\t\t'type': 'XSS',\n\t\t'severity': DALFOX_SEVERITY_MAP[line.get('severity', 'unknown')],\n\t\t'description': description,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tlookup_fields",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tlookup_fields = {key: data[key] for key in data if key not in exclude_keys}\n\t# Return True if a record exists based on the lookup fields, False otherwise\n\treturn model.objects.filter(**lookup_fields).exists()\n@app.task(name='geo_localize', bind=False, queue='geo_localize_queue')\ndef geo_localize(host, ip_id=None):\n\t\"\"\"Uses geoiplookup to find location associated with host.\n\tArgs:\n\t\thost (str): Hostname.\n\t\tip_id (int): IpAddress object id.\n\tReturns:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = f'geoiplookup {host}'\n\t_, out = run_command(cmd)\n\tif 'IP Address not found' not in out and \"can't resolve hostname\" not in out:\n\t\tcountry_iso = out.split(':')[1].strip().split(',')[0]\n\t\tcountry_name = out.split(':')[1].strip().split(',')[1].strip()\n\t\tgeo_object, _ = CountryISO.objects.get_or_create(\n\t\t\tiso=country_iso,\n\t\t\tname=country_name\n\t\t)\n\t\tgeo_json = {",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcountry_iso",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcountry_iso = out.split(':')[1].strip().split(',')[0]\n\t\tcountry_name = out.split(':')[1].strip().split(',')[1].strip()\n\t\tgeo_object, _ = CountryISO.objects.get_or_create(\n\t\t\tiso=country_iso,\n\t\t\tname=country_name\n\t\t)\n\t\tgeo_json = {\n\t\t\t'iso': country_iso,\n\t\t\t'name': country_name\n\t\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcountry_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcountry_name = out.split(':')[1].strip().split(',')[1].strip()\n\t\tgeo_object, _ = CountryISO.objects.get_or_create(\n\t\t\tiso=country_iso,\n\t\t\tname=country_name\n\t\t)\n\t\tgeo_json = {\n\t\t\t'iso': country_iso,\n\t\t\t'name': country_name\n\t\t}\n\t\tif ip_id:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tgeo_json",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tgeo_json = {\n\t\t\t'iso': country_iso,\n\t\t\t'name': country_name\n\t\t}\n\t\tif ip_id:\n\t\t\tip = IpAddress.objects.get(pk=ip_id)\n\t\t\tip.geo_iso = geo_object\n\t\t\tip.save()\n\t\treturn geo_json\n\tlogger.info(f'Geo IP lookup failed for host \"{host}\"')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tip",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tip = IpAddress.objects.get(pk=ip_id)\n\t\t\tip.geo_iso = geo_object\n\t\t\tip.save()\n\t\treturn geo_json\n\tlogger.info(f'Geo IP lookup failed for host \"{host}\"')\n\treturn None\n@app.task(name='query_whois', bind=False, queue='query_whois_queue')\ndef query_whois(target, force_reload_whois=False):\n\t\"\"\"Query WHOIS information for an IP or a domain name.\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tip.geo_iso",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tip.geo_iso = geo_object\n\t\t\tip.save()\n\t\treturn geo_json\n\tlogger.info(f'Geo IP lookup failed for host \"{host}\"')\n\treturn None\n@app.task(name='query_whois', bind=False, queue='query_whois_queue')\ndef query_whois(target, force_reload_whois=False):\n\t\"\"\"Query WHOIS information for an IP or a domain name.\n\tArgs:\n\t\ttarget (str): IP address or domain name.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tdomain_info",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tdomain_info = get_domain_info_from_db(target)\n\t\t\tif domain_info:\n\t\t\t\treturn format_whois_response(domain_info)\n\t\t# Query WHOIS information as not found in db\n\t\tlogger.info(f'Whois info not found in db')\n\t\tlogger.info(f'Querying WHOIS information for {target} from WHOIS server...')\n\t\tdomain_info = DottedDict()\n\t\tdomain_info.target = target\n\t\twhois_data = None\n\t\trelated_domains = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdomain_info = DottedDict()\n\t\tdomain_info.target = target\n\t\twhois_data = None\n\t\trelated_domains = []\n\t\twith concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n\t\t\tfutures_func = {\n\t\t\t\texecutor.submit(get_domain_historical_ip_address, target): 'historical_ips',\n\t\t\t\texecutor.submit(fetch_related_tlds_and_domains, target): 'related_tlds_and_domains',\n\t\t\t\texecutor.submit(reverse_whois, target): 'reverse_whois',\n\t\t\t\texecutor.submit(fetch_whois_data_using_netlas, target): 'whois_data',",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info.target",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdomain_info.target = target\n\t\twhois_data = None\n\t\trelated_domains = []\n\t\twith concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n\t\t\tfutures_func = {\n\t\t\t\texecutor.submit(get_domain_historical_ip_address, target): 'historical_ips',\n\t\t\t\texecutor.submit(fetch_related_tlds_and_domains, target): 'related_tlds_and_domains',\n\t\t\t\texecutor.submit(reverse_whois, target): 'reverse_whois',\n\t\t\t\texecutor.submit(fetch_whois_data_using_netlas, target): 'whois_data',\n\t\t\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\twhois_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\twhois_data = None\n\t\trelated_domains = []\n\t\twith concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n\t\t\tfutures_func = {\n\t\t\t\texecutor.submit(get_domain_historical_ip_address, target): 'historical_ips',\n\t\t\t\texecutor.submit(fetch_related_tlds_and_domains, target): 'related_tlds_and_domains',\n\t\t\t\texecutor.submit(reverse_whois, target): 'reverse_whois',\n\t\t\t\texecutor.submit(fetch_whois_data_using_netlas, target): 'whois_data',\n\t\t\t}\n\t\t\tfor future in concurrent.futures.as_completed(futures_func):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\trelated_domains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\trelated_domains = []\n\t\twith concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n\t\t\tfutures_func = {\n\t\t\t\texecutor.submit(get_domain_historical_ip_address, target): 'historical_ips',\n\t\t\t\texecutor.submit(fetch_related_tlds_and_domains, target): 'related_tlds_and_domains',\n\t\t\t\texecutor.submit(reverse_whois, target): 'reverse_whois',\n\t\t\t\texecutor.submit(fetch_whois_data_using_netlas, target): 'whois_data',\n\t\t\t}\n\t\t\tfor future in concurrent.futures.as_completed(futures_func):\n\t\t\t\tfunc_name = futures_func[future]",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tfutures_func",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tfutures_func = {\n\t\t\t\texecutor.submit(get_domain_historical_ip_address, target): 'historical_ips',\n\t\t\t\texecutor.submit(fetch_related_tlds_and_domains, target): 'related_tlds_and_domains',\n\t\t\t\texecutor.submit(reverse_whois, target): 'reverse_whois',\n\t\t\t\texecutor.submit(fetch_whois_data_using_netlas, target): 'whois_data',\n\t\t\t}\n\t\t\tfor future in concurrent.futures.as_completed(futures_func):\n\t\t\t\tfunc_name = futures_func[future]\n\t\t\t\ttry:\n\t\t\t\t\tresult = future.result()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfunc_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tfunc_name = futures_func[future]\n\t\t\t\ttry:\n\t\t\t\t\tresult = future.result()\n\t\t\t\t\tif func_name == 'historical_ips':\n\t\t\t\t\t\tdomain_info.historical_ips = result\n\t\t\t\t\telif func_name == 'related_tlds_and_domains':\n\t\t\t\t\t\tdomain_info.related_tlds, tlsx_related_domain = result\n\t\t\t\t\telif func_name == 'reverse_whois':\n\t\t\t\t\t\trelated_domains = result\n\t\t\t\t\telif func_name == 'whois_data':",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresult",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\tresult = future.result()\n\t\t\t\t\tif func_name == 'historical_ips':\n\t\t\t\t\t\tdomain_info.historical_ips = result\n\t\t\t\t\telif func_name == 'related_tlds_and_domains':\n\t\t\t\t\t\tdomain_info.related_tlds, tlsx_related_domain = result\n\t\t\t\t\telif func_name == 'reverse_whois':\n\t\t\t\t\t\trelated_domains = result\n\t\t\t\t\telif func_name == 'whois_data':\n\t\t\t\t\t\twhois_data = result\n\t\t\t\t\tlogger.debug('*'*100)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tdomain_info.historical_ips",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\t\tdomain_info.historical_ips = result\n\t\t\t\t\telif func_name == 'related_tlds_and_domains':\n\t\t\t\t\t\tdomain_info.related_tlds, tlsx_related_domain = result\n\t\t\t\t\telif func_name == 'reverse_whois':\n\t\t\t\t\t\trelated_domains = result\n\t\t\t\t\telif func_name == 'whois_data':\n\t\t\t\t\t\twhois_data = result\n\t\t\t\t\tlogger.debug('*'*100)\n\t\t\t\t\tlogger.info(f'Task {func_name} finished for target {target}')\n\t\t\t\t\tlogger.debug(result)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\trelated_domains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\t\trelated_domains = result\n\t\t\t\t\telif func_name == 'whois_data':\n\t\t\t\t\t\twhois_data = result\n\t\t\t\t\tlogger.debug('*'*100)\n\t\t\t\t\tlogger.info(f'Task {func_name} finished for target {target}')\n\t\t\t\t\tlogger.debug(result)\n\t\t\t\t\tlogger.debug('*'*100)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f'An error occurred while fetching {func_name} for {target}: {str(e)}')\n\t\t\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\twhois_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\t\twhois_data = result\n\t\t\t\t\tlogger.debug('*'*100)\n\t\t\t\t\tlogger.info(f'Task {func_name} finished for target {target}')\n\t\t\t\t\tlogger.debug(result)\n\t\t\t\t\tlogger.debug('*'*100)\n\t\t\t\texcept Exception as e:\n\t\t\t\t\tlogger.error(f'An error occurred while fetching {func_name} for {target}: {str(e)}')\n\t\t\t\t\tcontinue\n\t\tlogger.info(f'All concurrent whosi lookup tasks finished for target {target}')\n\t\tif 'tlsx_related_domain' in locals():",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\twhois_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\twhois_data = whois_data.get('data', {})\n\t\t# related domains can also be fetched from whois_data\n\t\twhois_related_domains = whois_data.get('related_domains', [])\n\t\trelated_domains += whois_related_domains\n\t\t# remove duplicate ones\n\t\trelated_domains = list(set(related_domains))\n\t\tdomain_info.related_domains = related_domains\n\t\tparse_whois_data(domain_info, whois_data)\n\t\tsaved_domain_info = save_domain_info_to_db(target, domain_info)\n\t\treturn format_whois_response(domain_info)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\twhois_related_domains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\twhois_related_domains = whois_data.get('related_domains', [])\n\t\trelated_domains += whois_related_domains\n\t\t# remove duplicate ones\n\t\trelated_domains = list(set(related_domains))\n\t\tdomain_info.related_domains = related_domains\n\t\tparse_whois_data(domain_info, whois_data)\n\t\tsaved_domain_info = save_domain_info_to_db(target, domain_info)\n\t\treturn format_whois_response(domain_info)\n\texcept Exception as e:\n\t\tlogger.error(f'An error occurred while querying WHOIS information for {target}: {str(e)}')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\trelated_domains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\trelated_domains = list(set(related_domains))\n\t\tdomain_info.related_domains = related_domains\n\t\tparse_whois_data(domain_info, whois_data)\n\t\tsaved_domain_info = save_domain_info_to_db(target, domain_info)\n\t\treturn format_whois_response(domain_info)\n\texcept Exception as e:\n\t\tlogger.error(f'An error occurred while querying WHOIS information for {target}: {str(e)}')\n\t\treturn {\n\t\t\t'status': False, \n\t\t\t'target': target, ",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdomain_info.related_domains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdomain_info.related_domains = related_domains\n\t\tparse_whois_data(domain_info, whois_data)\n\t\tsaved_domain_info = save_domain_info_to_db(target, domain_info)\n\t\treturn format_whois_response(domain_info)\n\texcept Exception as e:\n\t\tlogger.error(f'An error occurred while querying WHOIS information for {target}: {str(e)}')\n\t\treturn {\n\t\t\t'status': False, \n\t\t\t'target': target, \n\t\t\t'result': f'An error occurred while querying WHOIS information for {target}: {str(e)}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsaved_domain_info",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsaved_domain_info = save_domain_info_to_db(target, domain_info)\n\t\treturn format_whois_response(domain_info)\n\texcept Exception as e:\n\t\tlogger.error(f'An error occurred while querying WHOIS information for {target}: {str(e)}')\n\t\treturn {\n\t\t\t'status': False, \n\t\t\t'target': target, \n\t\t\t'result': f'An error occurred while querying WHOIS information for {target}: {str(e)}'\n\t\t}\ndef fetch_related_tlds_and_domains(domain):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\trelated_tlds",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\trelated_tlds = set()\n\trelated_domains = set()\n\t# Extract the base domain\n\textracted = tldextract.extract(domain)\n\tbase_domain = f\"{extracted.domain}.{extracted.suffix}\"\n\tcmd = f'tlsx -san -cn -silent -ro -host {domain}'\n\t_, result = run_command(cmd, shell=True)\n\tfor line in result.splitlines():\n\t\ttry:\n\t\t\t\tline = line.strip()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\trelated_domains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\trelated_domains = set()\n\t# Extract the base domain\n\textracted = tldextract.extract(domain)\n\tbase_domain = f\"{extracted.domain}.{extracted.suffix}\"\n\tcmd = f'tlsx -san -cn -silent -ro -host {domain}'\n\t_, result = run_command(cmd, shell=True)\n\tfor line in result.splitlines():\n\t\ttry:\n\t\t\t\tline = line.strip()\n\t\t\t\tif line == \"\":",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\textracted",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\textracted = tldextract.extract(domain)\n\tbase_domain = f\"{extracted.domain}.{extracted.suffix}\"\n\tcmd = f'tlsx -san -cn -silent -ro -host {domain}'\n\t_, result = run_command(cmd, shell=True)\n\tfor line in result.splitlines():\n\t\ttry:\n\t\t\t\tline = line.strip()\n\t\t\t\tif line == \"\":\n\t\t\t\t\tcontinue\n\t\t\t\textracted_result = tldextract.extract(line)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tbase_domain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tbase_domain = f\"{extracted.domain}.{extracted.suffix}\"\n\tcmd = f'tlsx -san -cn -silent -ro -host {domain}'\n\t_, result = run_command(cmd, shell=True)\n\tfor line in result.splitlines():\n\t\ttry:\n\t\t\t\tline = line.strip()\n\t\t\t\tif line == \"\":\n\t\t\t\t\tcontinue\n\t\t\t\textracted_result = tldextract.extract(line)\n\t\t\t\tfull_domain = f\"{extracted_result.domain}.{extracted_result.suffix}\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcmd",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcmd = f'tlsx -san -cn -silent -ro -host {domain}'\n\t_, result = run_command(cmd, shell=True)\n\tfor line in result.splitlines():\n\t\ttry:\n\t\t\t\tline = line.strip()\n\t\t\t\tif line == \"\":\n\t\t\t\t\tcontinue\n\t\t\t\textracted_result = tldextract.extract(line)\n\t\t\t\tfull_domain = f\"{extracted_result.domain}.{extracted_result.suffix}\"\n\t\t\t\tif extracted_result.domain == extracted.domain:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tline",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tline = line.strip()\n\t\t\t\tif line == \"\":\n\t\t\t\t\tcontinue\n\t\t\t\textracted_result = tldextract.extract(line)\n\t\t\t\tfull_domain = f\"{extracted_result.domain}.{extracted_result.suffix}\"\n\t\t\t\tif extracted_result.domain == extracted.domain:\n\t\t\t\t\tif full_domain != base_domain:\n\t\t\t\t\t\trelated_tlds.add(full_domain)\n\t\t\t\telif extracted_result.domain != extracted.domain or extracted_result.subdomain:\n\t\t\t\t\trelated_domains.add(line)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\textracted_result",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\textracted_result = tldextract.extract(line)\n\t\t\t\tfull_domain = f\"{extracted_result.domain}.{extracted_result.suffix}\"\n\t\t\t\tif extracted_result.domain == extracted.domain:\n\t\t\t\t\tif full_domain != base_domain:\n\t\t\t\t\t\trelated_tlds.add(full_domain)\n\t\t\t\telif extracted_result.domain != extracted.domain or extracted_result.subdomain:\n\t\t\t\t\trelated_domains.add(line)\n\t\texcept Exception as e:\n\t\t\tlogger.error(f\"An error occurred while fetching related TLDs and domains for {domain}: {str(e)}\")\n\t\t\tcontinue",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfull_domain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tfull_domain = f\"{extracted_result.domain}.{extracted_result.suffix}\"\n\t\t\t\tif extracted_result.domain == extracted.domain:\n\t\t\t\t\tif full_domain != base_domain:\n\t\t\t\t\t\trelated_tlds.add(full_domain)\n\t\t\t\telif extracted_result.domain != extracted.domain or extracted_result.subdomain:\n\t\t\t\t\trelated_domains.add(line)\n\t\texcept Exception as e:\n\t\t\tlogger.error(f\"An error occurred while fetching related TLDs and domains for {domain}: {str(e)}\")\n\t\t\tcontinue\n\tlogger.info(f\"Found {len(related_tlds)} related TLDs and {len(related_domains)} related domains for {domain}\")",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcommand",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcommand = f'netlas host {target} -f json'\n\tnetlas_key = get_netlas_key()\n\tif netlas_key:\n\t\tcommand += f' -a {netlas_key}'\n\ttry:\n\t\t_, result = run_command(command, remove_ansi_sequence=True)\n\t\t# catch errors\n\t\tif 'Failed to parse response data' in result:\n\t\t\treturn {\n\t\t\t\t'status': False, ",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tnetlas_key",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tnetlas_key = get_netlas_key()\n\tif netlas_key:\n\t\tcommand += f' -a {netlas_key}'\n\ttry:\n\t\t_, result = run_command(command, remove_ansi_sequence=True)\n\t\t# catch errors\n\t\tif 'Failed to parse response data' in result:\n\t\t\treturn {\n\t\t\t\t'status': False, \n\t\t\t\t'message': 'Netlas limit exceeded.'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdata = json.loads(result)\n\t\tif not data:\n\t\t\treturn {\n\t\t\t\t'status': False, \n\t\t\t\t'message': 'No data available for the given domain or IP.'\n\t\t\t}\n\t\t# if 'whois' not in data:\n\t\t# \treturn {\n\t\t# \t\t'status': False, \n\t\t# \t\t'message': 'Invalid domain or no WHOIS data available.'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tendpoints = (\n\t\tEndPoint.objects\n\t\t.filter(scan_history__id=scan_history_id)\n\t\t.filter(target_domain__id=domain_id)\n\t)\n\tif filter_status:\n\t\tendpoints = endpoints.filter(http_status__in=filter_status)\n\tif subdomain_id:\n\t\tendpoints = endpoints.filter(subdomain__id=subdomain_id)\n\tif filter_ids:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoints = endpoints.filter(http_status__in=filter_status)\n\tif subdomain_id:\n\t\tendpoints = endpoints.filter(subdomain__id=subdomain_id)\n\tif filter_ids:\n\t\tendpoints = endpoints.filter(id__in=filter_ids)\n\tfor field_name in duplicate_removal_fields:\n\t\tcl_query = (\n\t\t\tendpoints\n\t\t\t.values_list(field_name)\n\t\t\t.annotate(mc=Count(field_name))",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoints = endpoints.filter(subdomain__id=subdomain_id)\n\tif filter_ids:\n\t\tendpoints = endpoints.filter(id__in=filter_ids)\n\tfor field_name in duplicate_removal_fields:\n\t\tcl_query = (\n\t\t\tendpoints\n\t\t\t.values_list(field_name)\n\t\t\t.annotate(mc=Count(field_name))\n\t\t\t.order_by('-mc')\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoints = endpoints.filter(id__in=filter_ids)\n\tfor field_name in duplicate_removal_fields:\n\t\tcl_query = (\n\t\t\tendpoints\n\t\t\t.values_list(field_name)\n\t\t\t.annotate(mc=Count(field_name))\n\t\t\t.order_by('-mc')\n\t\t)\n\t\tfor (field_value, count) in cl_query:\n\t\t\tif count > DELETE_DUPLICATES_THRESHOLD:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcl_query",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcl_query = (\n\t\t\tendpoints\n\t\t\t.values_list(field_name)\n\t\t\t.annotate(mc=Count(field_name))\n\t\t\t.order_by('-mc')\n\t\t)\n\t\tfor (field_value, count) in cl_query:\n\t\t\tif count > DELETE_DUPLICATES_THRESHOLD:\n\t\t\t\teps_to_delete = (\n\t\t\t\t\tendpoints",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\teps_to_delete",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\teps_to_delete = (\n\t\t\t\t\tendpoints\n\t\t\t\t\t.filter(**{field_name: field_value})\n\t\t\t\t\t.order_by('discovered_date')\n\t\t\t\t\t.all()[1:]\n\t\t\t\t)\n\t\t\t\tmsg = f'Deleting {len(eps_to_delete)} endpoints [reason: same {field_name} {field_value}]'\n\t\t\t\tfor ep in eps_to_delete:\n\t\t\t\t\turl = urlparse(ep.http_url)\n\t\t\t\t\tif url.path in ['', '/', '/login']: # try do not delete the original page that other pages redirect to",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmsg",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\tmsg = f'Deleting {len(eps_to_delete)} endpoints [reason: same {field_name} {field_value}]'\n\t\t\t\tfor ep in eps_to_delete:\n\t\t\t\t\turl = urlparse(ep.http_url)\n\t\t\t\t\tif url.path in ['', '/', '/login']: # try do not delete the original page that other pages redirect to\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tmsg += f'\\n\\t {ep.http_url} [{ep.http_status}] [{field_name}={field_value}]'\n\t\t\t\t\tep.delete()\n\t\t\t\tlogger.warning(msg)\n@app.task(name='run_command', bind=False, queue='run_command_queue')\ndef run_command(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\t\turl = urlparse(ep.http_url)\n\t\t\t\t\tif url.path in ['', '/', '/login']: # try do not delete the original page that other pages redirect to\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tmsg += f'\\n\\t {ep.http_url} [{ep.http_status}] [{field_name}={field_value}]'\n\t\t\t\t\tep.delete()\n\t\t\t\tlogger.warning(msg)\n@app.task(name='run_command', bind=False, queue='run_command_queue')\ndef run_command(\n\t\tcmd, \n\t\tcwd=None, ",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcommand_obj",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcommand_obj = Command.objects.create(\n\t\tcommand=cmd,\n\t\ttime=timezone.now(),\n\t\tscan_history_id=scan_id,\n\t\tactivity_id=activity_id)\n\t# Run the command using subprocess\n\tpopen = subprocess.Popen(\n\t\tcmd if shell else cmd.split(),\n\t\tshell=shell,\n\t\tstdout=subprocess.PIPE,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tpopen",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tpopen = subprocess.Popen(\n\t\tcmd if shell else cmd.split(),\n\t\tshell=shell,\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.STDOUT,\n\t\tcwd=cwd,\n\t\tuniversal_newlines=True)\n\toutput = ''\n\tfor stdout_line in iter(popen.stdout.readline, \"\"):\n\t\titem = stdout_line.strip()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput = ''\n\tfor stdout_line in iter(popen.stdout.readline, \"\"):\n\t\titem = stdout_line.strip()\n\t\toutput += '\\n' + item\n\t\tlogger.debug(item)\n\tpopen.stdout.close()\n\tpopen.wait()\n\treturn_code = popen.returncode\n\tcommand_obj.output = output\n\tcommand_obj.return_code = return_code",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\titem",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\titem = stdout_line.strip()\n\t\toutput += '\\n' + item\n\t\tlogger.debug(item)\n\tpopen.stdout.close()\n\tpopen.wait()\n\treturn_code = popen.returncode\n\tcommand_obj.output = output\n\tcommand_obj.return_code = return_code\n\tcommand_obj.save()\n\tif history_file:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\treturn_code",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\treturn_code = popen.returncode\n\tcommand_obj.output = output\n\tcommand_obj.return_code = return_code\n\tcommand_obj.save()\n\tif history_file:\n\t\tmode = 'a'\n\t\tif not os.path.exists(history_file):\n\t\t\tmode = 'w'\n\t\twith open(history_file, mode) as f:\n\t\t\tf.write(f'\\n{cmd}\\n{return_code}\\n{output}\\n------------------\\n')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcommand_obj.output",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcommand_obj.output = output\n\tcommand_obj.return_code = return_code\n\tcommand_obj.save()\n\tif history_file:\n\t\tmode = 'a'\n\t\tif not os.path.exists(history_file):\n\t\t\tmode = 'w'\n\t\twith open(history_file, mode) as f:\n\t\t\tf.write(f'\\n{cmd}\\n{return_code}\\n{output}\\n------------------\\n')\n\tif remove_ansi_sequence:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcommand_obj.return_code",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcommand_obj.return_code = return_code\n\tcommand_obj.save()\n\tif history_file:\n\t\tmode = 'a'\n\t\tif not os.path.exists(history_file):\n\t\t\tmode = 'w'\n\t\twith open(history_file, mode) as f:\n\t\t\tf.write(f'\\n{cmd}\\n{return_code}\\n{output}\\n------------------\\n')\n\tif remove_ansi_sequence:\n\t\toutput = remove_ansi_escape_sequences(output)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tmode",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tmode = 'a'\n\t\tif not os.path.exists(history_file):\n\t\t\tmode = 'w'\n\t\twith open(history_file, mode) as f:\n\t\t\tf.write(f'\\n{cmd}\\n{return_code}\\n{output}\\n------------------\\n')\n\tif remove_ansi_sequence:\n\t\toutput = remove_ansi_escape_sequences(output)\n\treturn return_code, output\n#-------------#\n# Other utils #",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tmode",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tmode = 'w'\n\t\twith open(history_file, mode) as f:\n\t\t\tf.write(f'\\n{cmd}\\n{return_code}\\n{output}\\n------------------\\n')\n\tif remove_ansi_sequence:\n\t\toutput = remove_ansi_escape_sequences(output)\n\treturn return_code, output\n#-------------#\n# Other utils #\n#-------------#\ndef stream_command(cmd, cwd=None, shell=False, history_file=None, encoding='utf-8', scan_id=None, activity_id=None, trunc_char=None):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\toutput",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\toutput = remove_ansi_escape_sequences(output)\n\treturn return_code, output\n#-------------#\n# Other utils #\n#-------------#\ndef stream_command(cmd, cwd=None, shell=False, history_file=None, encoding='utf-8', scan_id=None, activity_id=None, trunc_char=None):\n\t# Log cmd\n\tlogger.info(cmd)\n\t# logger.warning(activity_id)\n\t# Create a command record in the database",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcommand_obj",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcommand_obj = Command.objects.create(\n\t\tcommand=cmd,\n\t\ttime=timezone.now(),\n\t\tscan_history_id=scan_id,\n\t\tactivity_id=activity_id)\n\t# Sanitize the cmd\n\tcommand = cmd if shell else cmd.split()\n\t# Run the command using subprocess\n\tprocess = subprocess.Popen(\n\t\tcommand,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcommand",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcommand = cmd if shell else cmd.split()\n\t# Run the command using subprocess\n\tprocess = subprocess.Popen(\n\t\tcommand,\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.STDOUT,\n\t\tuniversal_newlines=True,\n\t\tshell=shell)\n\t# Log the output in real-time to the database\n\toutput = \"\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tprocess",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tprocess = subprocess.Popen(\n\t\tcommand,\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.STDOUT,\n\t\tuniversal_newlines=True,\n\t\tshell=shell)\n\t# Log the output in real-time to the database\n\toutput = \"\"\n\t# Process the output\n\tfor line in iter(lambda: process.stdout.readline(), b''):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput = \"\"\n\t# Process the output\n\tfor line in iter(lambda: process.stdout.readline(), b''):\n\t\tif not line:\n\t\t\tbreak\n\t\tline = line.strip()\n\t\tansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n\t\tline = ansi_escape.sub('', line)\n\t\tline = line.replace('\\\\x0d\\\\x0a', '\\n')\n\t\tif trunc_char and line.endswith(trunc_char):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline = line.strip()\n\t\tansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n\t\tline = ansi_escape.sub('', line)\n\t\tline = line.replace('\\\\x0d\\\\x0a', '\\n')\n\t\tif trunc_char and line.endswith(trunc_char):\n\t\t\tline = line[:-1]\n\t\titem = line\n\t\t# Try to parse the line as JSON\n\t\ttry:\n\t\t\titem = json.loads(line)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tansi_escape",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n\t\tline = ansi_escape.sub('', line)\n\t\tline = line.replace('\\\\x0d\\\\x0a', '\\n')\n\t\tif trunc_char and line.endswith(trunc_char):\n\t\t\tline = line[:-1]\n\t\titem = line\n\t\t# Try to parse the line as JSON\n\t\ttry:\n\t\t\titem = json.loads(line)\n\t\texcept json.JSONDecodeError:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline = ansi_escape.sub('', line)\n\t\tline = line.replace('\\\\x0d\\\\x0a', '\\n')\n\t\tif trunc_char and line.endswith(trunc_char):\n\t\t\tline = line[:-1]\n\t\titem = line\n\t\t# Try to parse the line as JSON\n\t\ttry:\n\t\t\titem = json.loads(line)\n\t\texcept json.JSONDecodeError:\n\t\t\tpass",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tline",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tline = line.replace('\\\\x0d\\\\x0a', '\\n')\n\t\tif trunc_char and line.endswith(trunc_char):\n\t\t\tline = line[:-1]\n\t\titem = line\n\t\t# Try to parse the line as JSON\n\t\ttry:\n\t\t\titem = json.loads(line)\n\t\texcept json.JSONDecodeError:\n\t\t\tpass\n\t\t# Yield the line",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tline",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tline = line[:-1]\n\t\titem = line\n\t\t# Try to parse the line as JSON\n\t\ttry:\n\t\t\titem = json.loads(line)\n\t\texcept json.JSONDecodeError:\n\t\t\tpass\n\t\t# Yield the line\n\t\t#logger.debug(item)\n\t\tyield item",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\titem",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\titem = line\n\t\t# Try to parse the line as JSON\n\t\ttry:\n\t\t\titem = json.loads(line)\n\t\texcept json.JSONDecodeError:\n\t\t\tpass\n\t\t# Yield the line\n\t\t#logger.debug(item)\n\t\tyield item\n\t\t# Add the log line to the output",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\titem",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\titem = json.loads(line)\n\t\texcept json.JSONDecodeError:\n\t\t\tpass\n\t\t# Yield the line\n\t\t#logger.debug(item)\n\t\tyield item\n\t\t# Add the log line to the output\n\t\toutput += line + \"\\n\"\n\t\t# Update the command record in the database\n\t\tcommand_obj.output = output",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tcommand_obj.output",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tcommand_obj.output = output\n\t\tcommand_obj.save()\n\t# Retrieve the return code and output\n\tprocess.wait()\n\treturn_code = process.returncode\n\t# Update the return code and final output in the database\n\tcommand_obj.return_code = return_code\n\tcommand_obj.save()\n\t# Append the command, return code and output to the history file\n\tif history_file is not None:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\treturn_code",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\treturn_code = process.returncode\n\t# Update the return code and final output in the database\n\tcommand_obj.return_code = return_code\n\tcommand_obj.save()\n\t# Append the command, return code and output to the history file\n\tif history_file is not None:\n\t\twith open(history_file, \"a\") as f:\n\t\t\tf.write(f\"{cmd}\\n{return_code}\\n{output}\\n\")\ndef process_httpx_response(line):\n\t\"\"\"TODO: implement this\"\"\"",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcommand_obj.return_code",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcommand_obj.return_code = return_code\n\tcommand_obj.save()\n\t# Append the command, return code and output to the history file\n\tif history_file is not None:\n\t\twith open(history_file, \"a\") as f:\n\t\t\tf.write(f\"{cmd}\\n{return_code}\\n{output}\\n\")\ndef process_httpx_response(line):\n\t\"\"\"TODO: implement this\"\"\"\ndef extract_httpx_url(line):\n\t\"\"\"Extract final URL from httpx results. Always follow redirects to find",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tstatus_code",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tstatus_code = line.get('status_code', 0)\n\tfinal_url = line.get('final_url')\n\tlocation = line.get('location')\n\tchain_status_codes = line.get('chain_status_codes', [])\n\t# Final URL is already looking nice, if it exists return it\n\tif final_url:\n\t\treturn final_url, False\n\thttp_url = line['url'] # fallback to url field\n\t# Handle redirects manually\n\tREDIRECT_STATUS_CODES = [301, 302]",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tfinal_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tfinal_url = line.get('final_url')\n\tlocation = line.get('location')\n\tchain_status_codes = line.get('chain_status_codes', [])\n\t# Final URL is already looking nice, if it exists return it\n\tif final_url:\n\t\treturn final_url, False\n\thttp_url = line['url'] # fallback to url field\n\t# Handle redirects manually\n\tREDIRECT_STATUS_CODES = [301, 302]\n\tis_redirect = (",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tlocation",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tlocation = line.get('location')\n\tchain_status_codes = line.get('chain_status_codes', [])\n\t# Final URL is already looking nice, if it exists return it\n\tif final_url:\n\t\treturn final_url, False\n\thttp_url = line['url'] # fallback to url field\n\t# Handle redirects manually\n\tREDIRECT_STATUS_CODES = [301, 302]\n\tis_redirect = (\n\t\tstatus_code in REDIRECT_STATUS_CODES",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tchain_status_codes",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tchain_status_codes = line.get('chain_status_codes', [])\n\t# Final URL is already looking nice, if it exists return it\n\tif final_url:\n\t\treturn final_url, False\n\thttp_url = line['url'] # fallback to url field\n\t# Handle redirects manually\n\tREDIRECT_STATUS_CODES = [301, 302]\n\tis_redirect = (\n\t\tstatus_code in REDIRECT_STATUS_CODES\n\t\tor",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thttp_url = line['url'] # fallback to url field\n\t# Handle redirects manually\n\tREDIRECT_STATUS_CODES = [301, 302]\n\tis_redirect = (\n\t\tstatus_code in REDIRECT_STATUS_CODES\n\t\tor\n\t\tany(x in REDIRECT_STATUS_CODES for x in chain_status_codes)\n\t)\n\tif is_redirect and location:\n\t\tif location.startswith(('http', 'https')):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tREDIRECT_STATUS_CODES",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tREDIRECT_STATUS_CODES = [301, 302]\n\tis_redirect = (\n\t\tstatus_code in REDIRECT_STATUS_CODES\n\t\tor\n\t\tany(x in REDIRECT_STATUS_CODES for x in chain_status_codes)\n\t)\n\tif is_redirect and location:\n\t\tif location.startswith(('http', 'https')):\n\t\t\thttp_url = location\n\t\telse:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tis_redirect",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tis_redirect = (\n\t\tstatus_code in REDIRECT_STATUS_CODES\n\t\tor\n\t\tany(x in REDIRECT_STATUS_CODES for x in chain_status_codes)\n\t)\n\tif is_redirect and location:\n\t\tif location.startswith(('http', 'https')):\n\t\t\thttp_url = location\n\t\telse:\n\t\t\thttp_url = f'{http_url}/{location.lstrip(\"/\")}'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thttp_url = location\n\t\telse:\n\t\t\thttp_url = f'{http_url}/{location.lstrip(\"/\")}'\n\t# Sanitize URL\n\thttp_url = sanitize_url(http_url)\n\treturn http_url, is_redirect\n#-------------#\n# OSInt utils #\n#-------------#\ndef get_and_save_dork_results(lookup_target, results_dir, type, lookup_keywords=None, lookup_extensions=None, delay=3, page_count=2, scan_history=None):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\thttp_url = f'{http_url}/{location.lstrip(\"/\")}'\n\t# Sanitize URL\n\thttp_url = sanitize_url(http_url)\n\treturn http_url, is_redirect\n#-------------#\n# OSInt utils #\n#-------------#\ndef get_and_save_dork_results(lookup_target, results_dir, type, lookup_keywords=None, lookup_extensions=None, delay=3, page_count=2, scan_history=None):\n\t\"\"\"\n\t\tUses gofuzz to dork and store information",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thttp_url = sanitize_url(http_url)\n\treturn http_url, is_redirect\n#-------------#\n# OSInt utils #\n#-------------#\ndef get_and_save_dork_results(lookup_target, results_dir, type, lookup_keywords=None, lookup_extensions=None, delay=3, page_count=2, scan_history=None):\n\t\"\"\"\n\t\tUses gofuzz to dork and store information\n\t\tArgs:\n\t\t\tlookup_target (str): target to look into such as stackoverflow or even the target itself",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\tgofuzz_command = f'{GOFUZZ_EXEC_PATH} -t {lookup_target} -d {delay} -p {page_count}'\n\tif lookup_extensions:\n\t\tgofuzz_command += f' -e {lookup_extensions}'\n\telif lookup_keywords:\n\t\tgofuzz_command += f' -w {lookup_keywords}'\n\toutput_file = f'{results_dir}/gofuzz.txt'\n\tgofuzz_command += f' -o {output_file}'\n\thistory_file = f'{results_dir}/commands.txt'\n\ttry:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tgofuzz_command",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tgofuzz_command = f'{GOFUZZ_EXEC_PATH} -t {lookup_target} -d {delay} -p {page_count}'\n\tif lookup_extensions:\n\t\tgofuzz_command += f' -e {lookup_extensions}'\n\telif lookup_keywords:\n\t\tgofuzz_command += f' -w {lookup_keywords}'\n\toutput_file = f'{results_dir}/gofuzz.txt'\n\tgofuzz_command += f' -o {output_file}'\n\thistory_file = f'{results_dir}/commands.txt'\n\ttry:\n\t\trun_command(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\toutput_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\toutput_file = f'{results_dir}/gofuzz.txt'\n\tgofuzz_command += f' -o {output_file}'\n\thistory_file = f'{results_dir}/commands.txt'\n\ttry:\n\t\trun_command(\n\t\t\tgofuzz_command,\n\t\t\tshell=False,\n\t\t\thistory_file=history_file,\n\t\t\tscan_id=scan_history.id,\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\thistory_file",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\thistory_file = f'{results_dir}/commands.txt'\n\ttry:\n\t\trun_command(\n\t\t\tgofuzz_command,\n\t\t\tshell=False,\n\t\t\thistory_file=history_file,\n\t\t\tscan_id=scan_history.id,\n\t\t)\n\t\tif not os.path.isfile(output_file):\n\t\t\treturn",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\t\turl",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\t\turl = line.strip()\n\t\t\t\tif url:\n\t\t\t\t\tresults.append(url)\n\t\t\t\t\tdork, created = Dork.objects.get_or_create(\n\t\t\t\t\t\ttype=type,\n\t\t\t\t\t\turl=url\n\t\t\t\t\t)\n\t\t\t\t\tif scan_history:\n\t\t\t\t\t\tscan_history.dorks.add(dork)\n\t\t# remove output file",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_history = ScanHistory.objects.get(id=meta_dict.scan_id)\n\t# Proxy settings\n\tget_random_proxy()\n\t# Get metadata\n\tresult = extract_metadata_from_google_search(meta_dict.osint_target, meta_dict.documents_limit)\n\tif not result:\n\t\tlogger.error(f'No metadata result from Google Search for {meta_dict.osint_target}.')\n\t\treturn []\n\t# Add metadata info to DB\n\tresults = []",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresult",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresult = extract_metadata_from_google_search(meta_dict.osint_target, meta_dict.documents_limit)\n\tif not result:\n\t\tlogger.error(f'No metadata result from Google Search for {meta_dict.osint_target}.')\n\t\treturn []\n\t# Add metadata info to DB\n\tresults = []\n\tfor metadata_name, data in result.get_metadata().items():\n\t\tsubdomain = Subdomain.objects.get(\n\t\t\tscan_history=meta_dict.scan_id,\n\t\t\tname=meta_dict.osint_target)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults = []\n\tfor metadata_name, data in result.get_metadata().items():\n\t\tsubdomain = Subdomain.objects.get(\n\t\t\tscan_history=meta_dict.scan_id,\n\t\t\tname=meta_dict.osint_target)\n\t\tmetadata = DottedDict({k: v for k, v in data.items()})\n\t\tmeta_finder_document = MetaFinderDocument(\n\t\t\tsubdomain=subdomain,\n\t\t\ttarget_domain=meta_dict.domain,\n\t\t\tscan_history=scan_history,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain = Subdomain.objects.get(\n\t\t\tscan_history=meta_dict.scan_id,\n\t\t\tname=meta_dict.osint_target)\n\t\tmetadata = DottedDict({k: v for k, v in data.items()})\n\t\tmeta_finder_document = MetaFinderDocument(\n\t\t\tsubdomain=subdomain,\n\t\t\ttarget_domain=meta_dict.domain,\n\t\t\tscan_history=scan_history,\n\t\t\turl=metadata.url,\n\t\t\tdoc_name=metadata_name,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tmetadata",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tmetadata = DottedDict({k: v for k, v in data.items()})\n\t\tmeta_finder_document = MetaFinderDocument(\n\t\t\tsubdomain=subdomain,\n\t\t\ttarget_domain=meta_dict.domain,\n\t\t\tscan_history=scan_history,\n\t\t\turl=metadata.url,\n\t\t\tdoc_name=metadata_name,\n\t\t\thttp_status=metadata.status_code,\n\t\t\tproducer=metadata.metadata.get('Producer'),\n\t\t\tcreator=metadata.metadata.get('Creator'),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tmeta_finder_document",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tmeta_finder_document = MetaFinderDocument(\n\t\t\tsubdomain=subdomain,\n\t\t\ttarget_domain=meta_dict.domain,\n\t\t\tscan_history=scan_history,\n\t\t\turl=metadata.url,\n\t\t\tdoc_name=metadata_name,\n\t\t\thttp_status=metadata.status_code,\n\t\t\tproducer=metadata.metadata.get('Producer'),\n\t\t\tcreator=metadata.metadata.get('Creator'),\n\t\t\tcreation_date=metadata.metadata.get('CreationDate'),",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_activity",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_activity = ScanActivity()\n\tscan_activity.scan_of = ScanHistory.objects.get(pk=scan_history_id)\n\tscan_activity.title = message\n\tscan_activity.time = timezone.now()\n\tscan_activity.status = status\n\tscan_activity.save()\n\treturn scan_activity.id\n#--------------------#\n# Database functions #\n#--------------------#",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_activity.scan_of",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_activity.scan_of = ScanHistory.objects.get(pk=scan_history_id)\n\tscan_activity.title = message\n\tscan_activity.time = timezone.now()\n\tscan_activity.status = status\n\tscan_activity.save()\n\treturn scan_activity.id\n#--------------------#\n# Database functions #\n#--------------------#\ndef save_vulnerability(**vuln_data):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_activity.title",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_activity.title = message\n\tscan_activity.time = timezone.now()\n\tscan_activity.status = status\n\tscan_activity.save()\n\treturn scan_activity.id\n#--------------------#\n# Database functions #\n#--------------------#\ndef save_vulnerability(**vuln_data):\n\treferences = vuln_data.pop('references', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_activity.time",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_activity.time = timezone.now()\n\tscan_activity.status = status\n\tscan_activity.save()\n\treturn scan_activity.id\n#--------------------#\n# Database functions #\n#--------------------#\ndef save_vulnerability(**vuln_data):\n\treferences = vuln_data.pop('references', [])\n\tcve_ids = vuln_data.pop('cve_ids', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_activity.status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_activity.status = status\n\tscan_activity.save()\n\treturn scan_activity.id\n#--------------------#\n# Database functions #\n#--------------------#\ndef save_vulnerability(**vuln_data):\n\treferences = vuln_data.pop('references', [])\n\tcve_ids = vuln_data.pop('cve_ids', [])\n\tcwe_ids = vuln_data.pop('cwe_ids', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\treferences",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\treferences = vuln_data.pop('references', [])\n\tcve_ids = vuln_data.pop('cve_ids', [])\n\tcwe_ids = vuln_data.pop('cwe_ids', [])\n\ttags = vuln_data.pop('tags', [])\n\tsubscan = vuln_data.pop('subscan', None)\n\t# remove nulls\n\tvuln_data = replace_nulls(vuln_data)\n\t# Create vulnerability\n\tvuln, created = Vulnerability.objects.get_or_create(**vuln_data)\n\tif created:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcve_ids",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcve_ids = vuln_data.pop('cve_ids', [])\n\tcwe_ids = vuln_data.pop('cwe_ids', [])\n\ttags = vuln_data.pop('tags', [])\n\tsubscan = vuln_data.pop('subscan', None)\n\t# remove nulls\n\tvuln_data = replace_nulls(vuln_data)\n\t# Create vulnerability\n\tvuln, created = Vulnerability.objects.get_or_create(**vuln_data)\n\tif created:\n\t\tvuln.discovered_date = timezone.now()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcwe_ids",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcwe_ids = vuln_data.pop('cwe_ids', [])\n\ttags = vuln_data.pop('tags', [])\n\tsubscan = vuln_data.pop('subscan', None)\n\t# remove nulls\n\tvuln_data = replace_nulls(vuln_data)\n\t# Create vulnerability\n\tvuln, created = Vulnerability.objects.get_or_create(**vuln_data)\n\tif created:\n\t\tvuln.discovered_date = timezone.now()\n\t\tvuln.open_status = True",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\ttags",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\ttags = vuln_data.pop('tags', [])\n\tsubscan = vuln_data.pop('subscan', None)\n\t# remove nulls\n\tvuln_data = replace_nulls(vuln_data)\n\t# Create vulnerability\n\tvuln, created = Vulnerability.objects.get_or_create(**vuln_data)\n\tif created:\n\t\tvuln.discovered_date = timezone.now()\n\t\tvuln.open_status = True\n\t\tvuln.save()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubscan = vuln_data.pop('subscan', None)\n\t# remove nulls\n\tvuln_data = replace_nulls(vuln_data)\n\t# Create vulnerability\n\tvuln, created = Vulnerability.objects.get_or_create(**vuln_data)\n\tif created:\n\t\tvuln.discovered_date = timezone.now()\n\t\tvuln.open_status = True\n\t\tvuln.save()\n\t# Save vuln tags",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvuln_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvuln_data = replace_nulls(vuln_data)\n\t# Create vulnerability\n\tvuln, created = Vulnerability.objects.get_or_create(**vuln_data)\n\tif created:\n\t\tvuln.discovered_date = timezone.now()\n\t\tvuln.open_status = True\n\t\tvuln.save()\n\t# Save vuln tags\n\tfor tag_name in tags or []:\n\t\ttag, created = VulnerabilityTags.objects.get_or_create(name=tag_name)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.discovered_date",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.discovered_date = timezone.now()\n\t\tvuln.open_status = True\n\t\tvuln.save()\n\t# Save vuln tags\n\tfor tag_name in tags or []:\n\t\ttag, created = VulnerabilityTags.objects.get_or_create(name=tag_name)\n\t\tif tag:\n\t\t\tvuln.tags.add(tag)\n\t\t\tvuln.save()\n\t# Save CVEs",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.open_status",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.open_status = True\n\t\tvuln.save()\n\t# Save vuln tags\n\tfor tag_name in tags or []:\n\t\ttag, created = VulnerabilityTags.objects.get_or_create(name=tag_name)\n\t\tif tag:\n\t\t\tvuln.tags.add(tag)\n\t\t\tvuln.save()\n\t# Save CVEs\n\tfor cve_id in cve_ids or []:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tendpoint_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tendpoint_data = replace_nulls(endpoint_data)\n\tscheme = urlparse(http_url).scheme\n\tendpoint = None\n\tcreated = False\n\tif ctx.get('domain_id'):\n\t\tdomain = Domain.objects.get(id=ctx.get('domain_id'))\n\t\tif domain.name not in http_url:\n\t\t\tlogger.error(f\"{http_url} is not a URL of domain {domain.name}. Skipping.\")\n\t\t\treturn None, False\n\tif crawl:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscheme",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscheme = urlparse(http_url).scheme\n\tendpoint = None\n\tcreated = False\n\tif ctx.get('domain_id'):\n\t\tdomain = Domain.objects.get(id=ctx.get('domain_id'))\n\t\tif domain.name not in http_url:\n\t\t\tlogger.error(f\"{http_url} is not a URL of domain {domain.name}. Skipping.\")\n\t\t\treturn None, False\n\tif crawl:\n\t\tctx['track'] = False",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tendpoint",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tendpoint = None\n\tcreated = False\n\tif ctx.get('domain_id'):\n\t\tdomain = Domain.objects.get(id=ctx.get('domain_id'))\n\t\tif domain.name not in http_url:\n\t\t\tlogger.error(f\"{http_url} is not a URL of domain {domain.name}. Skipping.\")\n\t\t\treturn None, False\n\tif crawl:\n\t\tctx['track'] = False\n\t\tresults = http_crawl(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tcreated",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tcreated = False\n\tif ctx.get('domain_id'):\n\t\tdomain = Domain.objects.get(id=ctx.get('domain_id'))\n\t\tif domain.name not in http_url:\n\t\t\tlogger.error(f\"{http_url} is not a URL of domain {domain.name}. Skipping.\")\n\t\t\treturn None, False\n\tif crawl:\n\t\tctx['track'] = False\n\t\tresults = http_crawl(\n\t\t\turls=[http_url],",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdomain = Domain.objects.get(id=ctx.get('domain_id'))\n\t\tif domain.name not in http_url:\n\t\t\tlogger.error(f\"{http_url} is not a URL of domain {domain.name}. Skipping.\")\n\t\t\treturn None, False\n\tif crawl:\n\t\tctx['track'] = False\n\t\tresults = http_crawl(\n\t\t\turls=[http_url],\n\t\t\tmethod='HEAD',\n\t\t\tctx=ctx)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tctx['track']",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tctx['track'] = False\n\t\tresults = http_crawl(\n\t\t\turls=[http_url],\n\t\t\tmethod='HEAD',\n\t\t\tctx=ctx)\n\t\tif results:\n\t\t\tendpoint_data = results[0]\n\t\t\tendpoint_id = endpoint_data['endpoint_id']\n\t\t\tcreated = endpoint_data['endpoint_created']\n\t\t\tendpoint = EndPoint.objects.get(pk=endpoint_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresults",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tresults = http_crawl(\n\t\t\turls=[http_url],\n\t\t\tmethod='HEAD',\n\t\t\tctx=ctx)\n\t\tif results:\n\t\t\tendpoint_data = results[0]\n\t\t\tendpoint_id = endpoint_data['endpoint_id']\n\t\t\tcreated = endpoint_data['endpoint_created']\n\t\t\tendpoint = EndPoint.objects.get(pk=endpoint_id)\n\telif not scheme:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint_data",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint_data = results[0]\n\t\t\tendpoint_id = endpoint_data['endpoint_id']\n\t\t\tcreated = endpoint_data['endpoint_created']\n\t\t\tendpoint = EndPoint.objects.get(pk=endpoint_id)\n\telif not scheme:\n\t\treturn None, False\n\telse: # add dumb endpoint without probing it\n\t\tscan = ScanHistory.objects.filter(pk=ctx.get('scan_history_id')).first()\n\t\tdomain = Domain.objects.filter(pk=ctx.get('domain_id')).first()\n\t\tif not validators.url(http_url):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint_id = endpoint_data['endpoint_id']\n\t\t\tcreated = endpoint_data['endpoint_created']\n\t\t\tendpoint = EndPoint.objects.get(pk=endpoint_id)\n\telif not scheme:\n\t\treturn None, False\n\telse: # add dumb endpoint without probing it\n\t\tscan = ScanHistory.objects.filter(pk=ctx.get('scan_history_id')).first()\n\t\tdomain = Domain.objects.filter(pk=ctx.get('domain_id')).first()\n\t\tif not validators.url(http_url):\n\t\t\treturn None, False",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcreated",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcreated = endpoint_data['endpoint_created']\n\t\t\tendpoint = EndPoint.objects.get(pk=endpoint_id)\n\telif not scheme:\n\t\treturn None, False\n\telse: # add dumb endpoint without probing it\n\t\tscan = ScanHistory.objects.filter(pk=ctx.get('scan_history_id')).first()\n\t\tdomain = Domain.objects.filter(pk=ctx.get('domain_id')).first()\n\t\tif not validators.url(http_url):\n\t\t\treturn None, False\n\t\thttp_url = sanitize_url(http_url)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint = EndPoint.objects.get(pk=endpoint_id)\n\telif not scheme:\n\t\treturn None, False\n\telse: # add dumb endpoint without probing it\n\t\tscan = ScanHistory.objects.filter(pk=ctx.get('scan_history_id')).first()\n\t\tdomain = Domain.objects.filter(pk=ctx.get('domain_id')).first()\n\t\tif not validators.url(http_url):\n\t\t\treturn None, False\n\t\thttp_url = sanitize_url(http_url)\n\t\t# Try to get the first matching record (prevent duplicate error)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tscan = ScanHistory.objects.filter(pk=ctx.get('scan_history_id')).first()\n\t\tdomain = Domain.objects.filter(pk=ctx.get('domain_id')).first()\n\t\tif not validators.url(http_url):\n\t\t\treturn None, False\n\t\thttp_url = sanitize_url(http_url)\n\t\t# Try to get the first matching record (prevent duplicate error)\n\t\tendpoints = EndPoint.objects.filter(\n\t\t\tscan_history=scan,\n\t\t\ttarget_domain=domain,\n\t\t\thttp_url=http_url,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdomain = Domain.objects.filter(pk=ctx.get('domain_id')).first()\n\t\tif not validators.url(http_url):\n\t\t\treturn None, False\n\t\thttp_url = sanitize_url(http_url)\n\t\t# Try to get the first matching record (prevent duplicate error)\n\t\tendpoints = EndPoint.objects.filter(\n\t\t\tscan_history=scan,\n\t\t\ttarget_domain=domain,\n\t\t\thttp_url=http_url,\n\t\t\t**endpoint_data",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\thttp_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\thttp_url = sanitize_url(http_url)\n\t\t# Try to get the first matching record (prevent duplicate error)\n\t\tendpoints = EndPoint.objects.filter(\n\t\t\tscan_history=scan,\n\t\t\ttarget_domain=domain,\n\t\t\thttp_url=http_url,\n\t\t\t**endpoint_data\n\t\t)\n\t\tif endpoints.exists():\n\t\t\tendpoint = endpoints.first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoints",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoints = EndPoint.objects.filter(\n\t\t\tscan_history=scan,\n\t\t\ttarget_domain=domain,\n\t\t\thttp_url=http_url,\n\t\t\t**endpoint_data\n\t\t)\n\t\tif endpoints.exists():\n\t\t\tendpoint = endpoints.first()\n\t\t\tcreated = False\n\t\telse:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint = endpoints.first()\n\t\t\tcreated = False\n\t\telse:\n\t\t\t# No existing record, create a new one\n\t\t\tendpoint = EndPoint.objects.create(\n\t\t\t\tscan_history=scan,\n\t\t\t\ttarget_domain=domain,\n\t\t\t\thttp_url=http_url,\n\t\t\t\t**endpoint_data\n\t\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcreated",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcreated = False\n\t\telse:\n\t\t\t# No existing record, create a new one\n\t\t\tendpoint = EndPoint.objects.create(\n\t\t\t\tscan_history=scan,\n\t\t\t\ttarget_domain=domain,\n\t\t\t\thttp_url=http_url,\n\t\t\t\t**endpoint_data\n\t\t\t)\n\t\t\tcreated = True",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoint",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tendpoint = EndPoint.objects.create(\n\t\t\t\tscan_history=scan,\n\t\t\t\ttarget_domain=domain,\n\t\t\t\thttp_url=http_url,\n\t\t\t\t**endpoint_data\n\t\t\t)\n\t\t\tcreated = True\n\tif created:\n\t\tendpoint.is_default = is_default\n\t\tendpoint.discovered_date = timezone.now()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tcreated",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tcreated = True\n\tif created:\n\t\tendpoint.is_default = is_default\n\t\tendpoint.discovered_date = timezone.now()\n\t\tendpoint.save()\n\t\tsubscan_id = ctx.get('subscan_id')\n\t\tif subscan_id:\n\t\t\tendpoint.endpoint_subscan_ids.add(subscan_id)\n\t\t\tendpoint.save()\n\treturn endpoint, created",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint.is_default",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint.is_default = is_default\n\t\tendpoint.discovered_date = timezone.now()\n\t\tendpoint.save()\n\t\tsubscan_id = ctx.get('subscan_id')\n\t\tif subscan_id:\n\t\t\tendpoint.endpoint_subscan_ids.add(subscan_id)\n\t\t\tendpoint.save()\n\treturn endpoint, created\ndef save_subdomain(subdomain_name, ctx={}):\n\t\"\"\"Get or create Subdomain object.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tendpoint.discovered_date",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tendpoint.discovered_date = timezone.now()\n\t\tendpoint.save()\n\t\tsubscan_id = ctx.get('subscan_id')\n\t\tif subscan_id:\n\t\t\tendpoint.endpoint_subscan_ids.add(subscan_id)\n\t\t\tendpoint.save()\n\treturn endpoint, created\ndef save_subdomain(subdomain_name, ctx={}):\n\t\"\"\"Get or create Subdomain object.\n\tArgs:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubscan_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubscan_id = ctx.get('subscan_id')\n\t\tif subscan_id:\n\t\t\tendpoint.endpoint_subscan_ids.add(subscan_id)\n\t\t\tendpoint.save()\n\treturn endpoint, created\ndef save_subdomain(subdomain_name, ctx={}):\n\t\"\"\"Get or create Subdomain object.\n\tArgs:\n\t\tsubdomain_name (str): Subdomain name.\n\t\tscan_history (startScan.models.ScanHistory): ScanHistory object.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan_id = ctx.get('scan_history_id')\n\tsubscan_id = ctx.get('subscan_id')\n\tout_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\tsubdomain_checker = SubdomainScopeChecker(out_of_scope_subdomains)\n\tvalid_domain = (\n\t\tvalidators.domain(subdomain_name) or\n\t\tvalidators.ipv4(subdomain_name) or\n\t\tvalidators.ipv6(subdomain_name)\n\t)\n\tif not valid_domain:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubscan_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubscan_id = ctx.get('subscan_id')\n\tout_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\tsubdomain_checker = SubdomainScopeChecker(out_of_scope_subdomains)\n\tvalid_domain = (\n\t\tvalidators.domain(subdomain_name) or\n\t\tvalidators.ipv4(subdomain_name) or\n\t\tvalidators.ipv6(subdomain_name)\n\t)\n\tif not valid_domain:\n\t\tlogger.error(f'{subdomain_name} is not an invalid domain. Skipping.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tout_of_scope_subdomains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tout_of_scope_subdomains = ctx.get('out_of_scope_subdomains', [])\n\tsubdomain_checker = SubdomainScopeChecker(out_of_scope_subdomains)\n\tvalid_domain = (\n\t\tvalidators.domain(subdomain_name) or\n\t\tvalidators.ipv4(subdomain_name) or\n\t\tvalidators.ipv6(subdomain_name)\n\t)\n\tif not valid_domain:\n\t\tlogger.error(f'{subdomain_name} is not an invalid domain. Skipping.')\n\t\treturn None, False",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_checker",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubdomain_checker = SubdomainScopeChecker(out_of_scope_subdomains)\n\tvalid_domain = (\n\t\tvalidators.domain(subdomain_name) or\n\t\tvalidators.ipv4(subdomain_name) or\n\t\tvalidators.ipv6(subdomain_name)\n\t)\n\tif not valid_domain:\n\t\tlogger.error(f'{subdomain_name} is not an invalid domain. Skipping.')\n\t\treturn None, False\n\tif subdomain_checker.is_out_of_scope(subdomain_name):",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tvalid_domain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tvalid_domain = (\n\t\tvalidators.domain(subdomain_name) or\n\t\tvalidators.ipv4(subdomain_name) or\n\t\tvalidators.ipv6(subdomain_name)\n\t)\n\tif not valid_domain:\n\t\tlogger.error(f'{subdomain_name} is not an invalid domain. Skipping.')\n\t\treturn None, False\n\tif subdomain_checker.is_out_of_scope(subdomain_name):\n\t\tlogger.error(f'{subdomain_name} is out-of-scope. Skipping.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tdomain = Domain.objects.get(id=ctx.get('domain_id'))\n\t\tif domain.name not in subdomain_name:\n\t\t\tlogger.error(f\"{subdomain_name} is not a subdomain of domain {domain.name}. Skipping.\")\n\t\t\treturn None, False\n\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tdomain = scan.domain if scan else None\n\tsubdomain, created = Subdomain.objects.get_or_create(\n\t\tscan_history=scan,\n\t\ttarget_domain=domain,\n\t\tname=subdomain_name)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tscan",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tscan = ScanHistory.objects.filter(pk=scan_id).first()\n\tdomain = scan.domain if scan else None\n\tsubdomain, created = Subdomain.objects.get_or_create(\n\t\tscan_history=scan,\n\t\ttarget_domain=domain,\n\t\tname=subdomain_name)\n\tif created:\n\t\t# logger.warning(f'Found new subdomain {subdomain_name}')\n\t\tsubdomain.discovered_date = timezone.now()\n\t\tif subscan_id:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdomain = scan.domain if scan else None\n\tsubdomain, created = Subdomain.objects.get_or_create(\n\t\tscan_history=scan,\n\t\ttarget_domain=domain,\n\t\tname=subdomain_name)\n\tif created:\n\t\t# logger.warning(f'Found new subdomain {subdomain_name}')\n\t\tsubdomain.discovered_date = timezone.now()\n\t\tif subscan_id:\n\t\t\tsubdomain.subdomain_subscan_ids.add(subscan_id)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain.discovered_date",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tsubdomain.discovered_date = timezone.now()\n\t\tif subscan_id:\n\t\t\tsubdomain.subdomain_subscan_ids.add(subscan_id)\n\t\tsubdomain.save()\n\treturn subdomain, created\ndef save_email(email_address, scan_history=None):\n\tif not validators.email(email_address):\n\t\tlogger.info(f'Email {email_address} is invalid. Skipping.')\n\t\treturn None, False\n\temail, created = Email.objects.get_or_create(address=email_address)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdomain_id",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdomain_id = ctx['domain_id']\n\tdomain = Domain.objects.get(pk=domain_id)\n\tresults_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t# Validate each subdomain and de-duplicate entries\n\tsubdomains = list(set([\n\t\tsubdomain for subdomain in subdomains\n\t\tif validators.domain(subdomain) and domain.name == get_domain_from_subdomain(subdomain)\n\t]))\n\tif not subdomains:\n\t\treturn",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tdomain = Domain.objects.get(pk=domain_id)\n\tresults_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t# Validate each subdomain and de-duplicate entries\n\tsubdomains = list(set([\n\t\tsubdomain for subdomain in subdomains\n\t\tif validators.domain(subdomain) and domain.name == get_domain_from_subdomain(subdomain)\n\t]))\n\tif not subdomains:\n\t\treturn\n\tlogger.warning(f'Found {len(subdomains)} imported subdomains.')",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tresults_dir",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tresults_dir = ctx.get('results_dir', RENGINE_RESULTS)\n\t# Validate each subdomain and de-duplicate entries\n\tsubdomains = list(set([\n\t\tsubdomain for subdomain in subdomains\n\t\tif validators.domain(subdomain) and domain.name == get_domain_from_subdomain(subdomain)\n\t]))\n\tif not subdomains:\n\t\treturn\n\tlogger.warning(f'Found {len(subdomains)} imported subdomains.')\n\twith open(f'{results_dir}/from_imported.txt', 'w+') as output_file:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tsubdomains",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tsubdomains = list(set([\n\t\tsubdomain for subdomain in subdomains\n\t\tif validators.domain(subdomain) and domain.name == get_domain_from_subdomain(subdomain)\n\t]))\n\tif not subdomains:\n\t\treturn\n\tlogger.warning(f'Found {len(subdomains)} imported subdomains.')\n\twith open(f'{results_dir}/from_imported.txt', 'w+') as output_file:\n\t\tfor name in subdomains:\n\t\t\tsubdomain_name = name.strip()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain_name",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain_name = name.strip()\n\t\t\tsubdomain, _ = save_subdomain(subdomain_name, ctx=ctx)\n\t\t\tsubdomain.is_imported_subdomain = True\n\t\t\tsubdomain.save()\n\t\t\toutput_file.write(f'{subdomain}\\n')\n@app.task(name='query_reverse_whois', bind=False, queue='query_reverse_whois_queue')\ndef query_reverse_whois(lookup_keyword):\n\t\"\"\"Queries Reverse WHOIS information for an organization or email address.\n\tArgs:\n\t\tlookup_keyword (str): Registrar Name or email",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubdomain.is_imported_subdomain",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\t\tsubdomain.is_imported_subdomain = True\n\t\t\tsubdomain.save()\n\t\t\toutput_file.write(f'{subdomain}\\n')\n@app.task(name='query_reverse_whois', bind=False, queue='query_reverse_whois_queue')\ndef query_reverse_whois(lookup_keyword):\n\t\"\"\"Queries Reverse WHOIS information for an organization or email address.\n\tArgs:\n\t\tlookup_keyword (str): Registrar Name or email\n\tReturns:\n\t\tdict: Reverse WHOIS information.",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tlookup_vulnerability",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tlookup_vulnerability = Vulnerability.objects.get(id=vulnerability_id)\n\t\tlookup_url = urlparse(lookup_vulnerability.http_url)\n\t\tpath = lookup_url.path\n\texcept Exception as e:\n\t\treturn {\n\t\t\t'status': False,\n\t\t\t'error': str(e)\n\t\t}\n\t# check in db GPTVulnerabilityReport model if vulnerability description and path matches\n\tif not path:",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tlookup_url",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tlookup_url = urlparse(lookup_vulnerability.http_url)\n\t\tpath = lookup_url.path\n\texcept Exception as e:\n\t\treturn {\n\t\t\t'status': False,\n\t\t\t'error': str(e)\n\t\t}\n\t# check in db GPTVulnerabilityReport model if vulnerability description and path matches\n\tif not path:\n\t\tpath = '/'",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tpath = lookup_url.path\n\texcept Exception as e:\n\t\treturn {\n\t\t\t'status': False,\n\t\t\t'error': str(e)\n\t\t}\n\t# check in db GPTVulnerabilityReport model if vulnerability description and path matches\n\tif not path:\n\t\tpath = '/'\n\tstored = GPTVulnerabilityReport.objects.filter(url_path=path).filter(title=lookup_vulnerability.name).first()",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tpath = '/'\n\tstored = GPTVulnerabilityReport.objects.filter(url_path=path).filter(title=lookup_vulnerability.name).first()\n\tif stored and stored.description and stored.impact and stored.remediation:\n\t\tlogger.info('Found cached Vulnerability Description')\n\t\tresponse = {\n\t\t\t'status': True,\n\t\t\t'description': stored.description,\n\t\t\t'impact': stored.impact,\n\t\t\t'remediation': stored.remediation,\n\t\t\t'references': [url.url for url in stored.references.all()]",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\tstored",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\tstored = GPTVulnerabilityReport.objects.filter(url_path=path).filter(title=lookup_vulnerability.name).first()\n\tif stored and stored.description and stored.impact and stored.remediation:\n\t\tlogger.info('Found cached Vulnerability Description')\n\t\tresponse = {\n\t\t\t'status': True,\n\t\t\t'description': stored.description,\n\t\t\t'impact': stored.impact,\n\t\t\t'remediation': stored.remediation,\n\t\t\t'references': [url.url for url in stored.references.all()]\n\t\t}",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tresponse = {\n\t\t\t'status': True,\n\t\t\t'description': stored.description,\n\t\t\t'impact': stored.impact,\n\t\t\t'remediation': stored.remediation,\n\t\t\t'references': [url.url for url in stored.references.all()]\n\t\t}\n\telse:\n\t\tlogger.info('Fetching new Vulnerability Description')\n\t\tvulnerability_description = get_gpt_vuln_input_description(",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvulnerability_description",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvulnerability_description = get_gpt_vuln_input_description(\n\t\t\tlookup_vulnerability.name,\n\t\t\tpath\n\t\t)\n\t\t# one can add more description here later\n\t\tgpt_generator = LLMVulnerabilityReportGenerator(logger=logger)\n\t\tresponse = gpt_generator.get_vulnerability_description(vulnerability_description)\n\t\tlogger.info(response)\n\t\tadd_gpt_description_db(\n\t\t\tlookup_vulnerability.name,",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tgpt_generator",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tgpt_generator = LLMVulnerabilityReportGenerator(logger=logger)\n\t\tresponse = gpt_generator.get_vulnerability_description(vulnerability_description)\n\t\tlogger.info(response)\n\t\tadd_gpt_description_db(\n\t\t\tlookup_vulnerability.name,\n\t\t\tpath,\n\t\t\tresponse.get('description'),\n\t\t\tresponse.get('impact'),\n\t\t\tresponse.get('remediation'),\n\t\t\tresponse.get('references', [])",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tresponse = gpt_generator.get_vulnerability_description(vulnerability_description)\n\t\tlogger.info(response)\n\t\tadd_gpt_description_db(\n\t\t\tlookup_vulnerability.name,\n\t\t\tpath,\n\t\t\tresponse.get('description'),\n\t\t\tresponse.get('impact'),\n\t\t\tresponse.get('remediation'),\n\t\t\tresponse.get('references', [])\n\t\t)",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.description",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.description = response.get('description', vuln.description)\n\t\tvuln.impact = response.get('impact')\n\t\tvuln.remediation = response.get('remediation')\n\t\tvuln.is_gpt_used = True\n\t\tvuln.save()\n\t\tfor url in response.get('references', []):\n\t\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\t\tvuln.references.add(ref)\n\t\t\tvuln.save()\n\treturn response",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.impact",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.impact = response.get('impact')\n\t\tvuln.remediation = response.get('remediation')\n\t\tvuln.is_gpt_used = True\n\t\tvuln.save()\n\t\tfor url in response.get('references', []):\n\t\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\t\tvuln.references.add(ref)\n\t\t\tvuln.save()\n\treturn response",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.remediation",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.remediation = response.get('remediation')\n\t\tvuln.is_gpt_used = True\n\t\tvuln.save()\n\t\tfor url in response.get('references', []):\n\t\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\t\tvuln.references.add(ref)\n\t\t\tvuln.save()\n\treturn response",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "\t\tvuln.is_gpt_used",
        "kind": 5,
        "importPath": "web.reNgine.tasks",
        "description": "web.reNgine.tasks",
        "peekOfCode": "\t\tvuln.is_gpt_used = True\n\t\tvuln.save()\n\t\tfor url in response.get('references', []):\n\t\t\tref, created = VulnerabilityReference.objects.get_or_create(url=url)\n\t\t\tvuln.references.add(ref)\n\t\t\tvuln.save()\n\treturn response",
        "detail": "web.reNgine.tasks",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "web.reNgine.urls",
        "description": "web.reNgine.urls",
        "peekOfCode": "schema_view = get_schema_view(\n   openapi.Info(\n      title=\"reNgine API\",\n      default_version='v1',\n      description=\"reNgine: An Automated reconnaissance framework.\",\n      contact=openapi.Contact(email=\"yogesh.ojha11@gmail.com\"),\n   ),\n   public=True,\n   permission_classes=[permissions.AllowAny],\n)",
        "detail": "web.reNgine.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web.reNgine.urls",
        "description": "web.reNgine.urls",
        "peekOfCode": "urlpatterns = [\n    url(r'^swagger(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    url(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path(\n        'admin/',\n        admin.site.urls),\n    path(\n        'login/',\n        auth_views.LoginView.as_view(template_name='base/login.html'),\n        name='login'),",
        "detail": "web.reNgine.urls",
        "documentation": {}
    },
    {
        "label": "RengineTaskFormatter",
        "kind": 6,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "class RengineTaskFormatter(ColorFormatter):\n\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\ttry:\n\t\t\tself.get_current_task = get_current_task\n\t\texcept ImportError:\n\t\t\tself.get_current_task = lambda: None\n\tdef format(self, record):\n\t\ttask = self.get_current_task()\n\t\tif task and task.request:",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "SubdomainScopeChecker",
        "kind": 6,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "class SubdomainScopeChecker:\n\t\"\"\"\n\t\tSubdomainScopeChecker is a utility class to check if a subdomain is in scope or not.\n\t\tit supports both regex and string matching.\n\t\"\"\"\n\tdef __init__(self, patterns):\n\t\tself.regex_patterns = set()\n\t\tself.plain_patterns = set()\n\t\tself.load_patterns(patterns)\n\tdef load_patterns(self, patterns):",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "is_safe_path",
        "kind": 2,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "def is_safe_path(basedir, path, follow_symlinks=True):\n\t# Source: https://security.openstack.org/guidelines/dg_using-file-paths.html\n\t# resolves symbolic links\n\tif follow_symlinks:\n\t\tmatchpath = os.path.realpath(path)\n\telse:\n\t\tmatchpath = os.path.abspath(path)\n\treturn basedir == os.path.commonpath((basedir, matchpath))\n# Source: https://stackoverflow.com/a/10408992\ndef remove_lead_and_trail_slash(s):",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "remove_lead_and_trail_slash",
        "kind": 2,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "def remove_lead_and_trail_slash(s):\n\tif s.startswith('/'):\n\t\ts = s[1:]\n\tif s.endswith('/'):\n\t\ts = s[:-1]\n\treturn s\ndef get_time_taken(latest, earlier):\n\tduration = latest - earlier\n\tdays, seconds = duration.days, duration.seconds\n\thours = days * 24 + seconds // 3600",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "get_time_taken",
        "kind": 2,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "def get_time_taken(latest, earlier):\n\tduration = latest - earlier\n\tdays, seconds = duration.days, duration.seconds\n\thours = days * 24 + seconds // 3600\n\tminutes = (seconds % 3600) // 60\n\tseconds = seconds % 60\n\tif not hours and not minutes:\n\t\treturn f'{seconds} seconds'\n\telif not hours:\n\t\treturn f'{minutes} minutes'",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "return_iterable",
        "kind": 2,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "def return_iterable(string):\n\tif not isinstance(string, (list, tuple)):\n\t\tstring = [string]\n\treturn string\n# Logging formatters\nclass RengineTaskFormatter(ColorFormatter):\n\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\ttry:\n\t\t\tself.get_current_task = get_current_task",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "get_gpt_vuln_input_description",
        "kind": 2,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "def get_gpt_vuln_input_description(title, path):\n\tvulnerability_description = ''\n\tvulnerability_description += f'Vulnerability Title: {title}'\n\t# gpt gives concise vulnerability description when a vulnerable URL is provided\n\tvulnerability_description += f'\\nVulnerable URL: {path}'\n\treturn vulnerability_description\ndef replace_nulls(obj):\n\tif isinstance(obj, str):\n\t\treturn obj.replace(\"\\x00\", \"\")\n\telif isinstance(obj, list):",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "replace_nulls",
        "kind": 2,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "def replace_nulls(obj):\n\tif isinstance(obj, str):\n\t\treturn obj.replace(\"\\x00\", \"\")\n\telif isinstance(obj, list):\n\t\treturn [replace_nulls(item) for item in obj]\n\telif isinstance(obj, dict):\n\t\treturn {key: replace_nulls(value) for key, value in obj.items()}\n\telse:\n\t\treturn obj\ndef is_valid_url(url, validate_only_http_scheme=True):",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "is_valid_url",
        "kind": 2,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "def is_valid_url(url, validate_only_http_scheme=True):\n\t\"\"\"\n\t\tValidate a URL/endpoint\n\t\tArgs:\n\t\turl (str): The URL to validate.\n\t\tvalidate_only_http_scheme (bool): If True, only validate HTTP/HTTPS URLs.\n\t\tReturns:\n\t\tbool: True if the URL is valid, False otherwise.\n\t\"\"\"\n\t# no urls returns false",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "sorting_key",
        "kind": 2,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "def sorting_key(subdomain):\n\t# sort subdomains based on their http status code with priority 200 < 300 < 400 < rest\n\tstatus = subdomain['http_status']\n\tif 200 <= status <= 299:\n\t\treturn 1\n\telif 300 <= status <= 399:\n\t\treturn 2\n\telif 400 <= status <= 499:\n\t\treturn 3\n\telse:",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\tmatchpath",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\tmatchpath = os.path.realpath(path)\n\telse:\n\t\tmatchpath = os.path.abspath(path)\n\treturn basedir == os.path.commonpath((basedir, matchpath))\n# Source: https://stackoverflow.com/a/10408992\ndef remove_lead_and_trail_slash(s):\n\tif s.startswith('/'):\n\t\ts = s[1:]\n\tif s.endswith('/'):\n\t\ts = s[:-1]",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\tmatchpath",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\tmatchpath = os.path.abspath(path)\n\treturn basedir == os.path.commonpath((basedir, matchpath))\n# Source: https://stackoverflow.com/a/10408992\ndef remove_lead_and_trail_slash(s):\n\tif s.startswith('/'):\n\t\ts = s[1:]\n\tif s.endswith('/'):\n\t\ts = s[:-1]\n\treturn s\ndef get_time_taken(latest, earlier):",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\ts",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\ts = s[1:]\n\tif s.endswith('/'):\n\t\ts = s[:-1]\n\treturn s\ndef get_time_taken(latest, earlier):\n\tduration = latest - earlier\n\tdays, seconds = duration.days, duration.seconds\n\thours = days * 24 + seconds // 3600\n\tminutes = (seconds % 3600) // 60\n\tseconds = seconds % 60",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\ts",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\ts = s[:-1]\n\treturn s\ndef get_time_taken(latest, earlier):\n\tduration = latest - earlier\n\tdays, seconds = duration.days, duration.seconds\n\thours = days * 24 + seconds // 3600\n\tminutes = (seconds % 3600) // 60\n\tseconds = seconds % 60\n\tif not hours and not minutes:\n\t\treturn f'{seconds} seconds'",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\tduration",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\tduration = latest - earlier\n\tdays, seconds = duration.days, duration.seconds\n\thours = days * 24 + seconds // 3600\n\tminutes = (seconds % 3600) // 60\n\tseconds = seconds % 60\n\tif not hours and not minutes:\n\t\treturn f'{seconds} seconds'\n\telif not hours:\n\t\treturn f'{minutes} minutes'\n\telif not minutes:",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\thours",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\thours = days * 24 + seconds // 3600\n\tminutes = (seconds % 3600) // 60\n\tseconds = seconds % 60\n\tif not hours and not minutes:\n\t\treturn f'{seconds} seconds'\n\telif not hours:\n\t\treturn f'{minutes} minutes'\n\telif not minutes:\n\t\treturn f'{hours} hours'\n\treturn f'{hours} hours {minutes} minutes'",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\tminutes",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\tminutes = (seconds % 3600) // 60\n\tseconds = seconds % 60\n\tif not hours and not minutes:\n\t\treturn f'{seconds} seconds'\n\telif not hours:\n\t\treturn f'{minutes} minutes'\n\telif not minutes:\n\t\treturn f'{hours} hours'\n\treturn f'{hours} hours {minutes} minutes'\n# Check if value is a simple string, a string with commas, a list [], a tuple (), a set {} and return an iterable",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\tseconds",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\tseconds = seconds % 60\n\tif not hours and not minutes:\n\t\treturn f'{seconds} seconds'\n\telif not hours:\n\t\treturn f'{minutes} minutes'\n\telif not minutes:\n\t\treturn f'{hours} hours'\n\treturn f'{hours} hours {minutes} minutes'\n# Check if value is a simple string, a string with commas, a list [], a tuple (), a set {} and return an iterable\ndef return_iterable(string):",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\tstring",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\tstring = [string]\n\treturn string\n# Logging formatters\nclass RengineTaskFormatter(ColorFormatter):\n\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\ttry:\n\t\t\tself.get_current_task = get_current_task\n\t\texcept ImportError:\n\t\t\tself.get_current_task = lambda: None",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.get_current_task",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\t\tself.get_current_task = get_current_task\n\t\texcept ImportError:\n\t\t\tself.get_current_task = lambda: None\n\tdef format(self, record):\n\t\ttask = self.get_current_task()\n\t\tif task and task.request:\n\t\t\ttask_name = '/'.join(task.name.replace('tasks.', '').split('.'))\n\t\t\trecord.__dict__.update(task_id=task.request.id,\n\t\t\t\t\t\t\t\t   task_name=task_name)\n\t\telse:",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.get_current_task",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\t\tself.get_current_task = lambda: None\n\tdef format(self, record):\n\t\ttask = self.get_current_task()\n\t\tif task and task.request:\n\t\t\ttask_name = '/'.join(task.name.replace('tasks.', '').split('.'))\n\t\t\trecord.__dict__.update(task_id=task.request.id,\n\t\t\t\t\t\t\t\t   task_name=task_name)\n\t\telse:\n\t\t\trecord.__dict__.setdefault('task_name', f'{record.module}.{record.funcName}')\n\t\t\trecord.__dict__.setdefault('task_id', '')",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\ttask",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\ttask = self.get_current_task()\n\t\tif task and task.request:\n\t\t\ttask_name = '/'.join(task.name.replace('tasks.', '').split('.'))\n\t\t\trecord.__dict__.update(task_id=task.request.id,\n\t\t\t\t\t\t\t\t   task_name=task_name)\n\t\telse:\n\t\t\trecord.__dict__.setdefault('task_name', f'{record.module}.{record.funcName}')\n\t\t\trecord.__dict__.setdefault('task_id', '')\n\t\treturn super().format(record)\ndef get_gpt_vuln_input_description(title, path):",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\t\ttask_name",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\t\ttask_name = '/'.join(task.name.replace('tasks.', '').split('.'))\n\t\t\trecord.__dict__.update(task_id=task.request.id,\n\t\t\t\t\t\t\t\t   task_name=task_name)\n\t\telse:\n\t\t\trecord.__dict__.setdefault('task_name', f'{record.module}.{record.funcName}')\n\t\t\trecord.__dict__.setdefault('task_id', '')\n\t\treturn super().format(record)\ndef get_gpt_vuln_input_description(title, path):\n\tvulnerability_description = ''\n\tvulnerability_description += f'Vulnerability Title: {title}'",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\tvulnerability_description",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\tvulnerability_description = ''\n\tvulnerability_description += f'Vulnerability Title: {title}'\n\t# gpt gives concise vulnerability description when a vulnerable URL is provided\n\tvulnerability_description += f'\\nVulnerable URL: {path}'\n\treturn vulnerability_description\ndef replace_nulls(obj):\n\tif isinstance(obj, str):\n\t\treturn obj.replace(\"\\x00\", \"\")\n\telif isinstance(obj, list):\n\t\treturn [replace_nulls(item) for item in obj]",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\tself.regex_patterns",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\tself.regex_patterns = set()\n\t\tself.plain_patterns = set()\n\t\tself.load_patterns(patterns)\n\tdef load_patterns(self, patterns):\n\t\t\"\"\"\n\t\t\tLoad patterns into the checker.\n\t\t\tArgs:\n\t\t\t\tpatterns (list): List of patterns to load.\n\t\t\tReturns: \n\t\t\t\tNone",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\tself.plain_patterns",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\tself.plain_patterns = set()\n\t\tself.load_patterns(patterns)\n\tdef load_patterns(self, patterns):\n\t\t\"\"\"\n\t\t\tLoad patterns into the checker.\n\t\t\tArgs:\n\t\t\t\tpatterns (list): List of patterns to load.\n\t\t\tReturns: \n\t\t\t\tNone\n\t\t\"\"\"",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomain",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\t\tsubdomain = subdomain.lower() # though we wont encounter this, but just in case\n\t\tif subdomain in self.plain_patterns:\n\t\t\treturn True\n\t\treturn any(pattern.search(subdomain) for pattern in self.regex_patterns)\ndef sorting_key(subdomain):\n\t# sort subdomains based on their http status code with priority 200 < 300 < 400 < rest\n\tstatus = subdomain['http_status']\n\tif 200 <= status <= 299:\n\t\treturn 1\n\telif 300 <= status <= 399:",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "web.reNgine.utilities",
        "description": "web.reNgine.utilities",
        "peekOfCode": "\tstatus = subdomain['http_status']\n\tif 200 <= status <= 299:\n\t\treturn 1\n\telif 300 <= status <= 399:\n\t\treturn 2\n\telif 400 <= status <= 499:\n\t\treturn 3\n\telse:\n\t\treturn 4",
        "detail": "web.reNgine.utilities",
        "documentation": {}
    },
    {
        "label": "validate_domain",
        "kind": 2,
        "importPath": "web.reNgine.validators",
        "description": "web.reNgine.validators",
        "peekOfCode": "def validate_domain(value):\n    if not validators.domain(value):\n        raise ValidationError(_('%(value)s is not a valid domain Name'\n                                ), params={'value': value})\ndef validate_url(value):\n    if not validators.url(value):\n        raise ValidationError(_('%(value)s is not a valid URL Name'),\n                              params={'value': value})\ndef validate_short_name(value):\n    regex = re.compile(r'[@!#$%^&*()<>?/\\|}{~:]')",
        "detail": "web.reNgine.validators",
        "documentation": {}
    },
    {
        "label": "validate_url",
        "kind": 2,
        "importPath": "web.reNgine.validators",
        "description": "web.reNgine.validators",
        "peekOfCode": "def validate_url(value):\n    if not validators.url(value):\n        raise ValidationError(_('%(value)s is not a valid URL Name'),\n                              params={'value': value})\ndef validate_short_name(value):\n    regex = re.compile(r'[@!#$%^&*()<>?/\\|}{~:]')\n    if regex.search(value):\n        raise ValidationError(_('%(value)s is not a valid short name,'\n                                + ' can only contain - and _'),\n                              params={'value': value})",
        "detail": "web.reNgine.validators",
        "documentation": {}
    },
    {
        "label": "validate_short_name",
        "kind": 2,
        "importPath": "web.reNgine.validators",
        "description": "web.reNgine.validators",
        "peekOfCode": "def validate_short_name(value):\n    regex = re.compile(r'[@!#$%^&*()<>?/\\|}{~:]')\n    if regex.search(value):\n        raise ValidationError(_('%(value)s is not a valid short name,'\n                                + ' can only contain - and _'),\n                              params={'value': value})",
        "detail": "web.reNgine.validators",
        "documentation": {}
    },
    {
        "label": "serve_protected_media",
        "kind": 2,
        "importPath": "web.reNgine.views",
        "description": "web.reNgine.views",
        "peekOfCode": "def serve_protected_media(request, path):\n    file_path = os.path.join(settings.MEDIA_ROOT, path)\n    if os.path.isdir(file_path):\n        raise Http404(\"File not found\")\n    if os.path.exists(file_path):\n        content_type, _ = mimetypes.guess_type(file_path)\n        response = HttpResponse()\n        # response['Content-Disposition'] = f'attachment; filename={os.path.basename(file_path)}'\n        response['Content-Type'] = content_type\n        response['X-Accel-Redirect'] = f'/protected_media/{path}'",
        "detail": "web.reNgine.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "web.reNgine.wsgi",
        "description": "web.reNgine.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "web.reNgine.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "web.scanEngine.management.commands.dumpcustomengines",
        "description": "web.scanEngine.management.commands.dumpcustomengines",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Dumps custom engines into YAMLs in custom_engines/ folder'\n    def handle(self, *args, **kwargs):\n        return dump_custom_scan_engines('/usr/src/app/custom_engines')",
        "detail": "web.scanEngine.management.commands.dumpcustomengines",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "web.scanEngine.management.commands.loadcustomengines",
        "description": "web.scanEngine.management.commands.loadcustomengines",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Loads custom engines from YAMLs in custom_engines/ folder into database'\n    def handle(self, *args, **kwargs):\n        return load_custom_scan_engines('/usr/src/app/custom_engines')",
        "detail": "web.scanEngine.management.commands.loadcustomengines",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "web.scanEngine.migrations.0001_initial",
        "description": "web.scanEngine.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Configuration',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('name', models.CharField(max_length=200)),",
        "detail": "web.scanEngine.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "web.scanEngine.migrations.0002_hackerone_send_report",
        "description": "web.scanEngine.migrations.0002_hackerone_send_report",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('scanEngine', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='hackerone',\n            name='send_report',\n            field=models.BooleanField(blank=True, default=False, null=True),\n        ),",
        "detail": "web.scanEngine.migrations.0002_hackerone_send_report",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "web.scanEngine.templatetags.custom_tags",
        "description": "web.scanEngine.templatetags.custom_tags",
        "peekOfCode": "def split(value, key):\n    return value.split(key)",
        "detail": "web.scanEngine.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "web.scanEngine.templatetags.custom_tags",
        "description": "web.scanEngine.templatetags.custom_tags",
        "peekOfCode": "register = template.Library()\n@register.filter(name='split')\ndef split(value, key):\n    return value.split(key)",
        "detail": "web.scanEngine.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "ScanengineConfig",
        "kind": 6,
        "importPath": "web.scanEngine.apps",
        "description": "web.scanEngine.apps",
        "peekOfCode": "class ScanengineConfig(AppConfig):\n    name = 'scanEngine'",
        "detail": "web.scanEngine.apps",
        "documentation": {}
    },
    {
        "label": "AddEngineForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class AddEngineForm(forms.ModelForm):\n    class Meta:\n        model = EngineType\n        fields = '__all__'\n    engine_name = forms.CharField(\n        required=True,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control form-control-lg\",\n                \"id\": \"scan_engine_name\",",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "UpdateEngineForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class UpdateEngineForm(forms.ModelForm):\n    class Meta:\n        model = EngineType\n        fields = '__all__'\n    engine_name = forms.CharField(\n        required=True,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control form-control-lg\",\n                \"id\": \"scan_engine_name\",",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "AddWordlistForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class AddWordlistForm(forms.Form):\n    name = forms.CharField(\n        required=True,\n        widget=forms.TextInput(\n            attrs={'class': 'form-control form-control-lg',\n                   'id': 'name',\n                   'placeholder': 'my awesome wordlist', }))\n    short_name = forms.CharField(\n        required=True,\n        validators=[validate_short_name],",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "ConfigurationForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class ConfigurationForm(forms.ModelForm):\n    class Meta:\n        model = Configuration\n        fields = '__all__'\n    name = forms.CharField(\n        required=True,\n        widget=forms.TextInput(\n            attrs={'class': 'form-control form-control-lg',\n                   'id': 'name',\n                   'placeholder': 'Configuration Name', }))",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "InterestingLookupForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class InterestingLookupForm(forms.ModelForm):\n    class Meta:\n        model = InterestingLookupModel\n        fields = '__all__'\n    keywords = forms.CharField(\n        required=False,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control form-control-lg\",\n                \"id\": \"keywords\",",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "NotificationForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class NotificationForm(forms.ModelForm):\n    class Meta:\n        model = Notification\n        fields = '__all__'\n    send_to_slack = forms.BooleanField(\n        required=False,\n        widget=forms.CheckboxInput(\n            attrs={\n                \"class\": \"form-check-input\",\n                \"id\": \"slack_checkbox\",",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "ProxyForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class ProxyForm(forms.ModelForm):\n    class Meta:\n        model = Proxy\n        fields = '__all__'\n    use_proxy = forms.BooleanField(\n        required=False,\n        widget=forms.CheckboxInput(\n            attrs={\n                \"class\": \"form-check-input\",\n                \"id\": \"use_proxy\",",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "HackeroneForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class HackeroneForm(forms.ModelForm):\n    class Meta:\n        model = Hackerone\n        fields = '__all__'\n    send_report = forms.BooleanField(\n        required=False,\n        widget=forms.CheckboxInput(\n            attrs={\n                \"class\": \"form-check-input\",\n                \"id\": \"send_report\",",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "ReportForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class ReportForm(forms.ModelForm):\n    class Meta:\n        model = VulnerabilityReportSetting\n        fields = '__all__'\n    company_name = forms.CharField(\n        required=False,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control form-control-lg\",\n                \"id\": \"company_name\",",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "ExternalToolForm",
        "kind": 6,
        "importPath": "web.scanEngine.forms",
        "description": "web.scanEngine.forms",
        "peekOfCode": "class ExternalToolForm(forms.ModelForm):\n    class Meta:\n        model = InstalledExternalTool\n        fields = '__all__'\n    name = forms.CharField(\n        required=True,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control\",\n                \"id\": \"tool_name\",",
        "detail": "web.scanEngine.forms",
        "documentation": {}
    },
    {
        "label": "hybrid_property",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class hybrid_property:\n    def __init__(self, func):\n        self.func = func\n        self.name = func.__name__\n        self.exp = None\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return self.func(instance)\n    def __set__(self, instance, value):",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "EngineType",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class EngineType(models.Model):\n    id = models.AutoField(primary_key=True)\n    engine_name = models.CharField(max_length=200)\n    yaml_configuration = models.TextField()\n    default_engine = models.BooleanField(null=True, default=False)\n    def __str__(self):\n        return self.engine_name\n    def get_number_of_steps(self):\n        return len(self.tasks) if self.tasks else 0\n    @hybrid_property",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "Wordlist",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class Wordlist(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=200)\n    short_name = models.CharField(max_length=50, unique=True)\n    count = models.IntegerField(default=0)\n    def __str__(self):\n        return self.name\nclass Configuration(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=200)",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class Configuration(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=200)\n    short_name = models.CharField(max_length=50, unique=True)\n    content = models.TextField()\n    def __str__(self):\n        return self.name\nclass InterestingLookupModel(models.Model):\n    id = models.AutoField(primary_key=True)\n    keywords = models.TextField(null=True, blank=True)",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "InterestingLookupModel",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class InterestingLookupModel(models.Model):\n    id = models.AutoField(primary_key=True)\n    keywords = models.TextField(null=True, blank=True)\n    custom_type = models.BooleanField(default=False)\n    title_lookup = models.BooleanField(default=True)\n    url_lookup = models.BooleanField(default=True)\n    condition_200_http_lookup = models.BooleanField(default=False)\nclass Notification(models.Model):\n    id = models.AutoField(primary_key=True)\n    send_to_slack = models.BooleanField(default=False)",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class Notification(models.Model):\n    id = models.AutoField(primary_key=True)\n    send_to_slack = models.BooleanField(default=False)\n    send_to_lark = models.BooleanField(default=False)\n    send_to_discord = models.BooleanField(default=False)\n    send_to_telegram = models.BooleanField(default=False)\n    slack_hook_url = models.CharField(max_length=200, null=True, blank=True)\n    lark_hook_url = models.CharField(max_length=200, null=True, blank=True)\n    discord_hook_url = models.CharField(max_length=200, null=True, blank=True)\n    telegram_bot_token = models.CharField(max_length=100, null=True, blank=True)",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "Proxy",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class Proxy(models.Model):\n    id = models.AutoField(primary_key=True)\n    use_proxy = models.BooleanField(default=False)\n    proxies = models.TextField(blank=True, null=True)\nclass Hackerone(models.Model):\n    id = models.AutoField(primary_key=True)\n    # TODO: username and api_key fields will be deprecated in another major release, Instead HackerOneAPIKey model from dasbhboard/models.py will be used\n    username = models.CharField(max_length=100, null=True, blank=True) # unused\n    api_key = models.CharField(max_length=200, null=True, blank=True) # unused\n    send_report = models.BooleanField(default=False, null=True, blank=True)",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "Hackerone",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class Hackerone(models.Model):\n    id = models.AutoField(primary_key=True)\n    # TODO: username and api_key fields will be deprecated in another major release, Instead HackerOneAPIKey model from dasbhboard/models.py will be used\n    username = models.CharField(max_length=100, null=True, blank=True) # unused\n    api_key = models.CharField(max_length=200, null=True, blank=True) # unused\n    send_report = models.BooleanField(default=False, null=True, blank=True)\n    send_critical = models.BooleanField(default=True)\n    send_high = models.BooleanField(default=True)\n    send_medium = models.BooleanField(default=False)\n    report_template = models.TextField(blank=True, null=True)",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "VulnerabilityReportSetting",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class VulnerabilityReportSetting(models.Model):\n    id = models.AutoField(primary_key=True)\n    primary_color = models.CharField(max_length=10, null=True, blank=True, default='#FFB74D')\n    secondary_color = models.CharField(max_length=10, null=True, blank=True, default='#212121')\n    company_name = models.CharField(max_length=100, null=True, blank=True)\n    company_address = models.CharField(max_length=200, null=True, blank=True)\n    company_email = models.CharField(max_length=100, null=True, blank=True)\n    company_website = models.CharField(max_length=100, null=True, blank=True)\n    show_rengine_banner = models.BooleanField(default=True)\n    show_executive_summary = models.BooleanField(default=True)",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "InstalledExternalTool",
        "kind": 6,
        "importPath": "web.scanEngine.models",
        "description": "web.scanEngine.models",
        "peekOfCode": "class InstalledExternalTool(models.Model):\n    id = models.AutoField(primary_key=True)\n    logo_url = models.CharField(max_length=200, null=True, blank=True)\n    name = models.CharField(max_length=100)\n    description = models.CharField(max_length=2000)\n    github_url = models.CharField(max_length=500)\n    license_url = models.CharField(max_length=500, null=True, blank=True)\n    version_lookup_command = models.CharField(max_length=200, null=True, blank=True)\n    update_command = models.CharField(max_length=200, null=True, blank=True)\n    install_command = models.CharField(max_length=200)",
        "detail": "web.scanEngine.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web.scanEngine.urls",
        "description": "web.scanEngine.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        '<slug:slug>/',\n        views.index,\n        name='scan_engine_index'),\n    path(\n        '<slug:slug>/add/',\n        views.add_engine,\n        name='add_engine'),\n    path(",
        "detail": "web.scanEngine.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def index(request, slug):\n    engine_type = EngineType.objects.order_by('engine_name').all()\n    context = {\n        'engine_ul_show': 'show',\n        'engine_li': 'active',\n        'scan_engine_nav_active': 'active',\n        'engine_type': engine_type,\n    }\n    return render(request, 'scanEngine/index.html', context)\n@has_permission_decorator(PERM_MODIFY_SCAN_CONFIGURATIONS, redirect_url=FOUR_OH_FOUR_URL)",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "add_engine",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def add_engine(request, slug):\n    form = AddEngineForm()\n    if request.method == \"POST\":\n        form = AddEngineForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.add_message(\n                request,\n                messages.INFO,\n                'Scan Engine Added successfully')",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "delete_engine",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def delete_engine(request, slug, id):\n    obj = get_object_or_404(EngineType, id=id)\n    if request.method == \"POST\":\n        obj.delete()\n        responseData = {'status': 'true'}\n        messages.add_message(\n            request,\n            messages.INFO,\n            'Engine successfully deleted!')\n    else:",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "update_engine",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def update_engine(request, slug, id):\n    engine = get_object_or_404(EngineType, id=id)\n    form = UpdateEngineForm(\n        initial={\n            'yaml_configuration': engine.yaml_configuration,\n            'engine_name': engine.engine_name\n    })\n    if request.method == \"POST\":\n        form = UpdateEngineForm(request.POST, instance=engine)\n        if form.is_valid():",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "wordlist_list",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def wordlist_list(request, slug):\n    wordlists = Wordlist.objects.all().order_by('id')\n    context = {\n            'scan_engine_nav_active': 'active',\n            'wordlist_li': 'active',\n            'wordlists': wordlists}\n    return render(request, 'scanEngine/wordlist/index.html', context)\n@has_permission_decorator(PERM_MODIFY_WORDLISTS, redirect_url=FOUR_OH_FOUR_URL)\ndef add_wordlist(request, slug):\n    context = {'scan_engine_nav_active': 'active', 'wordlist_li': 'active'}",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "add_wordlist",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def add_wordlist(request, slug):\n    context = {'scan_engine_nav_active': 'active', 'wordlist_li': 'active'}\n    form = AddWordlistForm(request.POST or None, request.FILES or None)\n    if request.method == \"POST\":\n        if form.is_valid() and 'upload_file' in request.FILES:\n            txt_file = request.FILES['upload_file']\n            if txt_file.content_type == 'text/plain':\n                wordlist_content = txt_file.read().decode('UTF-8', \"ignore\")\n                wordlist_file = open(\n                    '/usr/src/' +",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "delete_wordlist",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def delete_wordlist(request, slug, id):\n    obj = get_object_or_404(Wordlist, id=id)\n    if request.method == \"POST\":\n        obj.delete()\n        try:\n            os.remove(\n            '/usr/src/' +\n            'wordlist/' +\n            obj.short_name +\n            '.txt')",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "interesting_lookup",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def interesting_lookup(request, slug):\n    lookup_keywords = None\n    context = {}\n    context['scan_engine_nav_active'] = 'active'\n    context['interesting_lookup_li'] = 'active'\n    context['engine_ul_show'] = 'show'\n    form = InterestingLookupForm()\n    if InterestingLookupModel.objects.filter(custom_type=True).exists():\n        lookup_keywords = InterestingLookupModel.objects.filter(custom_type=True).order_by('-id')[0]\n    else:",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "tool_specific_settings",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def tool_specific_settings(request, slug):\n    context = {}\n    # check for incoming form requests\n    if request.method == \"POST\":\n        if 'gfFileUpload[]' in request.FILES:\n            gf_files = request.FILES.getlist('gfFileUpload[]')\n            upload_count = 0\n            for gf_file in gf_files:\n                original_filename = gf_file.name if isinstance(gf_file.name, str) else gf_file.name.decode('utf-8')\n                # remove special chars from filename, that could possibly do directory traversal or XSS",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "rengine_settings",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def rengine_settings(request, slug):\n    context = {}\n    total, used, _ = shutil.disk_usage(\"/\")\n    total = total // (2**30)\n    used = used // (2**30)\n    context['total'] = total\n    context['used'] = used\n    context['free'] = total-used\n    context['consumed_percent'] = int(100 * float(used)/float(total))\n    context['settings_nav_active'] = 'active'",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "notification_settings",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def notification_settings(request, slug):\n    context = {}\n    form = NotificationForm()\n    notification = None\n    if Notification.objects.all().exists():\n        notification = Notification.objects.all()[0]\n        form.set_value(notification)\n    else:\n        form.set_initial()\n    if request.method == \"POST\":",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "proxy_settings",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def proxy_settings(request, slug):\n    context = {}\n    form = ProxyForm()\n    context['form'] = form\n    proxy = None\n    if Proxy.objects.all().exists():\n        proxy = Proxy.objects.all()[0]\n        form.set_value(proxy)\n    else:\n        form.set_initial()",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "test_hackerone",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def test_hackerone(request, slug):\n    if request.method == \"POST\":\n        headers = {\n            'Accept': 'application/json'\n        }\n        body = json.loads(request.body)\n        r = requests.get(\n            'https://api.hackerone.com/v1/hackers/payments/balance',\n            auth=(body['username'], body['api_key']),\n            headers = headers",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "hackerone_settings",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def hackerone_settings(request, slug):\n    context = {}\n    form = HackeroneForm()\n    context['form'] = form\n    hackerone = None\n    if Hackerone.objects.all().exists():\n        hackerone = Hackerone.objects.all()[0]\n        form.set_value(hackerone)\n    else:\n        form.set_initial()",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "report_settings",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def report_settings(request, slug):\n    context = {}\n    form = ReportForm()\n    context['form'] = form\n    primary_color = '#FFB74D'\n    secondary_color = '#212121'\n    report = None\n    if VulnerabilityReportSetting.objects.all().exists():\n        report = VulnerabilityReportSetting.objects.all()[0]\n        primary_color = report.primary_color",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "tool_arsenal_section",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def tool_arsenal_section(request, slug):\n    context = {}\n    tools = InstalledExternalTool.objects.all().order_by('id')\n    context['installed_tools'] = tools\n    return render(request, 'scanEngine/settings/tool_arsenal.html', context)\n@has_permission_decorator(PERM_MODIFY_SYSTEM_CONFIGURATIONS, redirect_url=FOUR_OH_FOUR_URL)\ndef llm_toolkit_section(request, slug):\n    context = {}\n    list_all_models_url = f'{OLLAMA_INSTANCE}/api/tags'\n    response = requests.get(list_all_models_url)",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "llm_toolkit_section",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def llm_toolkit_section(request, slug):\n    context = {}\n    list_all_models_url = f'{OLLAMA_INSTANCE}/api/tags'\n    response = requests.get(list_all_models_url)\n    all_models = []\n    selected_model = None\n    all_models = DEFAULT_GPT_MODELS.copy()\n    if response.status_code == 200:\n        models = response.json()\n        ollama_models = models.get('models')",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "api_vault",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def api_vault(request, slug):\n    context = {}\n    if request.method == \"POST\":\n        key_openai = request.POST.get('key_openai')\n        key_netlas = request.POST.get('key_netlas')\n        key_chaos = request.POST.get('key_chaos')\n        key_hackerone = request.POST.get('key_hackerone')\n        username_hackerone = request.POST.get('username_hackerone')\n        if key_openai:\n            openai_api_key = OpenAiAPIKey.objects.first()",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "add_tool",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def add_tool(request, slug):\n    form = ExternalToolForm()\n    if request.method == \"POST\":\n        form = ExternalToolForm(request.POST)\n        if form.is_valid():\n            # add tool\n            install_command = form.data['install_command']\n            github_clone_path = None\n            if 'git clone' in install_command:\n                project_name = install_command.split('/')[-1]",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "modify_tool_in_arsenal",
        "kind": 2,
        "importPath": "web.scanEngine.views",
        "description": "web.scanEngine.views",
        "peekOfCode": "def modify_tool_in_arsenal(request, slug, id):\n    external_tool = get_object_or_404(InstalledExternalTool, id=id)\n    form = ExternalToolForm()\n    if request.method == \"POST\":\n        form = ExternalToolForm(request.POST, instance=external_tool)\n        if form.is_valid():\n            form.save()\n            messages.add_message(\n                request,\n                messages.INFO,",
        "detail": "web.scanEngine.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "web.startScan.migrations.0001_initial",
        "description": "web.startScan.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('targetApp', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('scanEngine', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CountryISO',",
        "detail": "web.startScan.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "web.startScan.migrations.0002_auto_20240911_0145",
        "description": "web.startScan.migrations.0002_auto_20240911_0145",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('startScan', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='scanhistory',\n            name='cfg_excluded_paths',\n            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, null=True, size=None),\n        ),",
        "detail": "web.startScan.migrations.0002_auto_20240911_0145",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "web.startScan.templatetags.custom_tags",
        "description": "web.startScan.templatetags.custom_tags",
        "peekOfCode": "def split(value, key):\n    return [x.strip() for x in value.split(key)]\n@register.filter(name='count')\ndef count(value):\n    return len(value.split(','))\n@register.filter(name='getpath')\ndef getpath(value):\n    parsed_url = urlparse(value)\n    if parsed_url.query:\n        return parsed_url.path + '?' + parsed_url.query",
        "detail": "web.startScan.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "web.startScan.templatetags.custom_tags",
        "description": "web.startScan.templatetags.custom_tags",
        "peekOfCode": "def count(value):\n    return len(value.split(','))\n@register.filter(name='getpath')\ndef getpath(value):\n    parsed_url = urlparse(value)\n    if parsed_url.query:\n        return parsed_url.path + '?' + parsed_url.query\n    else:\n        return parsed_url.path\n@register.filter(name='none_or_never')",
        "detail": "web.startScan.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "getpath",
        "kind": 2,
        "importPath": "web.startScan.templatetags.custom_tags",
        "description": "web.startScan.templatetags.custom_tags",
        "peekOfCode": "def getpath(value):\n    parsed_url = urlparse(value)\n    if parsed_url.query:\n        return parsed_url.path + '?' + parsed_url.query\n    else:\n        return parsed_url.path\n@register.filter(name='none_or_never')\ndef none_or_never(value):\n    return 'Never' if value is None else value\n# https://stackoverflow.com/a/32801096",
        "detail": "web.startScan.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "none_or_never",
        "kind": 2,
        "importPath": "web.startScan.templatetags.custom_tags",
        "description": "web.startScan.templatetags.custom_tags",
        "peekOfCode": "def none_or_never(value):\n    return 'Never' if value is None else value\n# https://stackoverflow.com/a/32801096\n@register.filter\ndef next(some_list, current_index):\n    \"\"\"\n    Returns the next element of the list using the current index if it exists.\n    Otherwise returns an empty string.\n    \"\"\"\n    try:",
        "detail": "web.startScan.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "next",
        "kind": 2,
        "importPath": "web.startScan.templatetags.custom_tags",
        "description": "web.startScan.templatetags.custom_tags",
        "peekOfCode": "def next(some_list, current_index):\n    \"\"\"\n    Returns the next element of the list using the current index if it exists.\n    Otherwise returns an empty string.\n    \"\"\"\n    try:\n        return some_list[int(current_index) + 1] # access the next element\n    except:\n        return '' # return empty string in case of exception\n@register.filter",
        "detail": "web.startScan.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "previous",
        "kind": 2,
        "importPath": "web.startScan.templatetags.custom_tags",
        "description": "web.startScan.templatetags.custom_tags",
        "peekOfCode": "def previous(some_list, current_index):\n    \"\"\"\n    Returns the previous element of the list using the current index if it exists.\n    Otherwise returns an empty string.\n    \"\"\"\n    try:\n        return some_list[int(current_index) - 1] # access the previous element\n    except:\n        return '' # return empty string in case of exception",
        "detail": "web.startScan.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "web.startScan.templatetags.custom_tags",
        "description": "web.startScan.templatetags.custom_tags",
        "peekOfCode": "register = template.Library()\n@register.filter(name='split')\ndef split(value, key):\n    return [x.strip() for x in value.split(key)]\n@register.filter(name='count')\ndef count(value):\n    return len(value.split(','))\n@register.filter(name='getpath')\ndef getpath(value):\n    parsed_url = urlparse(value)",
        "detail": "web.startScan.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "StartscanConfig",
        "kind": 6,
        "importPath": "web.startScan.apps",
        "description": "web.startScan.apps",
        "peekOfCode": "class StartscanConfig(AppConfig):\n    name = 'startScan'\n    def ready(self):\n        '''\n        Any Scans that were incomplete in the last scan, we will mark them failed after\n        server restarted\n        This does not include pending_scans, pending_scans are taken care by celery\n        '''\n        pass\n        # logger.info('Cancelling all the ongoing scans')",
        "detail": "web.startScan.apps",
        "documentation": {}
    },
    {
        "label": "hybrid_property",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class hybrid_property:\n\tdef __init__(self, func):\n\t\tself.func = func\n\t\tself.name = func.__name__\n\t\tself.exp = None\n\tdef __get__(self, instance, owner):\n\t\tif instance is None:\n\t\t\treturn self\n\t\treturn self.func(instance)\n\tdef __set__(self, instance, value):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "ScanHistory",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class ScanHistory(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tstart_scan_date = models.DateTimeField()\n\tscan_status = models.IntegerField(choices=CELERY_TASK_STATUSES, default=-1)\n\tresults_dir = models.CharField(max_length=100, blank=True)\n\tdomain = models.ForeignKey(Domain, on_delete=models.CASCADE)\n\tscan_type = models.ForeignKey(EngineType, on_delete=models.CASCADE)\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Subdomain",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Subdomain(models.Model):\n\t# TODO: Add endpoint property instead of replicating endpoint fields here\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(Domain, on_delete=models.CASCADE, null=True, blank=True)\n\tname = models.CharField(max_length=1000)\n\tis_imported_subdomain = models.BooleanField(default=False)\n\tis_important = models.BooleanField(default=False, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True, blank=True)\n\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "SubScan",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class SubScan(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=100, blank=True, null=True)\n\tstart_scan_date = models.DateTimeField()\n\tstatus = models.IntegerField()\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)\n\tsubdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "EndPoint",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class EndPoint(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "VulnerabilityTags",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class VulnerabilityTags(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass VulnerabilityReference(models.Model):\n\tid = models.AutoField(primary_key=True)\n\turl = models.CharField(max_length=5000)\n\tdef __str__(self):\n\t\treturn self.url",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "VulnerabilityReference",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class VulnerabilityReference(models.Model):\n\tid = models.AutoField(primary_key=True)\n\turl = models.CharField(max_length=5000)\n\tdef __str__(self):\n\t\treturn self.url\nclass CveId(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "CveId",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class CveId(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass CweId(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "CweId",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class CweId(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass GPTVulnerabilityReport(models.Model):\n\turl_path = models.CharField(max_length=2000)\n\ttitle = models.CharField(max_length=2500)\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "GPTVulnerabilityReport",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class GPTVulnerabilityReport(models.Model):\n\turl_path = models.CharField(max_length=2000)\n\ttitle = models.CharField(max_length=2500)\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='report_reference', blank=True)\n\tdef __str__(self):\n\t\treturn self.title\nclass Vulnerability(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Vulnerability",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Vulnerability(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tendpoint = models.ForeignKey(",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "ScanActivity",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class ScanActivity(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_of = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\ttitle = models.CharField(max_length=1000)\n\tname = models.CharField(max_length=1000)\n\ttime = models.DateTimeField()\n\tstatus = models.IntegerField()\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Command(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\tactivity = models.ForeignKey(ScanActivity, on_delete=models.CASCADE, blank=True, null=True)\n\tcommand = models.TextField(blank=True, null=True)\n\treturn_code = models.IntegerField(blank=True, null=True)\n\toutput = models.TextField(blank=True, null=True)\n\ttime = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn str(self.command)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Waf",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Waf(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tmanufacturer = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass Technology(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Technology",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Technology(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass CountryISO(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tiso = models.CharField(max_length=10, blank=True)\n\tname = models.CharField(max_length=100, blank=True)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "CountryISO",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class CountryISO(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tiso = models.CharField(max_length=10, blank=True)\n\tname = models.CharField(max_length=100, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass IpAddress(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=100, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "IpAddress",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class IpAddress(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=100, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False)\n\tports = models.ManyToManyField('Port', related_name='ports')\n\tgeo_iso = models.ForeignKey(\n\t\tCountryISO, on_delete=models.CASCADE, null=True, blank=True)\n\tversion = models.IntegerField(blank=True, null=True)\n\tis_private = models.BooleanField(default=False)\n\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Port",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Port(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tnumber = models.IntegerField(default=0)\n\tservice_name = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.CharField(max_length=1000, blank=True, null=True)\n\tis_uncommon = models.BooleanField(default=False)\n\tdef __str__(self):\n\t\treturn str(self.service_name)\nclass DirectoryFile(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "DirectoryFile",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class DirectoryFile(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tlength = models.IntegerField(default=0)\n\tlines = models.IntegerField(default=0)\n\thttp_status = models.IntegerField(default=0)\n\twords = models.IntegerField(default=0)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\turl = models.CharField(max_length=5000, blank=True, null=True)\n\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "DirectoryScan",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class DirectoryScan(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tcommand_line = models.CharField(max_length=5000, blank=True, null=True)\n\tdirectory_files = models.ManyToManyField('DirectoryFile', related_name='directory_files', blank=True)\n\tscanned_date = models.DateTimeField(null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tdir_subscan_ids = models.ManyToManyField('SubScan', related_name='dir_subscan_ids', blank=True)\nclass MetaFinderDocument(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "MetaFinderDocument",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class MetaFinderDocument(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Email",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Email(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Employee(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "Dork",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class Dork(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "S3Bucket",
        "kind": 6,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "class S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tself.func",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tself.func = func\n\t\tself.name = func.__name__\n\t\tself.exp = None\n\tdef __get__(self, instance, owner):\n\t\tif instance is None:\n\t\t\treturn self\n\t\treturn self.func(instance)\n\tdef __set__(self, instance, value):\n\t\tpass\n\tdef expression(self, exp):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tself.name",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tself.name = func.__name__\n\t\tself.exp = None\n\tdef __get__(self, instance, owner):\n\t\tif instance is None:\n\t\t\treturn self\n\t\treturn self.func(instance)\n\tdef __set__(self, instance, value):\n\t\tpass\n\tdef expression(self, exp):\n\t\tself.exp = exp",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tself.exp",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tself.exp = None\n\tdef __get__(self, instance, owner):\n\t\tif instance is None:\n\t\t\treturn self\n\t\treturn self.func(instance)\n\tdef __set__(self, instance, value):\n\t\tpass\n\tdef expression(self, exp):\n\t\tself.exp = exp\n\t\treturn self",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tself.exp",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tself.exp = exp\n\t\treturn self\nclass ScanHistory(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tstart_scan_date = models.DateTimeField()\n\tscan_status = models.IntegerField(choices=CELERY_TASK_STATUSES, default=-1)\n\tresults_dir = models.CharField(max_length=100, blank=True)\n\tdomain = models.ForeignKey(Domain, on_delete=models.CASCADE)\n\tscan_type = models.ForeignKey(EngineType, on_delete=models.CASCADE)\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tstart_scan_date = models.DateTimeField()\n\tscan_status = models.IntegerField(choices=CELERY_TASK_STATUSES, default=-1)\n\tresults_dir = models.CharField(max_length=100, blank=True)\n\tdomain = models.ForeignKey(Domain, on_delete=models.CASCADE)\n\tscan_type = models.ForeignKey(EngineType, on_delete=models.CASCADE)\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tstart_scan_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tstart_scan_date = models.DateTimeField()\n\tscan_status = models.IntegerField(choices=CELERY_TASK_STATUSES, default=-1)\n\tresults_dir = models.CharField(max_length=100, blank=True)\n\tdomain = models.ForeignKey(Domain, on_delete=models.CASCADE)\n\tscan_type = models.ForeignKey(EngineType, on_delete=models.CASCADE)\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_status",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_status = models.IntegerField(choices=CELERY_TASK_STATUSES, default=-1)\n\tresults_dir = models.CharField(max_length=100, blank=True)\n\tdomain = models.ForeignKey(Domain, on_delete=models.CASCADE)\n\tscan_type = models.ForeignKey(EngineType, on_delete=models.CASCADE)\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tresults_dir",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tresults_dir = models.CharField(max_length=100, blank=True)\n\tdomain = models.ForeignKey(Domain, on_delete=models.CASCADE)\n\tscan_type = models.ForeignKey(EngineType, on_delete=models.CASCADE)\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdomain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdomain = models.ForeignKey(Domain, on_delete=models.CASCADE)\n\tscan_type = models.ForeignKey(EngineType, on_delete=models.CASCADE)\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_type",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_type = models.ForeignKey(EngineType, on_delete=models.CASCADE)\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcelery_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttasks",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttasks = ArrayField(models.CharField(max_length=200), null=True)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tstop_scan_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tused_gf_patterns",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tused_gf_patterns = models.CharField(max_length=500, null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_\n\tcfg_out_of_scope_subdomains = ArrayField(",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\terror_message",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_\n\tcfg_out_of_scope_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\temails",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\temails = models.ManyToManyField('Email', related_name='emails', blank=True)\n\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_\n\tcfg_out_of_scope_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\temployees",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\temployees = models.ManyToManyField('Employee', related_name='employees', blank=True)\n\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_\n\tcfg_out_of_scope_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tbuckets",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tbuckets = models.ManyToManyField('S3Bucket', related_name='buckets', blank=True)\n\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_\n\tcfg_out_of_scope_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,\n\t\tdefault=list",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdorks",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdorks = models.ManyToManyField('Dork', related_name='dorks', blank=True)\n\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_\n\tcfg_out_of_scope_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,\n\t\tdefault=list\n\t)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tinitiated_by",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tinitiated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='initiated_scans', blank=True, null=True)\n\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_\n\tcfg_out_of_scope_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,\n\t\tdefault=list\n\t)\n\tcfg_starting_point_path = models.CharField(max_length=200, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\taborted_by",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\taborted_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='aborted_scans')\n\t# scan related configs, prefix config fields with cfg_\n\tcfg_out_of_scope_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,\n\t\tdefault=list\n\t)\n\tcfg_starting_point_path = models.CharField(max_length=200, blank=True, null=True)\n\tcfg_excluded_paths = ArrayField(",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcfg_out_of_scope_subdomains",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcfg_out_of_scope_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,\n\t\tdefault=list\n\t)\n\tcfg_starting_point_path = models.CharField(max_length=200, blank=True, null=True)\n\tcfg_excluded_paths = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcfg_starting_point_path",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcfg_starting_point_path = models.CharField(max_length=200, blank=True, null=True)\n\tcfg_excluded_paths = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,\n\t\tdefault=list\n\t)\n\tcfg_imported_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcfg_excluded_paths",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcfg_excluded_paths = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,\n\t\tdefault=list\n\t)\n\tcfg_imported_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcfg_imported_subdomains",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcfg_imported_subdomains = ArrayField(\n\t\tmodels.CharField(max_length=200),\n\t\tblank=True,\n\t\tnull=True,\n\t\tdefault=list\n\t)\n\tdef __str__(self):\n\t\treturn self.domain.name\n\tdef get_subdomain_count(self):\n\t\treturn Subdomain.objects.filter(scan_history__id=self.id).count()",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tlast_scan",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tlast_scan = (\n\t\t\tScanHistory.objects\n\t\t\t.filter(id=self.id)\n\t\t\t.filter(tasks__overlap=['subdomain_discovery'])\n\t\t\t.order_by('-start_scan_date')\n\t\t)\n\t\tscanned_host_q1 = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(target_domain__id=self.domain.id)\n\t\t\t.exclude(scan_history__id=last_scan[0].id)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tscanned_host_q1",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tscanned_host_q1 = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(target_domain__id=self.domain.id)\n\t\t\t.exclude(scan_history__id=last_scan[0].id)\n\t\t\t.values('name')\n\t\t)\n\t\tscanned_host_q2 = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(scan_history__id=last_scan[0].id)\n\t\t\t.values('name')",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tscanned_host_q2",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tscanned_host_q2 = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(scan_history__id=last_scan[0].id)\n\t\t\t.values('name')\n\t\t)\n\t\tnew_subdomains = scanned_host_q2.difference(scanned_host_q1).count()\n\t\tremoved_subdomains = scanned_host_q1.difference(scanned_host_q2).count()\n\t\treturn [new_subdomains, removed_subdomains]\n\tdef get_endpoint_count(self):\n\t\treturn (",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tnew_subdomains",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tnew_subdomains = scanned_host_q2.difference(scanned_host_q1).count()\n\t\tremoved_subdomains = scanned_host_q1.difference(scanned_host_q2).count()\n\t\treturn [new_subdomains, removed_subdomains]\n\tdef get_endpoint_count(self):\n\t\treturn (\n\t\t\tEndPoint.objects\n\t\t\t.filter(scan_history__id=self.id)\n\t\t\t.count()\n\t\t)\n\tdef get_vulnerability_count(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tremoved_subdomains",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tremoved_subdomains = scanned_host_q1.difference(scanned_host_q2).count()\n\t\treturn [new_subdomains, removed_subdomains]\n\tdef get_endpoint_count(self):\n\t\treturn (\n\t\t\tEndPoint.objects\n\t\t\t.filter(scan_history__id=self.id)\n\t\t\t.count()\n\t\t)\n\tdef get_vulnerability_count(self):\n\t\treturn (",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tnumber_of_steps",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tnumber_of_steps = len(self.tasks) if self.tasks else 0\n\t\tsteps_done = len(self.scanactivity_set.all())\n\t\tif steps_done and number_of_steps:\n\t\t\treturn round((number_of_steps / (steps_done)) * 100, 2)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn self.get_time_ago(self.stop_scan_date)\n\tdef get_total_scan_time_in_sec(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn (self.stop_scan_date - self.start_scan_date).seconds",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tsteps_done",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tsteps_done = len(self.scanactivity_set.all())\n\t\tif steps_done and number_of_steps:\n\t\t\treturn round((number_of_steps / (steps_done)) * 100, 2)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn self.get_time_ago(self.stop_scan_date)\n\tdef get_total_scan_time_in_sec(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn (self.stop_scan_date - self.start_scan_date).seconds\n\tdef get_elapsed_time(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tduration",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tduration = timezone.now() - time\n\t\tdays, seconds = duration.days, duration.seconds\n\t\thours = days * 24 + seconds // 3600\n\t\tminutes = (seconds % 3600) // 60\n\t\tseconds = seconds % 60\n\t\tif not hours and not minutes:\n\t\t\treturn f'{seconds} seconds'\n\t\telif not hours:\n\t\t\treturn f'{minutes} minutes'\n\t\telif not minutes:",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\thours",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\thours = days * 24 + seconds // 3600\n\t\tminutes = (seconds % 3600) // 60\n\t\tseconds = seconds % 60\n\t\tif not hours and not minutes:\n\t\t\treturn f'{seconds} seconds'\n\t\telif not hours:\n\t\t\treturn f'{minutes} minutes'\n\t\telif not minutes:\n\t\t\treturn f'{hours} hours'\n\t\treturn f'{hours} hours {minutes} minutes'",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tminutes",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tminutes = (seconds % 3600) // 60\n\t\tseconds = seconds % 60\n\t\tif not hours and not minutes:\n\t\t\treturn f'{seconds} seconds'\n\t\telif not hours:\n\t\t\treturn f'{minutes} minutes'\n\t\telif not minutes:\n\t\t\treturn f'{hours} hours'\n\t\treturn f'{hours} hours {minutes} minutes'\nclass Subdomain(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tseconds",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tseconds = seconds % 60\n\t\tif not hours and not minutes:\n\t\t\treturn f'{seconds} seconds'\n\t\telif not hours:\n\t\t\treturn f'{minutes} minutes'\n\t\telif not minutes:\n\t\t\treturn f'{hours} hours'\n\t\treturn f'{hours} hours {minutes} minutes'\nclass Subdomain(models.Model):\n\t# TODO: Add endpoint property instead of replicating endpoint fields here",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(Domain, on_delete=models.CASCADE, null=True, blank=True)\n\tname = models.CharField(max_length=1000)\n\tis_imported_subdomain = models.BooleanField(default=False)\n\tis_important = models.BooleanField(default=False, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True, blank=True)\n\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(Domain, on_delete=models.CASCADE, null=True, blank=True)\n\tname = models.CharField(max_length=1000)\n\tis_imported_subdomain = models.BooleanField(default=False)\n\tis_important = models.BooleanField(default=False, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True, blank=True)\n\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttarget_domain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttarget_domain = models.ForeignKey(Domain, on_delete=models.CASCADE, null=True, blank=True)\n\tname = models.CharField(max_length=1000)\n\tis_imported_subdomain = models.BooleanField(default=False)\n\tis_important = models.BooleanField(default=False, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True, blank=True)\n\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=1000)\n\tis_imported_subdomain = models.BooleanField(default=False)\n\tis_important = models.BooleanField(default=False, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True, blank=True)\n\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tis_imported_subdomain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tis_imported_subdomain = models.BooleanField(default=False)\n\tis_important = models.BooleanField(default=False, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True, blank=True)\n\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tis_important",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tis_important = models.BooleanField(default=False, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True, blank=True)\n\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thttp_url",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thttp_url = models.CharField(max_length=10000, null=True, blank=True)\n\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscreenshot_path",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscreenshot_path = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thttp_header_path",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thttp_header_path = models.CharField(max_length=1000, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdiscovered_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcname = models.CharField(max_length=5000, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tis_cdn",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tis_cdn = models.BooleanField(default=False, blank=True, null=True)\n\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcdn_name",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcdn_name = models.CharField(max_length=200, blank=True, null=True)\n\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thttp_status",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thttp_status = models.IntegerField(default=0)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcontent_type",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tresponse_time",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\twebserver",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcontent_length",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcontent_length = models.IntegerField(default=0, blank=True, null=True)\n\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\n\t@property",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tpage_title",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tpage_title = models.CharField(max_length=1000, blank=True, null=True)\n\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\n\t@property\n\tdef get_endpoint_count(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttechnologies",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttechnologies = models.ManyToManyField('Technology', related_name='technologies', blank=True)\n\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\n\t@property\n\tdef get_endpoint_count(self):\n\t\tendpoints = EndPoint.objects.filter(subdomain__name=self.name)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tip_addresses",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tip_addresses = models.ManyToManyField('IPAddress', related_name='ip_addresses', blank=True)\n\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\n\t@property\n\tdef get_endpoint_count(self):\n\t\tendpoints = EndPoint.objects.filter(subdomain__name=self.name)\n\t\tif self.scan_history:",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdirectories",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdirectories = models.ManyToManyField('DirectoryScan', related_name='directories', blank=True)\n\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\n\t@property\n\tdef get_endpoint_count(self):\n\t\tendpoints = EndPoint.objects.filter(subdomain__name=self.name)\n\t\tif self.scan_history:\n\t\t\tendpoints = endpoints.filter(scan_history=self.scan_history)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\twaf",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\twaf = models.ManyToManyField('Waf', related_name='waf', blank=True)\n\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\n\t@property\n\tdef get_endpoint_count(self):\n\t\tendpoints = EndPoint.objects.filter(subdomain__name=self.name)\n\t\tif self.scan_history:\n\t\t\tendpoints = endpoints.filter(scan_history=self.scan_history)\n\t\treturn endpoints.count()",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tattack_surface",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tattack_surface = models.TextField(null=True, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\n\t@property\n\tdef get_endpoint_count(self):\n\t\tendpoints = EndPoint.objects.filter(subdomain__name=self.name)\n\t\tif self.scan_history:\n\t\t\tendpoints = endpoints.filter(scan_history=self.scan_history)\n\t\treturn endpoints.count()\n\t@property",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tendpoints",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tendpoints = EndPoint.objects.filter(subdomain__name=self.name)\n\t\tif self.scan_history:\n\t\t\tendpoints = endpoints.filter(scan_history=self.scan_history)\n\t\treturn endpoints.count()\n\t@property\n\tdef get_info_count(self):\n\t\treturn (\n\t\t\tself.get_vulnerabilities\n\t\t\t.filter(severity=0)\n\t\t\t.count()",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tendpoints",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\t\tendpoints = endpoints.filter(scan_history=self.scan_history)\n\t\treturn endpoints.count()\n\t@property\n\tdef get_info_count(self):\n\t\treturn (\n\t\t\tself.get_vulnerabilities\n\t\t\t.filter(severity=0)\n\t\t\t.count()\n\t\t)\n\t@property",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tvulns",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tvulns = Vulnerability.objects.filter(subdomain__name=self.name)\n\t\tif self.scan_history:\n\t\t\tvulns = vulns.filter(scan_history=self.scan_history)\n\t\treturn vulns\n\t@property\n\tdef get_vulnerabilities_without_info(self):\n\t\tvulns = Vulnerability.objects.filter(subdomain__name=self.name).exclude(severity=0)\n\t\tif self.scan_history:\n\t\t\tvulns = vulns.filter(scan_history=self.scan_history)\n\t\treturn vulns",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tvulns",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\t\tvulns = vulns.filter(scan_history=self.scan_history)\n\t\treturn vulns\n\t@property\n\tdef get_vulnerabilities_without_info(self):\n\t\tvulns = Vulnerability.objects.filter(subdomain__name=self.name).exclude(severity=0)\n\t\tif self.scan_history:\n\t\t\tvulns = vulns.filter(scan_history=self.scan_history)\n\t\treturn vulns\n\t@property\n\tdef get_directories_count(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tvulns",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tvulns = Vulnerability.objects.filter(subdomain__name=self.name).exclude(severity=0)\n\t\tif self.scan_history:\n\t\t\tvulns = vulns.filter(scan_history=self.scan_history)\n\t\treturn vulns\n\t@property\n\tdef get_directories_count(self):\n\t\tsubdomains = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(id=self.id)\n\t\t)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tvulns",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\t\tvulns = vulns.filter(scan_history=self.scan_history)\n\t\treturn vulns\n\t@property\n\tdef get_directories_count(self):\n\t\tsubdomains = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(id=self.id)\n\t\t)\n\t\tdirscan = (\n\t\t\tDirectoryScan.objects",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tsubdomains",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tsubdomains = (\n\t\t\tSubdomain.objects\n\t\t\t.filter(id=self.id)\n\t\t)\n\t\tdirscan = (\n\t\t\tDirectoryScan.objects\n\t\t\t.filter(directories__in=subdomains)\n\t\t)\n\t\treturn (\n\t\t\tDirectoryFile.objects",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tdirscan",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tdirscan = (\n\t\t\tDirectoryScan.objects\n\t\t\t.filter(directories__in=subdomains)\n\t\t)\n\t\treturn (\n\t\t\tDirectoryFile.objects\n\t\t\t.filter(directory_files__in=dirscan)\n\t\t\t.distinct()\n\t\t\t.count()\n\t\t)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tTodoNote",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tTodoNote = apps.get_model('recon_note', 'TodoNote')\n\t\tnotes = TodoNote.objects\n\t\tif self.scan_history:\n\t\t\tnotes = notes.filter(scan_history=self.scan_history)\n\t\tnotes = notes.filter(subdomain__id=self.id)\n\t\treturn notes.values()\n\t@property\n\tdef get_subscan_count(self):\n\t\treturn (\n\t\t\tSubScan.objects",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tnotes",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tnotes = TodoNote.objects\n\t\tif self.scan_history:\n\t\t\tnotes = notes.filter(scan_history=self.scan_history)\n\t\tnotes = notes.filter(subdomain__id=self.id)\n\t\treturn notes.values()\n\t@property\n\tdef get_subscan_count(self):\n\t\treturn (\n\t\t\tSubScan.objects\n\t\t\t.filter(subdomain__id=self.id)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tnotes",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\t\tnotes = notes.filter(scan_history=self.scan_history)\n\t\tnotes = notes.filter(subdomain__id=self.id)\n\t\treturn notes.values()\n\t@property\n\tdef get_subscan_count(self):\n\t\treturn (\n\t\t\tSubScan.objects\n\t\t\t.filter(subdomain__id=self.id)\n\t\t\t.distinct()\n\t\t\t.count()",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tnotes",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tnotes = notes.filter(subdomain__id=self.id)\n\t\treturn notes.values()\n\t@property\n\tdef get_subscan_count(self):\n\t\treturn (\n\t\t\tSubScan.objects\n\t\t\t.filter(subdomain__id=self.id)\n\t\t\t.distinct()\n\t\t\t.count()\n\t\t)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=100, blank=True, null=True)\n\tstart_scan_date = models.DateTimeField()\n\tstatus = models.IntegerField()\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)\n\tsubdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttype",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttype = models.CharField(max_length=100, blank=True, null=True)\n\tstart_scan_date = models.DateTimeField()\n\tstatus = models.IntegerField()\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)\n\tsubdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tstart_scan_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tstart_scan_date = models.DateTimeField()\n\tstatus = models.IntegerField()\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)\n\tsubdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tstatus = models.IntegerField()\n\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)\n\tsubdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcelery_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcelery_ids = ArrayField(models.CharField(max_length=100), blank=True, default=list)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)\n\tsubdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(timezone.now(), self.stop_scan_date)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)\n\tsubdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(timezone.now(), self.stop_scan_date)\n\tdef get_total_time_taken(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tsubdomain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tsubdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)\n\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(timezone.now(), self.stop_scan_date)\n\tdef get_total_time_taken(self):\n\t\tif self.stop_scan_date:",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tstop_scan_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tstop_scan_date = models.DateTimeField(null=True, blank=True)\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(timezone.now(), self.stop_scan_date)\n\tdef get_total_time_taken(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(self.stop_scan_date, self.start_scan_date)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\terror_message",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(timezone.now(), self.stop_scan_date)\n\tdef get_total_time_taken(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(self.stop_scan_date, self.start_scan_date)\n\tdef get_elapsed_time(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tengine",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tengine = models.ForeignKey(EngineType, on_delete=models.CASCADE, blank=True, null=True)\n\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(timezone.now(), self.stop_scan_date)\n\tdef get_total_time_taken(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(self.stop_scan_date, self.start_scan_date)\n\tdef get_elapsed_time(self):\n\t\treturn get_time_taken(timezone.now(), self.start_scan_date)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tsubdomain_subscan_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tsubdomain_subscan_ids = models.ManyToManyField('Subdomain', related_name='subdomain_subscan_ids', blank=True)\n\tdef get_completed_ago(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(timezone.now(), self.stop_scan_date)\n\tdef get_total_time_taken(self):\n\t\tif self.stop_scan_date:\n\t\t\treturn get_time_taken(self.stop_scan_date, self.start_scan_date)\n\tdef get_elapsed_time(self):\n\t\treturn get_time_taken(timezone.now(), self.start_scan_date)\n\tdef get_task_name_str(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\ttaskmap",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\ttaskmap = {\n\t\t\t'subdomain_discovery': 'Subdomain discovery',\n\t\t\t'dir_file_fuzz': 'Directory and File fuzzing',\n\t\t\t'port_scan': 'Port Scan',\n\t\t\t'fetch_url': 'Fetch URLs',\n\t\t\t'vulnerability_scan': 'Vulnerability Scan',\n\t\t\t'screenshot': 'Screenshot',\n\t\t\t'waf_detection': 'Waf Detection',\n\t\t\t'osint': 'Open-Source Intelligence'\n\t\t}",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\thttp_url = models.CharField(max_length=30000)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttarget_domain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\thttp_url = models.CharField(max_length=30000)\n\tcontent_length = models.IntegerField(default=0, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tsubdomain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\thttp_url = models.CharField(max_length=30000)\n\tcontent_length = models.IntegerField(default=0, null=True, blank=True)\n\tpage_title = models.CharField(max_length=30000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tsource",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tsource = models.CharField(max_length=200, null=True, blank=True)\n\thttp_url = models.CharField(max_length=30000)\n\tcontent_length = models.IntegerField(default=0, null=True, blank=True)\n\tpage_title = models.CharField(max_length=30000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thttp_url",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thttp_url = models.CharField(max_length=30000)\n\tcontent_length = models.IntegerField(default=0, null=True, blank=True)\n\tpage_title = models.CharField(max_length=30000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcontent_length",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcontent_length = models.IntegerField(default=0, null=True, blank=True)\n\tpage_title = models.CharField(max_length=30000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tpage_title",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tpage_title = models.CharField(max_length=30000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thttp_status",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans\n\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcontent_type",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcontent_type = models.CharField(max_length=100, null=True, blank=True)\n\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans\n\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdiscovered_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdiscovered_date = models.DateTimeField(blank=True, null=True)\n\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans\n\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\treturn self.http_url",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tresponse_time",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tresponse_time = models.FloatField(null=True, blank=True)\n\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans\n\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\treturn self.http_url\n\t@hybrid_property",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\twebserver",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\twebserver = models.CharField(max_length=1000, blank=True, null=True)\n\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans\n\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\treturn self.http_url\n\t@hybrid_property\n\tdef is_alive(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tis_default",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tis_default = models.BooleanField(null=True, blank=True, default=False)\n\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans\n\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\treturn self.http_url\n\t@hybrid_property\n\tdef is_alive(self):\n\t\treturn self.http_status and (0 < self.http_status < 500) and self.http_status != 404",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tmatched_gf_patterns",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tmatched_gf_patterns = models.CharField(max_length=10000, null=True, blank=True)\n\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans\n\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\treturn self.http_url\n\t@hybrid_property\n\tdef is_alive(self):\n\t\treturn self.http_status and (0 < self.http_status < 500) and self.http_status != 404\nclass VulnerabilityTags(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttechs",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttechs = models.ManyToManyField('Technology', related_name='techs', null=True, blank=True)\n\t# used for subscans\n\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\treturn self.http_url\n\t@hybrid_property\n\tdef is_alive(self):\n\t\treturn self.http_status and (0 < self.http_status < 500) and self.http_status != 404\nclass VulnerabilityTags(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tendpoint_subscan_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tendpoint_subscan_ids = models.ManyToManyField('SubScan', related_name='endpoint_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\treturn self.http_url\n\t@hybrid_property\n\tdef is_alive(self):\n\t\treturn self.http_status and (0 < self.http_status < 500) and self.http_status != 404\nclass VulnerabilityTags(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass VulnerabilityReference(models.Model):\n\tid = models.AutoField(primary_key=True)\n\turl = models.CharField(max_length=5000)\n\tdef __str__(self):\n\t\treturn self.url\nclass CveId(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass VulnerabilityReference(models.Model):\n\tid = models.AutoField(primary_key=True)\n\turl = models.CharField(max_length=5000)\n\tdef __str__(self):\n\t\treturn self.url\nclass CveId(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\turl = models.CharField(max_length=5000)\n\tdef __str__(self):\n\t\treturn self.url\nclass CveId(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass CweId(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\turl = models.CharField(max_length=5000)\n\tdef __str__(self):\n\t\treturn self.url\nclass CveId(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass CweId(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass CweId(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass GPTVulnerabilityReport(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass CweId(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass GPTVulnerabilityReport(models.Model):\n\turl_path = models.CharField(max_length=2000)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass GPTVulnerabilityReport(models.Model):\n\turl_path = models.CharField(max_length=2000)\n\ttitle = models.CharField(max_length=2500)\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=100)\n\tdef __str__(self):\n\t\treturn self.name\nclass GPTVulnerabilityReport(models.Model):\n\turl_path = models.CharField(max_length=2000)\n\ttitle = models.CharField(max_length=2500)\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='report_reference', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\turl_path",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\turl_path = models.CharField(max_length=2000)\n\ttitle = models.CharField(max_length=2500)\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='report_reference', blank=True)\n\tdef __str__(self):\n\t\treturn self.title\nclass Vulnerability(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttitle = models.CharField(max_length=2500)\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='report_reference', blank=True)\n\tdef __str__(self):\n\t\treturn self.title\nclass Vulnerability(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='report_reference', blank=True)\n\tdef __str__(self):\n\t\treturn self.title\nclass Vulnerability(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\timpact",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='report_reference', blank=True)\n\tdef __str__(self):\n\t\treturn self.title\nclass Vulnerability(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\tsubdomain = models.ForeignKey(",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tremediation",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tremediation = models.TextField(null=True, blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='report_reference', blank=True)\n\tdef __str__(self):\n\t\treturn self.title\nclass Vulnerability(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\treferences",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\treferences = models.ManyToManyField('VulnerabilityReference', related_name='report_reference', blank=True)\n\tdef __str__(self):\n\t\treturn self.title\nclass Vulnerability(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tendpoint = models.ForeignKey(\n\t\tEndPoint,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\tsource = models.CharField(max_length=200, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tendpoint = models.ForeignKey(\n\t\tEndPoint,\n\t\ton_delete=models.CASCADE,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tsource",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tsource = models.CharField(max_length=200, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tendpoint = models.ForeignKey(\n\t\tEndPoint,\n\t\ton_delete=models.CASCADE,\n\t\tblank=True,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tsubdomain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tendpoint = models.ForeignKey(\n\t\tEndPoint,\n\t\ton_delete=models.CASCADE,\n\t\tblank=True,\n\t\tnull=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tendpoint",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tendpoint = models.ForeignKey(\n\t\tEndPoint,\n\t\ton_delete=models.CASCADE,\n\t\tblank=True,\n\t\tnull=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\ttemplate = models.CharField(max_length=100, null=True, blank=True)\n\ttemplate_url = models.CharField(max_length=2500, null=True, blank=True)\n\ttemplate_id = models.CharField(max_length=200, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttarget_domain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\ttemplate = models.CharField(max_length=100, null=True, blank=True)\n\ttemplate_url = models.CharField(max_length=2500, null=True, blank=True)\n\ttemplate_id = models.CharField(max_length=200, null=True, blank=True)\n\tmatcher_name = models.CharField(max_length=500, null=True, blank=True)\n\tname = models.CharField(max_length=2500)\n\tseverity = models.IntegerField()\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttemplate",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttemplate = models.CharField(max_length=100, null=True, blank=True)\n\ttemplate_url = models.CharField(max_length=2500, null=True, blank=True)\n\ttemplate_id = models.CharField(max_length=200, null=True, blank=True)\n\tmatcher_name = models.CharField(max_length=500, null=True, blank=True)\n\tname = models.CharField(max_length=2500)\n\tseverity = models.IntegerField()\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttemplate_url",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttemplate_url = models.CharField(max_length=2500, null=True, blank=True)\n\ttemplate_id = models.CharField(max_length=200, null=True, blank=True)\n\tmatcher_name = models.CharField(max_length=500, null=True, blank=True)\n\tname = models.CharField(max_length=2500)\n\tseverity = models.IntegerField()\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttemplate_id",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttemplate_id = models.CharField(max_length=200, null=True, blank=True)\n\tmatcher_name = models.CharField(max_length=500, null=True, blank=True)\n\tname = models.CharField(max_length=2500)\n\tseverity = models.IntegerField()\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True\n\t)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tmatcher_name",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tmatcher_name = models.CharField(max_length=500, null=True, blank=True)\n\tname = models.CharField(max_length=2500)\n\tseverity = models.IntegerField()\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True\n\t)\n\ttags = models.ManyToManyField('VulnerabilityTags', related_name='vuln_tags', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=2500)\n\tseverity = models.IntegerField()\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True\n\t)\n\ttags = models.ManyToManyField('VulnerabilityTags', related_name='vuln_tags', blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='vuln_reference', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tseverity",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tseverity = models.IntegerField()\n\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True\n\t)\n\ttags = models.ManyToManyField('VulnerabilityTags', related_name='vuln_tags', blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='vuln_reference', blank=True)\n\tcve_ids = models.ManyToManyField('CveId', related_name='cve_ids', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdescription = models.TextField(null=True, blank=True)\n\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True\n\t)\n\ttags = models.ManyToManyField('VulnerabilityTags', related_name='vuln_tags', blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='vuln_reference', blank=True)\n\tcve_ids = models.ManyToManyField('CveId', related_name='cve_ids', blank=True)\n\tcwe_ids = models.ManyToManyField('CweId', related_name='cwe_ids', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\timpact",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\timpact = models.TextField(null=True, blank=True)\n\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True\n\t)\n\ttags = models.ManyToManyField('VulnerabilityTags', related_name='vuln_tags', blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='vuln_reference', blank=True)\n\tcve_ids = models.ManyToManyField('CveId', related_name='cve_ids', blank=True)\n\tcwe_ids = models.ManyToManyField('CweId', related_name='cwe_ids', blank=True)\n\tcvss_metrics = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tremediation",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tremediation = models.TextField(null=True, blank=True)\n\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True\n\t)\n\ttags = models.ManyToManyField('VulnerabilityTags', related_name='vuln_tags', blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='vuln_reference', blank=True)\n\tcve_ids = models.ManyToManyField('CveId', related_name='cve_ids', blank=True)\n\tcwe_ids = models.ManyToManyField('CweId', related_name='cwe_ids', blank=True)\n\tcvss_metrics = models.CharField(max_length=500, null=True, blank=True)\n\tcvss_score = models.FloatField(null=True, blank=True, default=None)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\textracted_results",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\textracted_results = ArrayField(\n\t\tmodels.CharField(max_length=5000), blank=True, null=True\n\t)\n\ttags = models.ManyToManyField('VulnerabilityTags', related_name='vuln_tags', blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='vuln_reference', blank=True)\n\tcve_ids = models.ManyToManyField('CveId', related_name='cve_ids', blank=True)\n\tcwe_ids = models.ManyToManyField('CweId', related_name='cwe_ids', blank=True)\n\tcvss_metrics = models.CharField(max_length=500, null=True, blank=True)\n\tcvss_score = models.FloatField(null=True, blank=True, default=None)\n\tcurl_command = models.CharField(max_length=15000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttags",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttags = models.ManyToManyField('VulnerabilityTags', related_name='vuln_tags', blank=True)\n\treferences = models.ManyToManyField('VulnerabilityReference', related_name='vuln_reference', blank=True)\n\tcve_ids = models.ManyToManyField('CveId', related_name='cve_ids', blank=True)\n\tcwe_ids = models.ManyToManyField('CweId', related_name='cwe_ids', blank=True)\n\tcvss_metrics = models.CharField(max_length=500, null=True, blank=True)\n\tcvss_score = models.FloatField(null=True, blank=True, default=None)\n\tcurl_command = models.CharField(max_length=15000, null=True, blank=True)\n\ttype = models.CharField(max_length=100, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\treferences",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\treferences = models.ManyToManyField('VulnerabilityReference', related_name='vuln_reference', blank=True)\n\tcve_ids = models.ManyToManyField('CveId', related_name='cve_ids', blank=True)\n\tcwe_ids = models.ManyToManyField('CweId', related_name='cwe_ids', blank=True)\n\tcvss_metrics = models.CharField(max_length=500, null=True, blank=True)\n\tcvss_score = models.FloatField(null=True, blank=True, default=None)\n\tcurl_command = models.CharField(max_length=15000, null=True, blank=True)\n\ttype = models.CharField(max_length=100, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcve_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcve_ids = models.ManyToManyField('CveId', related_name='cve_ids', blank=True)\n\tcwe_ids = models.ManyToManyField('CweId', related_name='cwe_ids', blank=True)\n\tcvss_metrics = models.CharField(max_length=500, null=True, blank=True)\n\tcvss_score = models.FloatField(null=True, blank=True, default=None)\n\tcurl_command = models.CharField(max_length=15000, null=True, blank=True)\n\ttype = models.CharField(max_length=100, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcwe_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcwe_ids = models.ManyToManyField('CweId', related_name='cwe_ids', blank=True)\n\tcvss_metrics = models.CharField(max_length=500, null=True, blank=True)\n\tcvss_score = models.FloatField(null=True, blank=True, default=None)\n\tcurl_command = models.CharField(max_length=15000, null=True, blank=True)\n\ttype = models.CharField(max_length=100, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcvss_metrics",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcvss_metrics = models.CharField(max_length=500, null=True, blank=True)\n\tcvss_score = models.FloatField(null=True, blank=True, default=None)\n\tcurl_command = models.CharField(max_length=15000, null=True, blank=True)\n\ttype = models.CharField(max_length=100, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcvss_score",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcvss_score = models.FloatField(null=True, blank=True, default=None)\n\tcurl_command = models.CharField(max_length=15000, null=True, blank=True)\n\ttype = models.CharField(max_length=100, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcurl_command",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcurl_command = models.CharField(max_length=15000, null=True, blank=True)\n\ttype = models.CharField(max_length=100, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttype",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttype = models.CharField(max_length=100, null=True, blank=True)\n\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans\n\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thttp_url",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thttp_url = models.CharField(max_length=10000, null=True)\n\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans\n\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdiscovered_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdiscovered_date = models.DateTimeField(null=True)\n\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans\n\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\tcve_str = ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\topen_status",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\topen_status = models.BooleanField(null=True, blank=True, default=True)\n\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans\n\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\tcve_str = ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\t\tseverity = NUCLEI_REVERSE_SEVERITY_MAP[self.severity]",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thackerone_report_id",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thackerone_report_id = models.CharField(max_length=50, null=True, blank=True)\n\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans\n\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\tcve_str = ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\t\tseverity = NUCLEI_REVERSE_SEVERITY_MAP[self.severity]\n\t\treturn f'{self.http_url} | `{severity.upper()}` | `{self.name}` | `{cve_str}`'",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\trequest",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\trequest = models.TextField(blank=True, null=True)\n\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans\n\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\tcve_str = ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\t\tseverity = NUCLEI_REVERSE_SEVERITY_MAP[self.severity]\n\t\treturn f'{self.http_url} | `{severity.upper()}` | `{self.name}` | `{cve_str}`'\n\tdef get_severity(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tresponse",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tresponse = models.TextField(blank=True, null=True)\n\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans\n\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\tcve_str = ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\t\tseverity = NUCLEI_REVERSE_SEVERITY_MAP[self.severity]\n\t\treturn f'{self.http_url} | `{severity.upper()}` | `{self.name}` | `{cve_str}`'\n\tdef get_severity(self):\n\t\treturn self.severity",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tis_gpt_used",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tis_gpt_used = models.BooleanField(null=True, blank=True, default=False)\n\t# used for subscans\n\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\tcve_str = ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\t\tseverity = NUCLEI_REVERSE_SEVERITY_MAP[self.severity]\n\t\treturn f'{self.http_url} | `{severity.upper()}` | `{self.name}` | `{cve_str}`'\n\tdef get_severity(self):\n\t\treturn self.severity\n\tdef get_cve_str(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tvuln_subscan_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tvuln_subscan_ids = models.ManyToManyField('SubScan', related_name='vuln_subscan_ids', blank=True)\n\tdef __str__(self):\n\t\tcve_str = ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\t\tseverity = NUCLEI_REVERSE_SEVERITY_MAP[self.severity]\n\t\treturn f'{self.http_url} | `{severity.upper()}` | `{self.name}` | `{cve_str}`'\n\tdef get_severity(self):\n\t\treturn self.severity\n\tdef get_cve_str(self):\n\t\treturn ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\tdef get_cwe_str(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tcve_str",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tcve_str = ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\t\tseverity = NUCLEI_REVERSE_SEVERITY_MAP[self.severity]\n\t\treturn f'{self.http_url} | `{severity.upper()}` | `{self.name}` | `{cve_str}`'\n\tdef get_severity(self):\n\t\treturn self.severity\n\tdef get_cve_str(self):\n\t\treturn ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\tdef get_cwe_str(self):\n\t\treturn ', '.join(f'`{cwe.name}`' for cwe in self.cwe_ids.all())\n\tdef get_tags_str(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\t\tseverity",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\t\tseverity = NUCLEI_REVERSE_SEVERITY_MAP[self.severity]\n\t\treturn f'{self.http_url} | `{severity.upper()}` | `{self.name}` | `{cve_str}`'\n\tdef get_severity(self):\n\t\treturn self.severity\n\tdef get_cve_str(self):\n\t\treturn ', '.join(f'`{cve.name}`' for cve in self.cve_ids.all())\n\tdef get_cwe_str(self):\n\t\treturn ', '.join(f'`{cwe.name}`' for cwe in self.cwe_ids.all())\n\tdef get_tags_str(self):\n\t\treturn ', '.join(f'`{tag.name}`' for tag in self.tags.all())",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tscan_of = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\ttitle = models.CharField(max_length=1000)\n\tname = models.CharField(max_length=1000)\n\ttime = models.DateTimeField()\n\tstatus = models.IntegerField()\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_of",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_of = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\ttitle = models.CharField(max_length=1000)\n\tname = models.CharField(max_length=1000)\n\ttime = models.DateTimeField()\n\tstatus = models.IntegerField()\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.title)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttitle = models.CharField(max_length=1000)\n\tname = models.CharField(max_length=1000)\n\ttime = models.DateTimeField()\n\tstatus = models.IntegerField()\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.title)\nclass Command(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=1000)\n\ttime = models.DateTimeField()\n\tstatus = models.IntegerField()\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.title)\nclass Command(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttime",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttime = models.DateTimeField()\n\tstatus = models.IntegerField()\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.title)\nclass Command(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tstatus = models.IntegerField()\n\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.title)\nclass Command(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\tactivity = models.ForeignKey(ScanActivity, on_delete=models.CASCADE, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\terror_message",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\terror_message = models.CharField(max_length=300, blank=True, null=True)\n\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.title)\nclass Command(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\tactivity = models.ForeignKey(ScanActivity, on_delete=models.CASCADE, blank=True, null=True)\n\tcommand = models.TextField(blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttraceback",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttraceback = models.TextField(blank=True, null=True)\n\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.title)\nclass Command(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\tactivity = models.ForeignKey(ScanActivity, on_delete=models.CASCADE, blank=True, null=True)\n\tcommand = models.TextField(blank=True, null=True)\n\treturn_code = models.IntegerField(blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcelery_id",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcelery_id = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.title)\nclass Command(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\tactivity = models.ForeignKey(ScanActivity, on_delete=models.CASCADE, blank=True, null=True)\n\tcommand = models.TextField(blank=True, null=True)\n\treturn_code = models.IntegerField(blank=True, null=True)\n\toutput = models.TextField(blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\tactivity = models.ForeignKey(ScanActivity, on_delete=models.CASCADE, blank=True, null=True)\n\tcommand = models.TextField(blank=True, null=True)\n\treturn_code = models.IntegerField(blank=True, null=True)\n\toutput = models.TextField(blank=True, null=True)\n\ttime = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn str(self.command)\nclass Waf(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, blank=True, null=True)\n\tactivity = models.ForeignKey(ScanActivity, on_delete=models.CASCADE, blank=True, null=True)\n\tcommand = models.TextField(blank=True, null=True)\n\treturn_code = models.IntegerField(blank=True, null=True)\n\toutput = models.TextField(blank=True, null=True)\n\ttime = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn str(self.command)\nclass Waf(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tactivity",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tactivity = models.ForeignKey(ScanActivity, on_delete=models.CASCADE, blank=True, null=True)\n\tcommand = models.TextField(blank=True, null=True)\n\treturn_code = models.IntegerField(blank=True, null=True)\n\toutput = models.TextField(blank=True, null=True)\n\ttime = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn str(self.command)\nclass Waf(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcommand",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcommand = models.TextField(blank=True, null=True)\n\treturn_code = models.IntegerField(blank=True, null=True)\n\toutput = models.TextField(blank=True, null=True)\n\ttime = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn str(self.command)\nclass Waf(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tmanufacturer = models.CharField(max_length=500, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\treturn_code",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\treturn_code = models.IntegerField(blank=True, null=True)\n\toutput = models.TextField(blank=True, null=True)\n\ttime = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn str(self.command)\nclass Waf(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tmanufacturer = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\toutput",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\toutput = models.TextField(blank=True, null=True)\n\ttime = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn str(self.command)\nclass Waf(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tmanufacturer = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttime",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttime = models.DateTimeField()\n\tdef __str__(self):\n\t\treturn str(self.command)\nclass Waf(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tmanufacturer = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass Technology(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tmanufacturer = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass Technology(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=500)\n\tmanufacturer = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass Technology(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass CountryISO(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tmanufacturer",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tmanufacturer = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass Technology(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass CountryISO(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass CountryISO(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tiso = models.CharField(max_length=10, blank=True)\n\tname = models.CharField(max_length=100, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=500, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass CountryISO(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tiso = models.CharField(max_length=10, blank=True)\n\tname = models.CharField(max_length=100, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass IpAddress(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tiso = models.CharField(max_length=10, blank=True)\n\tname = models.CharField(max_length=100, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass IpAddress(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=100, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False)\n\tports = models.ManyToManyField('Port', related_name='ports')",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tiso",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tiso = models.CharField(max_length=10, blank=True)\n\tname = models.CharField(max_length=100, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass IpAddress(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=100, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False)\n\tports = models.ManyToManyField('Port', related_name='ports')\n\tgeo_iso = models.ForeignKey(",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=100, blank=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass IpAddress(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=100, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False)\n\tports = models.ManyToManyField('Port', related_name='ports')\n\tgeo_iso = models.ForeignKey(\n\t\tCountryISO, on_delete=models.CASCADE, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=100, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False)\n\tports = models.ManyToManyField('Port', related_name='ports')\n\tgeo_iso = models.ForeignKey(\n\t\tCountryISO, on_delete=models.CASCADE, null=True, blank=True)\n\tversion = models.IntegerField(blank=True, null=True)\n\tis_private = models.BooleanField(default=False)\n\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)\n\t# this is used for querying which ip was discovered during subcan",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\taddress",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\taddress = models.CharField(max_length=100, blank=True, null=True)\n\tis_cdn = models.BooleanField(default=False)\n\tports = models.ManyToManyField('Port', related_name='ports')\n\tgeo_iso = models.ForeignKey(\n\t\tCountryISO, on_delete=models.CASCADE, null=True, blank=True)\n\tversion = models.IntegerField(blank=True, null=True)\n\tis_private = models.BooleanField(default=False)\n\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tip_subscan_ids = models.ManyToManyField('SubScan', related_name='ip_subscan_ids')",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tis_cdn",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tis_cdn = models.BooleanField(default=False)\n\tports = models.ManyToManyField('Port', related_name='ports')\n\tgeo_iso = models.ForeignKey(\n\t\tCountryISO, on_delete=models.CASCADE, null=True, blank=True)\n\tversion = models.IntegerField(blank=True, null=True)\n\tis_private = models.BooleanField(default=False)\n\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tip_subscan_ids = models.ManyToManyField('SubScan', related_name='ip_subscan_ids')\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tports",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tports = models.ManyToManyField('Port', related_name='ports')\n\tgeo_iso = models.ForeignKey(\n\t\tCountryISO, on_delete=models.CASCADE, null=True, blank=True)\n\tversion = models.IntegerField(blank=True, null=True)\n\tis_private = models.BooleanField(default=False)\n\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tip_subscan_ids = models.ManyToManyField('SubScan', related_name='ip_subscan_ids')\n\tdef __str__(self):\n\t\treturn str(self.address)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tgeo_iso",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tgeo_iso = models.ForeignKey(\n\t\tCountryISO, on_delete=models.CASCADE, null=True, blank=True)\n\tversion = models.IntegerField(blank=True, null=True)\n\tis_private = models.BooleanField(default=False)\n\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tip_subscan_ids = models.ManyToManyField('SubScan', related_name='ip_subscan_ids')\n\tdef __str__(self):\n\t\treturn str(self.address)\nclass Port(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tversion",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tversion = models.IntegerField(blank=True, null=True)\n\tis_private = models.BooleanField(default=False)\n\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tip_subscan_ids = models.ManyToManyField('SubScan', related_name='ip_subscan_ids')\n\tdef __str__(self):\n\t\treturn str(self.address)\nclass Port(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tnumber = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tis_private",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tis_private = models.BooleanField(default=False)\n\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tip_subscan_ids = models.ManyToManyField('SubScan', related_name='ip_subscan_ids')\n\tdef __str__(self):\n\t\treturn str(self.address)\nclass Port(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tnumber = models.IntegerField(default=0)\n\tservice_name = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\treverse_pointer",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\treverse_pointer = models.CharField(max_length=100, blank=True, null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tip_subscan_ids = models.ManyToManyField('SubScan', related_name='ip_subscan_ids')\n\tdef __str__(self):\n\t\treturn str(self.address)\nclass Port(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tnumber = models.IntegerField(default=0)\n\tservice_name = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.CharField(max_length=1000, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tip_subscan_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tip_subscan_ids = models.ManyToManyField('SubScan', related_name='ip_subscan_ids')\n\tdef __str__(self):\n\t\treturn str(self.address)\nclass Port(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tnumber = models.IntegerField(default=0)\n\tservice_name = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.CharField(max_length=1000, blank=True, null=True)\n\tis_uncommon = models.BooleanField(default=False)\n\tdef __str__(self):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tnumber = models.IntegerField(default=0)\n\tservice_name = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.CharField(max_length=1000, blank=True, null=True)\n\tis_uncommon = models.BooleanField(default=False)\n\tdef __str__(self):\n\t\treturn str(self.service_name)\nclass DirectoryFile(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tlength = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tnumber",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tnumber = models.IntegerField(default=0)\n\tservice_name = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.CharField(max_length=1000, blank=True, null=True)\n\tis_uncommon = models.BooleanField(default=False)\n\tdef __str__(self):\n\t\treturn str(self.service_name)\nclass DirectoryFile(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tlength = models.IntegerField(default=0)\n\tlines = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tservice_name",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tservice_name = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.CharField(max_length=1000, blank=True, null=True)\n\tis_uncommon = models.BooleanField(default=False)\n\tdef __str__(self):\n\t\treturn str(self.service_name)\nclass DirectoryFile(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tlength = models.IntegerField(default=0)\n\tlines = models.IntegerField(default=0)\n\thttp_status = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdescription = models.CharField(max_length=1000, blank=True, null=True)\n\tis_uncommon = models.BooleanField(default=False)\n\tdef __str__(self):\n\t\treturn str(self.service_name)\nclass DirectoryFile(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tlength = models.IntegerField(default=0)\n\tlines = models.IntegerField(default=0)\n\thttp_status = models.IntegerField(default=0)\n\twords = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tis_uncommon",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tis_uncommon = models.BooleanField(default=False)\n\tdef __str__(self):\n\t\treturn str(self.service_name)\nclass DirectoryFile(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tlength = models.IntegerField(default=0)\n\tlines = models.IntegerField(default=0)\n\thttp_status = models.IntegerField(default=0)\n\twords = models.IntegerField(default=0)\n\tname = models.CharField(max_length=500, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tlength = models.IntegerField(default=0)\n\tlines = models.IntegerField(default=0)\n\thttp_status = models.IntegerField(default=0)\n\twords = models.IntegerField(default=0)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\turl = models.CharField(max_length=5000, blank=True, null=True)\n\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tlength",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tlength = models.IntegerField(default=0)\n\tlines = models.IntegerField(default=0)\n\thttp_status = models.IntegerField(default=0)\n\twords = models.IntegerField(default=0)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\turl = models.CharField(max_length=5000, blank=True, null=True)\n\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass DirectoryScan(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tlines",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tlines = models.IntegerField(default=0)\n\thttp_status = models.IntegerField(default=0)\n\twords = models.IntegerField(default=0)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\turl = models.CharField(max_length=5000, blank=True, null=True)\n\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass DirectoryScan(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thttp_status",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thttp_status = models.IntegerField(default=0)\n\twords = models.IntegerField(default=0)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\turl = models.CharField(max_length=5000, blank=True, null=True)\n\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass DirectoryScan(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tcommand_line = models.CharField(max_length=5000, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\twords",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\twords = models.IntegerField(default=0)\n\tname = models.CharField(max_length=500, blank=True, null=True)\n\turl = models.CharField(max_length=5000, blank=True, null=True)\n\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass DirectoryScan(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tcommand_line = models.CharField(max_length=5000, blank=True, null=True)\n\tdirectory_files = models.ManyToManyField('DirectoryFile', related_name='directory_files', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=500, blank=True, null=True)\n\turl = models.CharField(max_length=5000, blank=True, null=True)\n\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass DirectoryScan(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tcommand_line = models.CharField(max_length=5000, blank=True, null=True)\n\tdirectory_files = models.ManyToManyField('DirectoryFile', related_name='directory_files', blank=True)\n\tscanned_date = models.DateTimeField(null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\turl = models.CharField(max_length=5000, blank=True, null=True)\n\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass DirectoryScan(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tcommand_line = models.CharField(max_length=5000, blank=True, null=True)\n\tdirectory_files = models.ManyToManyField('DirectoryFile', related_name='directory_files', blank=True)\n\tscanned_date = models.DateTimeField(null=True)\n\t# this is used for querying which ip was discovered during subcan",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcontent_type",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcontent_type = models.CharField(max_length=100, blank=True, null=True)\n\tdef __str__(self):\n\t\treturn str(self.name)\nclass DirectoryScan(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tcommand_line = models.CharField(max_length=5000, blank=True, null=True)\n\tdirectory_files = models.ManyToManyField('DirectoryFile', related_name='directory_files', blank=True)\n\tscanned_date = models.DateTimeField(null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tdir_subscan_ids = models.ManyToManyField('SubScan', related_name='dir_subscan_ids', blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tcommand_line = models.CharField(max_length=5000, blank=True, null=True)\n\tdirectory_files = models.ManyToManyField('DirectoryFile', related_name='directory_files', blank=True)\n\tscanned_date = models.DateTimeField(null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tdir_subscan_ids = models.ManyToManyField('SubScan', related_name='dir_subscan_ids', blank=True)\nclass MetaFinderDocument(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcommand_line",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcommand_line = models.CharField(max_length=5000, blank=True, null=True)\n\tdirectory_files = models.ManyToManyField('DirectoryFile', related_name='directory_files', blank=True)\n\tscanned_date = models.DateTimeField(null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tdir_subscan_ids = models.ManyToManyField('SubScan', related_name='dir_subscan_ids', blank=True)\nclass MetaFinderDocument(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdirectory_files",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdirectory_files = models.ManyToManyField('DirectoryFile', related_name='directory_files', blank=True)\n\tscanned_date = models.DateTimeField(null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tdir_subscan_ids = models.ManyToManyField('SubScan', related_name='dir_subscan_ids', blank=True)\nclass MetaFinderDocument(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscanned_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscanned_date = models.DateTimeField(null=True)\n\t# this is used for querying which ip was discovered during subcan\n\tdir_subscan_ids = models.ManyToManyField('SubScan', related_name='dir_subscan_ids', blank=True)\nclass MetaFinderDocument(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdir_subscan_ids",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdir_subscan_ids = models.ManyToManyField('SubScan', related_name='dir_subscan_ids', blank=True)\nclass MetaFinderDocument(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tdoc_name = models.CharField(max_length=1000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tscan_history",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tscan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE, null=True, blank=True)\n\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tdoc_name = models.CharField(max_length=1000, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttarget_domain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttarget_domain = models.ForeignKey(\n\t\tDomain, on_delete=models.CASCADE, null=True, blank=True)\n\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tdoc_name = models.CharField(max_length=1000, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\n\ttitle = models.CharField(max_length=1000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tsubdomain",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tsubdomain = models.ForeignKey(\n\t\tSubdomain,\n\t\ton_delete=models.CASCADE,\n\t\tnull=True,\n\t\tblank=True)\n\tdoc_name = models.CharField(max_length=1000, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\n\ttitle = models.CharField(max_length=1000, null=True, blank=True)\n\tauthor = models.CharField(max_length=1000, null=True, blank=True)\n\tproducer = models.CharField(max_length=1000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdoc_name",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdoc_name = models.CharField(max_length=1000, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\n\ttitle = models.CharField(max_length=1000, null=True, blank=True)\n\tauthor = models.CharField(max_length=1000, null=True, blank=True)\n\tproducer = models.CharField(max_length=1000, null=True, blank=True)\n\tcreator = models.CharField(max_length=1000, null=True, blank=True)\n\tos = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\turl = models.CharField(max_length=10000, null=True, blank=True)\n\ttitle = models.CharField(max_length=1000, null=True, blank=True)\n\tauthor = models.CharField(max_length=1000, null=True, blank=True)\n\tproducer = models.CharField(max_length=1000, null=True, blank=True)\n\tcreator = models.CharField(max_length=1000, null=True, blank=True)\n\tos = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttitle = models.CharField(max_length=1000, null=True, blank=True)\n\tauthor = models.CharField(max_length=1000, null=True, blank=True)\n\tproducer = models.CharField(max_length=1000, null=True, blank=True)\n\tcreator = models.CharField(max_length=1000, null=True, blank=True)\n\tos = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tauthor",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tauthor = models.CharField(max_length=1000, null=True, blank=True)\n\tproducer = models.CharField(max_length=1000, null=True, blank=True)\n\tcreator = models.CharField(max_length=1000, null=True, blank=True)\n\tos = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tproducer",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tproducer = models.CharField(max_length=1000, null=True, blank=True)\n\tcreator = models.CharField(max_length=1000, null=True, blank=True)\n\tos = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcreator",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcreator = models.CharField(max_length=1000, null=True, blank=True)\n\tos = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tos",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tos = models.CharField(max_length=1000, null=True, blank=True)\n\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\thttp_status",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\thttp_status = models.IntegerField(default=0, null=True, blank=True)\n\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tcreation_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tcreation_date = models.CharField(max_length=1000, blank=True, null=True)\n\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tmodified_date",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tmodified_date = models.CharField(max_length=1000, blank=True, null=True)\nclass Email(models.Model):\n\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\taddress",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\taddress = models.CharField(max_length=200, blank=True, null=True)\n\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tpassword",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tpassword = models.CharField(max_length=200, blank=True, null=True)\nclass Employee(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=1000, null=True, blank=True)\n\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tdesignation",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tdesignation = models.CharField(max_length=1000, null=True, blank=True)\nclass Dork(models.Model):\n\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\ttype",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\ttype = models.CharField(max_length=500, null=True, blank=True)\n\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\turl = models.CharField(max_length=10000, null=True, blank=True)\nclass S3Bucket(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tname = models.CharField(max_length=500, null=True, blank=True)\n\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tregion",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tregion = models.CharField(max_length=500, null=True, blank=True)\n\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tprovider",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tprovider = models.CharField(max_length=100, null=True, blank=True)\n\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\towner_id",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\towner_id = models.CharField(max_length=250, null=True, blank=True)\n\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\towner_display_name",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\towner_display_name = models.CharField(max_length=250, null=True, blank=True)\n\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_auth_users_read",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_auth_users_read = models.IntegerField(default=0)\n\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_auth_users_write",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_auth_users_write = models.IntegerField(default=0)\n\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_auth_users_read_acl",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_auth_users_read_acl = models.IntegerField(default=0)\n\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_auth_users_write_acl",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_auth_users_write_acl = models.IntegerField(default=0)\n\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_auth_users_full_control",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_auth_users_full_control = models.IntegerField(default=0)\n\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_all_users_read",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_all_users_read = models.IntegerField(default=0)\n\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_all_users_write",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_all_users_write = models.IntegerField(default=0)\n\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_all_users_read_acl",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_all_users_read_acl = models.IntegerField(default=0)\n\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_all_users_write_acl",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_all_users_write_acl = models.IntegerField(default=0)\n\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tperm_all_users_full_control",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tperm_all_users_full_control = models.IntegerField(default=0)\n\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tnum_objects",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tnum_objects = models.IntegerField(default=0)\n\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "\tsize",
        "kind": 5,
        "importPath": "web.startScan.models",
        "description": "web.startScan.models",
        "peekOfCode": "\tsize = models.IntegerField(default=0)",
        "detail": "web.startScan.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web.startScan.urls",
        "description": "web.startScan.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        '<slug:slug>/history/scan',\n        views.scan_history,\n        name=\"scan_history\"),\n    path(\n        '<slug:slug>/history/subscan',\n        views.subscan_history,\n        name=\"subscan_history\"),\n    path(",
        "detail": "web.startScan.urls",
        "documentation": {}
    },
    {
        "label": "scan_history",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def scan_history(request, slug):\n    host = ScanHistory.objects.filter(domain__project__slug=slug).order_by('-start_scan_date')\n    context = {'scan_history_active': 'active', \"scan_history\": host}\n    return render(request, 'startScan/history.html', context)\ndef subscan_history(request, slug):\n    subscans = SubScan.objects.filter(scan_history__domain__project__slug=slug).order_by('-start_scan_date')\n    context = {'scan_history_active': 'active', \"subscans\": subscans}\n    return render(request, 'startScan/subscan_history.html', context)\ndef detail_scan(request, id, slug):\n    ctx = {}",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "subscan_history",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def subscan_history(request, slug):\n    subscans = SubScan.objects.filter(scan_history__domain__project__slug=slug).order_by('-start_scan_date')\n    context = {'scan_history_active': 'active', \"subscans\": subscans}\n    return render(request, 'startScan/subscan_history.html', context)\ndef detail_scan(request, id, slug):\n    ctx = {}\n    # Get scan objects\n    scan = get_object_or_404(ScanHistory, id=id)\n    domain_id = scan.domain.id\n    scan_engines = EngineType.objects.order_by('engine_name').all()",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "detail_scan",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def detail_scan(request, id, slug):\n    ctx = {}\n    # Get scan objects\n    scan = get_object_or_404(ScanHistory, id=id)\n    domain_id = scan.domain.id\n    scan_engines = EngineType.objects.order_by('engine_name').all()\n    recent_scans = ScanHistory.objects.filter(domain__id=domain_id)\n    last_scans = (\n        ScanHistory.objects\n        .filter(domain__id=domain_id)",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "all_subdomains",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def all_subdomains(request, slug):\n    subdomains = Subdomain.objects.filter(target_domain__project__slug=slug)\n    scan_engines = EngineType.objects.order_by('engine_name').all()\n    alive_subdomains = subdomains.filter(http_status__exact=200) # TODO: replace this with is_alive() function\n    important_subdomains = (\n        subdomains\n        .filter(is_important=True)\n        .values('name')\n        .distinct()\n        .count()",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "detail_vuln_scan",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def detail_vuln_scan(request, slug, id=None):\n    if id:\n        history = get_object_or_404(ScanHistory, id=id)\n        history.filter(domain__project__slug=slug)\n        context = {'scan_history_id': id, 'history': history}\n    else:\n        context = {'vuln_scan_active': 'true'}\n    return render(request, 'startScan/vulnerabilities.html', context)\ndef all_endpoints(request, slug):\n    context = {",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "all_endpoints",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def all_endpoints(request, slug):\n    context = {\n        'scan_history_active': 'active'\n    }\n    return render(request, 'startScan/endpoints.html', context)\n@has_permission_decorator(PERM_INITATE_SCANS_SUBSCANS, redirect_url=FOUR_OH_FOUR_URL)\ndef start_scan_ui(request, slug, domain_id):\n    domain = get_object_or_404(Domain, id=domain_id)\n    if request.method == \"POST\":\n        # Get imported and out-of-scope subdomains",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "start_scan_ui",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def start_scan_ui(request, slug, domain_id):\n    domain = get_object_or_404(Domain, id=domain_id)\n    if request.method == \"POST\":\n        # Get imported and out-of-scope subdomains\n        subdomains_in = request.POST['importSubdomainTextArea'].split()\n        subdomains_in = [s.rstrip() for s in subdomains_in if s]\n        subdomains_out = request.POST['outOfScopeSubdomainTextarea'].split()\n        subdomains_out = [s.rstrip() for s in subdomains_out if s]\n        starting_point_path = request.POST['startingPointPath'].strip()\n        excluded_paths = request.POST['excludedPaths'] # string separated by ,",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "start_multiple_scan",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def start_multiple_scan(request, slug):\n    # domain = get_object_or_404(Domain, id=host_id)\n    if request.method == \"POST\":\n        if request.POST.get('scan_mode', 0):\n            # if scan mode is available, then start the scan\n            # get engine type\n            engine_id = request.POST['scan_mode']\n            list_of_domain_ids = request.POST['domain_ids']\n            subdomains_in = request.POST['importSubdomainTextArea'].split()\n            subdomains_in = [s.rstrip() for s in subdomains_in if s]",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "export_subdomains",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def export_subdomains(request, scan_id):\n    subdomain_list = Subdomain.objects.filter(scan_history__id=scan_id)\n    scan = ScanHistory.objects.get(id=scan_id)\n    response_body = \"\"\n    for domain in subdomain_list:\n        response_body += response_body + domain.name + \"\\n\"\n    scan_start_date_str = str(scan.start_scan_date.date())\n    domain_name = scan.domain.name\n    response = HttpResponse(response_body, content_type='text/plain')\n    response['Content-Disposition'] = (",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "export_endpoints",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def export_endpoints(request, scan_id):\n    endpoint_list = EndPoint.objects.filter(scan_history__id=scan_id)\n    scan = ScanHistory.objects.get(id=scan_id)\n    response_body = \"\"\n    for endpoint in endpoint_list:\n        response_body += endpoint.http_url + \"\\n\"\n    scan_start_date_str = str(scan.start_scan_date.date())\n    domain_name = scan.domain.name\n    response = HttpResponse(response_body, content_type='text/plain')\n    response['Content-Disposition'] = (",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "export_urls",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def export_urls(request, scan_id):\n    urls_list = Subdomain.objects.filter(scan_history__id=scan_id)\n    scan = ScanHistory.objects.get(id=scan_id)\n    response_body = \"\"\n    for url in urls_list:\n        if url.http_url:\n            response_body += response_body + url.http_url + \"\\n\"\n    scan_start_date_str = str(scan.start_scan_date.date())\n    domain_name = scan.domain.name\n    response = HttpResponse(response_body, content_type='text/plain')",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "delete_scan",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def delete_scan(request, id):\n    obj = get_object_or_404(ScanHistory, id=id)\n    if request.method == \"POST\":\n        delete_dir = obj.results_dir\n        run_command('rm -rf ' + delete_dir)\n        obj.delete()\n        messageData = {'status': 'true'}\n        messages.add_message(\n            request,\n            messages.INFO,",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "stop_scan",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def stop_scan(request, id):\n    if request.method == \"POST\":\n        scan = get_object_or_404(ScanHistory, id=id)\n        try:\n            for task_id in scan.celery_ids:\n                app.control.revoke(task_id, terminate=True, signal='SIGKILL')\n            # after celery task is stopped, update the scan status\n            scan.scan_status = ABORTED_TASK\n            scan.save()\n            tasks = (",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "stop_scans",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def stop_scans(request, slug):\n    if request.method == \"POST\":\n        for key, value in request.POST.items():\n            if key == 'scan_history_table_length' or key == 'csrfmiddlewaretoken':\n                continue\n            scan = get_object_or_404(ScanHistory, id=value)\n            try:\n                for task_id in scan.celery_ids:\n                    app.control.revoke(task_id, terminate=True, signal='SIGKILL')\n                tasks = (",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "schedule_scan",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def schedule_scan(request, host_id, slug):\n    domain = Domain.objects.get(id=host_id)\n    if request.method == \"POST\":\n        scheduled_mode = request.POST['scheduled_mode']\n        engine_type = int(request.POST['scan_mode'])\n        # Get imported and out-of-scope subdomains\n        subdomains_in = request.POST['importSubdomainTextArea'].split()\n        subdomains_in = [s.rstrip() for s in subdomains_in if s]\n        subdomains_out = request.POST['outOfScopeSubdomainTextarea'].split()\n        subdomains_out = [s.rstrip() for s in subdomains_out if s]",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "scheduled_scan_view",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def scheduled_scan_view(request, slug):\n    scheduled_tasks = (\n        PeriodicTask.objects\n        .all()\n        .exclude(name='celery.backend_cleanup')\n    )\n    context = {\n        'scheduled_scan_active': 'active',\n        'scheduled_tasks': scheduled_tasks,\n    }",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "delete_scheduled_task",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def delete_scheduled_task(request, id):\n    task_object = get_object_or_404(PeriodicTask, id=id)\n    if request.method == \"POST\":\n        task_object.delete()\n        messageData = {'status': 'true'}\n        messages.add_message(\n            request,\n            messages.INFO,\n            'Scheduled Scan successfully deleted!')\n    else:",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "delete_scheduled_scans",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def delete_scheduled_scans(request, slug):\n    if request.method == \"POST\":\n        for key, value in request.POST.items():\n            if 'task' in key or key == 'csrfmiddlewaretoken':\n                continue\n            try:\n                scan = get_object_or_404(PeriodicTask, id=value)\n                scan.delete()\n            except Exception as e:\n                logger.error(e)",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "change_scheduled_task_status",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def change_scheduled_task_status(request, id):\n    if request.method == 'POST':\n        task = PeriodicTask.objects.get(id=id)\n        task.enabled = not task.enabled\n        task.save()\n    return HttpResponse('')\ndef change_vuln_status(request, id):\n    if request.method == 'POST':\n        vuln = Vulnerability.objects.get(id=id)\n        vuln.open_status = not vuln.open_status",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "change_vuln_status",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def change_vuln_status(request, id):\n    if request.method == 'POST':\n        vuln = Vulnerability.objects.get(id=id)\n        vuln.open_status = not vuln.open_status\n        vuln.save()\n    return HttpResponse('')\n@has_permission_decorator(PERM_MODIFY_SYSTEM_CONFIGURATIONS, redirect_url=FOUR_OH_FOUR_URL)\ndef delete_all_scan_results(request):\n    if request.method == 'POST':\n        ScanHistory.objects.all().delete()",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "delete_all_scan_results",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def delete_all_scan_results(request):\n    if request.method == 'POST':\n        ScanHistory.objects.all().delete()\n        messageData = {'status': 'true'}\n        messages.add_message(\n            request,\n            messages.INFO,\n            'All Scan History successfully deleted!')\n    return JsonResponse(messageData)\n@has_permission_decorator(PERM_MODIFY_SYSTEM_CONFIGURATIONS, redirect_url=FOUR_OH_FOUR_URL)",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "delete_all_screenshots",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def delete_all_screenshots(request):\n    if request.method == 'POST':\n        run_command('rm -rf /usr/src/scan_results/*')\n        messageData = {'status': 'true'}\n        messages.add_message(\n            request,\n            messages.INFO,\n            'Screenshots successfully deleted!')\n    return JsonResponse(messageData)\ndef visualise(request, id):",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "visualise",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def visualise(request, id):\n    scan = ScanHistory.objects.get(id=id)\n    context = {\n        'scan_id': id,\n        'scan_history': scan,\n    }\n    return render(request, 'startScan/visualise.html', context)\n@has_permission_decorator(PERM_INITATE_SCANS_SUBSCANS, redirect_url=FOUR_OH_FOUR_URL)\ndef start_organization_scan(request, id, slug):\n    organization = get_object_or_404(Organization, id=id)",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "start_organization_scan",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def start_organization_scan(request, id, slug):\n    organization = get_object_or_404(Organization, id=id)\n    if request.method == \"POST\":\n        engine_id = request.POST['scan_mode']\n        subdomains_in = request.POST['importSubdomainTextArea'].split()\n        subdomains_in = [s.rstrip() for s in subdomains_in if s]\n        subdomains_out = request.POST['outOfScopeSubdomainTextarea'].split()\n        subdomains_out = [s.rstrip() for s in subdomains_out if s]\n        starting_point_path = request.POST['startingPointPath'].strip()\n        excluded_paths = request.POST['excludedPaths'] # string separated by ,",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "schedule_organization_scan",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def schedule_organization_scan(request, slug, id):\n    organization =Organization.objects.get(id=id)\n    if request.method == \"POST\":\n        engine_type = int(request.POST['scan_mode'])\n        engine = get_object_or_404(EngineType, id=engine_type)\n        # post vars\n        scheduled_mode = request.POST['scheduled_mode']\n        subdomains_in = request.POST['importSubdomainTextArea'].split()\n        subdomains_in = [s.rstrip() for s in subdomains_in if s]\n        subdomains_out = request.POST['outOfScopeSubdomainTextarea'].split()",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "delete_scans",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def delete_scans(request, slug):\n    if request.method == \"POST\":\n        for key, value in request.POST.items():\n            if key == 'scan_history_table_length' or key == 'csrfmiddlewaretoken':\n                continue\n            scan = get_object_or_404(ScanHistory, id=value)\n            delete_dir = scan.results_dir\n            run_command('rm -rf ' + delete_dir)\n            scan.delete()\n        messages.add_message(",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "customize_report",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def customize_report(request, id):\n    scan = ScanHistory.objects.get(id=id)\n    context = {\n        'scan_id': id,\n        'scan_history': scan,\n    }\n    return render(request, 'startScan/customize_report.html', context)\n@has_permission_decorator(PERM_MODIFY_SCAN_REPORT, redirect_url=FOUR_OH_FOUR_URL)\ndef create_report(request, id):\n    primary_color = '#FFB74D'",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "create_report",
        "kind": 2,
        "importPath": "web.startScan.views",
        "description": "web.startScan.views",
        "peekOfCode": "def create_report(request, id):\n    primary_color = '#FFB74D'\n    secondary_color = '#212121'\n    # get report type\n    report_type = request.GET['report_type'] if 'report_type' in request.GET  else 'full'\n    report_template = request.GET['report_template'] if 'report_template' in request.GET else 'default'\n    is_ignore_info_vuln = True if 'ignore_info_vuln' in request.GET else False\n    if report_type == 'recon':\n        show_recon = True\n        show_vuln = False",
        "detail": "web.startScan.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "web.targetApp.migrations.0001_initial",
        "description": "web.targetApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('dashboard', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DNSRecord',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),",
        "detail": "web.targetApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "TargetappConfig",
        "kind": 6,
        "importPath": "web.targetApp.apps",
        "description": "web.targetApp.apps",
        "peekOfCode": "class TargetappConfig(AppConfig):\n    name = 'targetApp'",
        "detail": "web.targetApp.apps",
        "documentation": {}
    },
    {
        "label": "AddTargetForm",
        "kind": 6,
        "importPath": "web.targetApp.forms",
        "description": "web.targetApp.forms",
        "peekOfCode": "class AddTargetForm(forms.Form):\n    name = forms.CharField(\n        validators=[validate_domain],\n        required=True,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control form-control-lg\",\n                \"id\": \"domainName\",\n                \"placeholder\": \"example.com\"\n            }",
        "detail": "web.targetApp.forms",
        "documentation": {}
    },
    {
        "label": "AddOrganizationForm",
        "kind": 6,
        "importPath": "web.targetApp.forms",
        "description": "web.targetApp.forms",
        "peekOfCode": "class AddOrganizationForm(forms.Form):\n    def __init__(self, *args, **kwargs):\n        project = kwargs.pop('project')\n        super(AddOrganizationForm, self).__init__(*args, **kwargs)\n        self.fields['domains'].choices = [(domain.id, domain.name) for domain in Domain.objects.filter(project__slug=project) if not domain.get_organization()]\n    name = forms.CharField(\n        required=True,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control form-control-lg\",",
        "detail": "web.targetApp.forms",
        "documentation": {}
    },
    {
        "label": "UpdateTargetForm",
        "kind": 6,
        "importPath": "web.targetApp.forms",
        "description": "web.targetApp.forms",
        "peekOfCode": "class UpdateTargetForm(forms.ModelForm):\n    class Meta:\n        model = Domain\n        fields = ['name', 'description', 'h1_team_handle']\n    name = forms.CharField(\n        validators=[validate_domain],\n        required=True,\n        disabled=True,\n        widget=forms.TextInput(\n            attrs={",
        "detail": "web.targetApp.forms",
        "documentation": {}
    },
    {
        "label": "UpdateOrganizationForm",
        "kind": 6,
        "importPath": "web.targetApp.forms",
        "description": "web.targetApp.forms",
        "peekOfCode": "class UpdateOrganizationForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(UpdateOrganizationForm, self).__init__(*args, **kwargs)\n        self.fields['domains'].choices = [(domain.id, domain.name) for domain in Domain.objects.all()]\n    class Meta:\n        model = Organization\n        fields = ['name', 'description']\n    name = forms.CharField(\n        required=True,\n        widget=forms.TextInput(",
        "detail": "web.targetApp.forms",
        "documentation": {}
    },
    {
        "label": "HistoricalIP",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class HistoricalIP(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tip = models.CharField(max_length=150)\n\tlocation = models.CharField(max_length=500)\n\towner = models.CharField(max_length=500)\n\tlast_seen = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.ip\nclass RelatedDomain(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "RelatedDomain",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class RelatedDomain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=250)\n\tdef __str__(self):\n\t\treturn self.name\nclass Registrar(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\temail = models.CharField(max_length=350, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "Registrar",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class Registrar(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\temail = models.CharField(max_length=350, null=True, blank=True)\n\turl = models.CharField(max_length=1000, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainRegistration(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "DomainRegistration",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class DomainRegistration(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\torganization = models.CharField(max_length=500, null=True, blank=True)\n\taddress = models.CharField(max_length=500, null=True, blank=True)\n\tcity = models.CharField(max_length=100, null=True, blank=True)\n\tstate = models.CharField(max_length=100, null=True, blank=True)\n\tzip_code = models.CharField(max_length=100, null=True, blank=True)\n\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "WhoisStatus",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class WhoisStatus(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass NameServer(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "NameServer",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class NameServer(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass DNSRecord(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\ttype = models.CharField(max_length=50)\n\tdef __str__(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "DNSRecord",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class DNSRecord(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\ttype = models.CharField(max_length=50)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainInfo(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tdnssec = models.BooleanField(default=False)\n\t# dates",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "DomainInfo",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class DomainInfo(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tdnssec = models.BooleanField(default=False)\n\t# dates\n\tcreated = models.DateTimeField(null=True, blank=True)\n\tupdated = models.DateTimeField(null=True, blank=True)\n\texpires = models.DateTimeField(null=True, blank=True)\n\t# geolocation\n\tgeolocation_iso = models.CharField(max_length=10, null=True, blank=True)\n\t# registrar",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "Organization",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class Organization(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField()\n\tdomains = models.ManyToManyField('Domain', related_name='domains')\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef __str__(self):\n\t\treturn self.name\n\tdef get_domains(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "Domain",
        "kind": 6,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "class Domain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\th1_team_handle = models.CharField(max_length=100, blank=True, null=True)\n\tip_address_cidr = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField(null=True)\n\tstart_scan_date = models.DateTimeField(null=True)\n\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tip = models.CharField(max_length=150)\n\tlocation = models.CharField(max_length=500)\n\towner = models.CharField(max_length=500)\n\tlast_seen = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.ip\nclass RelatedDomain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=250)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tip",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tip = models.CharField(max_length=150)\n\tlocation = models.CharField(max_length=500)\n\towner = models.CharField(max_length=500)\n\tlast_seen = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.ip\nclass RelatedDomain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=250)\n\tdef __str__(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tlocation",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tlocation = models.CharField(max_length=500)\n\towner = models.CharField(max_length=500)\n\tlast_seen = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.ip\nclass RelatedDomain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=250)\n\tdef __str__(self):\n\t\treturn self.name",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\towner",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\towner = models.CharField(max_length=500)\n\tlast_seen = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.ip\nclass RelatedDomain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=250)\n\tdef __str__(self):\n\t\treturn self.name\nclass Registrar(models.Model):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tlast_seen",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tlast_seen = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.ip\nclass RelatedDomain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=250)\n\tdef __str__(self):\n\t\treturn self.name\nclass Registrar(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=250)\n\tdef __str__(self):\n\t\treturn self.name\nclass Registrar(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\temail = models.CharField(max_length=350, null=True, blank=True)\n\turl = models.CharField(max_length=1000, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname = models.CharField(max_length=250)\n\tdef __str__(self):\n\t\treturn self.name\nclass Registrar(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\temail = models.CharField(max_length=350, null=True, blank=True)\n\turl = models.CharField(max_length=1000, null=True, blank=True)\n\tdef __str__(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\temail = models.CharField(max_length=350, null=True, blank=True)\n\turl = models.CharField(max_length=1000, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainRegistration(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\temail = models.CharField(max_length=350, null=True, blank=True)\n\turl = models.CharField(max_length=1000, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainRegistration(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\torganization = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tphone",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tphone = models.CharField(max_length=150, null=True, blank=True)\n\temail = models.CharField(max_length=350, null=True, blank=True)\n\turl = models.CharField(max_length=1000, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainRegistration(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\torganization = models.CharField(max_length=500, null=True, blank=True)\n\taddress = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\temail",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\temail = models.CharField(max_length=350, null=True, blank=True)\n\turl = models.CharField(max_length=1000, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainRegistration(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\torganization = models.CharField(max_length=500, null=True, blank=True)\n\taddress = models.CharField(max_length=500, null=True, blank=True)\n\tcity = models.CharField(max_length=100, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\turl = models.CharField(max_length=1000, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainRegistration(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\torganization = models.CharField(max_length=500, null=True, blank=True)\n\taddress = models.CharField(max_length=500, null=True, blank=True)\n\tcity = models.CharField(max_length=100, null=True, blank=True)\n\tstate = models.CharField(max_length=100, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500, null=True, blank=True)\n\torganization = models.CharField(max_length=500, null=True, blank=True)\n\taddress = models.CharField(max_length=500, null=True, blank=True)\n\tcity = models.CharField(max_length=100, null=True, blank=True)\n\tstate = models.CharField(max_length=100, null=True, blank=True)\n\tzip_code = models.CharField(max_length=100, null=True, blank=True)\n\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname = models.CharField(max_length=500, null=True, blank=True)\n\torganization = models.CharField(max_length=500, null=True, blank=True)\n\taddress = models.CharField(max_length=500, null=True, blank=True)\n\tcity = models.CharField(max_length=100, null=True, blank=True)\n\tstate = models.CharField(max_length=100, null=True, blank=True)\n\tzip_code = models.CharField(max_length=100, null=True, blank=True)\n\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\torganization",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\torganization = models.CharField(max_length=500, null=True, blank=True)\n\taddress = models.CharField(max_length=500, null=True, blank=True)\n\tcity = models.CharField(max_length=100, null=True, blank=True)\n\tstate = models.CharField(max_length=100, null=True, blank=True)\n\tzip_code = models.CharField(max_length=100, null=True, blank=True)\n\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\taddress",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\taddress = models.CharField(max_length=500, null=True, blank=True)\n\tcity = models.CharField(max_length=100, null=True, blank=True)\n\tstate = models.CharField(max_length=100, null=True, blank=True)\n\tzip_code = models.CharField(max_length=100, null=True, blank=True)\n\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tcity",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tcity = models.CharField(max_length=100, null=True, blank=True)\n\tstate = models.CharField(max_length=100, null=True, blank=True)\n\tzip_code = models.CharField(max_length=100, null=True, blank=True)\n\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tstate",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tstate = models.CharField(max_length=100, null=True, blank=True)\n\tzip_code = models.CharField(max_length=100, null=True, blank=True)\n\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass WhoisStatus(models.Model):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tzip_code",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tzip_code = models.CharField(max_length=100, null=True, blank=True)\n\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass WhoisStatus(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tcountry",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tcountry = models.CharField(max_length=100, null=True, blank=True)\n\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass WhoisStatus(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\temail",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\temail = models.CharField(max_length=500, null=True, blank=True)\n\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass WhoisStatus(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tphone",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tphone = models.CharField(max_length=150, null=True, blank=True)\n\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass WhoisStatus(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tfax",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tfax = models.CharField(max_length=150, null=True, blank=True)\n\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass WhoisStatus(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass NameServer(models.Model):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid_str",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid_str = models.CharField(max_length=500, null=True, blank=True)\n\tdef __str__(self):\n\t\treturn self.name\nclass WhoisStatus(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass NameServer(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass NameServer(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass DNSRecord(models.Model):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass NameServer(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass DNSRecord(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass DNSRecord(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\ttype = models.CharField(max_length=50)\n\tdef __str__(self):\n\t\treturn self.name",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname = models.CharField(max_length=500)\n\tdef __str__(self):\n\t\treturn self.name\nclass DNSRecord(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\ttype = models.CharField(max_length=50)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainInfo(models.Model):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=500)\n\ttype = models.CharField(max_length=50)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainInfo(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tdnssec = models.BooleanField(default=False)\n\t# dates\n\tcreated = models.DateTimeField(null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname = models.CharField(max_length=500)\n\ttype = models.CharField(max_length=50)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainInfo(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tdnssec = models.BooleanField(default=False)\n\t# dates\n\tcreated = models.DateTimeField(null=True, blank=True)\n\tupdated = models.DateTimeField(null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\ttype",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\ttype = models.CharField(max_length=50)\n\tdef __str__(self):\n\t\treturn self.name\nclass DomainInfo(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tdnssec = models.BooleanField(default=False)\n\t# dates\n\tcreated = models.DateTimeField(null=True, blank=True)\n\tupdated = models.DateTimeField(null=True, blank=True)\n\texpires = models.DateTimeField(null=True, blank=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tdnssec = models.BooleanField(default=False)\n\t# dates\n\tcreated = models.DateTimeField(null=True, blank=True)\n\tupdated = models.DateTimeField(null=True, blank=True)\n\texpires = models.DateTimeField(null=True, blank=True)\n\t# geolocation\n\tgeolocation_iso = models.CharField(max_length=10, null=True, blank=True)\n\t# registrar\n\tregistrar = models.ForeignKey(Registrar, blank=True, on_delete=models.CASCADE, null=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tdnssec",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tdnssec = models.BooleanField(default=False)\n\t# dates\n\tcreated = models.DateTimeField(null=True, blank=True)\n\tupdated = models.DateTimeField(null=True, blank=True)\n\texpires = models.DateTimeField(null=True, blank=True)\n\t# geolocation\n\tgeolocation_iso = models.CharField(max_length=10, null=True, blank=True)\n\t# registrar\n\tregistrar = models.ForeignKey(Registrar, blank=True, on_delete=models.CASCADE, null=True)\n\t# registrant",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tcreated",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tcreated = models.DateTimeField(null=True, blank=True)\n\tupdated = models.DateTimeField(null=True, blank=True)\n\texpires = models.DateTimeField(null=True, blank=True)\n\t# geolocation\n\tgeolocation_iso = models.CharField(max_length=10, null=True, blank=True)\n\t# registrar\n\tregistrar = models.ForeignKey(Registrar, blank=True, on_delete=models.CASCADE, null=True)\n\t# registrant\n\tregistrant = models.ForeignKey(\n\t\tDomainRegistration,",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tupdated",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tupdated = models.DateTimeField(null=True, blank=True)\n\texpires = models.DateTimeField(null=True, blank=True)\n\t# geolocation\n\tgeolocation_iso = models.CharField(max_length=10, null=True, blank=True)\n\t# registrar\n\tregistrar = models.ForeignKey(Registrar, blank=True, on_delete=models.CASCADE, null=True)\n\t# registrant\n\tregistrant = models.ForeignKey(\n\t\tDomainRegistration,\n\t\tblank=True,",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\texpires",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\texpires = models.DateTimeField(null=True, blank=True)\n\t# geolocation\n\tgeolocation_iso = models.CharField(max_length=10, null=True, blank=True)\n\t# registrar\n\tregistrar = models.ForeignKey(Registrar, blank=True, on_delete=models.CASCADE, null=True)\n\t# registrant\n\tregistrant = models.ForeignKey(\n\t\tDomainRegistration,\n\t\tblank=True,\n\t\tnull=True,",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tgeolocation_iso",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tgeolocation_iso = models.CharField(max_length=10, null=True, blank=True)\n\t# registrar\n\tregistrar = models.ForeignKey(Registrar, blank=True, on_delete=models.CASCADE, null=True)\n\t# registrant\n\tregistrant = models.ForeignKey(\n\t\tDomainRegistration,\n\t\tblank=True,\n\t\tnull=True,\n\t\ton_delete=models.CASCADE,\n\t\trelated_name='registrant'",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tregistrar",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tregistrar = models.ForeignKey(Registrar, blank=True, on_delete=models.CASCADE, null=True)\n\t# registrant\n\tregistrant = models.ForeignKey(\n\t\tDomainRegistration,\n\t\tblank=True,\n\t\tnull=True,\n\t\ton_delete=models.CASCADE,\n\t\trelated_name='registrant'\n\t)\n\t# admin",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tregistrant",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tregistrant = models.ForeignKey(\n\t\tDomainRegistration,\n\t\tblank=True,\n\t\tnull=True,\n\t\ton_delete=models.CASCADE,\n\t\trelated_name='registrant'\n\t)\n\t# admin\n\tadmin = models.ForeignKey(\n\t\tDomainRegistration,",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tadmin",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tadmin = models.ForeignKey(\n\t\tDomainRegistration,\n\t\tblank=True,\n\t\tnull=True,\n\t\ton_delete=models.CASCADE,\n\t\trelated_name='admin'\n\t)\n\t# tech\n\ttech = models.ForeignKey(\n\t\tDomainRegistration,",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\ttech",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\ttech = models.ForeignKey(\n\t\tDomainRegistration,\n\t\tblank=True,\n\t\tnull=True,\n\t\ton_delete=models.CASCADE,\n\t\trelated_name='tech'\n\t)\n\t# status\n\tstatus = models.ManyToManyField(WhoisStatus, blank=True)\n\t# ns",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tstatus = models.ManyToManyField(WhoisStatus, blank=True)\n\t# ns\n\tname_servers = models.ManyToManyField(NameServer, blank=True)\n\tdns_records = models.ManyToManyField(DNSRecord, blank=True)\n\t# whois server\n\twhois_server = models.CharField(max_length=150, null=True, blank=True)\n\t# associated/similer domains\n\trelated_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='associated_domains')\n\trelated_tlds = models.ManyToManyField(RelatedDomain, blank=True, related_name='related_tlds')\n\tsimilar_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='similar_domains')",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname_servers",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname_servers = models.ManyToManyField(NameServer, blank=True)\n\tdns_records = models.ManyToManyField(DNSRecord, blank=True)\n\t# whois server\n\twhois_server = models.CharField(max_length=150, null=True, blank=True)\n\t# associated/similer domains\n\trelated_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='associated_domains')\n\trelated_tlds = models.ManyToManyField(RelatedDomain, blank=True, related_name='related_tlds')\n\tsimilar_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='similar_domains')\n\t# historical ips\n\thistorical_ips = models.ManyToManyField(HistoricalIP, blank=True, related_name='similar_domains')",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tdns_records",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tdns_records = models.ManyToManyField(DNSRecord, blank=True)\n\t# whois server\n\twhois_server = models.CharField(max_length=150, null=True, blank=True)\n\t# associated/similer domains\n\trelated_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='associated_domains')\n\trelated_tlds = models.ManyToManyField(RelatedDomain, blank=True, related_name='related_tlds')\n\tsimilar_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='similar_domains')\n\t# historical ips\n\thistorical_ips = models.ManyToManyField(HistoricalIP, blank=True, related_name='similar_domains')\n\tdef __str__(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\twhois_server",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\twhois_server = models.CharField(max_length=150, null=True, blank=True)\n\t# associated/similer domains\n\trelated_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='associated_domains')\n\trelated_tlds = models.ManyToManyField(RelatedDomain, blank=True, related_name='related_tlds')\n\tsimilar_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='similar_domains')\n\t# historical ips\n\thistorical_ips = models.ManyToManyField(HistoricalIP, blank=True, related_name='similar_domains')\n\tdef __str__(self):\n\t\treturn str(self.id)\nclass Organization(models.Model):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\trelated_domains",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\trelated_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='associated_domains')\n\trelated_tlds = models.ManyToManyField(RelatedDomain, blank=True, related_name='related_tlds')\n\tsimilar_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='similar_domains')\n\t# historical ips\n\thistorical_ips = models.ManyToManyField(HistoricalIP, blank=True, related_name='similar_domains')\n\tdef __str__(self):\n\t\treturn str(self.id)\nclass Organization(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\trelated_tlds",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\trelated_tlds = models.ManyToManyField(RelatedDomain, blank=True, related_name='related_tlds')\n\tsimilar_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='similar_domains')\n\t# historical ips\n\thistorical_ips = models.ManyToManyField(HistoricalIP, blank=True, related_name='similar_domains')\n\tdef __str__(self):\n\t\treturn str(self.id)\nclass Organization(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\tdescription = models.TextField(blank=True, null=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tsimilar_domains",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tsimilar_domains = models.ManyToManyField(RelatedDomain, blank=True, related_name='similar_domains')\n\t# historical ips\n\thistorical_ips = models.ManyToManyField(HistoricalIP, blank=True, related_name='similar_domains')\n\tdef __str__(self):\n\t\treturn str(self.id)\nclass Organization(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField()",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\thistorical_ips",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\thistorical_ips = models.ManyToManyField(HistoricalIP, blank=True, related_name='similar_domains')\n\tdef __str__(self):\n\t\treturn str(self.id)\nclass Organization(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField()\n\tdomains = models.ManyToManyField('Domain', related_name='domains')\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField()\n\tdomains = models.ManyToManyField('Domain', related_name='domains')\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef __str__(self):\n\t\treturn self.name\n\tdef get_domains(self):\n\t\treturn Domain.objects.filter(domains__in=Organization.objects.filter(id=self.id))",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname = models.CharField(max_length=300, unique=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField()\n\tdomains = models.ManyToManyField('Domain', related_name='domains')\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef __str__(self):\n\t\treturn self.name\n\tdef get_domains(self):\n\t\treturn Domain.objects.filter(domains__in=Organization.objects.filter(id=self.id))\nclass Domain(models.Model):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField()\n\tdomains = models.ManyToManyField('Domain', related_name='domains')\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef __str__(self):\n\t\treturn self.name\n\tdef get_domains(self):\n\t\treturn Domain.objects.filter(domains__in=Organization.objects.filter(id=self.id))\nclass Domain(models.Model):\n\tid = models.AutoField(primary_key=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tinsert_date",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tinsert_date = models.DateTimeField()\n\tdomains = models.ManyToManyField('Domain', related_name='domains')\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef __str__(self):\n\t\treturn self.name\n\tdef get_domains(self):\n\t\treturn Domain.objects.filter(domains__in=Organization.objects.filter(id=self.id))\nclass Domain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tdomains",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tdomains = models.ManyToManyField('Domain', related_name='domains')\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef __str__(self):\n\t\treturn self.name\n\tdef get_domains(self):\n\t\treturn Domain.objects.filter(domains__in=Organization.objects.filter(id=self.id))\nclass Domain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\th1_team_handle = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tproject",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef __str__(self):\n\t\treturn self.name\n\tdef get_domains(self):\n\t\treturn Domain.objects.filter(domains__in=Organization.objects.filter(id=self.id))\nclass Domain(models.Model):\n\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\th1_team_handle = models.CharField(max_length=100, blank=True, null=True)\n\tip_address_cidr = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True)\n\tname = models.CharField(max_length=300, unique=True)\n\th1_team_handle = models.CharField(max_length=100, blank=True, null=True)\n\tip_address_cidr = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField(null=True)\n\tstart_scan_date = models.DateTimeField(null=True)\n\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tname = models.CharField(max_length=300, unique=True)\n\th1_team_handle = models.CharField(max_length=100, blank=True, null=True)\n\tip_address_cidr = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField(null=True)\n\tstart_scan_date = models.DateTimeField(null=True)\n\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\th1_team_handle",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\th1_team_handle = models.CharField(max_length=100, blank=True, null=True)\n\tip_address_cidr = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField(null=True)\n\tstart_scan_date = models.DateTimeField(null=True)\n\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):\n\t\treturn Organization.objects.filter(domains__id=self.id)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tip_address_cidr",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tip_address_cidr = models.CharField(max_length=100, blank=True, null=True)\n\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField(null=True)\n\tstart_scan_date = models.DateTimeField(null=True)\n\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):\n\t\treturn Organization.objects.filter(domains__id=self.id)\n\tdef get_recent_scan_id(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tdescription = models.TextField(blank=True, null=True)\n\tinsert_date = models.DateTimeField(null=True)\n\tstart_scan_date = models.DateTimeField(null=True)\n\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):\n\t\treturn Organization.objects.filter(domains__id=self.id)\n\tdef get_recent_scan_id(self):\n\t\tScanHistory = apps.get_model('startScan.ScanHistory')",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tinsert_date",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tinsert_date = models.DateTimeField(null=True)\n\tstart_scan_date = models.DateTimeField(null=True)\n\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):\n\t\treturn Organization.objects.filter(domains__id=self.id)\n\tdef get_recent_scan_id(self):\n\t\tScanHistory = apps.get_model('startScan.ScanHistory')\n\t\tobj = ScanHistory.objects.filter(domain__id=self.id).order_by('-id')",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tstart_scan_date",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tstart_scan_date = models.DateTimeField(null=True)\n\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):\n\t\treturn Organization.objects.filter(domains__id=self.id)\n\tdef get_recent_scan_id(self):\n\t\tScanHistory = apps.get_model('startScan.ScanHistory')\n\t\tobj = ScanHistory.objects.filter(domain__id=self.id).order_by('-id')\n\t\tif obj:",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\trequest_headers",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\trequest_headers = models.JSONField(null=True, blank=True)\n\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):\n\t\treturn Organization.objects.filter(domains__id=self.id)\n\tdef get_recent_scan_id(self):\n\t\tScanHistory = apps.get_model('startScan.ScanHistory')\n\t\tobj = ScanHistory.objects.filter(domain__id=self.id).order_by('-id')\n\t\tif obj:\n\t\t\treturn obj[0].id",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tdomain_info",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tdomain_info = models.ForeignKey(DomainInfo, on_delete=models.CASCADE, null=True, blank=True)\n\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):\n\t\treturn Organization.objects.filter(domains__id=self.id)\n\tdef get_recent_scan_id(self):\n\t\tScanHistory = apps.get_model('startScan.ScanHistory')\n\t\tobj = ScanHistory.objects.filter(domain__id=self.id).order_by('-id')\n\t\tif obj:\n\t\t\treturn obj[0].id\n\tdef __str__(self):",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\tproject",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\tproject = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=False)\n\tdef get_organization(self):\n\t\treturn Organization.objects.filter(domains__id=self.id)\n\tdef get_recent_scan_id(self):\n\t\tScanHistory = apps.get_model('startScan.ScanHistory')\n\t\tobj = ScanHistory.objects.filter(domain__id=self.id).order_by('-id')\n\t\tif obj:\n\t\t\treturn obj[0].id\n\tdef __str__(self):\n\t\treturn str(self.name)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\t\tScanHistory",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\t\tScanHistory = apps.get_model('startScan.ScanHistory')\n\t\tobj = ScanHistory.objects.filter(domain__id=self.id).order_by('-id')\n\t\tif obj:\n\t\t\treturn obj[0].id\n\tdef __str__(self):\n\t\treturn str(self.name)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "\t\tobj",
        "kind": 5,
        "importPath": "web.targetApp.models",
        "description": "web.targetApp.models",
        "peekOfCode": "\t\tobj = ScanHistory.objects.filter(domain__id=self.id).order_by('-id')\n\t\tif obj:\n\t\t\treturn obj[0].id\n\tdef __str__(self):\n\t\treturn str(self.name)",
        "detail": "web.targetApp.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "web.targetApp.urls",
        "description": "web.targetApp.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        '',\n        views.index,\n        name='targetIndex'),\n    path(\n        '<slug:slug>/add/target',\n        views.add_target,\n        name='add_target'),\n    path(",
        "detail": "web.targetApp.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def index(request):\n    # TODO bring default target page\n    return render(request, 'target/index.html')\n@has_permission_decorator(PERM_MODIFY_TARGETS, redirect_url=FOUR_OH_FOUR_URL)\ndef add_target(request, slug):\n    \"\"\"Add a new target. Targets can be URLs, IPs, CIDR ranges, or Domains.\n    Args:\n        request: Django request.\n    \"\"\"\n    project = Project.objects.get(slug=slug)",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "add_target",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def add_target(request, slug):\n    \"\"\"Add a new target. Targets can be URLs, IPs, CIDR ranges, or Domains.\n    Args:\n        request: Django request.\n    \"\"\"\n    project = Project.objects.get(slug=slug)\n    form = AddTargetForm(request.POST or None)\n    if request.method == \"POST\":\n        logger.info(request.POST)\n        added_target_count = 0",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "list_target",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def list_target(request, slug):\n    context = {\n        'list_target_li': 'active',\n        'target_data_active': 'active',\n        'slug': slug\n    }\n    return render(request, 'target/list.html', context)\n@has_permission_decorator(PERM_MODIFY_TARGETS, redirect_url=FOUR_OH_FOUR_URL)\ndef delete_target(request, id):\n    obj = get_object_or_404(Domain, id=id)",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "delete_target",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def delete_target(request, id):\n    obj = get_object_or_404(Domain, id=id)\n    if request.method == \"POST\":\n        run_command(f'rm -rf {settings.TOOL_LOCATION} scan_results/{obj.name}*')\n        obj.delete()\n        responseData = {'status': 'true'}\n        messages.add_message(\n            request,\n            messages.INFO,\n            'Domain successfully deleted!')",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "delete_targets",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def delete_targets(request, slug):\n    if request.method == \"POST\":\n        list_of_domains = []\n        for key, value in request.POST.items():\n            if key != \"list_target_table_length\" and key != \"csrfmiddlewaretoken\":\n                list_of_domains.append(value)\n                Domain.objects.filter(id=value).delete()\n        messages.add_message(\n            request,\n            messages.INFO,",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "update_target",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def update_target(request, slug, id):\n    domain = get_object_or_404(Domain, id=id)\n    form = UpdateTargetForm()\n    if request.method == \"POST\":\n        form = UpdateTargetForm(request.POST, instance=domain)\n        if form.is_valid():\n            form.save()\n            messages.add_message(\n                request,\n                messages.INFO,",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "target_summary",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def target_summary(request, slug, id):\n    \"\"\"Summary of a target (domain). Contains aggregated information on all\n    objects (Subdomain, EndPoint, Vulnerability, Emails, ...) found across all\n    scans.\n    Args:\n        request: Django request.\n        id: Domain id.\n    \"\"\"\n    context = {}\n    # Domain",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "add_organization",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def add_organization(request, slug):\n    form = AddOrganizationForm(request.POST or None, project=slug)\n    if request.method == \"POST\":\n        if form.is_valid():\n            data = form.cleaned_data\n            project = Project.objects.get(slug=slug)\n            organization = Organization.objects.create(\n                name=data['name'],\n                description=data['description'],\n                project=project,",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "list_organization",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def list_organization(request, slug):\n    organizations = Organization.objects.filter(project__slug=slug).order_by('-insert_date')\n    context = {\n        'organization_active': 'active',\n        'organizations': organizations\n    }\n    return render(request, 'organization/list.html', context)\n@has_permission_decorator(PERM_MODIFY_TARGETS, redirect_url=FOUR_OH_FOUR_URL)\ndef delete_organization(request, id):\n    if request.method == \"POST\":",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "delete_organization",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def delete_organization(request, id):\n    if request.method == \"POST\":\n        obj = get_object_or_404(Organization, id=id)\n        obj.delete()\n        responseData = {'status': 'true'}\n        messages.add_message(\n            request,\n            messages.INFO,\n            'Organization successfully deleted!')\n    else:",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "update_organization",
        "kind": 2,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "def update_organization(request, slug, id):\n    organization = get_object_or_404(Organization, id=id)\n    form = UpdateOrganizationForm()\n    if request.method == \"POST\":\n        print(request.POST.getlist(\"domains\"))\n        form = UpdateOrganizationForm(request.POST, instance=organization)\n        if form.is_valid():\n            data = form.cleaned_data\n            for domain in organization.get_domains():\n                organization.domains.remove(domain)",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.targetApp.views",
        "description": "web.targetApp.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef index(request):\n    # TODO bring default target page\n    return render(request, 'target/index.html')\n@has_permission_decorator(PERM_MODIFY_TARGETS, redirect_url=FOUR_OH_FOUR_URL)\ndef add_target(request, slug):\n    \"\"\"Add a new target. Targets can be URLs, IPs, CIDR ranges, or Domains.\n    Args:\n        request: Django request.\n    \"\"\"",
        "detail": "web.targetApp.views",
        "documentation": {}
    },
    {
        "label": "TestNmapParsing",
        "kind": 6,
        "importPath": "web.tests.test_nmap",
        "description": "web.tests.test_nmap",
        "peekOfCode": "class TestNmapParsing(unittest.TestCase):\n    def setUp(self):\n        self.nmap_vuln_single_xml = FIXTURES_DIR / 'nmap_vuln_single.xml'\n        self.nmap_vuln_multiple_xml = FIXTURES_DIR / 'nmap_vuln_multiple.xml'\n        self.nmap_vulscan_single_xml = FIXTURES_DIR / 'nmap_vulscan_single.xml'\n        self.nmap_vulscan_multiple_xml = FIXTURES_DIR / 'nmap_vulscan_multiple.xml'\n        self.all_xml = [\n            self.nmap_vuln_single_xml,\n            self.nmap_vuln_multiple_xml,\n            self.nmap_vulscan_single_xml,",
        "detail": "web.tests.test_nmap",
        "documentation": {}
    },
    {
        "label": "os.environ['RENGINE_SECRET_KEY']",
        "kind": 5,
        "importPath": "web.tests.test_nmap",
        "description": "web.tests.test_nmap",
        "peekOfCode": "os.environ['RENGINE_SECRET_KEY'] = 'secret'\nos.environ['CELERY_ALWAYS_EAGER'] = 'True'\nfrom celery.utils.log import get_task_logger\nfrom reNgine.settings import DEBUG\nfrom reNgine.tasks import parse_nmap_results, parse_nmap_vuln_output, parse_nmap_vulscan_output\nimport pathlib\nlogger = get_task_logger(__name__)\nDOMAIN_NAME = os.environ['DOMAIN_NAME']\nFIXTURES_DIR = pathlib.Path().absolute() / 'fixtures' / 'nmap_xml'\nif not DEBUG:",
        "detail": "web.tests.test_nmap",
        "documentation": {}
    },
    {
        "label": "os.environ['CELERY_ALWAYS_EAGER']",
        "kind": 5,
        "importPath": "web.tests.test_nmap",
        "description": "web.tests.test_nmap",
        "peekOfCode": "os.environ['CELERY_ALWAYS_EAGER'] = 'True'\nfrom celery.utils.log import get_task_logger\nfrom reNgine.settings import DEBUG\nfrom reNgine.tasks import parse_nmap_results, parse_nmap_vuln_output, parse_nmap_vulscan_output\nimport pathlib\nlogger = get_task_logger(__name__)\nDOMAIN_NAME = os.environ['DOMAIN_NAME']\nFIXTURES_DIR = pathlib.Path().absolute() / 'fixtures' / 'nmap_xml'\nif not DEBUG:\n    logging.disable(logging.CRITICAL)",
        "detail": "web.tests.test_nmap",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.tests.test_nmap",
        "description": "web.tests.test_nmap",
        "peekOfCode": "logger = get_task_logger(__name__)\nDOMAIN_NAME = os.environ['DOMAIN_NAME']\nFIXTURES_DIR = pathlib.Path().absolute() / 'fixtures' / 'nmap_xml'\nif not DEBUG:\n    logging.disable(logging.CRITICAL)\nclass TestNmapParsing(unittest.TestCase):\n    def setUp(self):\n        self.nmap_vuln_single_xml = FIXTURES_DIR / 'nmap_vuln_single.xml'\n        self.nmap_vuln_multiple_xml = FIXTURES_DIR / 'nmap_vuln_multiple.xml'\n        self.nmap_vulscan_single_xml = FIXTURES_DIR / 'nmap_vulscan_single.xml'",
        "detail": "web.tests.test_nmap",
        "documentation": {}
    },
    {
        "label": "DOMAIN_NAME",
        "kind": 5,
        "importPath": "web.tests.test_nmap",
        "description": "web.tests.test_nmap",
        "peekOfCode": "DOMAIN_NAME = os.environ['DOMAIN_NAME']\nFIXTURES_DIR = pathlib.Path().absolute() / 'fixtures' / 'nmap_xml'\nif not DEBUG:\n    logging.disable(logging.CRITICAL)\nclass TestNmapParsing(unittest.TestCase):\n    def setUp(self):\n        self.nmap_vuln_single_xml = FIXTURES_DIR / 'nmap_vuln_single.xml'\n        self.nmap_vuln_multiple_xml = FIXTURES_DIR / 'nmap_vuln_multiple.xml'\n        self.nmap_vulscan_single_xml = FIXTURES_DIR / 'nmap_vulscan_single.xml'\n        self.nmap_vulscan_multiple_xml = FIXTURES_DIR / 'nmap_vulscan_multiple.xml'",
        "detail": "web.tests.test_nmap",
        "documentation": {}
    },
    {
        "label": "FIXTURES_DIR",
        "kind": 5,
        "importPath": "web.tests.test_nmap",
        "description": "web.tests.test_nmap",
        "peekOfCode": "FIXTURES_DIR = pathlib.Path().absolute() / 'fixtures' / 'nmap_xml'\nif not DEBUG:\n    logging.disable(logging.CRITICAL)\nclass TestNmapParsing(unittest.TestCase):\n    def setUp(self):\n        self.nmap_vuln_single_xml = FIXTURES_DIR / 'nmap_vuln_single.xml'\n        self.nmap_vuln_multiple_xml = FIXTURES_DIR / 'nmap_vuln_multiple.xml'\n        self.nmap_vulscan_single_xml = FIXTURES_DIR / 'nmap_vulscan_single.xml'\n        self.nmap_vulscan_multiple_xml = FIXTURES_DIR / 'nmap_vulscan_multiple.xml'\n        self.all_xml = [",
        "detail": "web.tests.test_nmap",
        "documentation": {}
    },
    {
        "label": "TestOnlineScan",
        "kind": 6,
        "importPath": "web.tests.test_scan",
        "description": "web.tests.test_scan",
        "peekOfCode": "class TestOnlineScan(unittest.TestCase):\n    def setUp(self):\n        self.url = f'https://{DOMAIN_NAME}'\n        self.yaml_configuration = {\n            'subdomain_discovery': {},\n            'port_scan': {},\n            'vulnerability_scan': {},\n            'osint': {},\n            'fetch_url': {},\n            'dir_file_fuzz': {},",
        "detail": "web.tests.test_scan",
        "documentation": {}
    },
    {
        "label": "os.environ['RENGINE_SECRET_KEY']",
        "kind": 5,
        "importPath": "web.tests.test_scan",
        "description": "web.tests.test_scan",
        "peekOfCode": "os.environ['RENGINE_SECRET_KEY'] = 'secret'\nos.environ['CELERY_ALWAYS_EAGER'] = 'True'\nimport yaml\nfrom celery.utils.log import get_task_logger\nfrom reNgine.settings import DEBUG\nfrom reNgine.tasks import (dir_file_fuzz, fetch_url, http_crawl, initiate_scan,\n                           osint, port_scan, subdomain_discovery,\n                           vulnerability_scan)\nfrom startScan.models import *\nlogger = get_task_logger(__name__)",
        "detail": "web.tests.test_scan",
        "documentation": {}
    },
    {
        "label": "os.environ['CELERY_ALWAYS_EAGER']",
        "kind": 5,
        "importPath": "web.tests.test_scan",
        "description": "web.tests.test_scan",
        "peekOfCode": "os.environ['CELERY_ALWAYS_EAGER'] = 'True'\nimport yaml\nfrom celery.utils.log import get_task_logger\nfrom reNgine.settings import DEBUG\nfrom reNgine.tasks import (dir_file_fuzz, fetch_url, http_crawl, initiate_scan,\n                           osint, port_scan, subdomain_discovery,\n                           vulnerability_scan)\nfrom startScan.models import *\nlogger = get_task_logger(__name__)\nDOMAIN_NAME = os.environ['DOMAIN_NAME']",
        "detail": "web.tests.test_scan",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "web.tests.test_scan",
        "description": "web.tests.test_scan",
        "peekOfCode": "logger = get_task_logger(__name__)\nDOMAIN_NAME = os.environ['DOMAIN_NAME']\n# if not DEBUG:\n#     logging.disable(logging.CRITICAL)\nclass TestOnlineScan(unittest.TestCase):\n    def setUp(self):\n        self.url = f'https://{DOMAIN_NAME}'\n        self.yaml_configuration = {\n            'subdomain_discovery': {},\n            'port_scan': {},",
        "detail": "web.tests.test_scan",
        "documentation": {}
    },
    {
        "label": "DOMAIN_NAME",
        "kind": 5,
        "importPath": "web.tests.test_scan",
        "description": "web.tests.test_scan",
        "peekOfCode": "DOMAIN_NAME = os.environ['DOMAIN_NAME']\n# if not DEBUG:\n#     logging.disable(logging.CRITICAL)\nclass TestOnlineScan(unittest.TestCase):\n    def setUp(self):\n        self.url = f'https://{DOMAIN_NAME}'\n        self.yaml_configuration = {\n            'subdomain_discovery': {},\n            'port_scan': {},\n            'vulnerability_scan': {},",
        "detail": "web.tests.test_scan",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "web.manage",
        "description": "web.manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reNgine.settings')\n    # show rengine artwork\n    f = open('art/webGuard.txt', 'r')\n    file_contents = f.read()\n    print (file_contents)\n    f.close()\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:",
        "detail": "web.manage",
        "documentation": {}
    }
]